export default
{
  "aggregateerror": {
    "aggregateerror": {
      "index.md": "---\ntitle: AggregateError() constructor\nslug: Web/JavaScript/Reference/Global_Objects/AggregateError/AggregateError\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.AggregateError.AggregateError\n---\n\n{{JSRef}}\n\nThe **`AggregateError()`** constructor creates {{jsxref(\"AggregateError\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew AggregateError(errors)\nnew AggregateError(errors, message)\nnew AggregateError(errors, message, options)\n\nAggregateError(errors)\nAggregateError(errors, message)\nAggregateError(errors, message, options)\n```\n\n> **Note:** `AggregateError()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `AggregateError` instance.\n\n### Parameters\n\n- `errors`\n  - : An iterable of errors, may not actually be {{jsxref(\"Error\")}} instances.\n- `message` {{optional_inline}}\n  - : An optional human-readable description of the aggregate error.\n- `options` {{optional_inline}}\n  - : An object that has the following properties:\n    - `cause` {{optional_inline}}\n      - : A property indicating the specific cause of the error.\n        When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n\n## Examples\n\n### Creating an AggregateError\n\n```js\ntry {\n  throw new AggregateError([new Error(\"some error\")], \"Hello\");\n} catch (e) {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"AggregateError\"\n  console.log(e.errors); // [ Error: \"some error\" ]\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `AggregateError` in `core-js`](https://github.com/zloirock/core-js#ecmascript-promise)\n- {{jsxref(\"Promise.any\")}}\n"
    },
    "errors": {
      "index.md": "---\ntitle: \"AggregateError: errors\"\nslug: Web/JavaScript/Reference/Global_Objects/AggregateError/errors\npage-type: javascript-instance-data-property\nbrowser-compat: javascript.builtins.AggregateError.errors\n---\n\n{{JSRef}}\n\nThe **`errors`** data property of an {{jsxref(\"AggregateError\")}} instance contains an array representing the errors that were aggregated.\n\n## Value\n\nAn {{jsxref(\"Array\")}} containing values in the same order as the iterable passed as the first argument of the {{jsxref(\"AggregateError/AggregateError\", \"AggregateError()\")}} constructor.\n\n{{js_property_attributes(1, 0, 1)}}\n\n## Examples\n\n### Using errors\n\n```js\ntry {\n  throw new AggregateError(\n    // An iterable of errors\n    new Set([new Error(\"some error\"), new Error(\"another error\")]),\n    \"Multiple errors thrown\",\n  );\n} catch (err) {\n  console.log(err.errors);\n  // [\n  //   Error: some error,\n  //   Error: another error\n  // ]\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Control flow and error handling](/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling) guide\n- {{jsxref(\"AggregateError\")}}\n- [`Error`: `cause`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause)\n"
    },
    "index.md": "---\ntitle: AggregateError\nslug: Web/JavaScript/Reference/Global_Objects/AggregateError\npage-type: javascript-class\nbrowser-compat: javascript.builtins.AggregateError\n---\n\n{{JSRef}}\n\nThe **`AggregateError`** object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by {{jsxref(\"Promise.any()\")}}, when all promises passed to it reject.\n\n`AggregateError` is a subclass of {{jsxref(\"Error\")}}.\n\n## Constructor\n\n- {{jsxref(\"AggregateError/AggregateError\", \"AggregateError()\")}}\n  - : Creates a new `AggregateError` object.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"Error\")}}_.\n\nThese properties are defined on `AggregateError.prototype` and shared by all `AggregateError` instances.\n\n- {{jsxref(\"Object/constructor\", \"AggregateError.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `AggregateError` instances, the initial value is the {{jsxref(\"AggregateError/AggregateError\", \"AggregateError\")}} constructor.\n- {{jsxref(\"Error/name\", \"AggregateError.prototype.name\")}}\n  - : Represents the name for the type of error. For `AggregateError.prototype.name`, the initial value is `\"AggregateError\"`.\n\nThese properties are own properties of each `AggregateError` instance.\n\n- {{jsxref(\"AggregateError/errors\", \"errors\")}}\n  - : An array representing the errors that were aggregated.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"Error\")}}_.\n\n## Examples\n\n### Catching an AggregateError\n\n```js\nPromise.any([Promise.reject(new Error(\"some error\"))]).catch((e) => {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message); // \"All Promises rejected\"\n  console.log(e.name); // \"AggregateError\"\n  console.log(e.errors); // [ Error: \"some error\" ]\n});\n```\n\n### Creating an AggregateError\n\n```js\ntry {\n  throw new AggregateError([new Error(\"some error\")], \"Hello\");\n} catch (e) {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"AggregateError\"\n  console.log(e.errors); // [ Error: \"some error\" ]\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `AggregateError` in `core-js`](https://github.com/zloirock/core-js#ecmascript-promise)\n- {{jsxref(\"Error\")}}\n- {{jsxref(\"Promise.any\")}}\n"
  },
  "array": {
    "@@iterator": {
      "index.md": "---\ntitle: Array.prototype[@@iterator]()\nslug: Web/JavaScript/Reference/Global_Objects/Array/@@iterator\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.@@iterator\n---\n\n{{JSRef}}\n\nThe **`[@@iterator]()`** method of {{jsxref(\"Array\")}} instances implements the [iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows arrays to be consumed by most syntaxes expecting iterables, such as the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and {{jsxref(\"Statements/for...of\", \"for...of\")}} loops. It returns an [array iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the value of each index in the array.\n\nThe initial value of this property is the same function object as the initial value of the {{jsxref(\"Array.prototype.values\")}} property.\n\n{{EmbedInteractiveExample(\"pages/js/array-prototype-@@iterator.html\")}}\n\n## Syntax\n\n```js-nolint\narray[Symbol.iterator]()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe same return value as {{jsxref(\"Array.prototype.values()\")}}: a new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the value of each index in the array.\n\n## Examples\n\n### Iteration using for...of loop\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes arrays [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n#### HTML\n\n```html\n<ul id=\"letterResult\"></ul>\n```\n\n#### JavaScript\n\n```js\nconst arr = [\"a\", \"b\", \"c\"];\nconst letterResult = document.getElementById(\"letterResult\");\nfor (const letter of arr) {\n  const li = document.createElement(\"li\");\n  li.textContent = letter;\n  letterResult.appendChild(li);\n}\n```\n\n#### Result\n\n{{EmbedLiveSample(\"Iteration_using_for...of_loop\", \"\", \"\")}}\n\n### Manually hand-rolling the iterator\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```js\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst arrIter = arr[Symbol.iterator]();\nconsole.log(arrIter.next().value); // a\nconsole.log(arrIter.next().value); // b\nconsole.log(arrIter.next().value); // c\nconsole.log(arrIter.next().value); // d\nconsole.log(arrIter.next().value); // e\n```\n\n### Handling strings and string arrays with the same function\n\nBecause both [strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator) and arrays implement the iterable protocol, a generic function can be designed to handle both inputs in the same fashion. This is better than calling {{jsxref(\"Array.prototype.values()\")}} directly, which requires the input to be an array, or at least an object with such a method.\n\n```js\nfunction logIterable(it) {\n  if (typeof it[Symbol.iterator] !== \"function\") {\n    console.log(it, \"is not iterable.\");\n    return;\n  }\n  for (const letter of it) {\n    console.log(letter);\n  }\n}\n\n// Array\nlogIterable([\"a\", \"b\", \"c\"]);\n// a\n// b\n// c\n\n// String\nlogIterable(\"abc\");\n// a\n// b\n// c\n\n// Number\nlogIterable(123);\n// 123 is not iterable.\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype[@@iterator]` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.keys()\")}}\n- {{jsxref(\"Array.prototype.entries()\")}}\n- {{jsxref(\"Array.prototype.values()\")}}\n- [`TypedArray.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator)\n- [`String.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator)\n- {{jsxref(\"Symbol.iterator\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "@@species": {
      "index.md": "---\ntitle: Array[@@species]\nslug: Web/JavaScript/Reference/Global_Objects/Array/@@species\npage-type: javascript-static-accessor-property\nbrowser-compat: javascript.builtins.Array.@@species\n---\n\n{{JSRef}}\n\nThe **`Array[@@species]`** static accessor property returns the constructor used to construct return values from array methods.\n\n> **Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible. Modern array methods, such as {{jsxref(\"Array/toReversed\", \"toReversed()\")}}, do not use `@@species` and always return a new `Array` base class instance.\n\n## Syntax\n\n```js-nolint\nArray[Symbol.species]\n```\n\n### Return value\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct return values from array methods that create new arrays.\n\n## Description\n\nThe `@@species` accessor property returns the default constructor for `Array` objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically:\n\n```js\n// Hypothetical underlying implementation for illustration\nclass Array {\n  static get [Symbol.species]() {\n    return this;\n  }\n}\n```\n\nBecause of this polymorphic implementation, `@@species` of derived subclasses would also return the constructor itself by default.\n\n```js\nclass SubArray extends Array {}\nSubArray[Symbol.species] === SubArray; // true\n```\n\nWhen calling array methods that do not mutate the existing array but return a new array instance (for example, [`filter()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) and [`map()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)), the array's `constructor[@@species]` will be accessed. The returned constructor will be used to construct the return value of the array method. This makes it technically possible to make array methods return objects unrelated to arrays.\n\n```js\nclass NotAnArray {\n  constructor(length) {\n    this.length = length;\n  }\n}\n\nconst arr = [0, 1, 2];\narr.constructor = { [Symbol.species]: NotAnArray };\narr.map((i) => i); // NotAnArray { '0': 0, '1': 1, '2': 2, length: 3 }\narr.filter((i) => i); // NotAnArray { '0': 1, '1': 2, length: 0 }\narr.concat([1, 2]); // NotAnArray { '0': 0, '1': 1, '2': 2, '3': 1, '4': 2, length: 5 }\n```\n\n## Examples\n\n### Species in ordinary objects\n\nThe `@@species` property returns the default constructor function, which is the `Array` constructor for `Array`.\n\n```js\nArray[Symbol.species]; // [Function: Array]\n```\n\n### Species in derived objects\n\nIn an instance of a custom `Array` subclass, such as `MyArray`, the `MyArray` species is the `MyArray` constructor. However, you might want to overwrite this, in order to return parent `Array` objects in your derived class methods:\n\n```js\nclass MyArray extends Array {\n  // Overwrite MyArray species to the parent Array constructor\n  static get [Symbol.species]() {\n    return Array;\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array[@@species]` and support of `@@species` in all affected `Array` methods in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Symbol.species\")}}\n"
    },
    "@@unscopables": {
      "index.md": "---\ntitle: Array.prototype[@@unscopables]\nslug: Web/JavaScript/Reference/Global_Objects/Array/@@unscopables\npage-type: javascript-instance-data-property\nbrowser-compat: javascript.builtins.Array.@@unscopables\n---\n\n{{JSRef}}\n\nThe **`@@unscopables`** data property of `Array.prototype` is shared by all {{jsxref(\"Array\")}} instances. It contains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for [`with`](/en-US/docs/Web/JavaScript/Reference/Statements/with) statement-binding purposes.\n\n## Value\n\nA [`null`-prototype object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) with property names given below and their values set to `true`.\n\n{{js_property_attributes(0, 0, 1)}}\n\n## Description\n\nThe default `Array` properties that are ignored for `with` statement-binding purposes are:\n\n- [`at()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at)\n- [`copyWithin()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin)\n- [`entries()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries)\n- [`fill()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\n- [`find()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n- [`findIndex()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex)\n- [`findLast()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast)\n- [`findLastIndex()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex)\n- [`flat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)\n- [`flatMap()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)\n- [`includes()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\n- [`keys()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys)\n- [`toReversed()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed)\n- [`toSorted()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted)\n- [`toSpliced()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced)\n- [`values()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values)\n\n`Array.prototype[@@unscopables]` is an empty object only containing all the above property names with the value `true`. Its [prototype is `null`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects), so `Object.prototype` properties like [`toString`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) won't accidentally be made unscopable, and a `toString()` within the `with` statement will continue to be called on the array.\n\nSee {{jsxref(\"Symbol.unscopables\")}} for how to set unscopable properties for your own objects.\n\n## Examples\n\nImagine the `keys.push('something')` call below is in code that was written prior to ECMAScript 2015.\n\n```js\nvar keys = [];\n\nwith (Array.prototype) {\n  keys.push(\"something\");\n}\n```\n\nWhen ECMAScript 2015 introduced the {{jsxref(\"Array.prototype.keys()\")}} method, if the `@@unscopables` data property had not also been introduced, that `keys.push('something')` call would break — because the JavaScript runtime would have interpreted `keys` as being the {{jsxref(\"Array.prototype.keys()\")}} method, rather than the `keys` array defined in the example code.\n\nSo the `@@unscopables` data property for `Array.prototype` causes the `Array` properties introduced in ECMAScript 2015 to be ignored for `with` statement-binding purposes — allowing code that was written prior to ECMAScript 2015 to continue working as expected, rather than breaking.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype[@@unscopables]` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Statements/with\", \"with\")}}\n- {{jsxref(\"Symbol.unscopables\")}}\n"
    },
    "array": {
      "index.md": "---\ntitle: Array() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Array/Array\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Array.Array\n---\n\n{{JSRef}}\n\nThe **`Array()`** constructor creates {{jsxref(\"Array\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew Array()\nnew Array(element1)\nnew Array(element1, element2)\nnew Array(element1, element2, /* …, */ elementN)\nnew Array(arrayLength)\n\nArray()\nArray(element1)\nArray(element1, element2)\nArray(element1, element2, /* …, */ elementN)\nArray(arrayLength)\n```\n\n> **Note:** `Array()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Array` instance.\n\n### Parameters\n\n- `element1`, …, `elementN`\n  - : A JavaScript array is initialized with the given elements, except in the case where\n    a single argument is passed to the `Array` constructor and that argument is\n    a number (see the `arrayLength` parameter below). Note that this special case only\n    applies to JavaScript arrays created with the `Array` constructor, not\n    array literals created with the square bracket syntax.\n- `arrayLength`\n  - : If the only argument passed to the `Array` constructor is an integer\n    between 0 and 2<sup>32</sup> - 1 (inclusive), this returns a new JavaScript array with\n    its `length` property set to that number (**Note:** this\n    implies an array of `arrayLength` empty slots, not slots with actual\n    `undefined` values — see [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays)).\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if there's only one argument (`arrayLength`) that is a number, but its value is not an integer or not between 0 and 2<sup>32</sup> - 1 (inclusive).\n\n## Examples\n\n### Array literal notation\n\nArrays can be created using the [literal](/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals)\nnotation:\n\n```js\nconst fruits = [\"Apple\", \"Banana\"];\n\nconsole.log(fruits.length); // 2\nconsole.log(fruits[0]); // \"Apple\"\n```\n\n### Array constructor with a single parameter\n\nArrays can be created using a constructor with a single number parameter. An array is created with\nits `length` property set to that number, and the array elements are empty\nslots.\n\n```js\nconst arrayEmpty = new Array(2);\n\nconsole.log(arrayEmpty.length); // 2\nconsole.log(arrayEmpty[0]); // undefined; actually, it is an empty slot\nconsole.log(0 in arrayEmpty); // false\nconsole.log(1 in arrayEmpty); // false\n```\n\n```js\nconst arrayOfOne = new Array(\"2\"); // Not the number 2 but the string \"2\"\n\nconsole.log(arrayOfOne.length); // 1\nconsole.log(arrayOfOne[0]); // \"2\"\n```\n\n### Array constructor with multiple parameters\n\nIf more than one argument is passed to the constructor, a new {{jsxref(\"Array\")}} with\nthe given elements is created.\n\n```js\nconst fruits = new Array(\"Apple\", \"Banana\");\n\nconsole.log(fruits.length); // 2\nconsole.log(fruits[0]); // \"Apple\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n"
    },
    "at": {
      "index.md": "---\ntitle: Array.prototype.at()\nslug: Web/JavaScript/Reference/Global_Objects/Array/at\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.at\n---\n\n{{JSRef}}\n\nThe **`at()`** method of {{jsxref(\"Array\")}} instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.\n\n{{EmbedInteractiveExample(\"pages/js/array-at.html\")}}\n\n## Syntax\n\n```js-nolint\nat(index)\n```\n\n### Parameters\n\n- `index`\n  - : Zero-based index of the array element to be returned, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). Negative index counts back from the end of the array — if `index < 0`, `index + array.length` is accessed.\n\n### Return value\n\nThe element in the array matching the given index. Always returns {{jsxref(\"undefined\")}} if `index < -array.length` or `index >= array.length` without attempting to access the corresponding property.\n\n## Description\n\nThe `at()` method is equivalent to the bracket notation when `index` is non-negative. For example, `array[0]` and `array.at(0)` both return the first item. However, when counting elements from the end of the array, you cannot use `array[-1]` like you may in Python or R, because all values inside the square brackets are treated literally as string properties, so you will end up reading `array[\"-1\"]`, which is just a normal string property instead of an array index.\n\nThe usual practice is to access {{jsxref(\"Array/length\", \"length\")}} and calculate the index from that — for example, `array[array.length - 1]`. The `at()` method allows relative indexing, so this can be shortened to `array.at(-1)`.\n\nBy combining `at()` with {{jsxref(\"Array/with\", \"with()\")}}, you can both read and write (respectively) an array using negative indices.\n\nThe `at()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Return the last value of an array\n\nThe following example provides a function which returns the last element found in a specified array.\n\n```js\n// Our array with items\nconst cart = [\"apple\", \"banana\", \"pear\"];\n\n// A function which returns the last item of a given array\nfunction returnLast(arr) {\n  return arr.at(-1);\n}\n\n// Get the last item of our array 'cart'\nconst item1 = returnLast(cart);\nconsole.log(item1); // 'pear'\n\n// Add an item to our 'cart' array\ncart.push(\"orange\");\nconst item2 = returnLast(cart);\nconsole.log(item2); // 'orange'\n```\n\n### Comparing methods\n\nThis example compares different ways to select the penultimate (last but one) item of an {{jsxref(\"Array\")}}. While all the methods shown below are valid, this example highlights the succinctness and readability of the `at()` method.\n\n```js\n// Our array with items\nconst colors = [\"red\", \"green\", \"blue\"];\n\n// Using length property\nconst lengthWay = colors[colors.length - 2];\nconsole.log(lengthWay); // 'green'\n\n// Using slice() method. Note an array is returned\nconst sliceWay = colors.slice(-2, -1);\nconsole.log(sliceWay[0]); // 'green'\n\n// Using at() method\nconst atWay = colors.at(-2);\nconsole.log(atWay); // 'green'\n```\n\n### Calling at() on non-array objects\n\nThe `at()` method reads the `length` property of `this` and calculates the index to access.\n\n```js\nconst arrayLike = {\n  length: 2,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\", // ignored by at() since length is 2\n};\nconsole.log(Array.prototype.at.call(arrayLike, 0)); // \"a\"\nconsole.log(Array.prototype.at.call(arrayLike, 2)); // undefined\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.at` in `core-js`](https://github.com/zloirock/core-js#relative-indexing-method)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.findIndex()\")}}\n- {{jsxref(\"Array.prototype.indexOf()\")}}\n- {{jsxref(\"Array.prototype.with()\")}}\n- {{jsxref(\"TypedArray.prototype.at()\")}}\n- {{jsxref(\"String.prototype.at()\")}}\n"
    },
    "concat": {
      "index.md": "---\ntitle: Array.prototype.concat()\nslug: Web/JavaScript/Reference/Global_Objects/Array/concat\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.concat\n---\n\n{{JSRef}}\n\nThe **`concat()`** method of {{jsxref(\"Array\")}} instances is used to merge two or more arrays.\nThis method does not change the existing arrays, but instead returns a new array.\n\n{{EmbedInteractiveExample(\"pages/js/array-concat.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nconcat()\nconcat(value1)\nconcat(value1, value2)\nconcat(value1, value2, /* …, */ valueN)\n```\n\n### Parameters\n\n- `value1`, …, `valueN` {{optional_inline}}\n  - : Arrays and/or values to concatenate into a new array. If all\n    `valueN` parameters are omitted, `concat` returns a\n    [shallow copy](/en-US/docs/Glossary/Shallow_copy) of the existing array on which it is called. See the description below\n    for more details.\n\n### Return value\n\nA new {{jsxref(\"Array\")}} instance.\n\n## Description\n\nThe `concat` method creates a new array. The array will first be populated by the elements in the object on which it is called. Then, for each argument, its value will be concatenated into the array — for normal objects or primitives, the argument itself will become an element of the final array; for arrays or array-like objects with the property [`Symbol.isConcatSpreadable`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable) set to a truthy value, each element of the argument will be independently added to the final array. The `concat` method does not recurse into nested array arguments.\n\nThe `concat()` method is a [copying method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It does not alter `this` or any of the arrays provided as arguments but instead returns a [shallow copy](/en-US/docs/Glossary/Shallow_copy) that contains the same elements as the ones from the original arrays.\n\nThe `concat()` method preserves empty slots if any of the source arrays is [sparse](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `concat()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). The `this` value is treated in the same way as the other arguments (except it will be converted to an object first), which means plain objects will be directly prepended to the resulting array, while array-like objects with truthy `@@isConcatSpreadable` will be spread into the resulting array.\n\n## Examples\n\n### Concatenating two arrays\n\nThe following code concatenates two arrays:\n\n```js\nconst letters = [\"a\", \"b\", \"c\"];\nconst numbers = [1, 2, 3];\n\nconst alphaNumeric = letters.concat(numbers);\nconsole.log(alphaNumeric);\n// results in ['a', 'b', 'c', 1, 2, 3]\n```\n\n### Concatenating three arrays\n\nThe following code concatenates three arrays:\n\n```js\nconst num1 = [1, 2, 3];\nconst num2 = [4, 5, 6];\nconst num3 = [7, 8, 9];\n\nconst numbers = num1.concat(num2, num3);\n\nconsole.log(numbers);\n// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### Concatenating values to an array\n\nThe following code concatenates three values to an array:\n\n```js\nconst letters = [\"a\", \"b\", \"c\"];\n\nconst alphaNumeric = letters.concat(1, [2, 3]);\n\nconsole.log(alphaNumeric);\n// results in ['a', 'b', 'c', 1, 2, 3]\n```\n\n### Concatenating nested arrays\n\nThe following code concatenates nested arrays and demonstrates retention of references:\n\n```js\nconst num1 = [[1]];\nconst num2 = [2, [3]];\n\nconst numbers = num1.concat(num2);\n\nconsole.log(numbers);\n// results in [[1], 2, [3]]\n\n// modify the first element of num1\nnum1[0].push(4);\n\nconsole.log(numbers);\n// results in [[1, 4], 2, [3]]\n```\n\n### Concatenating array-like objects with Symbol.isConcatSpreadable\n\n`concat` does not treat all array-like objects as arrays by default — only if `Symbol.isConcatSpreadable` is set to a truthy value (e.g. `true`).\n\n```js\nconst obj1 = { 0: 1, 1: 2, 2: 3, length: 3 };\nconst obj2 = { 0: 1, 1: 2, 2: 3, length: 3, [Symbol.isConcatSpreadable]: true };\nconsole.log([0].concat(obj1, obj2));\n// [ 0, { '0': 1, '1': 2, '2': 3, length: 3 }, 1, 2, 3 ]\n```\n\n### Using concat() on sparse arrays\n\nIf any of the source arrays is sparse, the resulting array will also be sparse:\n\n```js\nconsole.log([1, , 3].concat([4, 5])); // [1, empty, 3, 4, 5]\nconsole.log([1, 2].concat([3, , 5])); // [1, 2, 3, empty, 5]\n```\n\n### Calling concat() on non-array objects\n\nIf the `this` value is not an array, it is converted to an object and then treated in the same way as the arguments for `concat()`. In this case the return value is always a plain new array.\n\n```js\nconsole.log(Array.prototype.concat.call({}, 1, 2, 3)); // [{}, 1, 2, 3]\nconsole.log(Array.prototype.concat.call(1, 2, 3)); // [ [Number: 1], 2, 3 ]\nconst arrayLike = {\n  [Symbol.isConcatSpreadable]: true,\n  length: 2,\n  0: 1,\n  1: 2,\n  2: 99, // ignored by concat() since length is 2\n};\nconsole.log(Array.prototype.concat.call(arrayLike, 3, 4)); // [1, 2, 3, 4]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.concat` in `core-js` with fixes and implementation of modern behavior like `Symbol.isConcatSpreadable` support](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.push()\")}}\n- {{jsxref(\"Array.prototype.unshift()\")}}\n- {{jsxref(\"Array.prototype.splice()\")}}\n- {{jsxref(\"String.prototype.concat()\")}}\n- {{jsxref(\"Symbol.isConcatSpreadable\")}}\n"
    },
    "copywithin": {
      "index.md": "---\ntitle: Array.prototype.copyWithin()\nslug: Web/JavaScript/Reference/Global_Objects/Array/copyWithin\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.copyWithin\n---\n\n{{JSRef}}\n\nThe **`copyWithin()`** method of {{jsxref(\"Array\")}} instances shallow copies part of this array to another location in the same array and returns this array without modifying its length.\n\n{{EmbedInteractiveExample(\"pages/js/array-copywithin.html\")}}\n\n## Syntax\n\n```js-nolint\ncopyWithin(target, start)\ncopyWithin(target, start, end)\n```\n\n### Parameters\n\n- `target`\n  - : Zero-based index at which to copy the sequence to, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). This corresponds to where the element at `start` will be copied to, and all elements between `start` and `end` are copied to succeeding indices.\n    - Negative index counts back from the end of the array — if `-array.length <= target < 0`, `target + array.length` is used.\n    - If `target < -array.length`, `0` is used.\n    - If `target >= array.length`, nothing is copied.\n    - If `target` is positioned after `start` after normalization, copying only happens until the end of `array.length` (in other words, `copyWithin()` never extends the array).\n- `start`\n  - : Zero-based index at which to start copying elements from, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n    - Negative index counts back from the end of the array — if `-array.length <= start < 0`, `start + array.length` is used.\n    - If `start < -array.length`, `0` is used.\n    - If `start >= array.length`, nothing is copied.\n- `end` {{optional_inline}}\n  - : Zero-based index at which to end copying elements from, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `copyWithin()` copies up to but not including `end`.\n    - Negative index counts back from the end of the array — if `-array.length <= end < 0`, `end + array.length` is used.\n    - If `end < -array.length`, `0` is used.\n    - If `end >= array.length` or `end` is omitted, `array.length` is used, causing all elements until the end to be copied.\n    - If `end` implies a position before or at the position that `start` implies, nothing is copied.\n\n### Return value\n\nThe modified array.\n\n## Description\n\nThe `copyWithin()` method works like C and C++'s `memmove`, and is a high-performance method to shift the data of an {{jsxref(\"Array\")}}. This especially applies to the {{jsxref(\"TypedArray/copyWithin\", \"TypedArray\")}} method of the same name. The sequence is copied and pasted as one operation; the pasted sequence will have the copied values even when the copy and paste region overlap.\n\nBecause `undefined` becomes `0` when converted to an integer, omitting the `start` parameter has the same effect as passing `0`, which copies the entire array to the target position, equivalent to a right shift where the right boundary is clipped off and the left boundary is duplicated. This behavior may confuse readers of your code, so you should explicitly pass `0` as `start` instead.\n\n```js\nconsole.log([1, 2, 3, 4, 5].copyWithin(2));\n// [1, 2, 1, 2, 3]; move all elements to the right by 2 positions\n```\n\nThe `copyWithin()` method is a [mutating method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It does not alter the length of `this`, but it will change the content of `this` and create new properties or delete existing properties, if necessary.\n\nThe `copyWithin()` method preserves empty slots. If the region to be copied from is [sparse](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the empty slots' corresponding new indices are [deleted](/en-US/docs/Web/JavaScript/Reference/Operators/delete) and also become empty slots.\n\nThe `copyWithin()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## Examples\n\n### Using copyWithin()\n\n```js\nconsole.log([1, 2, 3, 4, 5].copyWithin(0, 3));\n// [4, 5, 3, 4, 5]\n\nconsole.log([1, 2, 3, 4, 5].copyWithin(0, 3, 4));\n// [4, 2, 3, 4, 5]\n\nconsole.log([1, 2, 3, 4, 5].copyWithin(-2, -3, -1));\n// [1, 2, 3, 3, 4]\n```\n\n### Using copyWithin() on sparse arrays\n\n`copyWithin()` will propagate empty slots.\n\n```js\nconsole.log([1, , 3].copyWithin(2, 1, 2)); // [1, empty, empty]\n```\n\n### Calling copyWithin() on non-array objects\n\nThe `copyWithin()` method reads the `length` property of `this` and then manipulates the integer indices involved.\n\n```js\nconst arrayLike = {\n  length: 5,\n  3: 1,\n};\nconsole.log(Array.prototype.copyWithin.call(arrayLike, 0, 3));\n// { '0': 1, '3': 1, length: 5 }\nconsole.log(Array.prototype.copyWithin.call(arrayLike, 3, 1));\n// { '0': 1, length: 5 }\n// The '3' property is deleted because the copied source is an empty slot\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.copyWithin` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"TypedArray.prototype.copyWithin()\")}}\n"
    },
    "entries": {
      "index.md": "---\ntitle: Array.prototype.entries()\nslug: Web/JavaScript/Reference/Global_Objects/Array/entries\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.entries\n---\n\n{{JSRef}}\n\nThe **`entries()`** method of {{jsxref(\"Array\")}} instances returns a new _[array iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the key/value pairs for each index in the array.\n\n{{EmbedInteractiveExample(\"pages/js/array-entries.html\")}}\n\n## Syntax\n\n```js-nolint\nentries()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Description\n\nWhen used on [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `entries()` method iterates empty slots as if they have the value `undefined`.\n\nThe `entries()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Iterating with index and element\n\n```js\nconst a = [\"a\", \"b\", \"c\"];\n\nfor (const [index, element] of a.entries()) {\n  console.log(index, element);\n}\n\n// 0 'a'\n// 1 'b'\n// 2 'c'\n```\n\n### Using a for...of loop\n\n```js\nconst array = [\"a\", \"b\", \"c\"];\nconst arrayEntries = array.entries();\n\nfor (const element of arrayEntries) {\n  console.log(element);\n}\n\n// [0, 'a']\n// [1, 'b']\n// [2, 'c']\n```\n\n### Iterating sparse arrays\n\n`entries()` will visit empty slots as if they are `undefined`.\n\n```js\nfor (const element of [, \"a\"].entries()) {\n  console.log(element);\n}\n// [0, undefined]\n// [1, 'a']\n```\n\n### Calling entries() on non-array objects\n\nThe `entries()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\",\n  3: \"d\", // ignored by entries() since length is 3\n};\nfor (const entry of Array.prototype.entries.call(arrayLike)) {\n  console.log(entry);\n}\n// [ 0, 'a' ]\n// [ 1, 'b' ]\n// [ 2, 'c' ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.entries` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.keys()\")}}\n- {{jsxref(\"Array.prototype.values()\")}}\n- [`Array.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)\n- {{jsxref(\"TypedArray.prototype.entries()\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "every": {
      "index.md": "---\ntitle: Array.prototype.every()\nslug: Web/JavaScript/Reference/Global_Objects/Array/every\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.every\n---\n\n{{JSRef}}\n\nThe **`every()`** method of {{jsxref(\"Array\")}} instances tests whether\nall elements in the array pass the test implemented by the provided function. It\nreturns a Boolean value.\n\n{{EmbedInteractiveExample(\"pages/js/array-every.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nevery(callbackFn)\nevery(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n    - `array`\n      - : The array `every()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\n`true` unless `callbackFn` returns a {{Glossary(\"falsy\")}} value for an array element, in which case `false` is immediately returned.\n\n## Description\n\nThe `every()` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array, until the `callbackFn` returns a [falsy](/en-US/docs/Glossary/Falsy) value. If such an element is found, `every()` immediately returns `false` and stops iterating through the array. Otherwise, if `callbackFn` returns a [truthy](/en-US/docs/Glossary/Truthy) value for all elements, `every()` returns `true`. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`every` acts like the \"for all\" quantifier in mathematics. In particular, for an empty array, it returns `true`. (It is [vacuously true](https://en.wikipedia.org/wiki/Vacuous_truth) that all elements of the [empty set](https://en.wikipedia.org/wiki/Empty_set#Properties) satisfy any given condition.)\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `every()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Testing size of all array elements\n\nThe following example tests whether all elements in the array are 10 or bigger.\n\n```js\nfunction isBigEnough(element, index, array) {\n  return element >= 10;\n}\n[12, 5, 8, 130, 44].every(isBigEnough); // false\n[12, 54, 18, 130, 44].every(isBigEnough); // true\n```\n\n### Check if one array is a subset of another array\n\nThe following example tests if all the elements of an array are present in another array.\n\n```js\nconst isSubset = (array1, array2) =>\n  array2.every((element) => array1.includes(element));\n\nconsole.log(isSubset([1, 2, 3, 4, 5, 6, 7], [5, 7, 6])); // true\nconsole.log(isSubset([1, 2, 3, 4, 5, 6, 7], [5, 8, 7])); // false\n```\n\n### Using the third argument of callbackFn\n\nThe `array` argument is useful if you want to access another element in the array. The following example first uses `filter()` to extract the positive values and then uses `every()` to check whether the array is strictly increasing.\n\n```js\nconst numbers = [-2, 4, -8, 16, -32];\nconst isIncreasing = numbers\n  .filter((num) => num > 0)\n  .every((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx === 0) return true;\n    return num > arr[idx - 1];\n  });\nconsole.log(isIncreasing); // true\n```\n\n### Using every() on sparse arrays\n\n`every()` will not run its predicate on empty slots.\n\n```js\nconsole.log([1, , 3].every((x) => x !== undefined)); // true\nconsole.log([2, , 2].every((x) => x === 2)); // true\n```\n\n### Calling every() on non-array objects\n\nThe `every()` method reads the `length` property of `this` and then accesses each property with a nonnegative integer key less than `length` until they all have been accessed or `callbackFn` returns `false`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\",\n  3: 345, // ignored by every() since length is 3\n};\nconsole.log(\n  Array.prototype.every.call(arrayLike, (x) => typeof x === \"string\"),\n); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.every` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.forEach()\")}}\n- {{jsxref(\"Array.prototype.some()\")}}\n- {{jsxref(\"Array.prototype.find()\")}}\n- {{jsxref(\"TypedArray.prototype.every()\")}}\n"
    },
    "fill": {
      "index.md": "---\ntitle: Array.prototype.fill()\nslug: Web/JavaScript/Reference/Global_Objects/Array/fill\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.fill\n---\n\n{{JSRef}}\n\nThe **`fill()`** method of {{jsxref(\"Array\")}} instances changes all elements within a range of indices in an array to a static value. It returns the modified array.\n\n{{EmbedInteractiveExample(\"pages/js/array-fill.html\")}}\n\n## Syntax\n\n```js-nolint\nfill(value)\nfill(value, start)\nfill(value, start, end)\n```\n\n### Parameters\n\n- `value`\n  - : Value to fill the array with. Note all elements in the array will be this exact value: if `value` is an object, each slot in the array will reference that object.\n- `start` {{optional_inline}}\n  - : Zero-based index at which to start filling, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n    - Negative index counts back from the end of the array — if `-array.length <= start < 0`, `start + array.length` is used.\n    - If `start < -array.length` or `start` is omitted, `0` is used.\n    - If `start >= array.length`, no index is filled.\n- `end` {{optional_inline}}\n  - : Zero-based index at which to end filling, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `fill()` fills up to but not including `end`.\n    - Negative index counts back from the end of the array — if `-array.length <= end < 0`, `end + array.length` is used.\n    - If `end < -array.length`, `0` is used.\n    - If `end >= array.length` or `end` is omitted, `array.length` is used, causing all indices until the end to be filled.\n    - If `end` implies a position before or at the position that `start` implies, nothing is filled.\n\n### Return value\n\nThe modified array, filled with `value`.\n\n## Description\n\nThe `fill()` method is a [mutating method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It does not alter the length of `this`, but it will change the content of `this`.\n\nThe `fill()` method fills empty slots in [sparse](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) arrays with `value` as well.\n\nThe `fill()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n> **Note:** Using `Array.prototype.fill()` on an empty array (`length = 0`) would not modify it as the array has nothing to be modified.\n> To use `Array.prototype.fill()` when declaring an array, make sure the array has non-zero `length`.\n> [See example](#using_fill_to_populate_an_empty_array).\n\n## Examples\n\n### Using fill()\n\n```js\nconsole.log([1, 2, 3].fill(4)); // [4, 4, 4]\nconsole.log([1, 2, 3].fill(4, 1)); // [1, 4, 4]\nconsole.log([1, 2, 3].fill(4, 1, 2)); // [1, 4, 3]\nconsole.log([1, 2, 3].fill(4, 1, 1)); // [1, 2, 3]\nconsole.log([1, 2, 3].fill(4, 3, 3)); // [1, 2, 3]\nconsole.log([1, 2, 3].fill(4, -3, -2)); // [4, 2, 3]\nconsole.log([1, 2, 3].fill(4, NaN, NaN)); // [1, 2, 3]\nconsole.log([1, 2, 3].fill(4, 3, 5)); // [1, 2, 3]\nconsole.log(Array(3).fill(4)); // [4, 4, 4]\n\n// A single object, referenced by each slot of the array:\nconst arr = Array(3).fill({}); // [{}, {}, {}]\narr[0].hi = \"hi\"; // [{ hi: \"hi\" }, { hi: \"hi\" }, { hi: \"hi\" }]\n```\n\n### Using fill() to create a matrix of all 1\n\nThis example shows how to create a matrix of all 1, like the `ones()` function of Octave or MATLAB.\n\n```js\nconst arr = new Array(3);\nfor (let i = 0; i < arr.length; i++) {\n  arr[i] = new Array(4).fill(1); // Creating an array of size 4 and filled of 1\n}\narr[0][0] = 10;\nconsole.log(arr[0][0]); // 10\nconsole.log(arr[1][0]); // 1\nconsole.log(arr[2][0]); // 1\n```\n\n### Using fill() to populate an empty array\n\nThis example shows how to populate an array, setting all elements to a specific value.\nThe `end` parameter does not have to be specified.\n\n```js\nconst tempGirls = Array(5).fill(\"girl\", 0);\n```\n\nNote that the array was initially a [sparse array](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) with no assigned indices. `fill()` is still able to fill this array.\n\n### Calling fill() on non-array objects\n\nThe `fill()` method reads the `length` property of `this` and sets the value of each integer-keyed property from `start` to `end`.\n\n```js\nconst arrayLike = { length: 2 };\nconsole.log(Array.prototype.fill.call(arrayLike, 1));\n// { '0': 1, '1': 1, length: 2 }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.fill` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"TypedArray.prototype.fill()\")}}\n"
    },
    "filter": {
      "index.md": "---\ntitle: Array.prototype.filter()\nslug: Web/JavaScript/Reference/Global_Objects/Array/filter\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.filter\n---\n\n{{JSRef}}\n\nThe **`filter()`** method of {{jsxref(\"Array\")}} instances creates a [shallow copy](/en-US/docs/Glossary/Shallow_copy) of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.\n\n{{EmbedInteractiveExample(\"pages/js/array-filter.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nfilter(callbackFn)\nfilter(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to keep the element in the resulting array, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n    - `array`\n      - : The array `filter()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nA [shallow copy](/en-US/docs/Glossary/Shallow_copy) of the given array containing just the elements that pass the test. If no elements pass the test, an empty array is returned.\n\n## Description\n\nThe `filter()` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array, and constructs a new array of all the values for which `callbackFn` returns a [truthy](/en-US/docs/Glossary/Truthy) value. Array elements which do not pass the `callbackFn` test are not included in the new array. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `filter()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Filtering out all small values\n\nThe following example uses `filter()` to create a filtered array that has all elements with values less than 10 removed.\n\n```js\nfunction isBigEnough(value) {\n  return value >= 10;\n}\n\nconst filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n// filtered is [12, 130, 44]\n```\n\n### Find all prime numbers in an array\n\nThe following example returns all prime numbers in the array:\n\n```js\nconst array = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n\nfunction isPrime(num) {\n  for (let i = 2; num > i; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return num > 1;\n}\n\nconsole.log(array.filter(isPrime)); // [2, 3, 5, 7, 11, 13]\n```\n\n### Filtering invalid entries from JSON\n\nThe following example uses `filter()` to create a filtered JSON of all elements with non-zero, numeric `id`.\n\n```js\nconst arr = [\n  { id: 15 },\n  { id: -1 },\n  { id: 0 },\n  { id: 3 },\n  { id: 12.2 },\n  {},\n  { id: null },\n  { id: NaN },\n  { id: \"undefined\" },\n];\n\nlet invalidEntries = 0;\n\nfunction filterByID(item) {\n  if (Number.isFinite(item.id) && item.id !== 0) {\n    return true;\n  }\n  invalidEntries++;\n  return false;\n}\n\nconst arrByID = arr.filter(filterByID);\n\nconsole.log(\"Filtered Array\\n\", arrByID);\n// Filtered Array\n// [{ id: 15 }, { id: -1 }, { id: 3 }, { id: 12.2 }]\n\nconsole.log(\"Number of Invalid Entries =\", invalidEntries);\n// Number of Invalid Entries = 5\n```\n\n### Searching in array\n\nFollowing example uses `filter()` to filter array content based on search criteria.\n\n```js\nconst fruits = [\"apple\", \"banana\", \"grapes\", \"mango\", \"orange\"];\n\n/**\n * Filter array items based on search criteria (query)\n */\nfunction filterItems(arr, query) {\n  return arr.filter((el) => el.toLowerCase().includes(query.toLowerCase()));\n}\n\nconsole.log(filterItems(fruits, \"ap\")); // ['apple', 'grapes']\nconsole.log(filterItems(fruits, \"an\")); // ['banana', 'mango', 'orange']\n```\n\n### Using the third argument of callbackFn\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `map()` to extract the numerical ID from each name and then uses `filter()` to select the ones that are greater than its neighbors.\n\n```js\nconst names = [\"JC63\", \"Bob132\", \"Ursula89\", \"Ben96\"];\nconst greatIDs = names\n  .map((name) => parseInt(name.match(/[0-9]+/)[0], 10))\n  .filter((id, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx > 0 && id <= arr[idx - 1]) return false;\n    if (idx < arr.length - 1 && id <= arr[idx + 1]) return false;\n    return true;\n  });\nconsole.log(greatIDs); // [132, 96]\n```\n\nThe `array` argument is _not_ the array that is being built — there is no way to access the array being built from the callback function.\n\n### Using filter() on sparse arrays\n\n`filter()` will skip empty slots.\n\n```js\nconsole.log([1, , undefined].filter((x) => x === undefined)); // [undefined]\nconsole.log([1, , undefined].filter((x) => x !== 2)); // [1, undefined]\n```\n\n### Calling filter() on non-array objects\n\nThe `filter()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\",\n  3: \"a\", // ignored by filter() since length is 3\n};\nconsole.log(Array.prototype.filter.call(arrayLike, (x) => x <= \"b\"));\n// [ 'a', 'b' ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.filter` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.forEach()\")}}\n- {{jsxref(\"Array.prototype.every()\")}}\n- {{jsxref(\"Array.prototype.map()\")}}\n- {{jsxref(\"Array.prototype.some()\")}}\n- {{jsxref(\"Array.prototype.reduce()\")}}\n- {{jsxref(\"TypedArray.prototype.filter()\")}}\n"
    },
    "find": {
      "index.md": "---\ntitle: Array.prototype.find()\nslug: Web/JavaScript/Reference/Global_Objects/Array/find\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.find\n---\n\n{{JSRef}}\n\nThe **`find()`** method of {{jsxref(\"Array\")}} instances returns the first element in the provided array that satisfies the provided testing function.\nIf no values satisfy the testing function, {{jsxref(\"undefined\")}} is returned.\n\n- If you need the **index** of the found element in the array, use {{jsxref(\"Array/findIndex\", \"findIndex()\")}}.\n- If you need to find the **index of a value**, use {{jsxref(\"Array/indexOf\", \"indexOf()\")}}.\n  (It's similar to {{jsxref(\"Array/findIndex\", \"findIndex()\")}}, but checks each element for equality with the value instead of using a testing function.)\n- If you need to find if a value **exists** in an array, use {{jsxref(\"Array/includes\", \"includes()\")}}.\n  Again, it checks each element for equality with the value instead of using a testing function.\n- If you need to find if any element satisfies the provided testing function, use {{jsxref(\"Array/some\", \"some()\")}}.\n- If you need to find all elements that satisfy the provided testing function, use {{jsxref(\"Array/filter\", \"filter()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/array-find.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nfind(callbackFn)\nfind(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n    - `array`\n      - : The array `find()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nThe first element in the array that satisfies the provided testing function.\nOtherwise, {{jsxref(\"undefined\")}} is returned.\n\n## Description\n\nThe `find()` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array in ascending-index order, until `callbackFn` returns a [truthy](/en-US/docs/Glossary/Truthy) value. `find()` then returns that element and stops iterating through the array. If `callbackFn` never returns a truthy value, `find()` returns {{jsxref(\"undefined\")}}. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked for _every_ index of the array, not just those with assigned values. Empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) behave the same as `undefined`.\n\nThe `find()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Find an object in an array by one of its properties\n\n```js\nconst inventory = [\n  { name: \"apples\", quantity: 2 },\n  { name: \"bananas\", quantity: 0 },\n  { name: \"cherries\", quantity: 5 },\n];\n\nfunction isCherries(fruit) {\n  return fruit.name === \"cherries\";\n}\n\nconsole.log(inventory.find(isCherries));\n// { name: 'cherries', quantity: 5 }\n```\n\n#### Using arrow function and destructuring\n\n```js\nconst inventory = [\n  { name: \"apples\", quantity: 2 },\n  { name: \"bananas\", quantity: 0 },\n  { name: \"cherries\", quantity: 5 },\n];\n\nconst result = inventory.find(({ name }) => name === \"cherries\");\n\nconsole.log(result); // { name: 'cherries', quantity: 5 }\n```\n\n### Find a prime number in an array\n\nThe following example finds an element in the array that is a prime number (or returns {{jsxref(\"undefined\")}} if there is no prime number):\n\n```js\nfunction isPrime(element, index, array) {\n  let start = 2;\n  while (start <= Math.sqrt(element)) {\n    if (element % start++ < 1) {\n      return false;\n    }\n  }\n  return element > 1;\n}\n\nconsole.log([4, 6, 8, 12].find(isPrime)); // undefined, not found\nconsole.log([4, 5, 8, 12].find(isPrime)); // 5\n```\n\n### Using the third argument of callbackFn\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `find()` to find the first element that is less than its neighbors.\n\n```js\nconst numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];\nconst firstTrough = numbers\n  .filter((num) => num > 0)\n  .find((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx > 0 && num >= arr[idx - 1]) return false;\n    if (idx < arr.length - 1 && num >= arr[idx + 1]) return false;\n    return true;\n  });\nconsole.log(firstTrough); // 1\n```\n\n### Using find() on sparse arrays\n\nEmpty slots in sparse arrays _are_ visited, and are treated the same as `undefined`.\n\n```js\n// Declare array with no elements at indexes 2, 3, and 4\nconst array = [0, 1, , , , 5, 6];\n\n// Shows all indexes, not just those with assigned values\narray.find((value, index) => {\n  console.log(\"Visited index\", index, \"with value\", value);\n});\n// Visited index 0 with value 0\n// Visited index 1 with value 1\n// Visited index 2 with value undefined\n// Visited index 3 with value undefined\n// Visited index 4 with value undefined\n// Visited index 5 with value 5\n// Visited index 6 with value 6\n\n// Shows all indexes, including deleted\narray.find((value, index) => {\n  // Delete element 5 on first iteration\n  if (index === 0) {\n    console.log(\"Deleting array[5] with value\", array[5]);\n    delete array[5];\n  }\n  // Element 5 is still visited even though deleted\n  console.log(\"Visited index\", index, \"with value\", value);\n});\n// Deleting array[5] with value 5\n// Visited index 0 with value 0\n// Visited index 1 with value 1\n// Visited index 2 with value undefined\n// Visited index 3 with value undefined\n// Visited index 4 with value undefined\n// Visited index 5 with value undefined\n// Visited index 6 with value 6\n```\n\n### Calling find() on non-array objects\n\nThe `find()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  \"-1\": 0.1, // ignored by find() since -1 < 0\n  0: 2,\n  1: 7.3,\n  2: 4,\n};\nconsole.log(Array.prototype.find.call(arrayLike, (x) => !Number.isInteger(x)));\n// 7.3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.find` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.findIndex()\")}}\n- {{jsxref(\"Array.prototype.findLast()\")}}\n- {{jsxref(\"Array.prototype.findLastIndex()\")}}\n- {{jsxref(\"Array.prototype.includes()\")}}\n- {{jsxref(\"Array.prototype.filter()\")}}\n- {{jsxref(\"Array.prototype.every()\")}}\n- {{jsxref(\"Array.prototype.some()\")}}\n- {{jsxref(\"TypedArray.prototype.find()\")}}\n"
    },
    "findindex": {
      "index.md": "---\ntitle: Array.prototype.findIndex()\nslug: Web/JavaScript/Reference/Global_Objects/Array/findIndex\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.findIndex\n---\n\n{{JSRef}}\n\nThe **`findIndex()`** method of {{jsxref(\"Array\")}} instances returns the index of the first element in an array that satisfies the provided testing function.\nIf no elements satisfy the testing function, -1 is returned.\n\nSee also the {{jsxref(\"Array/find\", \"find()\")}} method, which returns the first element that satisfies the testing function (rather than its index).\n\n{{EmbedInteractiveExample(\"pages/js/array-findindex.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nfindIndex(callbackFn)\nfindIndex(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n    - `array`\n      - : The array `findIndex()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nThe index of the first element in the array that passes the test. Otherwise, `-1`.\n\n## Description\n\nThe `findIndex()` is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array in ascending-index order, until `callbackFn` returns a [truthy](/en-US/docs/Glossary/Truthy) value. `findIndex()` then returns the index of that element and stops iterating through the array. If `callbackFn` never returns a truthy value, `findIndex()` returns `-1`. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked for _every_ index of the array, not just those with assigned values. Empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) behave the same as `undefined`.\n\nThe `findIndex()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Find the index of a prime number in an array\n\nThe following example returns the index of the first element in the array that is a prime number, or `-1` if there is no prime number.\n\n```js\nfunction isPrime(element) {\n  if (element % 2 === 0 || element < 2) {\n    return false;\n  }\n  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\n    if (element % factor === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log([4, 6, 8, 9, 12].findIndex(isPrime)); // -1, not found\nconsole.log([4, 6, 7, 9, 12].findIndex(isPrime)); // 2 (array[2] is 7)\n```\n\n### Using the third argument of callbackFn\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `findIndex()` to find the first element that is less than its neighbors.\n\n```js\nconst numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];\nconst firstTrough = numbers\n  .filter((num) => num > 0)\n  .findIndex((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx > 0 && num >= arr[idx - 1]) return false;\n    if (idx < arr.length - 1 && num >= arr[idx + 1]) return false;\n    return true;\n  });\nconsole.log(firstTrough); // 1\n```\n\n### Using findIndex() on sparse arrays\n\nYou can search for `undefined` in a sparse array and get the index of an empty slot.\n\n```js\nconsole.log([1, , 3].findIndex((x) => x === undefined)); // 1\n```\n\n### Calling findIndex() on non-array objects\n\nThe `findIndex()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  \"-1\": 0.1, // ignored by findIndex() since -1 < 0\n  0: 2,\n  1: 7.3,\n  2: 4,\n};\nconsole.log(\n  Array.prototype.findIndex.call(arrayLike, (x) => !Number.isInteger(x)),\n); // 1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.findIndex` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.find()\")}}\n- {{jsxref(\"Array.prototype.findLast()\")}}\n- {{jsxref(\"Array.prototype.findLastIndex()\")}}\n- {{jsxref(\"Array.prototype.indexOf()\")}}\n- {{jsxref(\"Array.prototype.lastIndexOf()\")}}\n- {{jsxref(\"TypedArray.prototype.findIndex()\")}}\n"
    },
    "findlast": {
      "index.md": "---\ntitle: Array.prototype.findLast()\nslug: Web/JavaScript/Reference/Global_Objects/Array/findLast\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.findLast\n---\n\n{{JSRef}}\n\nThe **`findLast()`** method of {{jsxref(\"Array\")}} instances iterates the array in reverse order and returns the value of the first element that satisfies the provided testing function.\nIf no elements satisfy the testing function, {{jsxref(\"undefined\")}} is returned.\n\nIf you need to find:\n\n- the _first_ element that matches, use {{jsxref(\"Array/find\", \"find()\")}}.\n- the _index_ of the last matching element in the array, use {{jsxref(\"Array/findLastIndex\", \"findLastIndex()\")}}.\n- the _index of a value_, use {{jsxref(\"Array/indexOf\", \"indexOf()\")}}.\n  (It's similar to {{jsxref(\"Array/findIndex\", \"findIndex()\")}}, but checks each element for equality with the value instead of using a testing function.)\n- whether a value _exists_ in an array, use {{jsxref(\"Array/includes\", \"includes()\")}}.\n  Again, it checks each element for equality with the value instead of using a testing function.\n- if any element satisfies the provided testing function, use {{jsxref(\"Array/some\", \"some()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/array-findlast.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nfindLast(callbackFn)\nfindLast(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n    - `array`\n      - : The array `findLast()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nThe last (highest-index) element in the array that satisfies the provided testing function; {{jsxref(\"undefined\")}} if no matching element is found.\n\n## Description\n\nThe `findLast()` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array in descending-index order, until `callbackFn` returns a [truthy](/en-US/docs/Glossary/Truthy) value. `findLast()` then returns that element and stops iterating through the array. If `callbackFn` never returns a truthy value, `findLast()` returns {{jsxref(\"undefined\")}}. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked for _every_ index of the array, not just those with assigned values. Empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) behave the same as `undefined`.\n\nThe `findLast()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Find last object in an array matching on element properties\n\nThis example shows how you might create a test based on the properties of array elements.\n\n```js\nconst inventory = [\n  { name: \"apples\", quantity: 2 },\n  { name: \"bananas\", quantity: 0 },\n  { name: \"fish\", quantity: 1 },\n  { name: \"cherries\", quantity: 5 },\n];\n\n// return true inventory stock is low\nfunction isNotEnough(item) {\n  return item.quantity < 2;\n}\n\nconsole.log(inventory.findLast(isNotEnough));\n// { name: \"fish\", quantity: 1 }\n```\n\n#### Using arrow function and destructuring\n\nThe previous example might be written using an arrow function and [object destructuring](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring):\n\n```js\nconst inventory = [\n  { name: \"apples\", quantity: 2 },\n  { name: \"bananas\", quantity: 0 },\n  { name: \"fish\", quantity: 1 },\n  { name: \"cherries\", quantity: 5 },\n];\n\nconst result = inventory.findLast(({ quantity }) => quantity < 2);\n\nconsole.log(result);\n// { name: \"fish\", quantity: 1 }\n```\n\n### Find the last prime number in an array\n\nThe following example returns the last element in the array that is a prime number, or {{jsxref(\"undefined\")}} if there is no prime number.\n\n```js\nfunction isPrime(element) {\n  if (element % 2 === 0 || element < 2) {\n    return false;\n  }\n  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\n    if (element % factor === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log([4, 6, 8, 12].findLast(isPrime)); // undefined, not found\nconsole.log([4, 5, 7, 8, 9, 11, 12].findLast(isPrime)); // 11\n```\n\n### Using the third argument of callbackFn\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `findLast()` to find the last element that is less than its neighbors.\n\n```js\nconst numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];\nconst lastTrough = numbers\n  .filter((num) => num > 0)\n  .findLast((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx > 0 && num >= arr[idx - 1]) return false;\n    if (idx < arr.length - 1 && num >= arr[idx + 1]) return false;\n    return true;\n  });\nconsole.log(lastTrough); // 2\n```\n\n### Using findLast() on sparse arrays\n\nEmpty slots in sparse arrays _are_ visited, and are treated the same as `undefined`.\n\n```js\n// Declare array with no elements at indexes 2, 3, and 4\nconst array = [0, 1, , , , 5, 6];\n\n// Shows all indexes, not just those with assigned values\narray.findLast((value, index) => {\n  console.log(`Visited index ${index} with value ${value}`);\n});\n// Visited index 6 with value 6\n// Visited index 5 with value 5\n// Visited index 4 with value undefined\n// Visited index 3 with value undefined\n// Visited index 2 with value undefined\n// Visited index 1 with value 1\n// Visited index 0 with value 0\n\n// Shows all indexes, including deleted\narray.findLast((value, index) => {\n  // Delete element 5 on first iteration\n  if (index === 6) {\n    console.log(`Deleting array[5] with value ${array[5]}`);\n    delete array[5];\n  }\n  // Element 5 is still visited even though deleted\n  console.log(`Visited index ${index} with value ${value}`);\n});\n// Deleting array[5] with value 5\n// Visited index 6 with value 6\n// Visited index 5 with value undefined\n// Visited index 4 with value undefined\n// Visited index 3 with value undefined\n// Visited index 2 with value undefined\n// Visited index 1 with value 1\n// Visited index 0 with value 0\n```\n\n### Calling findLast() on non-array objects\n\nThe `findLast()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 7.3,\n  2: 4,\n  3: 3, // ignored by findLast() since length is 3\n};\nconsole.log(\n  Array.prototype.findLast.call(arrayLike, (x) => Number.isInteger(x)),\n); // 4\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.findLast` in `core-js`](https://github.com/zloirock/core-js#array-find-from-last)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.find()\")}}\n- {{jsxref(\"Array.prototype.findIndex()\")}}\n- {{jsxref(\"Array.prototype.findLastIndex()\")}}\n- {{jsxref(\"Array.prototype.includes()\")}}\n- {{jsxref(\"Array.prototype.filter()\")}}\n- {{jsxref(\"Array.prototype.every()\")}}\n- {{jsxref(\"Array.prototype.some()\")}}\n- {{jsxref(\"TypedArray.prototype.findLast()\")}}\n"
    },
    "findlastindex": {
      "index.md": "---\ntitle: Array.prototype.findLastIndex()\nslug: Web/JavaScript/Reference/Global_Objects/Array/findLastIndex\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.findLastIndex\n---\n\n{{JSRef}}\n\nThe **`findLastIndex()`** method of {{jsxref(\"Array\")}} instances iterates the array in reverse order and returns the index of the first element that satisfies the provided testing function.\nIf no elements satisfy the testing function, -1 is returned.\n\nSee also the {{jsxref(\"Array/findLast\", \"findLast()\")}} method, which returns the value of last element that satisfies the testing function (rather than its index).\n\n{{EmbedInteractiveExample(\"pages/js/array-findlastindex.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nfindLastIndex(callbackFn)\nfindLastIndex(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n    - `array`\n      - : The array `findLastIndex()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nThe index of the last (highest-index) element in the array that passes the test.\nOtherwise `-1` if no matching element is found.\n\n## Description\n\nThe `findLastIndex()` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array in descending-index order, until `callbackFn` returns a [truthy](/en-US/docs/Glossary/Truthy) value. `findLastIndex()` then returns the index of that element and stops iterating through the array. If `callbackFn` never returns a truthy value, `findLastIndex()` returns `-1`. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked for _every_ index of the array, not just those with assigned values. Empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays) behave the same as `undefined`.\n\nThe `findLastIndex()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Find the index of the last prime number in an array\n\nThe following example returns the index of the last element in the array that is a prime number, or `-1` if there is no prime number.\n\n```js\nfunction isPrime(element) {\n  if (element % 2 === 0 || element < 2) {\n    return false;\n  }\n  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\n    if (element % factor === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log([4, 6, 8, 12].findLastIndex(isPrime)); // -1, not found\nconsole.log([4, 5, 7, 8, 9, 11, 12].findLastIndex(isPrime)); // 5\n```\n\n### Using the third argument of callbackFn\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `findLastIndex()` to find the last element that is less than its neighbors.\n\n```js\nconst numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];\nconst lastTrough = numbers\n  .filter((num) => num > 0)\n  .findLastIndex((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx > 0 && num >= arr[idx - 1]) return false;\n    if (idx < arr.length - 1 && num >= arr[idx + 1]) return false;\n    return true;\n  });\nconsole.log(lastTrough); // 6\n```\n\n### Using findLastIndex() on sparse arrays\n\nYou can search for `undefined` in a sparse array and get the index of an empty slot.\n\n```js\nconsole.log([1, , 3].findLastIndex((x) => x === undefined)); // 1\n```\n\n### Calling findLastIndex() on non-array objects\n\nThe `findLastIndex()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 7.3,\n  2: 4,\n  3: 3, // ignored by findLastIndex() since length is 3\n};\nconsole.log(\n  Array.prototype.findLastIndex.call(arrayLike, (x) => Number.isInteger(x)),\n); // 2\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.findLastIndex` in `core-js`](https://github.com/zloirock/core-js#array-find-from-last)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.find()\")}}\n- {{jsxref(\"Array.prototype.findIndex()\")}}\n- {{jsxref(\"Array.prototype.findLast()\")}}\n- {{jsxref(\"Array.prototype.indexOf()\")}}\n- {{jsxref(\"Array.prototype.lastIndexOf()\")}}\n- {{jsxref(\"TypedArray.prototype.findLastIndex()\")}}\n"
    },
    "flat": {
      "index.md": "---\ntitle: Array.prototype.flat()\nslug: Web/JavaScript/Reference/Global_Objects/Array/flat\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.flat\n---\n\n{{JSRef}}\n\nThe **`flat()`** method of {{jsxref(\"Array\")}} instances creates a new array with all sub-array\nelements concatenated into it recursively up to the specified depth.\n\n{{EmbedInteractiveExample(\"pages/js/array-flat.html\")}}\n\n## Syntax\n\n```js-nolint\nflat()\nflat(depth)\n```\n\n### Parameters\n\n- `depth` {{optional_inline}}\n  - : The depth level specifying how deep a nested array structure should be flattened.\n    Defaults to 1.\n\n### Return value\n\nA new array with the sub-array elements concatenated into it.\n\n## Description\n\nThe `flat()` method is a [copying method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It does not alter `this` but instead returns a [shallow copy](/en-US/docs/Glossary/Shallow_copy) that contains the same elements as the ones from the original array.\n\nThe `flat()` method ignores empty slots if the array being flattened is [sparse](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays). For example, if `depth` is 1, both empty slots in the root array and in the first level of nested arrays are ignored, but empty slots in further nested arrays are preserved with the arrays themselves.\n\nThe `flat()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. However, its elements must be arrays if they are to be flattened.\n\n## Examples\n\n### Flattening nested arrays\n\n```js\nconst arr1 = [1, 2, [3, 4]];\narr1.flat();\n// [1, 2, 3, 4]\n\nconst arr2 = [1, 2, [3, 4, [5, 6]]];\narr2.flat();\n// [1, 2, 3, 4, [5, 6]]\n\nconst arr3 = [1, 2, [3, 4, [5, 6]]];\narr3.flat(2);\n// [1, 2, 3, 4, 5, 6]\n\nconst arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];\narr4.flat(Infinity);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n### Using flat() on sparse arrays\n\nThe `flat()` method removes empty slots in arrays:\n\n```js\nconst arr5 = [1, 2, , 4, 5];\nconsole.log(arr5.flat()); // [1, 2, 4, 5]\n\nconst array = [1, , 3, [\"a\", , \"c\"]];\nconsole.log(array.flat()); // [ 1, 3, \"a\", \"c\" ]\n\nconst array2 = [1, , 3, [\"a\", , [\"d\", , \"e\"]]];\nconsole.log(array2.flat()); // [ 1, 3, \"a\", [\"d\", empty, \"e\"] ]\nconsole.log(array2.flat(2)); // [ 1, 3, \"a\", \"d\", \"e\"]\n```\n\n### Calling flat() on non-array objects\n\nThe `flat()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`. If the element is not an array, it's directly appended to the result. If the element is an array, it's flattened according to the `depth` parameter.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: [1, 2],\n  // Array-like objects aren't flattened\n  1: { length: 2, 0: 3, 1: 4 },\n  2: 5,\n  3: 3, // ignored by flat() since length is 3\n};\nconsole.log(Array.prototype.flat.call(arrayLike));\n// [ 1, 2, { '0': 3, '1': 4, length: 2 }, 5 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.flat` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.concat()\")}}\n- {{jsxref(\"Array.prototype.flatMap()\")}}\n- {{jsxref(\"Array.prototype.map()\")}}\n- {{jsxref(\"Array.prototype.reduce()\")}}\n"
    },
    "flatmap": {
      "index.md": "---\ntitle: Array.prototype.flatMap()\nslug: Web/JavaScript/Reference/Global_Objects/Array/flatMap\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.flatMap\n---\n\n{{JSRef}}\n\nThe **`flatMap()`** method of {{jsxref(\"Array\")}} instances returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a {{jsxref(\"Array/map\", \"map()\")}} followed by a {{jsxref(\"Array/flat\", \"flat()\")}} of depth 1 (`arr.map(...args).flat()`), but slightly more efficient than calling those two methods separately.\n\n{{EmbedInteractiveExample(\"pages/js/array-flatmap.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nflatMap(callbackFn)\nflatMap(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. It should return an array containing new elements of the new array, or a single non-array value to be added to the new array. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n    - `array`\n      - : The array `flatMap()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nA new array with each element being the result of the callback function and flattened\nby a depth of 1.\n\n## Description\n\nThe `flatMap()` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). See {{jsxref(\"Array.prototype.map()\")}} for a detailed description of the callback function. The `flatMap()` method is identical to [`map(callbackFn, thisArg)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) followed by [`flat(1)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat) — for each element, it produces an array of new elements, and concatenates the resulting arrays together to form a new array. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\nThe `flatMap()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. However, the value returned from `callbackFn` must be an array if it is to be flattened.\n\n### Alternative\n\n#### Pre-allocate and explicitly iterate\n\n```js\nconst arr = [1, 2, 3, 4];\n\narr.flatMap((x) => [x, x * 2]);\n// is equivalent to\nconst n = arr.length;\nconst acc = new Array(n * 2);\nfor (let i = 0; i < n; i++) {\n  const x = arr[i];\n  acc[i * 2] = x;\n  acc[i * 2 + 1] = x * 2;\n}\n// [1, 2, 2, 4, 3, 6, 4, 8]\n```\n\nNote that in this particular case the `flatMap` approach is slower than the\nfor-loop approach — due to the creation of temporary arrays that must be\ngarbage collected, as well as the return array not needing to be frequently\nresized. However, `flatMap` may still be the correct solution in cases where\nits flexibility and readability are desired.\n\n## Examples\n\n### map() and flatMap()\n\n```js\nconst arr1 = [1, 2, 3, 4];\n\narr1.map((x) => [x * 2]);\n// [[2], [4], [6], [8]]\n\narr1.flatMap((x) => [x * 2]);\n// [2, 4, 6, 8]\n\n// only one level is flattened\narr1.flatMap((x) => [[x * 2]]);\n// [[2], [4], [6], [8]]\n```\n\nWhile the above could have been achieved by using map itself, here is an example that\nbetter showcases the use of `flatMap()`.\n\nLet's generate a list of words from a list of sentences.\n\n```js\nconst arr1 = [\"it's Sunny in\", \"\", \"California\"];\n\narr1.map((x) => x.split(\" \"));\n// [[\"it's\",\"Sunny\",\"in\"],[\"\"],[\"California\"]]\n\narr1.flatMap((x) => x.split(\" \"));\n// [\"it's\",\"Sunny\",\"in\", \"\", \"California\"]\n```\n\nNotice, the output list length can be different from the input list length.\n\n### For adding and removing items during a map()\n\n`flatMap` can be used as a way to add and remove items (modify the number of\nitems) during a `map`. In other words, it allows you to map _many items to\nmany items_ (by handling each input item separately), rather than always\n_one-to-one_. In this sense, it works like the opposite of [filter](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\nReturn a 1-element array to keep the item, a multiple-element array to add items, or a\n0-element array to remove the item.\n\n```js\n// Let's say we want to remove all the negative numbers\n// and split the odd numbers into an even number and a 1\nconst a = [5, 4, -3, 20, 17, -33, -4, 18];\n//         |\\  \\  x   |  | \\   x   x   |\n//        [4,1, 4,   20, 16, 1,       18]\n\nconst result = a.flatMap((n) => {\n  if (n < 0) {\n    return [];\n  }\n  return n % 2 === 0 ? [n] : [n - 1, 1];\n});\nconsole.log(result); // [4, 1, 4, 20, 16, 1, 18]\n```\n\n### Using the third argument of callbackFn\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract operational stations and then uses `flatMap()` to create a new array where each element contains a station and its next station. On the last station, it returns an empty array to exclude it from the final array.\n\n```js\nconst stations = [\"New Haven\", \"West Haven\", \"Milford (closed)\", \"Stratford\"];\nconst line = stations\n  .filter((name) => !name.endsWith(\"(closed)\"))\n  .flatMap((name, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx === arr.length - 1) return []; // last station has no next station\n    return [`${name} - ${arr[idx + 1]}`];\n  });\nconsole.log(line); // ['New Haven - West Haven', 'West Haven - Stratford']\n```\n\nThe `array` argument is _not_ the array that is being built — there is no way to access the array being built from the callback function.\n\n### Using flatMap() on sparse arrays\n\nThe `callbackFn` won't be called for empty slots in the source array because `map()` doesn't, while `flat()` ignores empty slots in the returned arrays.\n\n```js\nconsole.log([1, 2, , 4, 5].flatMap((x) => [x, x * 2])); // [1, 2, 2, 4, 4, 8, 5, 10]\nconsole.log([1, 2, 3, 4].flatMap((x) => [, x * 2])); // [2, 4, 6, 8]\n```\n\n### Calling flatMap() on non-array objects\n\nThe `flatMap()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`. If the return value of the callback function is not an array, it is always directly appended to the result array.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 1,\n  1: 2,\n  2: 3,\n  3: 4, // ignored by flatMap() since length is 3\n};\nconsole.log(Array.prototype.flatMap.call(arrayLike, (x) => [x, x * 2]));\n// [1, 2, 2, 4, 3, 6]\n\n// Array-like objects returned from the callback won't be flattened\nconsole.log(\n  Array.prototype.flatMap.call(arrayLike, (x) => ({\n    length: 1,\n    0: x,\n  })),\n);\n// [ { '0': 1, length: 1 }, { '0': 2, length: 1 }, { '0': 3, length: 1 } ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.flatMap` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.concat()\")}}\n- {{jsxref(\"Array.prototype.flat()\")}}\n- {{jsxref(\"Array.prototype.map()\")}}\n- {{jsxref(\"Array.prototype.reduce()\")}}\n"
    },
    "foreach": {
      "index.md": "---\ntitle: Array.prototype.forEach()\nslug: Web/JavaScript/Reference/Global_Objects/Array/forEach\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.forEach\n---\n\n{{JSRef}}\n\nThe **`forEach()`** method of {{jsxref(\"Array\")}} instances executes a provided function once\nfor each array element.\n\n{{EmbedInteractiveExample(\"pages/js/array-foreach.html\")}}\n\n## Syntax\n\n```js-nolint\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. Its return value is discarded. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n    - `array`\n      - : The array `forEach()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n## Description\n\nThe `forEach()` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array in ascending-index order. Unlike {{jsxref(\"Array/map\", \"map()\")}}, `forEach()` always returns {{jsxref(\"undefined\")}} and is not chainable. The typical use case is to execute side effects at the end of a chain. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `forEach()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\nThere is no way to stop or break a `forEach()` loop other than by throwing an exception. If you need such behavior, the `forEach()` method is the wrong tool.\n\nEarly termination may be accomplished with looping statements like [`for`](/en-US/docs/Web/JavaScript/Reference/Statements/for), [`for...of`](/en-US/docs/Web/JavaScript/Reference/Statements/for...of), and [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in). Array methods like {{jsxref(\"Array/every\", \"every()\")}}, {{jsxref(\"Array/some\", \"some()\")}}, {{jsxref(\"Array/find\", \"find()\")}}, and {{jsxref(\"Array/findIndex\", \"findIndex()\")}} also stops iteration immediately when further iteration is not necessary.\n\n`forEach()` expects a synchronous function — it does not wait for promises. Make sure you are aware of the implications while using promises (or async functions) as `forEach` callbacks.\n\n```js\nconst ratings = [5, 4, 5];\nlet sum = 0;\n\nconst sumFunction = async (a, b) => a + b;\n\nratings.forEach(async (rating) => {\n  sum = await sumFunction(sum, rating);\n});\n\nconsole.log(sum);\n// Naively expected output: 14\n// Actual output: 0\n```\n\nTo run a series of asynchronous operations sequentially or concurrently, see [promise composition](/en-US/docs/Web/JavaScript/Guide/Using_promises#composition).\n\n## Examples\n\n### Converting a for loop to forEach\n\n```js\nconst items = [\"item1\", \"item2\", \"item3\"];\nconst copyItems = [];\n\n// before\nfor (let i = 0; i < items.length; i++) {\n  copyItems.push(items[i]);\n}\n\n// after\nitems.forEach((item) => {\n  copyItems.push(item);\n});\n```\n\n### Printing the contents of an array\n\n> **Note:** In order to display the content of an array in the console,\n> you can use {{domxref(\"console/table_static\", \"console.table()\")}}, which prints a formatted\n> version of the array.\n>\n> The following example illustrates an alternative approach, using\n> `forEach()`.\n\nThe following code logs a line for each element in an array:\n\n```js\nconst logArrayElements = (element, index /*, array */) => {\n  console.log(`a[${index}] = ${element}`);\n};\n\n// Notice that index 2 is skipped, since there is no item at\n// that position in the array.\n[2, 5, , 9].forEach(logArrayElements);\n// Logs:\n// a[0] = 2\n// a[1] = 5\n// a[3] = 9\n```\n\n### Using thisArg\n\nThe following (contrived) example updates an object's properties from each entry in the\narray:\n\n```js\nclass Counter {\n  constructor() {\n    this.sum = 0;\n    this.count = 0;\n  }\n  add(array) {\n    // Only function expressions have their own this bindings.\n    array.forEach(function countEntry(entry) {\n      this.sum += entry;\n      ++this.count;\n    }, this);\n  }\n}\n\nconst obj = new Counter();\nobj.add([2, 5, 9]);\nconsole.log(obj.count); // 3\nconsole.log(obj.sum); // 16\n```\n\nSince the `thisArg` parameter (`this`) is provided to\n`forEach()`, it is passed to `callback` each time it's\ninvoked. The callback uses it as its `this` value.\n\n> **Note:** If passing the callback function used an\n> [arrow function expression](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions),\n> the `thisArg` parameter could be omitted,\n> since all arrow functions lexically bind the {{jsxref(\"Operators/this\", \"this\")}}\n> value.\n\n### An object copy function\n\nThe following code creates a copy of a given object.\n\nThere are different ways to create a copy of an object. The following is just one way\nand is presented to explain how `Array.prototype.forEach()` works by using\n`Object.*` utility functions.\n\n```js\nconst copy = (obj) => {\n  const copy = Object.create(Object.getPrototypeOf(obj));\n  const propNames = Object.getOwnPropertyNames(obj);\n  propNames.forEach((name) => {\n    const desc = Object.getOwnPropertyDescriptor(obj, name);\n    Object.defineProperty(copy, name, desc);\n  });\n  return copy;\n};\n\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = copy(obj1); // obj2 looks like obj1 now\n```\n\n### Flatten an array\n\nThe following example is only here for learning purpose. If you want to flatten an\narray using built-in methods, you can use {{jsxref(\"Array.prototype.flat()\")}}.\n\n```js\nconst flatten = (arr) => {\n  const result = [];\n  arr.forEach((item) => {\n    if (Array.isArray(item)) {\n      result.push(...flatten(item));\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n// Usage\nconst nested = [1, 2, 3, [4, 5, [6, 7], 8, 9]];\nconsole.log(flatten(nested)); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### Using the third argument of callbackFn\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `forEach()` to log its neighbors.\n\n```js\nconst numbers = [3, -1, 1, 4, 1, 5];\nnumbers\n  .filter((num) => num > 0)\n  .forEach((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    console.log(arr[idx - 1], num, arr[idx + 1]);\n  });\n// undefined 3 1\n// 3 1 4\n// 1 4 1\n// 4 1 5\n// 1 5 undefined\n```\n\n### Using forEach() on sparse arrays\n\n```js-nolint\nconst arraySparse = [1, 3, /* empty */, 7];\nlet numCallbackRuns = 0;\n\narraySparse.forEach((element) => {\n  console.log({ element });\n  numCallbackRuns++;\n});\n\nconsole.log({ numCallbackRuns });\n\n// { element: 1 }\n// { element: 3 }\n// { element: 7 }\n// { numCallbackRuns: 3 }\n```\n\nThe callback function is not invoked for the missing value at index 2.\n\n### Calling forEach() on non-array objects\n\nThe `forEach()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 5, // ignored by forEach() since length is 3\n};\nArray.prototype.forEach.call(arrayLike, (x) => console.log(x));\n// 2\n// 3\n// 4\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.forEach` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.find()\")}}\n- {{jsxref(\"Array.prototype.map()\")}}\n- {{jsxref(\"Array.prototype.filter()\")}}\n- {{jsxref(\"Array.prototype.every()\")}}\n- {{jsxref(\"Array.prototype.some()\")}}\n- {{jsxref(\"TypedArray.prototype.forEach()\")}}\n- {{jsxref(\"Map.prototype.forEach()\")}}\n- {{jsxref(\"Set.prototype.forEach()\")}}\n"
    },
    "from": {
      "index.md": "---\ntitle: Array.from()\nslug: Web/JavaScript/Reference/Global_Objects/Array/from\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Array.from\n---\n\n{{JSRef}}\n\nThe **`Array.from()`** static method creates a new, shallow-copied `Array` instance from an [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) or [array-like](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects) object.\n\n{{EmbedInteractiveExample(\"pages/js/array-from.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nArray.from(arrayLike)\nArray.from(arrayLike, mapFn)\nArray.from(arrayLike, mapFn, thisArg)\n```\n\n### Parameters\n\n- `arrayLike`\n  - : An iterable or array-like object to convert to an array.\n- `mapFn` {{optional_inline}}\n  - : A function to call on every element of the array. If provided, every value to be added to the array is first passed through this function, and `mapFn`'s return value is added to the array instead. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n- `thisArg` {{optional_inline}}\n  - : Value to use as `this` when executing `mapFn`.\n\n### Return value\n\nA new {{jsxref(\"Array\")}} instance.\n\n## Description\n\n`Array.from()` lets you create `Array`s from:\n\n- [iterable objects](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) (objects such as {{jsxref(\"Map\")}} and {{jsxref(\"Set\")}}); or, if the object is not iterable,\n- array-like objects (objects with a `length` property and indexed elements).\n\nTo convert an ordinary object that's not iterable or array-like to an array (by enumerating its property keys, values, or both), use {{jsxref(\"Object.keys()\")}}, {{jsxref(\"Object.values()\")}}, or {{jsxref(\"Object.entries()\")}}. To convert an [async iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) to an array, use {{jsxref(\"Array.fromAsync()\")}}.\n\n`Array.from()` never creates a sparse array. If the `arrayLike` object is missing some index properties, they become `undefined` in the new array.\n\n`Array.from()` has an optional parameter `mapFn`, which allows you to execute a function on each element of the array being created, similar to {{jsxref(\"Array/map\", \"map()\")}}. More clearly, `Array.from(obj, mapFn, thisArg)` has the same result as `Array.from(obj).map(mapFn, thisArg)`, except that it does not create an intermediate array, and `mapFn` only receives two arguments (`element`, `index`) without the whole array, because the array is still under construction.\n\n> **Note:** This behavior is more important for [typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays), since the intermediate array would necessarily have values truncated to fit into the appropriate type. `Array.from()` is implemented to have the same signature as {{jsxref(\"TypedArray.from()\")}}.\n\nThe `Array.from()` method is a generic factory method. For example, if a subclass of `Array` inherits the `from()` method, the inherited `from()` method will return new instances of the subclass instead of `Array` instances. In fact, the `this` value can be any constructor function that accepts a single argument representing the length of the new array. When an iterable is passed as `arrayLike`, the constructor is called with no arguments; when an array-like object is passed, the constructor is called with the [normalized length](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#normalization_of_the_length_property) of the array-like object. The final `length` will be set again when iteration finishes. If the `this` value is not a constructor function, the plain `Array` constructor is used instead.\n\n## Examples\n\n### Array from a String\n\n```js\nArray.from(\"foo\");\n// [ \"f\", \"o\", \"o\" ]\n```\n\n### Array from a Set\n\n```js\nconst set = new Set([\"foo\", \"bar\", \"baz\", \"foo\"]);\nArray.from(set);\n// [ \"foo\", \"bar\", \"baz\" ]\n```\n\n### Array from a Map\n\n```js\nconst map = new Map([\n  [1, 2],\n  [2, 4],\n  [4, 8],\n]);\nArray.from(map);\n// [[1, 2], [2, 4], [4, 8]]\n\nconst mapper = new Map([\n  [\"1\", \"a\"],\n  [\"2\", \"b\"],\n]);\nArray.from(mapper.values());\n// ['a', 'b'];\n\nArray.from(mapper.keys());\n// ['1', '2'];\n```\n\n### Array from a NodeList\n\n```js\n// Create an array based on a property of DOM Elements\nconst images = document.querySelectorAll(\"img\");\nconst sources = Array.from(images, (image) => image.src);\nconst insecureSources = sources.filter((link) => link.startsWith(\"http://\"));\n```\n\n### Array from an Array-like object (arguments)\n\n```js\nfunction f() {\n  return Array.from(arguments);\n}\n\nf(1, 2, 3);\n\n// [ 1, 2, 3 ]\n```\n\n### Using arrow functions and Array.from()\n\n```js\n// Using an arrow function as the map function to\n// manipulate the elements\nArray.from([1, 2, 3], (x) => x + x);\n// [2, 4, 6]\n\n// Generate a sequence of numbers\n// Since the array is initialized with `undefined` on each position,\n// the value of `v` below will be `undefined`\nArray.from({ length: 5 }, (v, i) => i);\n// [0, 1, 2, 3, 4]\n```\n\n### Sequence generator (range)\n\n```js\n// Sequence generator function (commonly referred to as \"range\", e.g. Clojure, PHP, etc.)\nconst range = (start, stop, step) =>\n  Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + i * step);\n\n// Generate numbers range 0..4\nrange(0, 4, 1);\n// [0, 1, 2, 3, 4]\n\n// Generate numbers range 1..10 with step of 2\nrange(1, 10, 2);\n// [1, 3, 5, 7, 9]\n\n// Generate the alphabet using Array.from making use of it being ordered as a sequence\nrange(\"A\".charCodeAt(0), \"Z\".charCodeAt(0), 1).map((x) =>\n  String.fromCharCode(x),\n);\n// [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n```\n\n### Calling from() on non-array constructors\n\nThe `from()` method can be called on any constructor function that accepts a single argument representing the length of the new array.\n\n```js\nfunction NotArray(len) {\n  console.log(\"NotArray called with length\", len);\n}\n\n// Iterable\nconsole.log(Array.from.call(NotArray, new Set([\"foo\", \"bar\", \"baz\"])));\n// NotArray called with length undefined\n// NotArray { '0': 'foo', '1': 'bar', '2': 'baz', length: 3 }\n\n// Array-like\nconsole.log(Array.from.call(NotArray, { length: 1, 0: \"foo\" }));\n// NotArray called with length 1\n// NotArray { '0': 'foo', length: 1 }\n```\n\nWhen the `this` value is not a constructor, a plain `Array` object is returned.\n\n```js\nconsole.log(Array.from.call({}, { length: 1, 0: \"foo\" })); // [ 'foo' ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.from` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array/Array\", \"Array()\")}}\n- {{jsxref(\"Array.of()\")}}\n- {{jsxref(\"Array.fromAsync()\")}}\n- {{jsxref(\"Array.prototype.map()\")}}\n- {{jsxref(\"TypedArray.from()\")}}\n"
    },
    "fromasync": {
      "index.md": "---\ntitle: Array.fromAsync()\nslug: Web/JavaScript/Reference/Global_Objects/Array/fromAsync\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Array.fromAsync\n---\n\n{{JSRef}}\n\nThe **`Array.fromAsync()`** static method creates a new, shallow-copied `Array` instance from an [async iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols), [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), or [array-like](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects) object.\n\n## Syntax\n\n```js-nolint\nArray.fromAsync(arrayLike)\nArray.fromAsync(arrayLike, mapFn)\nArray.fromAsync(arrayLike, mapFn, thisArg)\n```\n\n### Parameters\n\n- `arrayLike`\n  - : An async iterable, iterable, or array-like object to convert to an array.\n- `mapFn` {{optional_inline}}\n  - : A function to call on every element of the array. If provided, every value to be added to the array is first passed through this function, and `mapFn`'s return value is added to the array instead (after being [awaited](/en-US/docs/Web/JavaScript/Reference/Operators/await)). The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array. Because all elements are first [awaited](/en-US/docs/Web/JavaScript/Reference/Operators/await), this value will never be a [thenable](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables).\n    - `index`\n      - : The index of the current element being processed in the array.\n- `thisArg` {{optional_inline}}\n  - : Value to use as `this` when executing `mapFn`.\n\n### Return value\n\nA new {{jsxref(\"Promise\")}} whose fulfillment value is a new {{jsxref(\"Array\")}} instance.\n\n## Description\n\n`Array.fromAsync()` lets you create arrays from:\n\n- [async iterable objects](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) (objects such as {{domxref(\"ReadableStream\")}} and {{jsxref(\"AsyncGenerator\")}}); or, if the object is not async iterable,\n- [iterable objects](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (objects such as {{jsxref(\"Map\")}} and {{jsxref(\"Set\")}}); or, if the object is not iterable,\n- array-like objects (objects with a `length` property and indexed elements).\n\n`Array.fromAsync()` iterates the async iterable in a fashion very similar to {{jsxref(\"Statements/for-await...of\", \"for await...of\")}}. `Array.fromAsync()` is almost equivalent to {{jsxref(\"Array.from()\")}} in terms of behavior, except the following:\n\n- `Array.fromAsync()` handles async iterable objects.\n- `Array.fromAsync()` returns a {{jsxref(\"Promise\")}} that fulfills to the array instance.\n- If `Array.fromAsync()` is called with a non-async iterable object, each element to be added to the array is first [awaited](/en-US/docs/Web/JavaScript/Reference/Operators/await).\n- If a `mapFn` is provided, its input and output are internally awaited.\n\n`Array.fromAsync()` and {{jsxref(\"Promise.all()\")}} can both turn an iterable of promises into a promise of an array. However, there are two key differences:\n\n- `Array.fromAsync()` awaits each value yielded from the object sequentially. `Promise.all()` awaits all values concurrently.\n- `Array.fromAsync()` iterates the iterable lazily, and doesn't retrieve the next value until the current one is settled. `Promise.all()` retrieves all values in advance and awaits them all.\n\n## Examples\n\n### Array from an async iterable\n\n```js\nconst asyncIterable = (async function* () {\n  for (let i = 0; i < 5; i++) {\n    await new Promise((resolve) => setTimeout(resolve, 10 * i));\n    yield i;\n  }\n})();\n\nArray.fromAsync(asyncIterable).then((array) => console.log(array));\n// [0, 1, 2, 3, 4]\n```\n\n### Array from a sync iterable\n\n```js\nArray.fromAsync(\n  new Map([\n    [1, 2],\n    [3, 4],\n  ]),\n).then((array) => console.log(array));\n// [[1, 2], [3, 4]]\n```\n\n### Array from a sync iterable that yields promises\n\n```js\nArray.fromAsync(\n  new Set([Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)]),\n).then((array) => console.log(array));\n// [1, 2, 3]\n```\n\n### Array from an array-like object of promises\n\n```js\nArray.fromAsync({\n  length: 3,\n  0: Promise.resolve(1),\n  1: Promise.resolve(2),\n  2: Promise.resolve(3),\n}).then((array) => console.log(array));\n// [1, 2, 3]\n```\n\n### Using mapFn\n\nBoth the input and output of `mapFn` are awaited internally by `Array.fromAsync()`.\n\n```js\nfunction delayedValue(v) {\n  return new Promise((resolve) => setTimeout(() => resolve(v), 100));\n}\n\nArray.fromAsync(\n  [delayedValue(1), delayedValue(2), delayedValue(3)],\n  (element) => delayedValue(element * 2),\n).then((array) => console.log(array));\n// [2, 4, 6]\n```\n\n### Comparison with Promise.all()\n\n`Array.fromAsync()` awaits each value yielded from the object sequentially. `Promise.all()` awaits all values concurrently.\n\n```js\nfunction* makeIterableOfPromises() {\n  for (let i = 0; i < 5; i++) {\n    yield new Promise((resolve) => setTimeout(resolve, 100));\n  }\n}\n\n(async () => {\n  console.time(\"Array.fromAsync() time\");\n  await Array.fromAsync(makeIterableOfPromises());\n  console.timeEnd(\"Array.fromAsync() time\");\n  // Array.fromAsync() time: 503.610ms\n\n  console.time(\"Promise.all() time\");\n  await Promise.all(makeIterableOfPromises());\n  console.timeEnd(\"Promise.all() time\");\n  // Promise.all() time: 101.728ms\n})();\n```\n\n### No error handling for sync iterables\n\nSimilar to [`for await...of`](/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of#iterating_over_sync_iterables_and_generators), if the object being iterated is a sync iterable, and an error is thrown while iterating, the `return()` method of the underlying iterator will not be called, so the iterator is not closed.\n\n```js\nfunction* generatorWithRejectedPromises() {\n  try {\n    yield 0;\n    yield Promise.reject(3);\n  } finally {\n    console.log(\"called finally\");\n  }\n}\n\n(async () => {\n  try {\n    await Array.fromAsync(generatorWithRejectedPromises());\n  } catch (e) {\n    console.log(\"caught\", e);\n  }\n})();\n// caught 3\n// No \"called finally\" message\n```\n\nIf you need to close the iterator, you need to use a {{jsxref(\"Statements/for...of\", \"for...of\")}} loop instead, and `await` each value yourself.\n\n```js\n(async () => {\n  const arr = [];\n  try {\n    for (const val of generatorWithRejectedPromises()) {\n      arr.push(await val);\n    }\n  } catch (e) {\n    console.log(\"caught\", e);\n  }\n})();\n// called finally\n// caught 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.fromAsync` in `core-js`](https://github.com/zloirock/core-js#arrayfromasync)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array/Array\", \"Array()\")}}\n- {{jsxref(\"Array.of()\")}}\n- {{jsxref(\"Array.from()\")}}\n- {{jsxref(\"Statements/for-await...of\", \"for await...of\")}}\n"
    },
    "includes": {
      "index.md": "---\ntitle: Array.prototype.includes()\nslug: Web/JavaScript/Reference/Global_Objects/Array/includes\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.includes\n---\n\n{{JSRef}}\n\nThe **`includes()`** method of {{jsxref(\"Array\")}} instances determines whether an array\nincludes a certain value among its entries, returning `true` or\n`false` as appropriate.\n\n{{EmbedInteractiveExample(\"pages/js/array-includes.html\")}}\n\n## Syntax\n\n```js-nolint\nincludes(searchElement)\nincludes(searchElement, fromIndex)\n```\n\n### Parameters\n\n- `searchElement`\n  - : The value to search for.\n- `fromIndex` {{optional_inline}}\n  - : Zero-based index at which to start searching, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n    - Negative index counts back from the end of the array — if `-array.length <= fromIndex < 0`, `fromIndex + array.length` is used. However, the array is still searched from front to back in this case.\n    - If `fromIndex < -array.length` or `fromIndex` is omitted, `0` is used, causing the entire array to be searched.\n    - If `fromIndex >= array.length`, the array is not searched and `false` is returned.\n\n### Return value\n\nA boolean value which is `true` if the value `searchElement` is found within the array (or the part of the array indicated by the index `fromIndex`, if specified).\n\n## Description\n\nThe `includes()` method compares `searchElement` to elements of the array using the [SameValueZero](/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality) algorithm. Values of zero are all considered to be equal, regardless of sign. (That is, `-0` is equal to `0`), but `false` is _not_ considered to be the same as `0`. [`NaN`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) can be correctly searched for.\n\nWhen used on [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `includes()` method iterates empty slots as if they have the value `undefined`.\n\nThe `includes()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Using includes()\n\n```js\n[1, 2, 3].includes(2); // true\n[1, 2, 3].includes(4); // false\n[1, 2, 3].includes(3, 3); // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, NaN].includes(NaN); // true\n[\"1\", \"2\", \"3\"].includes(3); // false\n```\n\n### fromIndex is greater than or equal to the array length\n\nIf `fromIndex` is greater than or equal to the length of the\narray, `false` is returned. The array will not be searched.\n\n```js\nconst arr = [\"a\", \"b\", \"c\"];\n\narr.includes(\"c\", 3); // false\narr.includes(\"c\", 100); // false\n```\n\n### Computed index is less than 0\n\nIf `fromIndex` is negative, the computed index is calculated to\nbe used as a position in the array at which to begin searching for\n`searchElement`. If the computed index is less than or equal to\n`0`, the entire array will be searched.\n\n```js\n// array length is 3\n// fromIndex is -100\n// computed index is 3 + (-100) = -97\n\nconst arr = [\"a\", \"b\", \"c\"];\n\narr.includes(\"a\", -100); // true\narr.includes(\"b\", -100); // true\narr.includes(\"c\", -100); // true\narr.includes(\"a\", -2); // false\n```\n\n### Using includes() on sparse arrays\n\nYou can search for `undefined` in a sparse array and get `true`.\n\n```js\nconsole.log([1, , 3].includes(undefined)); // true\n```\n\n### Calling includes() on non-array objects\n\nThe `includes()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 1, // ignored by includes() since length is 3\n};\nconsole.log(Array.prototype.includes.call(arrayLike, 2));\n// true\nconsole.log(Array.prototype.includes.call(arrayLike, 1));\n// false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.includes` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.indexOf()\")}}\n- {{jsxref(\"Array.prototype.find()\")}}\n- {{jsxref(\"Array.prototype.findIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.includes()\")}}\n- {{jsxref(\"String.prototype.includes()\")}}\n"
    },
    "index.md": "---\ntitle: Array\nslug: Web/JavaScript/Reference/Global_Objects/Array\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Array\n---\n\n{{JSRef}}\n\nThe **`Array`** object, as with arrays in other programming languages, enables [storing a collection of multiple items under a single variable name](/en-US/docs/Learn/JavaScript/First_steps/Arrays), and has members for [performing common array operations](#examples).\n\n## Description\n\nIn JavaScript, arrays aren't [primitives](/en-US/docs/Glossary/Primitive) but are instead `Array` objects with the following core characteristics:\n\n- **JavaScript arrays are resizable** and **can contain a mix of different [data types](/en-US/docs/Web/JavaScript/Data_structures)**. (When those characteristics are undesirable, use [typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) instead.)\n- **JavaScript arrays are not associative arrays** and so, array elements cannot be accessed using arbitrary strings as indexes, but must be accessed using nonnegative integers (or their respective string form) as indexes.\n- **JavaScript arrays are [zero-indexed](https://en.wikipedia.org/wiki/Zero-based_numbering)**: the first element of an array is at index `0`, the second is at index `1`, and so on — and the last element is at the value of the array's {{jsxref(\"Array/length\", \"length\")}} property minus `1`.\n- **JavaScript [array-copy operations](#copy_an_array) create [shallow copies](/en-US/docs/Glossary/Shallow_copy)**. (All standard built-in copy operations with _any_ JavaScript objects create shallow copies, rather than [deep copies](/en-US/docs/Glossary/Deep_copy)).\n\n### Array indices\n\n`Array` objects cannot use arbitrary strings as element indexes (as in an [associative array](https://en.wikipedia.org/wiki/Associative_array)) but must use nonnegative integers (or their respective string form). Setting or accessing via non-integers will not set or retrieve an element from the array list itself, but will set or access a variable associated with that array's [object property collection](/en-US/docs/Web/JavaScript/Data_structures#properties). The array's object properties and list of array elements are separate, and the array's [traversal and mutation operations](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#array_methods) cannot be applied to these named properties.\n\nArray elements are object properties in the same way that `toString` is a property (to be specific, however, `toString()` is a method). Nevertheless, trying to access an element of an array as follows throws a syntax error because the property name is not valid:\n\n```js-nolint example-bad\narr.0; // a syntax error\n```\n\nJavaScript syntax requires properties beginning with a digit to be accessed using [bracket notation](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#objects_and_properties) instead of [dot notation](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). It's also possible to quote the array indices (e.g., `years['2']` instead of `years[2]`), although usually not necessary.\n\nThe `2` in `years[2]` is coerced into a string by the JavaScript engine through an implicit `toString` conversion. As a result, `'2'` and `'02'` would refer to two different slots on the `years` object, and the following example could be `true`:\n\n```js\nconsole.log(years[\"2\"] !== years[\"02\"]);\n```\n\nOnly `years['2']` is an actual array index. `years['02']` is an arbitrary string property that will not be visited in array iteration.\n\n### Relationship between length and numerical properties\n\nA JavaScript array's {{jsxref(\"Array/length\", \"length\")}} property and numerical properties are connected.\n\nSeveral of the built-in array methods (e.g., {{jsxref(\"Array/join\", \"join()\")}}, {{jsxref(\"Array/slice\", \"slice()\")}}, {{jsxref(\"Array/indexOf\", \"indexOf()\")}}, etc.) take into account the value of an array's {{jsxref(\"Array/length\", \"length\")}} property when they're called.\n\nOther methods (e.g., {{jsxref(\"Array/push\", \"push()\")}}, {{jsxref(\"Array/splice\", \"splice()\")}}, etc.) also result in updates to an array's {{jsxref(\"Array/length\", \"length\")}} property.\n\n```js\nconst fruits = [];\nfruits.push(\"banana\", \"apple\", \"peach\");\nconsole.log(fruits.length); // 3\n```\n\nWhen setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the engine will update the array's {{jsxref(\"Array/length\", \"length\")}} property accordingly:\n\n```js\nfruits[5] = \"mango\";\nconsole.log(fruits[5]); // 'mango'\nconsole.log(Object.keys(fruits)); // ['0', '1', '2', '5']\nconsole.log(fruits.length); // 6\n```\n\nIncreasing the {{jsxref(\"Array/length\", \"length\")}} extends the array by adding empty slots without creating any new elements — not even `undefined`.\n\n```js\nfruits.length = 10;\nconsole.log(fruits); // ['banana', 'apple', 'peach', empty x 2, 'mango', empty x 4]\nconsole.log(Object.keys(fruits)); // ['0', '1', '2', '5']\nconsole.log(fruits.length); // 10\nconsole.log(fruits[8]); // undefined\n```\n\nDecreasing the {{jsxref(\"Array/length\", \"length\")}} property does, however, delete elements.\n\n```js\nfruits.length = 2;\nconsole.log(Object.keys(fruits)); // ['0', '1']\nconsole.log(fruits.length); // 2\n```\n\nThis is explained further on the {{jsxref(\"Array/length\", \"length\")}} page.\n\n### Array methods and empty slots\n\nArray methods have different behaviors when encountering empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays). In general, older methods (e.g. `forEach`) treat empty slots differently from indices that contain `undefined`.\n\nMethods that have special treatment for empty slots include the following: {{jsxref(\"Array/concat\", \"concat()\")}}, {{jsxref(\"Array/copyWithin\", \"copyWithin()\")}}, {{jsxref(\"Array/every\", \"every()\")}}, {{jsxref(\"Array/filter\", \"filter()\")}}, {{jsxref(\"Array/flat\", \"flat()\")}}, {{jsxref(\"Array/flatMap\", \"flatMap()\")}}, {{jsxref(\"Array/forEach\", \"forEach()\")}}, {{jsxref(\"Array/indexOf\", \"indexOf()\")}}, {{jsxref(\"Array/lastIndexOf\", \"lastIndexOf()\")}}, {{jsxref(\"Array/map\", \"map()\")}}, {{jsxref(\"Array/reduce\", \"reduce()\")}}, {{jsxref(\"Array/reduceRight\", \"reduceRight()\")}}, {{jsxref(\"Array/reverse\", \"reverse()\")}}, {{jsxref(\"Array/slice\", \"slice()\")}}, {{jsxref(\"Array/some\", \"some()\")}}, {{jsxref(\"Array/sort\", \"sort()\")}}, and {{jsxref(\"Array/splice\", \"splice()\")}}. Iteration methods such as `forEach` don't visit empty slots at all. Other methods, such as `concat`, `copyWithin`, etc., preserve empty slots when doing the copying, so in the end the array is still sparse.\n\n```js\nconst colors = [\"red\", \"yellow\", \"blue\"];\ncolors[5] = \"purple\";\ncolors.forEach((item, index) => {\n  console.log(`${index}: ${item}`);\n});\n// Output:\n// 0: red\n// 1: yellow\n// 2: blue\n// 5: purple\n\ncolors.reverse(); // ['purple', empty × 2, 'blue', 'yellow', 'red']\n```\n\nNewer methods (e.g. `keys`) do not treat empty slots specially and treat them as if they contain `undefined`. Methods that conflate empty slots with `undefined` elements include the following: {{jsxref(\"Array/entries\", \"entries()\")}}, {{jsxref(\"Array/fill\", \"fill()\")}}, {{jsxref(\"Array/find\", \"find()\")}}, {{jsxref(\"Array/findIndex\", \"findIndex()\")}}, {{jsxref(\"Array/findLast\", \"findLast()\")}}, {{jsxref(\"Array/findLastIndex\", \"findLastIndex()\")}}, {{jsxref(\"Array/includes\", \"includes()\")}}, {{jsxref(\"Array/join\", \"join()\")}}, {{jsxref(\"Array/keys\", \"keys()\")}}, {{jsxref(\"Array/toLocaleString\", \"toLocaleString()\")}}, {{jsxref(\"Array/toReversed\", \"toReversed()\")}}, {{jsxref(\"Array/toSorted\", \"toSorted()\")}}, {{jsxref(\"Array/toSpliced\", \"toSpliced()\")}}, {{jsxref(\"Array/values\", \"values()\")}}, and {{jsxref(\"Array/with\", \"with()\")}}.\n\n```js\nconst colors = [\"red\", \"yellow\", \"blue\"];\ncolors[5] = \"purple\";\nconst iterator = colors.keys();\nfor (const key of iterator) {\n  console.log(`${key}: ${colors[key]}`);\n}\n// Output\n// 0: red\n// 1: yellow\n// 2: blue\n// 3: undefined\n// 4: undefined\n// 5: purple\n\nconst newColors = colors.toReversed(); // ['purple', undefined, undefined, 'blue', 'yellow', 'red']\n```\n\n### Copying methods and mutating methods\n\nSome methods do not mutate the existing array that the method was called on, but instead return a new array. They do so by first constructing a new array and then populating it with elements. The copy always happens [_shallowly_](/en-US/docs/Glossary/Shallow_copy) — the method never copies anything beyond the initially created array. Elements of the original array(s) are copied into the new array as follows:\n\n- Objects: the object reference is copied into the new array. Both the original and new array refer to the same object. That is, if a referenced object is modified, the changes are visible to both the new and original arrays.\n- Primitive types such as strings, numbers and booleans (not {{jsxref(\"String\")}}, {{jsxref(\"Number\")}}, and {{jsxref(\"Boolean\")}} objects): their values are copied into the new array.\n\nOther methods mutate the array that the method was called on, in which case their return value differs depending on the method: sometimes a reference to the same array, sometimes the length of the new array.\n\nThe following methods create new arrays by accessing [`this.constructor[Symbol.species]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species) to determine the constructor to use: {{jsxref(\"Array/concat\", \"concat()\")}}, {{jsxref(\"Array/filter\", \"filter()\")}}, {{jsxref(\"Array/flat\", \"flat()\")}}, {{jsxref(\"Array/flatMap\", \"flatMap()\")}}, {{jsxref(\"Array/map\", \"map()\")}}, {{jsxref(\"Array/slice\", \"slice()\")}}, and {{jsxref(\"Array/splice\", \"splice()\")}} (to construct the array of removed elements that's returned).\n\nThe following methods always create new arrays with the `Array` base constructor: {{jsxref(\"Array/toReversed\", \"toReversed()\")}}, {{jsxref(\"Array/toSorted\", \"toSorted()\")}}, {{jsxref(\"Array/toSpliced\", \"toSpliced()\")}}, and {{jsxref(\"Array/with\", \"with()\")}}.\n\nThe following table lists the methods that mutate the original array, and the corresponding non-mutating alternative:\n\n| Mutating method                                | Non-mutating alternative                                 |\n| ---------------------------------------------- | -------------------------------------------------------- |\n| {{jsxref(\"Array/copyWithin\", \"copyWithin()\")}} | No one-method alternative                                |\n| {{jsxref(\"Array/fill\", \"fill()\")}}             | No one-method alternative                                |\n| {{jsxref(\"Array/pop\", \"pop()\")}}               | {{jsxref(\"Array/slice\", \"slice(0, -1)\")}}                |\n| {{jsxref(\"Array/push\", \"push(v1, v2)\")}}       | {{jsxref(\"Array/concat\", \"concat([v1, v2])\")}}           |\n| {{jsxref(\"Array/reverse\", \"reverse()\")}}       | {{jsxref(\"Array/toReversed\", \"toReversed()\")}}           |\n| {{jsxref(\"Array/shift\", \"shift()\")}}           | {{jsxref(\"Array/slice\", \"slice(1)\")}}                    |\n| {{jsxref(\"Array/sort\", \"sort()\")}}             | {{jsxref(\"Array/toSorted\", \"toSorted()\")}}               |\n| {{jsxref(\"Array/splice\", \"splice()\")}}         | {{jsxref(\"Array/toSpliced\", \"toSpliced()\")}}             |\n| {{jsxref(\"Array/unshift\", \"unshift(v1, v2)\")}} | {{jsxref(\"Array/toSpliced\", \"toSpliced(0, 0, v1, v2)\")}} |\n\nAn easy way to change a mutating method into a non-mutating alternative is to use the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) or {{jsxref(\"Array/slice\", \"slice()\")}} to create a copy first:\n\n```js-nolint\narr.copyWithin(0, 1, 2); // mutates arr\nconst arr2 = arr.slice().copyWithin(0, 1, 2); // does not mutate arr\nconst arr3 = [...arr].copyWithin(0, 1, 2); // does not mutate arr\n```\n\n### Iterative methods\n\nMany array methods take a callback function as an argument. The callback function is called sequentially and at most once for each element in the array, and the return value of the callback function is used to determine the return value of the method. They all share the same signature:\n\n```js-nolint\nmethod(callbackFn, thisArg)\n```\n\nWhere `callbackFn` takes three arguments:\n\n- `element`\n  - : The current element being processed in the array.\n- `index`\n  - : The index of the current element being processed in the array.\n- `array`\n  - : The array that the method was called upon.\n\nWhat `callbackFn` is expected to return depends on the array method that was called.\n\nThe `thisArg` argument (defaults to `undefined`) will be used as the `this` value when calling `callbackFn`. The `this` value ultimately observable by `callbackFn` is determined according to [the usual rules](/en-US/docs/Web/JavaScript/Reference/Operators/this): if `callbackFn` is [non-strict](/en-US/docs/Web/JavaScript/Reference/Strict_mode#no_this_substitution), primitive `this` values are wrapped into objects, and `undefined`/`null` is substituted with [`globalThis`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis). The `thisArg` argument is irrelevant for any `callbackFn` defined with an [arrow function](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), as arrow functions don't have their own `this` {{Glossary(\"binding\")}}.\n\nThe `array` argument passed to `callbackFn` is most useful if you want to read another index during iteration, because you may not always have an existing variable that refers to the current array. You should generally not mutate the array during iteration (see [mutating initial array in iterative methods](#mutating_initial_array_in_iterative_methods)), but you can also use this argument to do so. The `array` argument is _not_ the array that is being built, in the case of methods like `map()`, `filter()`, and `flatMap()` — there is no way to access the array being built from the callback function.\n\nAll iterative methods are [copying](#copying_methods_and_mutating_methods) and [generic](#generic_array_methods), although they behave differently with [empty slots](#array_methods_and_empty_slots).\n\nThe following methods are iterative:{{jsxref(\"Array/every\", \"every()\")}}, {{jsxref(\"Array/filter\", \"filter()\")}}, {{jsxref(\"Array/find\", \"find()\")}}, {{jsxref(\"Array/findIndex\", \"findIndex()\")}}, {{jsxref(\"Array/findLast\", \"findLast()\")}}, {{jsxref(\"Array/findLastIndex\", \"findLastIndex()\")}}, {{jsxref(\"Array/flatMap\", \"flatMap()\")}}, {{jsxref(\"Array/forEach\", \"forEach()\")}}, {{jsxref(\"Array/map\", \"map()\")}}, and {{jsxref(\"Array/some\", \"some()\")}}.\n\nIn particular, {{jsxref(\"Array/every\", \"every()\")}}, {{jsxref(\"Array/find\", \"find()\")}}, {{jsxref(\"Array/findIndex\", \"findIndex()\")}}, {{jsxref(\"Array/findLast\", \"findLast()\")}}, {{jsxref(\"Array/findLastIndex\", \"findLastIndex()\")}}, and {{jsxref(\"Array/some\", \"some()\")}} do not always invoke `callbackFn` on every element — they stop iteration as soon as the return value is determined.\n\nThe {{jsxref(\"Array/reduce\", \"reduce()\")}} and {{jsxref(\"Array/reduceRight\", \"reduceRight()\")}} methods also take a callback function and run it at most once for each element in the array, but they have slightly different signatures from typical iterative methods (for example, they don't accept `thisArg`).\n\nThe {{jsxref(\"Array/sort\", \"sort()\")}} method also takes a callback function, but it is not an iterative method. It mutates the array in-place, doesn't accept `thisArg`, and may invoke the callback multiple times on an index.\n\nIterative methods iterate the array like the following (with a lot of technical details omitted):\n\n```js\nfunction method(callbackFn, thisArg) {\n  const length = this.length;\n  for (let i = 0; i < length; i++) {\n    if (i in this) {\n      const result = callbackFn.call(thisArg, this[i], i, this);\n      // Do something with result; maybe return early\n    }\n  }\n}\n```\n\nNote the following:\n\n1. Not all methods do the `i in this` test. The `find`, `findIndex`, `findLast`, and `findLastIndex` methods do not, but other methods do.\n2. The `length` is memorized before the loop starts. This affects how insertions and deletions during iteration are handled (see [mutating initial array in iterative methods](#mutating_initial_array_in_iterative_methods)).\n3. The method doesn't memorize the array contents, so if any index is modified during iteration, the new value might be observed.\n4. The code above iterates the array in ascending order of index. Some methods iterate in descending order of index (`for (let i = length - 1; i >= 0; i--)`): `reduceRight()`, `findLast()`, and `findLastIndex()`.\n5. `reduce` and `reduceRight` have slightly different signatures and do not always start at the first/last element.\n\n### Generic array methods\n\nArray methods are always generic — they don't access any internal data of the array object. They only access the array elements through the `length` property and the indexed elements. This means that they can be called on array-like objects as well.\n\n```js\nconst arrayLike = {\n  0: \"a\",\n  1: \"b\",\n  length: 2,\n};\nconsole.log(Array.prototype.join.call(arrayLike, \"+\")); // 'a+b'\n```\n\n#### Normalization of the length property\n\nThe `length` property is [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) and then clamped to the range between 0 and 2<sup>53</sup> - 1. `NaN` becomes `0`, so even when `length` is not present or is `undefined`, it behaves as if it has value `0`.\n\nThe language avoids setting `length` to an [unsafe integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER). All built-in methods will throw a {{jsxref(\"TypeError\")}} if `length` will be set to a number greater than 2<sup>53</sup> - 1. However, because the {{jsxref(\"Array/length\", \"length\")}} property of arrays throws an error if it's set to greater than 2<sup>32</sup> - 1, the safe integer threshold is usually not reached unless the method is called on a non-array object.\n\n```js\nArray.prototype.flat.call({}); // []\n```\n\nSome array methods set the `length` property of the array object. They always set the value after normalization, so `length` always ends as an integer.\n\n```js\nconst a = { length: 0.7 };\nArray.prototype.push.call(a);\nconsole.log(a.length); // 0\n```\n\n#### Array-like objects\n\nThe term [_array-like object_](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects) refers to any object that doesn't throw during the `length` conversion process described above. In practice, such object is expected to actually have a `length` property and to have indexed elements in the range `0` to `length - 1`. (If it doesn't have all indices, it will be functionally equivalent to a [sparse array](#array_methods_and_empty_slots).) Any integer index less than zero or greater than `length - 1` is ignored when an array method operates on an array-like object.\n\nMany DOM objects are array-like — for example, [`NodeList`](/en-US/docs/Web/API/NodeList) and [`HTMLCollection`](/en-US/docs/Web/API/HTMLCollection). The [`arguments`](/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object is also array-like. You can call array methods on them even if they don't have these methods themselves.\n\n```js\nfunction f() {\n  console.log(Array.prototype.join.call(arguments, \"+\"));\n}\n\nf(\"a\", \"b\"); // 'a+b'\n```\n\n## Constructor\n\n- {{jsxref(\"Array/Array\", \"Array()\")}}\n  - : Creates a new `Array` object.\n\n## Static properties\n\n- {{jsxref(\"Array/@@species\", \"Array[@@species]\")}}\n  - : Returns the `Array` constructor.\n\n## Static methods\n\n- {{jsxref(\"Array.from()\")}}\n  - : Creates a new `Array` instance from an iterable or array-like object.\n- {{jsxref(\"Array.fromAsync()\")}}\n  - : Creates a new `Array` instance from an async iterable, iterable, or array-like object.\n- {{jsxref(\"Array.isArray()\")}}\n  - : Returns `true` if the argument is an array, or `false` otherwise.\n- {{jsxref(\"Array.of()\")}}\n  - : Creates a new `Array` instance with a variable number of arguments, regardless of number or type of the arguments.\n\n## Instance properties\n\nThese properties are defined on `Array.prototype` and shared by all `Array` instances.\n\n- {{jsxref(\"Object/constructor\", \"Array.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Array` instances, the initial value is the {{jsxref(\"Array/Array\", \"Array\")}} constructor.\n- {{jsxref(\"Array/@@unscopables\", \"Array.prototype[@@unscopables]\")}}\n  - : Contains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for [`with`](/en-US/docs/Web/JavaScript/Reference/Statements/with) statement-binding purposes.\n\nThese properties are own properties of each `Array` instance.\n\n- {{jsxref(\"Array/length\", \"length\")}}\n  - : Reflects the number of elements in an array.\n\n## Instance methods\n\n- {{jsxref(\"Array.prototype.at()\")}}\n  - : Returns the array item at the given index. Accepts negative integers, which count back from the last item.\n- {{jsxref(\"Array.prototype.concat()\")}}\n  - : Returns a new array that is the calling array joined with other array(s) and/or value(s).\n- {{jsxref(\"Array.prototype.copyWithin()\")}}\n  - : Copies a sequence of array elements within an array.\n- {{jsxref(\"Array.prototype.entries()\")}}\n  - : Returns a new [_array iterator_](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) object that contains the key/value pairs for each index in an array.\n- {{jsxref(\"Array.prototype.every()\")}}\n  - : Returns `true` if every element in the calling array satisfies the testing function.\n- {{jsxref(\"Array.prototype.fill()\")}}\n  - : Fills all the elements of an array from a start index to an end index with a static value.\n- {{jsxref(\"Array.prototype.filter()\")}}\n  - : Returns a new array containing all elements of the calling array for which the provided filtering function returns `true`.\n- {{jsxref(\"Array.prototype.find()\")}}\n  - : Returns the value of the first element in the array that satisfies the provided testing function, or `undefined` if no appropriate element is found.\n- {{jsxref(\"Array.prototype.findIndex()\")}}\n  - : Returns the index of the first element in the array that satisfies the provided testing function, or `-1` if no appropriate element was found.\n- {{jsxref(\"Array.prototype.findLast()\")}}\n  - : Returns the value of the last element in the array that satisfies the provided testing function, or `undefined` if no appropriate element is found.\n- {{jsxref(\"Array.prototype.findLastIndex()\")}}\n  - : Returns the index of the last element in the array that satisfies the provided testing function, or `-1` if no appropriate element was found.\n- {{jsxref(\"Array.prototype.flat()\")}}\n  - : Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth.\n- {{jsxref(\"Array.prototype.flatMap()\")}}\n  - : Returns a new array formed by applying a given callback function to each element of the calling array, and then flattening the result by one level.\n- {{jsxref(\"Array.prototype.forEach()\")}}\n  - : Calls a function for each element in the calling array.\n- {{jsxref(\"Array.prototype.includes()\")}}\n  - : Determines whether the calling array contains a value, returning `true` or `false` as appropriate.\n- {{jsxref(\"Array.prototype.indexOf()\")}}\n  - : Returns the first (least) index at which a given element can be found in the calling array.\n- {{jsxref(\"Array.prototype.join()\")}}\n  - : Joins all elements of an array into a string.\n- {{jsxref(\"Array.prototype.keys()\")}}\n  - : Returns a new [_array iterator_](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) that contains the keys for each index in the calling array.\n- {{jsxref(\"Array.prototype.lastIndexOf()\")}}\n  - : Returns the last (greatest) index at which a given element can be found in the calling array, or `-1` if none is found.\n- {{jsxref(\"Array.prototype.map()\")}}\n  - : Returns a new array containing the results of invoking a function on every element in the calling array.\n- {{jsxref(\"Array.prototype.pop()\")}}\n  - : Removes the last element from an array and returns that element.\n- {{jsxref(\"Array.prototype.push()\")}}\n  - : Adds one or more elements to the end of an array, and returns the new `length` of the array.\n- {{jsxref(\"Array.prototype.reduce()\")}}\n  - : Executes a user-supplied \"reducer\" callback function on each element of the array (from left to right), to reduce it to a single value.\n- {{jsxref(\"Array.prototype.reduceRight()\")}}\n  - : Executes a user-supplied \"reducer\" callback function on each element of the array (from right to left), to reduce it to a single value.\n- {{jsxref(\"Array.prototype.reverse()\")}}\n  - : Reverses the order of the elements of an array _in place_. (First becomes the last, last becomes first.)\n- {{jsxref(\"Array.prototype.shift()\")}}\n  - : Removes the first element from an array and returns that element.\n- {{jsxref(\"Array.prototype.slice()\")}}\n  - : Extracts a section of the calling array and returns a new array.\n- {{jsxref(\"Array.prototype.some()\")}}\n  - : Returns `true` if at least one element in the calling array satisfies the provided testing function.\n- {{jsxref(\"Array.prototype.sort()\")}}\n  - : Sorts the elements of an array in place and returns the array.\n- {{jsxref(\"Array.prototype.splice()\")}}\n  - : Adds and/or removes elements from an array.\n- {{jsxref(\"Array.prototype.toLocaleString()\")}}\n  - : Returns a localized string representing the calling array and its elements. Overrides the {{jsxref(\"Object.prototype.toLocaleString()\")}} method.\n- {{jsxref(\"Array.prototype.toReversed()\")}}\n  - : Returns a new array with the elements in reversed order, without modifying the original array.\n- {{jsxref(\"Array.prototype.toSorted()\")}}\n  - : Returns a new array with the elements sorted in ascending order, without modifying the original array.\n- {{jsxref(\"Array.prototype.toSpliced()\")}}\n  - : Returns a new array with some elements removed and/or replaced at a given index, without modifying the original array.\n- {{jsxref(\"Array.prototype.toString()\")}}\n  - : Returns a string representing the calling array and its elements. Overrides the {{jsxref(\"Object.prototype.toString()\")}} method.\n- {{jsxref(\"Array.prototype.unshift()\")}}\n  - : Adds one or more elements to the front of an array, and returns the new `length` of the array.\n- {{jsxref(\"Array.prototype.values()\")}}\n  - : Returns a new [_array iterator_](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) object that contains the values for each index in the array.\n- {{jsxref(\"Array.prototype.with()\")}}\n  - : Returns a new array with the element at the given index replaced with the given value, without modifying the original array.\n- [`Array.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)\n  - : An alias for the [`values()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) method by default.\n\n## Examples\n\nThis section provides some examples of common array operations in JavaScript.\n\n> **Note:** If you're not yet familiar with array basics, consider first reading [JavaScript First Steps: Arrays](/en-US/docs/Learn/JavaScript/First_steps/Arrays), which [explains what arrays are](/en-US/docs/Learn/JavaScript/First_steps/Arrays#what_is_an_array), and includes other examples of common array operations.\n\n### Create an array\n\nThis example shows three ways to create new array: first using [array literal notation](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array#array_literal_notation), then using the [`Array()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array) constructor, and finally using [`String.prototype.split()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) to build the array from a string.\n\n```js\n// 'fruits' array created using array literal notation.\nconst fruits = [\"Apple\", \"Banana\"];\nconsole.log(fruits.length);\n// 2\n\n// 'fruits2' array created using the Array() constructor.\nconst fruits2 = new Array(\"Apple\", \"Banana\");\nconsole.log(fruits2.length);\n// 2\n\n// 'fruits3' array created using String.prototype.split().\nconst fruits3 = \"Apple, Banana\".split(\", \");\nconsole.log(fruits3.length);\n// 2\n```\n\n### Create a string from an array\n\nThis example uses the [`join()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join) method to create a string from the `fruits` array.\n\n```js\nconst fruits = [\"Apple\", \"Banana\"];\nconst fruitsString = fruits.join(\", \");\nconsole.log(fruitsString);\n// \"Apple, Banana\"\n```\n\n### Access an array item by its index\n\nThis example shows how to access items in the `fruits` array by specifying the index number of their position in the array.\n\n```js\nconst fruits = [\"Apple\", \"Banana\"];\n\n// The index of an array's first element is always 0.\nfruits[0]; // Apple\n\n// The index of an array's second element is always 1.\nfruits[1]; // Banana\n\n// The index of an array's last element is always one\n// less than the length of the array.\nfruits[fruits.length - 1]; // Banana\n\n// Using an index number larger than the array's length\n// returns 'undefined'.\nfruits[99]; // undefined\n```\n\n### Find the index of an item in an array\n\nThis example uses the [`indexOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) method to find the position (index) of the string `\"Banana\"` in the `fruits` array.\n\n```js\nconst fruits = [\"Apple\", \"Banana\"];\nconsole.log(fruits.indexOf(\"Banana\"));\n// 1\n```\n\n### Check if an array contains a certain item\n\nThis example shows two ways to check if the `fruits` array contains `\"Banana\"` and `\"Cherry\"`: first with the [`includes()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) method, and then with the [`indexOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) method to test for an index value that's not `-1`.\n\n```js\nconst fruits = [\"Apple\", \"Banana\"];\n\nfruits.includes(\"Banana\"); // true\nfruits.includes(\"Cherry\"); // false\n\n// If indexOf() doesn't return -1, the array contains the given item.\nfruits.indexOf(\"Banana\") !== -1; // true\nfruits.indexOf(\"Cherry\") !== -1; // false\n```\n\n### Append an item to an array\n\nThis example uses the [`push()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) method to append a new string to the `fruits` array.\n\n```js\nconst fruits = [\"Apple\", \"Banana\"];\nconst newLength = fruits.push(\"Orange\");\nconsole.log(fruits);\n// [\"Apple\", \"Banana\", \"Orange\"]\nconsole.log(newLength);\n// 3\n```\n\n### Remove the last item from an array\n\nThis example uses the [`pop()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop) method to remove the last item from the `fruits` array.\n\n```js\nconst fruits = [\"Apple\", \"Banana\", \"Orange\"];\nconst removedItem = fruits.pop();\nconsole.log(fruits);\n// [\"Apple\", \"Banana\"]\nconsole.log(removedItem);\n// Orange\n```\n\n> **Note:** `pop()` can only be used to remove the last item from an array. To remove multiple items from the end of an array, see the next example.\n\n### Remove multiple items from the end of an array\n\nThis example uses the [`splice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to remove the last 3 items from the `fruits` array.\n\n```js\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"];\nconst start = -3;\nconst removedItems = fruits.splice(start);\nconsole.log(fruits);\n// [\"Apple\", \"Banana\"]\nconsole.log(removedItems);\n// [\"Strawberry\", \"Mango\", \"Cherry\"]\n```\n\n### Truncate an array down to just its first N items\n\nThis example uses the [`splice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to truncate the `fruits` array down to just its first 2 items.\n\n```js\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"];\nconst start = 2;\nconst removedItems = fruits.splice(start);\nconsole.log(fruits);\n// [\"Apple\", \"Banana\"]\nconsole.log(removedItems);\n// [\"Strawberry\", \"Mango\", \"Cherry\"]\n```\n\n### Remove the first item from an array\n\nThis example uses the [`shift()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) method to remove the first item from the `fruits` array.\n\n```js\nconst fruits = [\"Apple\", \"Banana\"];\nconst removedItem = fruits.shift();\nconsole.log(fruits);\n// [\"Banana\"]\nconsole.log(removedItem);\n// Apple\n```\n\n> **Note:** `shift()` can only be used to remove the first item from an array. To remove multiple items from the beginning of an array, see the next example.\n\n### Remove multiple items from the beginning of an array\n\nThis example uses the [`splice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to remove the first 3 items from the `fruits` array.\n\n```js\nconst fruits = [\"Apple\", \"Strawberry\", \"Cherry\", \"Banana\", \"Mango\"];\nconst start = 0;\nconst deleteCount = 3;\nconst removedItems = fruits.splice(start, deleteCount);\nconsole.log(fruits);\n// [\"Banana\", \"Mango\"]\nconsole.log(removedItems);\n// [\"Apple\", \"Strawberry\", \"Cherry\"]\n```\n\n### Add a new first item to an array\n\nThis example uses the [`unshift()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) method to add, at index `0`, a new item to the `fruits` array — making it the new first item in the array.\n\n```js\nconst fruits = [\"Banana\", \"Mango\"];\nconst newLength = fruits.unshift(\"Strawberry\");\nconsole.log(fruits);\n// [\"Strawberry\", \"Banana\", \"Mango\"]\nconsole.log(newLength);\n// 3\n```\n\n### Remove a single item by index\n\nThis example uses the [`splice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to remove the string `\"Banana\"` from the `fruits` array — by specifying the index position of `\"Banana\"`.\n\n```js\nconst fruits = [\"Strawberry\", \"Banana\", \"Mango\"];\nconst start = fruits.indexOf(\"Banana\");\nconst deleteCount = 1;\nconst removedItems = fruits.splice(start, deleteCount);\nconsole.log(fruits);\n// [\"Strawberry\", \"Mango\"]\nconsole.log(removedItems);\n// [\"Banana\"]\n```\n\n### Remove multiple items by index\n\nThis example uses the [`splice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to remove the strings `\"Banana\"` and `\"Strawberry\"` from the `fruits` array — by specifying the index position of `\"Banana\"`, along with a count of the number of total items to remove.\n\n```js\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\"];\nconst start = 1;\nconst deleteCount = 2;\nconst removedItems = fruits.splice(start, deleteCount);\nconsole.log(fruits);\n// [\"Apple\", \"Mango\"]\nconsole.log(removedItems);\n// [\"Banana\", \"Strawberry\"]\n```\n\n### Replace multiple items in an array\n\nThis example uses the [`splice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) method to replace the last 2 items in the `fruits` array with new items.\n\n```js\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\"];\nconst start = -2;\nconst deleteCount = 2;\nconst removedItems = fruits.splice(start, deleteCount, \"Mango\", \"Cherry\");\nconsole.log(fruits);\n// [\"Apple\", \"Mango\", \"Cherry\"]\nconsole.log(removedItems);\n// [\"Banana\", \"Strawberry\"]\n```\n\n### Iterate over an array\n\nThis example uses a [`for...of`](/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop to iterate over the `fruits` array, logging each item to the console.\n\n```js\nconst fruits = [\"Apple\", \"Mango\", \"Cherry\"];\nfor (const fruit of fruits) {\n  console.log(fruit);\n}\n// Apple\n// Mango\n// Cherry\n```\n\nBut `for...of` is just one of many ways to iterate over any array; for more ways, see [Loops and iteration](/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration), and see the documentation for the [`every()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every), [`filter()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter), [`flatMap()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap), [`map()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [`reduce()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce), and [`reduceRight()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight) methods — and see the next example, which uses the [`forEach()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) method.\n\n### Call a function on each element in an array\n\nThis example uses the [`forEach()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) method to call a function on each element in the `fruits` array; the function causes each item to be logged to the console, along with the item's index number.\n\n```js\nconst fruits = [\"Apple\", \"Mango\", \"Cherry\"];\nfruits.forEach((item, index, array) => {\n  console.log(item, index);\n});\n// Apple 0\n// Mango 1\n// Cherry 2\n```\n\n### Merge multiple arrays together\n\nThis example uses the [`concat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) method to merge the `fruits` array with a `moreFruits` array, to produce a new `combinedFruits` array. Notice that `fruits` and `moreFruits` remain unchanged.\n\n```js\nconst fruits = [\"Apple\", \"Banana\", \"Strawberry\"];\nconst moreFruits = [\"Mango\", \"Cherry\"];\nconst combinedFruits = fruits.concat(moreFruits);\nconsole.log(combinedFruits);\n// [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"]\n\n// The 'fruits' array remains unchanged.\nconsole.log(fruits);\n// [\"Apple\", \"Banana\", \"Strawberry\"]\n\n// The 'moreFruits' array also remains unchanged.\nconsole.log(moreFruits);\n// [\"Mango\", \"Cherry\"]\n```\n\n### Copy an array\n\nThis example shows three ways to create a new array from the existing `fruits` array: first by using [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), then by using the [`from()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) method, and then by using the [`slice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) method.\n\n```js\nconst fruits = [\"Strawberry\", \"Mango\"];\n\n// Create a copy using spread syntax.\nconst fruitsCopy = [...fruits];\n// [\"Strawberry\", \"Mango\"]\n\n// Create a copy using the from() method.\nconst fruitsCopy2 = Array.from(fruits);\n// [\"Strawberry\", \"Mango\"]\n\n// Create a copy using the slice() method.\nconst fruitsCopy3 = fruits.slice();\n// [\"Strawberry\", \"Mango\"]\n```\n\nAll built-in array-copy operations ([spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), [`Array.from()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from), [`Array.prototype.slice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice), and [`Array.prototype.concat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat)) create [shallow copies](/en-US/docs/Glossary/Shallow_copy). If you instead want a [deep copy](/en-US/docs/Glossary/Deep_copy) of an array, you can use {{jsxref(\"JSON.stringify()\")}} to convert the array to a JSON string, and then {{jsxref(\"JSON.parse()\")}} to convert the string back into a new array that's completely independent from the original array.\n\n```js\nconst fruitsDeepCopy = JSON.parse(JSON.stringify(fruits));\n```\n\nYou can also create deep copies using the [`structuredClone()`](/en-US/docs/Web/API/structuredClone) method, which has the advantage of allowing [transferable objects](/en-US/docs/Web/API/Web_Workers_API/Transferable_objects) in the source to be _transferred_ to the new copy, rather than just cloned.\n\nFinally, it's important to understand that assigning an existing array to a new variable doesn't create a copy of either the array or its elements. Instead the new variable is just a reference, or alias, to the original array; that is, the original array's name and the new variable name are just two names for the exact same object (and so will always evaluate as [strictly equivalent](/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#strict_equality_using)). Therefore, if you make any changes at all either to the value of the original array or to the value of the new variable, the other will change, too:\n\n```js\nconst fruits = [\"Strawberry\", \"Mango\"];\nconst fruitsAlias = fruits;\n// 'fruits' and 'fruitsAlias' are the same object, strictly equivalent.\nfruits === fruitsAlias; // true\n// Any changes to the 'fruits' array change 'fruitsAlias' too.\nfruits.unshift(\"Apple\", \"Banana\");\nconsole.log(fruits);\n// ['Apple', 'Banana', 'Strawberry', 'Mango']\nconsole.log(fruitsAlias);\n// ['Apple', 'Banana', 'Strawberry', 'Mango']\n```\n\n### Creating a two-dimensional array\n\nThe following creates a chessboard as a two-dimensional array of strings. The first move is made by copying the `'p'` in `board[6][4]` to `board[4][4]`. The old position at `[6][4]` is made blank.\n\n```js\nconst board = [\n  [\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],\n  [\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"],\n  [\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"],\n];\n\nconsole.log(`${board.join(\"\\n\")}\\n\\n`);\n\n// Move King's Pawn forward 2\nboard[4][4] = board[6][4];\nboard[6][4] = \" \";\nconsole.log(board.join(\"\\n\"));\n```\n\nHere is the output:\n\n```plain\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\n , , , , , , ,\np,p,p,p,p,p,p,p\nr,n,b,q,k,b,n,r\n\nR,N,B,Q,K,B,N,R\nP,P,P,P,P,P,P,P\n , , , , , , ,\n , , , , , , ,\n , , , ,p, , ,\n , , , , , , ,\np,p,p,p, ,p,p,p\nr,n,b,q,k,b,n,r\n```\n\n### Using an array to tabulate a set of values\n\n```js\nconst values = [];\nfor (let x = 0; x < 10; x++) {\n  values.push([2 ** x, 2 * x ** 2]);\n}\nconsole.table(values);\n```\n\nResults in\n\n```plain\n// The first column is the index\n0  1    0\n1  2    2\n2  4    8\n3  8    18\n4  16   32\n5  32   50\n6  64   72\n7  128  98\n8  256  128\n9  512  162\n```\n\n### Creating an array using the result of a match\n\nThe result of a match between a {{jsxref(\"RegExp\")}} and a string can create a JavaScript array that has properties and elements which provide information about the match. Such an array is returned by {{jsxref(\"RegExp.prototype.exec()\")}} and {{jsxref(\"String.prototype.match()\")}}.\n\nFor example:\n\n```js\n// Match one d followed by one or more b's followed by one d\n// Remember matched b's and the following d\n// Ignore case\n\nconst myRe = /d(b+)(d)/i;\nconst execResult = myRe.exec(\"cdbBdbsbz\");\n\nconsole.log(execResult.input); // 'cdbBdbsbz'\nconsole.log(execResult.index); // 1\nconsole.log(execResult); // [ \"dbBd\", \"bB\", \"d\" ]\n```\n\nFor more information about the result of a match, see the {{jsxref(\"RegExp.prototype.exec()\")}} and {{jsxref(\"String.prototype.match()\")}} pages.\n\n### Mutating initial array in iterative methods\n\n[Iterative methods](#iterative_methods) do not mutate the array on which it is called, but the function provided as `callbackFn` can. The key principle to remember is that only indexes between 0 and `arrayLength - 1` are visited, where `arrayLength` is the length of the array at the time the array method was first called, but the element passed to the callback is the value at the time the index is visited. Therefore:\n\n- `callbackFn` will not visit any elements added beyond the array's initial length when the call to the iterative method began.\n- Changes to already-visited indexes do not cause `callbackFn` to be invoked on them again.\n- If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the `callbackFn` will be the value at the time that element gets visited. Removed elements are not visited.\n\n> **Warning:** Concurrent modifications of the kind described above frequently lead to hard-to-understand code and are generally to be avoided (except in special cases).\n\nThe following examples use the `forEach` method as an example, but other methods that visit indexes in ascending order work in the same way. We will first define a helper function:\n\n```js\nfunction testSideEffect(effect) {\n  const arr = [\"e1\", \"e2\", \"e3\", \"e4\"];\n  arr.forEach((elem, index, arr) => {\n    console.log(`array: [${arr.join(\", \")}], index: ${index}, elem: ${elem}`);\n    effect(arr, index);\n  });\n  console.log(`Final array: [${arr.join(\", \")}]`);\n}\n```\n\nModification to indexes not visited yet will be visible once the index is reached:\n\n```js\ntestSideEffect((arr, index) => {\n  if (index + 1 < arr.length) arr[index + 1] += \"*\";\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2*, e3, e4], index: 1, elem: e2*\n// array: [e1, e2*, e3*, e4], index: 2, elem: e3*\n// array: [e1, e2*, e3*, e4*], index: 3, elem: e4*\n// Final array: [e1, e2*, e3*, e4*]\n```\n\nModification to already visited indexes does not change iteration behavior, although the array will be different afterwards:\n\n```js\ntestSideEffect((arr, index) => {\n  if (index > 0) arr[index - 1] += \"*\";\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2, e3, e4], index: 1, elem: e2\n// array: [e1*, e2, e3, e4], index: 2, elem: e3\n// array: [e1*, e2*, e3, e4], index: 3, elem: e4\n// Final array: [e1*, e2*, e3*, e4]\n```\n\nInserting _n_ elements at unvisited indexes that are less than the initial array length will make them be visited. The last _n_ elements in the original array that now have index greater than the initial array length will not be visited:\n\n```js\ntestSideEffect((arr, index) => {\n  if (index === 1) arr.splice(2, 0, \"new\");\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2, e3, e4], index: 1, elem: e2\n// array: [e1, e2, new, e3, e4], index: 2, elem: new\n// array: [e1, e2, new, e3, e4], index: 3, elem: e3\n// Final array: [e1, e2, new, e3, e4]\n// e4 is not visited because it now has index 4\n```\n\nInserting _n_ elements with index greater than the initial array length will not make them be visited:\n\n```js\ntestSideEffect((arr) => arr.push(\"new\"));\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2, e3, e4, new], index: 1, elem: e2\n// array: [e1, e2, e3, e4, new, new], index: 2, elem: e3\n// array: [e1, e2, e3, e4, new, new, new], index: 3, elem: e4\n// Final array: [e1, e2, e3, e4, new, new, new, new]\n```\n\nInserting _n_ elements at already visited indexes will not make them be visited, but it shifts remaining elements back by _n_, so the current index and the _n - 1_ elements before it are visited again:\n\n```js\ntestSideEffect((arr, index) => arr.splice(index, 0, \"new\"));\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [new, e1, e2, e3, e4], index: 1, elem: e1\n// array: [new, new, e1, e2, e3, e4], index: 2, elem: e1\n// array: [new, new, new, e1, e2, e3, e4], index: 3, elem: e1\n// Final array: [new, new, new, new, e1, e2, e3, e4]\n// e1 keeps getting visited because it keeps getting shifted back\n```\n\nDeleting _n_ elements at unvisited indexes will make them not be visited anymore. Because the array has shrunk, the last _n_ iterations will visit out-of-bounds indexes. If the method ignores non-existent indexes (see [array methods and empty slots](#array_methods_and_empty_slots)), the last _n_ iterations will be skipped; otherwise, they will receive `undefined`:\n\n```js\ntestSideEffect((arr, index) => {\n  if (index === 1) arr.splice(2, 1);\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2, e3, e4], index: 1, elem: e2\n// array: [e1, e2, e4], index: 2, elem: e4\n// Final array: [e1, e2, e4]\n// Does not visit index 3 because it's out-of-bounds\n\n// Compare this with find(), which treats nonexistent indexes as undefined:\nconst arr2 = [\"e1\", \"e2\", \"e3\", \"e4\"];\narr2.find((elem, index, arr) => {\n  console.log(`array: [${arr.join(\", \")}], index: ${index}, elem: ${elem}`);\n  if (index === 1) arr.splice(2, 1);\n  return false;\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e1, e2, e3, e4], index: 1, elem: e2\n// array: [e1, e2, e4], index: 2, elem: e4\n// array: [e1, e2, e4], index: 3, elem: undefined\n```\n\nDeleting _n_ elements at already visited indexes does not change the fact that they were visited before they get deleted. Because the array has shrunk, the next _n_ elements after the current index are skipped. If the method ignores non-existent indexes, the last _n_ iterations will be skipped; otherwise, they will receive `undefined`:\n\n```js\ntestSideEffect((arr, index) => arr.splice(index, 1));\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// Does not visit e2 because e2 now has index 0, which has already been visited\n// array: [e2, e3, e4], index: 1, elem: e3\n// Does not visit e4 because e4 now has index 1, which has already been visited\n// Final array: [e2, e4]\n// Index 2 is out-of-bounds, so it's not visited\n\n// Compare this with find(), which treats nonexistent indexes as undefined:\nconst arr2 = [\"e1\", \"e2\", \"e3\", \"e4\"];\narr2.find((elem, index, arr) => {\n  console.log(`array: [${arr.join(\", \")}], index: ${index}, elem: ${elem}`);\n  arr.splice(index, 1);\n  return false;\n});\n// array: [e1, e2, e3, e4], index: 0, elem: e1\n// array: [e2, e3, e4], index: 1, elem: e3\n// array: [e2, e4], index: 2, elem: undefined\n// array: [e2, e4], index: 3, elem: undefined\n```\n\nFor methods that iterate in descending order of index, insertion causes elements to be skipped, and deletion causes elements to be visited multiple times. Adjust the code above yourself to see the effects.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n",
    "indexof": {
      "index.md": "---\ntitle: Array.prototype.indexOf()\nslug: Web/JavaScript/Reference/Global_Objects/Array/indexOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.indexOf\n---\n\n{{JSRef}}\n\nThe **`indexOf()`** method of {{jsxref(\"Array\")}} instances returns the first index at which a\ngiven element can be found in the array, or -1 if it is not present.\n\n{{EmbedInteractiveExample(\"pages/js/array-indexof.html\")}}\n\n## Syntax\n\n```js-nolint\nindexOf(searchElement)\nindexOf(searchElement, fromIndex)\n```\n\n### Parameters\n\n- `searchElement`\n  - : Element to locate in the array.\n- `fromIndex` {{optional_inline}}\n  - : Zero-based index at which to start searching, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n    - Negative index counts back from the end of the array — if `-array.length <= fromIndex < 0`, `fromIndex + array.length` is used. Note, the array is still searched from front to back in this case.\n    - If `fromIndex < -array.length` or `fromIndex` is omitted, `0` is used, causing the entire array to be searched.\n    - If `fromIndex >= array.length`, the array is not searched and `-1` is returned.\n\n### Return value\n\nThe first index of `searchElement` in the array; `-1` if not found.\n\n## Description\n\nThe `indexOf()` method compares `searchElement` to elements of the array using [strict equality](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) (the same algorithm used by the `===` operator). [`NaN`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) values are never compared as equal, so `indexOf()` always returns `-1` when `searchElement` is `NaN`.\n\nThe `indexOf()` method skips empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `indexOf()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Using indexOf()\n\nThe following example uses `indexOf()` to locate values in an array.\n\n```js\nconst array = [2, 9, 9];\narray.indexOf(2); // 0\narray.indexOf(7); // -1\narray.indexOf(9, 2); // 2\narray.indexOf(2, -1); // -1\narray.indexOf(2, -3); // 0\n```\n\nYou cannot use `indexOf()` to search for `NaN`.\n\n```js\nconst array = [NaN];\narray.indexOf(NaN); // -1\n```\n\n### Finding all the occurrences of an element\n\n```js\nconst indices = [];\nconst array = [\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"];\nconst element = \"a\";\nlet idx = array.indexOf(element);\nwhile (idx !== -1) {\n  indices.push(idx);\n  idx = array.indexOf(element, idx + 1);\n}\nconsole.log(indices);\n// [0, 2, 4]\n```\n\n### Finding if an element exists in the array or not and updating the array\n\n```js\nfunction updateVegetablesCollection(veggies, veggie) {\n  if (veggies.indexOf(veggie) === -1) {\n    veggies.push(veggie);\n    console.log(`New veggies collection is: ${veggies}`);\n  } else {\n    console.log(`${veggie} already exists in the veggies collection.`);\n  }\n}\n\nconst veggies = [\"potato\", \"tomato\", \"chillies\", \"green-pepper\"];\n\nupdateVegetablesCollection(veggies, \"spinach\");\n// New veggies collection is: potato,tomato,chillies,green-pepper,spinach\nupdateVegetablesCollection(veggies, \"spinach\");\n// spinach already exists in the veggies collection.\n```\n\n### Using indexOf() on sparse arrays\n\nYou cannot use `indexOf()` to search for empty slots in sparse arrays.\n\n```js\nconsole.log([1, , 3].indexOf(undefined)); // -1\n```\n\n### Calling indexOf() on non-array objects\n\nThe `indexOf()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 5, // ignored by indexOf() since length is 3\n};\nconsole.log(Array.prototype.indexOf.call(arrayLike, 2));\n// 0\nconsole.log(Array.prototype.indexOf.call(arrayLike, 5));\n// -1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.indexOf` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.findIndex()\")}}\n- {{jsxref(\"Array.prototype.findLastIndex()\")}}\n- {{jsxref(\"Array.prototype.lastIndexOf()\")}}\n- {{jsxref(\"TypedArray.prototype.indexOf()\")}}\n- {{jsxref(\"String.prototype.indexOf()\")}}\n"
    },
    "isarray": {
      "index.md": "---\ntitle: Array.isArray()\nslug: Web/JavaScript/Reference/Global_Objects/Array/isArray\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Array.isArray\n---\n\n{{JSRef}}\n\nThe **`Array.isArray()`** static method determines whether the passed value is an {{jsxref(\"Array\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/array-isarray.html\")}}\n\n## Syntax\n\n```js-nolint\nArray.isArray(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value to be checked.\n\n### Return value\n\n`true` if `value` is an {{jsxref(\"Array\")}}; otherwise, `false`. `false` is always returned if `value` is a {{jsxref(\"TypedArray\")}} instance.\n\n## Description\n\n`Array.isArray()` checks if the passed value is an {{jsxref(\"Array\")}}. It does not check the value's prototype chain, nor does it rely on the `Array` constructor it is attached to. It returns `true` for any value that was created using the array literal syntax or the `Array` constructor. This makes it safe to use with cross-realm objects, where the identity of the `Array` constructor is different and would therefore cause [`instanceof Array`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) to fail.\n\nSee the article [\"Determining with absolute accuracy whether or not a JavaScript object is an array\"](https://web.mit.edu/jwalden/www/isArray.html) for more details.\n\n`Array.isArray()` also rejects objects with `Array.prototype` in its prototype chain but aren't actual arrays, which `instanceof Array` would accept.\n\n## Examples\n\n### Using Array.isArray()\n\n```js\n// all following calls return true\nArray.isArray([]);\nArray.isArray([1]);\nArray.isArray(new Array());\nArray.isArray(new Array(\"a\", \"b\", \"c\", \"d\"));\nArray.isArray(new Array(3));\n// Little known fact: Array.prototype itself is an array:\nArray.isArray(Array.prototype);\n\n// all following calls return false\nArray.isArray();\nArray.isArray({});\nArray.isArray(null);\nArray.isArray(undefined);\nArray.isArray(17);\nArray.isArray(\"Array\");\nArray.isArray(true);\nArray.isArray(false);\nArray.isArray(new Uint8Array(32));\n// This is not an array, because it was not created using the\n// array literal syntax or the Array constructor\nArray.isArray({ __proto__: Array.prototype });\n```\n\n### instanceof vs. Array.isArray()\n\nWhen checking for `Array` instance, `Array.isArray()` is preferred over `instanceof` because it works across realms.\n\n```js\nconst iframe = document.createElement(\"iframe\");\ndocument.body.appendChild(iframe);\nconst xArray = window.frames[window.frames.length - 1].Array;\nconst arr = new xArray(1, 2, 3); // [1, 2, 3]\n\n// Correctly checking for Array\nArray.isArray(arr); // true\n// The prototype of arr is xArray.prototype, which is a\n// different object from Array.prototype\narr instanceof Array; // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.isArray` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n"
    },
    "join": {
      "index.md": "---\ntitle: Array.prototype.join()\nslug: Web/JavaScript/Reference/Global_Objects/Array/join\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.join\n---\n\n{{JSRef}}\n\nThe **`join()`** method of {{jsxref(\"Array\")}} instances creates and\nreturns a new string by concatenating all of the elements in this array,\nseparated by commas or a specified separator string. If the array has\nonly one item, then that item will be returned without using the separator.\n\n{{EmbedInteractiveExample(\"pages/js/array-join.html\")}}\n\n## Syntax\n\n```js-nolint\njoin()\njoin(separator)\n```\n\n### Parameters\n\n- `separator` {{optional_inline}}\n  - : A string to separate each pair of adjacent elements of the array. If omitted, the array elements are separated with a comma (\",\").\n\n### Return value\n\nA string with all array elements joined. If `array.length` is `0`, the empty string is returned.\n\n## Description\n\nThe string conversions of all array elements are joined into one string. If an element is `undefined` or `null`, it is converted to an empty string instead of the string `\"null\"` or `\"undefined\"`.\n\nThe `join` method is accessed internally by [`Array.prototype.toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString) with no arguments. Overriding `join` of an array instance will override its `toString` behavior as well.\n\n`Array.prototype.join` recursively converts each element, including other arrays, to strings. Because the string returned by `Array.prototype.toString` (which is the same as calling `join()`) does not have delimiters, nested arrays look like they are flattened. You can only control the separator of the first level, while deeper levels always use the default comma.\n\n```js\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconsole.log(matrix.join()); // 1,2,3,4,5,6,7,8,9\nconsole.log(matrix.join(\";\")); // 1,2,3;4,5,6;7,8,9\n```\n\nWhen an array is cyclic (it contains an element that is itself), browsers avoid infinite recursion by ignoring the cyclic reference.\n\n```js\nconst arr = [];\narr.push(1, [3, arr, 4], 2);\nconsole.log(arr.join(\";\")); // 1;3,,4;2\n```\n\nWhen used on [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `join()` method iterates empty slots as if they have the value `undefined`.\n\nThe `join()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Joining an array four different ways\n\nThe following example creates an array, `a`, with three elements, then joins\nthe array four times: using the default separator, then a comma and a space, then a plus\nand an empty string.\n\n```js\nconst a = [\"Wind\", \"Water\", \"Fire\"];\na.join(); // 'Wind,Water,Fire'\na.join(\", \"); // 'Wind, Water, Fire'\na.join(\" + \"); // 'Wind + Water + Fire'\na.join(\"\"); // 'WindWaterFire'\n```\n\n### Using join() on sparse arrays\n\n`join()` treats empty slots the same as `undefined` and produces an extra separator:\n\n```js\nconsole.log([1, , 3].join()); // '1,,3'\nconsole.log([1, undefined, 3].join()); // '1,,3'\n```\n\n### Calling join() on non-array objects\n\nThe `join()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 5, // ignored by join() since length is 3\n};\nconsole.log(Array.prototype.join.call(arrayLike));\n// 2,3,4\nconsole.log(Array.prototype.join.call(arrayLike, \".\"));\n// 2.3.4\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.join` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.toString()\")}}\n- {{jsxref(\"TypedArray.prototype.join()\")}}\n- {{jsxref(\"String.prototype.split()\")}}\n"
    },
    "keys": {
      "index.md": "---\ntitle: Array.prototype.keys()\nslug: Web/JavaScript/Reference/Global_Objects/Array/keys\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.keys\n---\n\n{{JSRef}}\n\nThe **`keys()`** method of {{jsxref(\"Array\")}} instances returns a new _[array iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the keys for each index in the array.\n\n{{EmbedInteractiveExample(\"pages/js/array-keys.html\")}}\n\n## Syntax\n\n```js-nolint\nkeys()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Description\n\nWhen used on [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `keys()` method iterates empty slots as if they have the value `undefined`.\n\nThe `keys()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Using keys() on sparse arrays\n\nUnlike {{jsxref(\"Object.keys()\")}}, which only includes keys that actually exist in the array, the `keys()` iterator doesn't ignore holes representing missing properties.\n\n```js\nconst arr = [\"a\", , \"c\"];\nconst sparseKeys = Object.keys(arr);\nconst denseKeys = [...arr.keys()];\nconsole.log(sparseKeys); // ['0', '2']\nconsole.log(denseKeys); // [0, 1, 2]\n```\n\n### Calling keys() on non-array objects\n\nThe `keys()` method reads the `length` property of `this` and then yields all integer indices between 0 and `length - 1`. No index access actually happens.\n\n```js\nconst arrayLike = {\n  length: 3,\n};\nfor (const entry of Array.prototype.keys.call(arrayLike)) {\n  console.log(entry);\n}\n// 0\n// 1\n// 2\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.keys` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.entries()\")}}\n- {{jsxref(\"Array.prototype.values()\")}}\n- [`Array.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)\n- {{jsxref(\"TypedArray.prototype.keys()\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "lastindexof": {
      "index.md": "---\ntitle: Array.prototype.lastIndexOf()\nslug: Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.lastIndexOf\n---\n\n{{JSRef}}\n\nThe **`lastIndexOf()`** method of {{jsxref(\"Array\")}} instances returns the last index at which\na given element can be found in the array, or -1 if it is not present. The array is\nsearched backwards, starting at `fromIndex`.\n\n{{EmbedInteractiveExample(\"pages/js/array-lastindexof.html\")}}\n\n## Syntax\n\n```js-nolint\nlastIndexOf(searchElement)\nlastIndexOf(searchElement, fromIndex)\n```\n\n### Parameters\n\n- `searchElement`\n  - : Element to locate in the array.\n- `fromIndex` {{optional_inline}}\n  - : Zero-based index at which to start searching backwards, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n    - Negative index counts back from the end of the array — if `-array.length <= fromIndex < 0`, `fromIndex + array.length` is used.\n    - If `fromIndex < -array.length`, the array is not searched and `-1` is returned. You can think of it conceptually as starting at a nonexistent position before the beginning of the array and going backwards from there. There are no array elements on the way, so `searchElement` is never found.\n    - If `fromIndex >= array.length` or `fromIndex` is omitted, `array.length - 1` is used, causing the entire array to be searched. You can think of it conceptually as starting at a nonexistent position beyond the end of the array and going backwards from there. It eventually reaches the real end position of the array, at which point it starts searching backwards through the actual array elements.\n\n### Return value\n\nThe last index of `searchElement` in the array; `-1` if not found.\n\n## Description\n\nThe `lastIndexOf()` method compares `searchElement` to elements of the array using [strict equality](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) (the same algorithm used by the `===` operator). [`NaN`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) values are never compared as equal, so `lastIndexOf()` always returns `-1` when `searchElement` is `NaN`.\n\nThe `lastIndexOf()` method skips empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `lastIndexOf()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Using lastIndexOf()\n\nThe following example uses `lastIndexOf()` to locate values in an array.\n\n```js\nconst numbers = [2, 5, 9, 2];\nnumbers.lastIndexOf(2); // 3\nnumbers.lastIndexOf(7); // -1\nnumbers.lastIndexOf(2, 3); // 3\nnumbers.lastIndexOf(2, 2); // 0\nnumbers.lastIndexOf(2, -2); // 0\nnumbers.lastIndexOf(2, -1); // 3\n```\n\nYou cannot use `lastIndexOf()` to search for `NaN`.\n\n```js\nconst array = [NaN];\narray.lastIndexOf(NaN); // -1\n```\n\n### Finding all the occurrences of an element\n\nThe following example uses `lastIndexOf` to find all the indices of an\nelement in a given array, using {{jsxref(\"Array/push\", \"push()\")}} to add them\nto another array as they are found.\n\n```js\nconst indices = [];\nconst array = [\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"];\nconst element = \"a\";\nlet idx = array.lastIndexOf(element);\nwhile (idx !== -1) {\n  indices.push(idx);\n  idx = idx > 0 ? array.lastIndexOf(element, idx - 1) : -1;\n}\n\nconsole.log(indices);\n// [4, 2, 0]\n```\n\nNote that we have to handle the case `idx === 0` separately here because the\nelement will always be found regardless of the `fromIndex` parameter if it is\nthe first element of the array. This is different from the\n{{jsxref(\"Array/indexOf\", \"indexOf()\")}} method.\n\n### Using lastIndexOf() on sparse arrays\n\nYou cannot use `lastIndexOf()` to search for empty slots in sparse arrays.\n\n```js\nconsole.log([1, , 3].lastIndexOf(undefined)); // -1\n```\n\n### Calling lastIndexOf() on non-array objects\n\nThe `lastIndexOf()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 2,\n  3: 5, // ignored by lastIndexOf() since length is 3\n};\nconsole.log(Array.prototype.lastIndexOf.call(arrayLike, 2));\n// 2\nconsole.log(Array.prototype.lastIndexOf.call(arrayLike, 5));\n// -1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.lastIndexOf` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.findIndex()\")}}\n- {{jsxref(\"Array.prototype.findLastIndex()\")}}\n- {{jsxref(\"Array.prototype.indexOf()\")}}\n- {{jsxref(\"TypedArray.prototype.lastIndexOf()\")}}\n- {{jsxref(\"String.prototype.lastIndexOf()\")}}\n"
    },
    "length": {
      "index.md": "---\ntitle: \"Array: length\"\nslug: Web/JavaScript/Reference/Global_Objects/Array/length\npage-type: javascript-instance-data-property\nbrowser-compat: javascript.builtins.Array.length\n---\n\n{{JSRef}}\n\nThe **`length`** data property of an {{jsxref(\"Array\")}} instance represents the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.\n\n{{EmbedInteractiveExample(\"pages/js/array-length.html\", \"shorter\")}}\n\n## Value\n\nA nonnegative integer less than 2<sup>32</sup>.\n\n{{js_property_attributes(1, 0, 0)}}\n\n## Description\n\nThe value of the `length` property is a nonnegative integer with a value less than 2<sup>32</sup>.\n\n```js\nconst listA = [1, 2, 3];\nconst listB = new Array(6);\n\nconsole.log(listA.length);\n// 3\n\nconsole.log(listB.length);\n// 6\n\nlistB.length = 2 ** 32; // 4294967296\n// RangeError: Invalid array length\n\nconst listC = new Array(-100); // Negative numbers are not allowed\n// RangeError: Invalid array length\n```\n\nThe array object observes the `length` property, and automatically syncs the `length` value with the array's content. This means:\n\n- Setting `length` to a value smaller than the current length truncates the array — elements beyond the new `length` are deleted.\n- Setting any array index (a nonnegative integer smaller than 2<sup>32</sup>) beyond the current `length` extends the array — the `length` property is increased to reflect the new highest index.\n- Setting `length` to an invalid value (e.g. a negative number or a non-integer) throws a `RangeError` exception.\n\nWhen `length` is set to a bigger value than the current length, the array is extended by adding [empty slots](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), not actual `undefined` values. Empty slots have some special interactions with array methods; see [array methods and empty slots](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_methods_and_empty_slots).\n\n```js\nconst arr = [1, 2];\nconsole.log(arr);\n// [ 1, 2 ]\n\narr.length = 5; // set array length to 5 while currently 2.\nconsole.log(arr);\n// [ 1, 2, <3 empty items> ]\n\narr.forEach((element) => console.log(element));\n// 1\n// 2\n```\n\nSee also [Relationship between `length` and numerical properties](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#relationship_between_length_and_numerical_properties).\n\n## Examples\n\n### Iterating over an array\n\nIn the following example, the array `numbers` is iterated through by looking at the `length` property. The value in each element is then doubled.\n\n```js\nconst numbers = [1, 2, 3, 4, 5];\nconst length = numbers.length;\nfor (let i = 0; i < length; i++) {\n  numbers[i] *= 2;\n}\n// numbers is now [2, 4, 6, 8, 10]\n```\n\n### Shortening an array\n\nThe following example shortens the array `numbers` to a length of 3 if the current length is greater than 3.\n\n```js\nconst numbers = [1, 2, 3, 4, 5];\n\nif (numbers.length > 3) {\n  numbers.length = 3;\n}\n\nconsole.log(numbers); // [1, 2, 3]\nconsole.log(numbers.length); // 3\nconsole.log(numbers[3]); // undefined; the extra elements are deleted\n```\n\n### Create empty array of fixed length\n\nSetting `length` to a value greater than the current length creates a [sparse array](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\n```js\nconst numbers = [];\nnumbers.length = 3;\nconsole.log(numbers); // [empty x 3]\n```\n\n### Array with non-writable length\n\nThe `length` property is automatically updated by the array when elements are added beyond the current length. If the `length` property is made non-writable, the array will not be able to update it. This causes an error in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode).\n\n```js\n\"use strict\";\n\nconst numbers = [1, 2, 3, 4, 5];\nObject.defineProperty(numbers, \"length\", { writable: false });\nnumbers[5] = 6; // TypeError: Cannot assign to read only property 'length' of object '[object Array]'\nnumbers.push(5); // // TypeError: Cannot assign to read only property 'length' of object '[object Array]'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- [`TypedArray.prototype.length`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length)\n- [`String`: `length`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length)\n- [RangeError: invalid array length](/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length)\n"
    },
    "map": {
      "index.md": "---\ntitle: Array.prototype.map()\nslug: Web/JavaScript/Reference/Global_Objects/Array/map\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.map\n---\n\n{{JSRef}}\n\nThe **`map()`** method of {{jsxref(\"Array\")}} instances creates\na new array populated with the results of calling a provided function on\nevery element in the calling array.\n\n{{EmbedInteractiveExample(\"pages/js/array-map.html\")}}\n\n## Syntax\n\n```js-nolint\nmap(callbackFn)\nmap(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. Its return value is added as a single element in the new array. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n    - `array`\n      - : The array `map()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nA new array with each element being the result of the callback function.\n\n## Description\n\nThe `map()` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array and constructs a new array from the results. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nThe `map()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\nSince `map` builds a new array, calling it without using the returned array is an anti-pattern; use {{jsxref(\"Array/forEach\", \"forEach\")}} or {{jsxref(\"Statements/for...of\", \"for...of\")}} instead.\n\n## Examples\n\n### Mapping an array of numbers to an array of square roots\n\nThe following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array.\n\n```js\nconst numbers = [1, 4, 9];\nconst roots = numbers.map((num) => Math.sqrt(num));\n\n// roots is now     [1, 2, 3]\n// numbers is still [1, 4, 9]\n```\n\n### Using map to reformat objects in an array\n\nThe following code takes an array of objects and creates a new array containing the newly reformatted objects.\n\n```js\nconst kvArray = [\n  { key: 1, value: 10 },\n  { key: 2, value: 20 },\n  { key: 3, value: 30 },\n];\n\nconst reformattedArray = kvArray.map(({ key, value }) => ({ [key]: value }));\n\nconsole.log(reformattedArray); // [{ 1: 10 }, { 2: 20 }, { 3: 30 }]\nconsole.log(kvArray);\n// [\n//   { key: 1, value: 10 },\n//   { key: 2, value: 20 },\n//   { key: 3, value: 30 }\n// ]\n```\n\n### Using parseInt() with map()\n\nIt is common to use the callback with one argument (the element being traversed). Certain functions are also commonly used with one argument, even though they take additional optional arguments. These habits may lead to confusing behaviors. Consider:\n\n```js\n[\"1\", \"2\", \"3\"].map(parseInt);\n```\n\nWhile one might expect `[1, 2, 3]`, the actual result is `[1, NaN, NaN]`.\n\n{{jsxref(\"parseInt\")}} is often used with one argument, but takes two. The first is an expression and the second is the radix to the callback function, `Array.prototype.map` passes 3 arguments: the element, the index, and the array. The third argument is ignored by {{jsxref(\"parseInt\")}} — but _not_ the second one! This is the source of possible confusion.\n\nHere is a concise example of the iteration steps:\n\n```js\n/* first iteration  (index is 0): */ parseInt(\"1\", 0); // 1\n/* second iteration (index is 1): */ parseInt(\"2\", 1); // NaN\n/* third iteration  (index is 2): */ parseInt(\"3\", 2); // NaN\n```\n\nTo solve this, define another function that only takes one argument:\n\n```js\n[\"1\", \"2\", \"3\"].map((str) => parseInt(str, 10)); // [1, 2, 3]\n```\n\nYou can also use the {{jsxref(\"Number\")}} function, which only takes one argument:\n\n```js\n[\"1\", \"2\", \"3\"].map(Number); // [1, 2, 3]\n\n// But unlike parseInt(), Number() will also return a float or (resolved) exponential notation:\n[\"1.1\", \"2.2e2\", \"3e300\"].map(Number); // [1.1, 220, 3e+300]\n\n// For comparison, if we use parseInt() on the array above:\n[\"1.1\", \"2.2e2\", \"3e300\"].map((str) => parseInt(str, 10)); // [1, 2, 3]\n```\n\nSee [A JavaScript optional argument hazard](https://wirfs-brock.com/allen/posts/166) by Allen Wirfs-Brock for more discussions.\n\n### Mapped array contains undefined\n\nWhen {{jsxref(\"undefined\")}} or nothing is returned, the resulting array contains `undefined`. If you want to delete the element instead, chain a {{jsxref(\"Array/filter\", \"filter()\")}} method, or use the {{jsxref(\"Array/flatMap\", \"flatMap()\")}} method and return an empty array to signify deletion.\n\n```js\nconst numbers = [1, 2, 3, 4];\nconst filteredNumbers = numbers.map((num, index) => {\n  if (index < 3) {\n    return num;\n  }\n});\n\n// index goes from 0, so the filterNumbers are 1,2,3 and undefined.\n// filteredNumbers is [1, 2, 3, undefined]\n// numbers is still [1, 2, 3, 4]\n```\n\n### Side-effectful mapping\n\nThe callback can have side effects.\n\n```js\nconst cart = [5, 15, 25];\nlet total = 0;\nconst withTax = cart.map((cost) => {\n  total += cost;\n  return cost * 1.2;\n});\nconsole.log(withTax); // [6, 18, 30]\nconsole.log(total); // 45\n```\n\nThis is not recommended, because copying methods are best used with pure functions. In this case, we can choose to iterate the array twice.\n\n```js\nconst cart = [5, 15, 25];\nconst total = cart.reduce((acc, cost) => acc + cost, 0);\nconst withTax = cart.map((cost) => cost * 1.2);\n```\n\nSometimes this pattern goes to its extreme and the _only_ useful thing that `map()` does is causing side effects.\n\n```js\nconst products = [\n  { name: \"sports car\" },\n  { name: \"laptop\" },\n  { name: \"phone\" },\n];\n\nproducts.map((product) => {\n  product.price = 100;\n});\n```\n\nAs mentioned previously, this is an anti-pattern. If you don't use the return value of `map()`, use `forEach()` or a `for...of` loop instead.\n\n```js\nproducts.forEach((product) => {\n  product.price = 100;\n});\n```\n\nOr, if you want to create a new array instead:\n\n```js\nconst productsWithPrice = products.map((product) => {\n  return { ...product, price: 100 };\n});\n```\n\n### Using the third argument of callbackFn\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `map()` to create a new array where each element is the average of its neighbors and itself.\n\n```js\nconst numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6];\nconst averaged = numbers\n  .filter((num) => num > 0)\n  .map((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    const prev = arr[idx - 1];\n    const next = arr[idx + 1];\n    let count = 1;\n    let total = num;\n    if (prev !== undefined) {\n      count++;\n      total += prev;\n    }\n    if (next !== undefined) {\n      count++;\n      total += next;\n    }\n    const average = total / count;\n    // Keep two decimal places\n    return Math.round(average * 100) / 100;\n  });\nconsole.log(averaged); // [2, 2.67, 2, 3.33, 5, 5.33, 5.67, 4]\n```\n\nThe `array` argument is _not_ the array that is being built — there is no way to access the array being built from the callback function.\n\n### Using map() on sparse arrays\n\nA sparse array remains sparse after `map()`. The indices of empty slots are still empty in the returned array, and the callback function won't be called on them.\n\n```js\nconsole.log(\n  [1, , 3].map((x, index) => {\n    console.log(`Visit ${index}`);\n    return x * 2;\n  }),\n);\n// Visit 0\n// Visit 2\n// [2, empty, 6]\n```\n\n### Calling map() on non-array objects\n\nThe `map()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 5, // ignored by map() since length is 3\n};\nconsole.log(Array.prototype.map.call(arrayLike, (x) => x ** 2));\n// [ 4, 9, 16 ]\n```\n\nThis example shows how to iterate through a collection of objects collected by `querySelectorAll`. This is because `querySelectorAll` returns a `NodeList` (which is a collection of objects). In this case, we return all the selected `option`s' values on the screen:\n\n```js\nconst elems = document.querySelectorAll(\"select option:checked\");\nconst values = Array.prototype.map.call(elems, ({ value }) => value);\n```\n\nYou can also use {{jsxref(\"Array.from()\")}} to transform `elems` to an array, and then access the `map()` method.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.map` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.forEach()\")}}\n- {{jsxref(\"Array.from()\")}}\n- {{jsxref(\"TypedArray.prototype.map()\")}}\n- {{jsxref(\"Map\")}}\n"
    },
    "of": {
      "index.md": "---\ntitle: Array.of()\nslug: Web/JavaScript/Reference/Global_Objects/Array/of\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Array.of\n---\n\n{{JSRef}}\n\nThe **`Array.of()`** static method creates a new `Array`\ninstance from a variable number of arguments, regardless of number or type of the\narguments.\n\n{{EmbedInteractiveExample(\"pages/js/array-of.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nArray.of()\nArray.of(element1)\nArray.of(element1, element2)\nArray.of(element1, element2, /* …, */ elementN)\n```\n\n### Parameters\n\n- `element1`, …, `elementN`\n  - : Elements used to create the array.\n\n### Return value\n\nA new {{jsxref(\"Array\")}} instance.\n\n## Description\n\nThe difference between `Array.of()` and the [`Array()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array) constructor is in the handling of single arguments: `Array.of(7)` creates an array with a single element, `7`, whereas `Array(7)` creates an empty array with a `length` property of `7`. (That implies an array of 7 empty slots, not slots with actual {{jsxref(\"undefined\")}} values.)\n\n```js\nArray.of(7); // [7]\nArray(7); // array of 7 empty slots\n\nArray.of(1, 2, 3); // [1, 2, 3]\nArray(1, 2, 3); // [1, 2, 3]\n```\n\nThe `Array.of()` method is a generic factory method. For example, if a subclass of `Array` inherits the `of()` method, the inherited `of()` method will return new instances of the subclass instead of `Array` instances. In fact, the `this` value can be any constructor function that accepts a single argument representing the length of the new array, and the constructor will be called with the number of arguments passed to `of()`. The final `length` will be set again when all elements are assigned. If the `this` value is not a constructor function, the plain `Array` constructor is used instead.\n\n## Examples\n\n### Using Array.of()\n\n```js\nArray.of(1); // [1]\nArray.of(1, 2, 3); // [1, 2, 3]\nArray.of(undefined); // [undefined]\n```\n\n### Calling of() on non-array constructors\n\nThe `of()` method can be called on any constructor function that accepts a single argument representing the length of the new array.\n\n```js\nfunction NotArray(len) {\n  console.log(\"NotArray called with length\", len);\n}\n\nconsole.log(Array.of.call(NotArray, 1, 2, 3));\n// NotArray called with length 3\n// NotArray { '0': 1, '1': 2, '2': 3, length: 3 }\n\nconsole.log(Array.of.call(Object)); // [Number: 0] { length: 0 }\n```\n\nWhen the `this` value is not a constructor, a plain `Array` object is returned.\n\n```js\nconsole.log(Array.of.call({}, 1)); // [ 1 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.of` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array/Array\", \"Array()\")}}\n- {{jsxref(\"Array.from()\")}}\n- {{jsxref(\"TypedArray.of()\")}}\n"
    },
    "pop": {
      "index.md": "---\ntitle: Array.prototype.pop()\nslug: Web/JavaScript/Reference/Global_Objects/Array/pop\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.pop\n---\n\n{{JSRef}}\n\nThe **`pop()`** method of {{jsxref(\"Array\")}} instances removes the **last**\nelement from an array and returns that element. This method changes the length of the\narray.\n\n{{EmbedInteractiveExample(\"pages/js/array-pop.html\")}}\n\n## Syntax\n\n```js-nolint\npop()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe removed element from the array; {{jsxref(\"undefined\")}} if the array is empty.\n\n## Description\n\nThe `pop()` method removes the last element from an array and returns that value to the caller. If you call `pop()` on an empty array, it returns {{jsxref(\"undefined\")}}.\n\n{{jsxref(\"Array.prototype.shift()\")}} has similar behavior to `pop()`, but applied to the first element in an array.\n\nThe `pop()` method is a mutating method. It changes the length and the content of `this`. In case you want the value of `this` to be the same, but return a new array with the last element removed, you can use [`arr.slice(0, -1)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) instead.\n\nThe `pop()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## Examples\n\n### Removing the last element of an array\n\nThe following code creates the `myFish` array containing four elements, then\nremoves its last element.\n\n```js\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\n\nconst popped = myFish.pop();\n\nconsole.log(myFish); // ['angel', 'clown', 'mandarin' ]\n\nconsole.log(popped); // 'sturgeon'\n```\n\n### Calling pop() on non-array objects\n\nThe `pop()` method reads the `length` property of `this`. If the [normalized length](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#normalization_of_the_length_property) is 0, `length` is set to `0` again (whereas it may be negative or `undefined` before). Otherwise, the property at `length - 1` is returned and [deleted](/en-US/docs/Web/JavaScript/Reference/Operators/delete).\n\n```js\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n};\nconsole.log(Array.prototype.pop.call(arrayLike));\n// 4\nconsole.log(arrayLike);\n// { length: 2, unrelated: 'foo' }\n\nconst plainObj = {};\n// There's no length property, so the length is 0\nArray.prototype.pop.call(plainObj);\nconsole.log(plainObj);\n// { length: 0 }\n```\n\n### Using an object in an array-like fashion\n\n`push` and `pop` are intentionally generic, and we can use that to our advantage — as the following example shows.\n\nNote that in this example, we don't create an array to store a collection of objects. Instead, we store the collection on the object itself and use `call` on `Array.prototype.push` and `Array.prototype.pop` to trick those methods into thinking we're dealing with an array.\n\n```js\nconst collection = {\n  length: 0,\n  addElements(...elements) {\n    // obj.length will be incremented automatically\n    // every time an element is added.\n\n    // Returning what push returns; that is\n    // the new value of length property.\n    return [].push.call(this, ...elements);\n  },\n  removeElement() {\n    // obj.length will be decremented automatically\n    // every time an element is removed.\n\n    // Returning what pop returns; that is\n    // the removed element.\n    return [].pop.call(this);\n  },\n};\n\ncollection.addElements(10, 20, 30);\nconsole.log(collection.length); // 3\ncollection.removeElement();\nconsole.log(collection.length); // 2\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.push()\")}}\n- {{jsxref(\"Array.prototype.shift()\")}}\n- {{jsxref(\"Array.prototype.unshift()\")}}\n- {{jsxref(\"Array.prototype.concat()\")}}\n- {{jsxref(\"Array.prototype.splice()\")}}\n"
    },
    "push": {
      "index.md": "---\ntitle: Array.prototype.push()\nslug: Web/JavaScript/Reference/Global_Objects/Array/push\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.push\n---\n\n{{JSRef}}\n\nThe **`push()`** method of {{jsxref(\"Array\")}} instances adds the specified elements to the end of\nan array and returns the new length of the array.\n\n{{EmbedInteractiveExample(\"pages/js/array-push.html\")}}\n\n## Syntax\n\n```js-nolint\npush()\npush(element1)\npush(element1, element2)\npush(element1, element2, /* …, */ elementN)\n```\n\n### Parameters\n\n- `element1`, …, `elementN`\n  - : The element(s) to add to the end of the array.\n\n### Return value\n\nThe new {{jsxref(\"Array/length\", \"length\")}} property of the object upon which the method was called.\n\n## Description\n\nThe `push()` method appends values to an array.\n\n{{jsxref(\"Array.prototype.unshift()\")}} has similar behavior to `push()`, but applied to the start of an array.\n\nThe `push()` method is a [mutating method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It changes the length and the content of `this`. In case you want the value of `this` to be the same, but return a new array with elements appended to the end, you can use [`arr.concat([element0, element1, /* ... ,*/ elementN])`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) instead. Notice that the elements are wrapped in an extra array — otherwise, if the element is an array itself, it would be spread instead of pushed as a single element due to the behavior of `concat()`.\n\nThe `push()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## Examples\n\n### Adding elements to an array\n\nThe following code creates the `sports` array containing two elements, then\nappends two elements to it. The `total` variable contains the new length of\nthe array.\n\n```js\nconst sports = [\"soccer\", \"baseball\"];\nconst total = sports.push(\"football\", \"swimming\");\n\nconsole.log(sports); // ['soccer', 'baseball', 'football', 'swimming']\nconsole.log(total); // 4\n```\n\n### Merging two arrays\n\nThis example uses {{jsxref(\"Operators/Spread_syntax\", \"spread syntax\", \"\", \"1\")}} to push all elements from a\nsecond array into the first one.\n\n```js\nconst vegetables = [\"parsnip\", \"potato\"];\nconst moreVegs = [\"celery\", \"beetroot\"];\n\n// Merge the second array into the first one\nvegetables.push(...moreVegs);\n\nconsole.log(vegetables); // ['parsnip', 'potato', 'celery', 'beetroot']\n```\n\nMerging two arrays can also be done with the {{jsxref(\"Array/concat\", \"concat()\")}} method.\n\n### Calling push() on non-array objects\n\nThe `push()` method reads the `length` property of `this`. It then sets each index of `this` starting at `length` with the arguments passed to `push()`. Finally, it sets the `length` to the previous length plus the number of pushed elements.\n\n```js\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n};\nArray.prototype.push.call(arrayLike, 1, 2);\nconsole.log(arrayLike);\n// { '2': 4, '3': 1, '4': 2, length: 5, unrelated: 'foo' }\n\nconst plainObj = {};\n// There's no length property, so the length is 0\nArray.prototype.push.call(plainObj, 1, 2);\nconsole.log(plainObj);\n// { '0': 1, '1': 2, length: 2 }\n```\n\n### Using an object in an array-like fashion\n\nAs mentioned above, `push` is intentionally generic, and we can use that to\nour advantage. `Array.prototype.push` can work on an object just fine, as\nthis example shows.\n\nNote that we don't create an array to store a collection of objects. Instead, we store\nthe collection on the object itself and use `call` on\n`Array.prototype.push` to trick the method into thinking we are dealing with\nan array—and it just works, thanks to the way JavaScript allows us to establish the\nexecution context in any way we want.\n\n```js\nconst obj = {\n  length: 0,\n\n  addElem(elem) {\n    // obj.length is automatically incremented\n    // every time an element is added.\n    [].push.call(this, elem);\n  },\n};\n\n// Let's add some empty objects just to illustrate.\nobj.addElem({});\nobj.addElem({});\nconsole.log(obj.length); // 2\n```\n\nNote that although `obj` is not an array, the method `push`\nsuccessfully incremented `obj`'s `length` property just like if we\nwere dealing with an actual array.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.push` in `core-js` with fixes of this method](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.pop()\")}}\n- {{jsxref(\"Array.prototype.shift()\")}}\n- {{jsxref(\"Array.prototype.unshift()\")}}\n- {{jsxref(\"Array.prototype.concat()\")}}\n- {{jsxref(\"Array.prototype.splice()\")}}\n"
    },
    "reduce": {
      "index.md": "---\ntitle: Array.prototype.reduce()\nslug: Web/JavaScript/Reference/Global_Objects/Array/reduce\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.reduce\n---\n\n{{JSRef}}\n\nThe **`reduce()`** method of {{jsxref(\"Array\")}} instances executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.\n\nThe first time that the callback is run there is no \"return value of the previous calculation\". If supplied, an initial value may be used in its place. Otherwise the array element at index 0 is used as the initial value and iteration starts from the next element (index 1 instead of index 0).\n\n{{EmbedInteractiveExample(\"pages/js/array-reduce.html\")}}\n\n## Syntax\n\n```js-nolint\nreduce(callbackFn)\nreduce(callbackFn, initialValue)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. Its return value becomes the value of the `accumulator` parameter on the next invocation of `callbackFn`. For the last invocation, the return value becomes the return value of `reduce()`. The function is called with the following arguments:\n    - `accumulator`\n      - : The value resulting from the previous call to `callbackFn`. On the first call, its value is `initialValue` if the latter is specified; otherwise its value is `array[0]`.\n    - `currentValue`\n      - : The value of the current element. On the first call, its value is `array[0]` if `initialValue` is specified; otherwise its value is `array[1]`.\n    - `currentIndex`\n      - : The index position of `currentValue` in the array. On the first call, its value is `0` if `initialValue` is specified, otherwise `1`.\n    - `array`\n      - : The array `reduce()` was called upon.\n- `initialValue` {{optional_inline}}\n  - : A value to which `accumulator` is initialized the first time the callback is called.\n    If `initialValue` is specified, `callbackFn` starts executing with the first value in the array as `currentValue`.\n    If `initialValue` is _not_ specified, `accumulator` is initialized to the first value in the array, and `callbackFn` starts executing with the second value in the array as `currentValue`. In this case, if the array is empty (so that there's no first value to return as `accumulator`), an error is thrown.\n\n### Return value\n\nThe value that results from running the \"reducer\" callback function to completion over the entire array.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if the array contains no elements and `initialValue` is not provided.\n\n## Description\n\nThe `reduce()` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It runs a \"reducer\" callback function over all elements in the array, in ascending-index order, and accumulates them into a single value. Every time, the return value of `callbackFn` is passed into `callbackFn` again on next invocation as `accumulator`. The final value of `accumulator` (which is the value returned from `callbackFn` on the final iteration of the array) becomes the return value of `reduce()`. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nUnlike other [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods), `reduce()` does not accept a `thisArg` argument. `callbackFn` is always called with `undefined` as `this`, which gets substituted with `globalThis` if `callbackFn` is non-strict.\n\n`reduce()` is a central concept in [functional programming](https://en.wikipedia.org/wiki/Functional_programming), where it's not possible to mutate any value, so in order to accumulate all values in an array, one must return a new accumulator value on every iteration. This convention propagates to JavaScript's `reduce()`: you should use [spreading](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) or other copying methods where possible to create new arrays and objects as the accumulator, rather than mutating the existing one. If you decided to mutate the accumulator instead of copying it, remember to still return the modified object in the callback, or the next iteration will receive undefined. However, note that copying the accumulator may in turn lead to increased memory usage and degraded performance — see [When to not use reduce()](#when_to_not_use_reduce) for more details. In such cases, to avoid bad performance and unreadable code, it's better to use a simple `for` loop instead.\n\nThe `reduce()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n### Edge cases\n\nIf the array only has one element (regardless of position) and no `initialValue` is provided, or if `initialValue` is provided but the array is empty, the solo value will be returned _without_ calling `callbackFn`.\n\nIf `initialValue` is provided and the array is not empty, then the reduce method will always invoke the callback function starting at index 0.\n\nIf `initialValue` is not provided then the reduce method will act differently for arrays with length larger than 1, equal to 1 and 0, as shown in the following example:\n\n```js\nconst getMax = (a, b) => Math.max(a, b);\n\n// callback is invoked for each element in the array starting at index 0\n[1, 100].reduce(getMax, 50); // 100\n[50].reduce(getMax, 10); // 50\n\n// callback is invoked once for element at index 1\n[1, 100].reduce(getMax); // 100\n\n// callback is not invoked\n[50].reduce(getMax); // 50\n[].reduce(getMax, 1); // 1\n\n[].reduce(getMax); // TypeError\n```\n\n## Examples\n\n### How reduce() works without an initial value\n\nThe code below shows what happens if we call `reduce()` with an array and no initial value.\n\n```js\nconst array = [15, 16, 17, 18, 19];\n\nfunction reducer(accumulator, currentValue, index) {\n  const returns = accumulator + currentValue;\n  console.log(\n    `accumulator: ${accumulator}, currentValue: ${currentValue}, index: ${index}, returns: ${returns}`,\n  );\n  return returns;\n}\n\narray.reduce(reducer);\n```\n\nThe callback would be invoked four times, with the arguments and return values in each call being as follows:\n\n|             | `accumulator` | `currentValue` | `index` | Return value |\n| ----------- | ------------- | -------------- | ------- | ------------ |\n| First call  | `15`          | `16`           | `1`     | `31`         |\n| Second call | `31`          | `17`           | `2`     | `48`         |\n| Third call  | `48`          | `18`           | `3`     | `66`         |\n| Fourth call | `66`          | `19`           | `4`     | `85`         |\n\nThe `array` parameter never changes through the process — it's always `[15, 16, 17, 18, 19]`. The value returned by `reduce()` would be that of the last callback invocation (`85`).\n\n### How reduce() works with an initial value\n\nHere we reduce the same array using the same algorithm, but with an `initialValue` of `10` passed as the second argument to `reduce()`:\n\n```js\n[15, 16, 17, 18, 19].reduce(\n  (accumulator, currentValue) => accumulator + currentValue,\n  10,\n);\n```\n\nThe callback would be invoked five times, with the arguments and return values in each call being as follows:\n\n|             | `accumulator` | `currentValue` | `index` | Return value |\n| ----------- | ------------- | -------------- | ------- | ------------ |\n| First call  | `10`          | `15`           | `0`     | `25`         |\n| Second call | `25`          | `16`           | `1`     | `41`         |\n| Third call  | `41`          | `17`           | `2`     | `58`         |\n| Fourth call | `58`          | `18`           | `3`     | `76`         |\n| Fifth call  | `76`          | `19`           | `4`     | `95`         |\n\nThe value returned by `reduce()` in this case would be `95`.\n\n### Sum of values in an object array\n\nTo sum up the values contained in an array of objects, you **must** supply\nan `initialValue`, so that each item passes through your function.\n\n```js\nconst objects = [{ x: 1 }, { x: 2 }, { x: 3 }];\nconst sum = objects.reduce(\n  (accumulator, currentValue) => accumulator + currentValue.x,\n  0,\n);\n\nconsole.log(sum); // 6\n```\n\n### Function sequential piping\n\nThe `pipe` function takes a sequence of functions and returns a new function. When the new function is called with an argument, the sequence of functions are called in order, which each one receiving the return value of the previous function.\n\n```js\nconst pipe =\n  (...functions) =>\n  (initialValue) =>\n    functions.reduce((acc, fn) => fn(acc), initialValue);\n\n// Building blocks to use for composition\nconst double = (x) => 2 * x;\nconst triple = (x) => 3 * x;\nconst quadruple = (x) => 4 * x;\n\n// Composed functions for multiplication of specific values\nconst multiply6 = pipe(double, triple);\nconst multiply9 = pipe(triple, triple);\nconst multiply16 = pipe(quadruple, quadruple);\nconst multiply24 = pipe(double, triple, quadruple);\n\n// Usage\nmultiply6(6); // 36\nmultiply9(9); // 81\nmultiply16(16); // 256\nmultiply24(10); // 240\n```\n\n### Running promises in sequence\n\n[Promise sequencing](/en-US/docs/Web/JavaScript/Guide/Using_promises#composition) is essentially function piping demonstrated in the previous section, except done asynchronously.\n\n```js\n// Compare this with pipe: fn(acc) is changed to acc.then(fn),\n// and initialValue is ensured to be a promise\nconst asyncPipe =\n  (...functions) =>\n  (initialValue) =>\n    functions.reduce((acc, fn) => acc.then(fn), Promise.resolve(initialValue));\n\n// Building blocks to use for composition\nconst p1 = async (a) => a * 5;\nconst p2 = async (a) => a * 2;\n// The composed functions can also return non-promises, because the values are\n// all eventually wrapped in promises\nconst f3 = (a) => a * 3;\nconst p4 = async (a) => a * 4;\n\nasyncPipe(p1, p2, f3, p4)(10).then(console.log); // 1200\n```\n\n`asyncPipe` can also be implemented using `async`/`await`, which better demonstrates its similarity with `pipe`:\n\n```js\nconst asyncPipe =\n  (...functions) =>\n  (initialValue) =>\n    functions.reduce(async (acc, fn) => fn(await acc), initialValue);\n```\n\n### Using reduce() with sparse arrays\n\n`reduce()` skips missing elements in sparse arrays, but it does not skip `undefined` values.\n\n```js\nconsole.log([1, 2, , 4].reduce((a, b) => a + b)); // 7\nconsole.log([1, 2, undefined, 4].reduce((a, b) => a + b)); // NaN\n```\n\n### Calling reduce() on non-array objects\n\nThe `reduce()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 99, // ignored by reduce() since length is 3\n};\nconsole.log(Array.prototype.reduce.call(arrayLike, (x, y) => x + y));\n// 9\n```\n\n### When to not use reduce()\n\nMultipurpose higher-order functions like `reduce()` can be powerful but sometimes difficult to understand, especially for less-experienced JavaScript developers. If code becomes clearer when using other array methods, developers must weigh the readability tradeoff against the other benefits of using `reduce()`.\n\nNote that `reduce()` is always equivalent to a `for...of` loop, except that instead of mutating a variable in the upper scope, we now return the new value for each iteration:\n\n```js\nconst val = array.reduce((acc, cur) => update(acc, cur), initialValue);\n\n// Is equivalent to:\nlet val = initialValue;\nfor (const cur of array) {\n  val = update(val, cur);\n}\n```\n\nAs previously stated, the reason why people may want to use `reduce()` is to mimic functional programming practices of immutable data. Therefore, developers who uphold the immutability of the accumulator often copy the entire accumulator for each iteration, like this:\n\n```js example-bad\nconst names = [\"Alice\", \"Bob\", \"Tiff\", \"Bruce\", \"Alice\"];\nconst countedNames = names.reduce((allNames, name) => {\n  const currCount = Object.hasOwn(allNames, name) ? allNames[name] : 0;\n  return {\n    ...allNames,\n    [name]: currCount + 1,\n  };\n}, {});\n```\n\nThis code is ill-performing, because each iteration has to copy the entire `allNames` object, which could be big, depending how many unique names there are. This code has worst-case `O(N^2)` performance, where `N` is the length of `names`.\n\nA better alternative is to _mutate_ the `allNames` object on each iteration. However, if `allNames` gets mutated anyway, you may want to convert the `reduce()` to a simple `for` loop instead, which is much clearer:\n\n```js example-bad\nconst names = [\"Alice\", \"Bob\", \"Tiff\", \"Bruce\", \"Alice\"];\nconst countedNames = names.reduce((allNames, name) => {\n  const currCount = allNames[name] ?? 0;\n  allNames[name] = currCount + 1;\n  // return allNames, otherwise the next iteration receives undefined\n  return allNames;\n}, Object.create(null));\n```\n\n```js example-good\nconst names = [\"Alice\", \"Bob\", \"Tiff\", \"Bruce\", \"Alice\"];\nconst countedNames = Object.create(null);\nfor (const name of names) {\n  const currCount = countedNames[name] ?? 0;\n  countedNames[name] = currCount + 1;\n}\n```\n\nTherefore, if your accumulator is an array or an object and you are copying the array or object on each iteration, you may accidentally introduce quadratic complexity into your code, causing performance to quickly degrade on large data. This has happened in real-world code — see for example [Making Tanstack Table 1000x faster with a 1 line change](https://jpcamara.com/2023/03/07/making-tanstack-table.html).\n\nSome of the acceptable use cases of `reduce()` are given above (most notably, summing an array, promise sequencing, and function piping). There are other cases where better alternatives than `reduce()` exist.\n\n- Flattening an array of arrays. Use {{jsxref(\"Array/flat\", \"flat()\")}} instead.\n\n  ```js example-bad\n  const flattened = array.reduce((acc, cur) => acc.concat(cur), []);\n  ```\n\n  ```js example-good\n  const flattened = array.flat();\n  ```\n\n- Grouping objects by a property. Use {{jsxref(\"Object.groupBy()\")}} instead.\n\n  ```js example-bad\n  const groups = array.reduce((acc, obj) => {\n    const key = obj.name;\n    const curGroup = acc[key] ?? [];\n    return { ...acc, [key]: [...curGroup, obj] };\n  }, {});\n  ```\n\n  ```js example-good\n  const groups = Object.groupBy(array, (obj) => obj.name);\n  ```\n\n- Concatenating arrays contained in an array of objects. Use {{jsxref(\"Array/flatMap\", \"flatMap()\")}} instead.\n\n  ```js example-bad\n  const friends = [\n    { name: \"Anna\", books: [\"Bible\", \"Harry Potter\"] },\n    { name: \"Bob\", books: [\"War and peace\", \"Romeo and Juliet\"] },\n    { name: \"Alice\", books: [\"The Lord of the Rings\", \"The Shining\"] },\n  ];\n  const allBooks = friends.reduce((acc, cur) => [...acc, ...cur.books], []);\n  ```\n\n  ```js example-good\n  const allBooks = friends.flatMap((person) => person.books);\n  ```\n\n- Removing duplicate items in an array. Use {{jsxref(\"Set\")}} and {{jsxref(\"Array.from()\")}} instead.\n\n  ```js example-bad\n  const uniqArray = array.reduce(\n    (acc, cur) => (acc.includes(cur) ? acc : [...acc, cur]),\n    [],\n  );\n  ```\n\n  ```js example-good\n  const uniqArray = Array.from(new Set(array));\n  ```\n\n- Eliminating or adding elements in an array. Use {{jsxref(\"Array/flatMap\", \"flatMap()\")}} instead.\n\n  ```js example-bad\n  // Takes an array of numbers and splits perfect squares into its square roots\n  const roots = array.reduce((acc, cur) => {\n    if (cur < 0) return acc;\n    const root = Math.sqrt(cur);\n    if (Number.isInteger(root)) return [...acc, root, root];\n    return [...acc, cur];\n  }, []);\n  ```\n\n  ```js example-good\n  const roots = array.flatMap((val) => {\n    if (val < 0) return [];\n    const root = Math.sqrt(val);\n    if (Number.isInteger(root)) return [root, root];\n    return [val];\n  });\n  ```\n\n  If you are only eliminating elements from an array, you also can use {{jsxref(\"Array/filter\", \"filter()\")}}.\n\n- Searching for elements or testing if elements satisfy a condition. Use {{jsxref(\"Array/find\", \"find()\")}} and {{jsxref(\"Array/find\", \"findIndex()\")}}, or {{jsxref(\"Array/some\", \"some()\")}} and {{jsxref(\"Array/every\", \"every()\")}} instead. These methods have the additional benefit that they return as soon as the result is certain, without iterating the entire array.\n\n  ```js example-bad\n  const allEven = array.reduce((acc, cur) => acc && cur % 2 === 0, true);\n  ```\n\n  ```js example-good\n  const allEven = array.every((val) => val % 2 === 0);\n  ```\n\nIn cases where `reduce()` is the best choice, documentation and semantic variable naming can help mitigate readability drawbacks.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.reduce` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.map()\")}}\n- {{jsxref(\"Array.prototype.flat()\")}}\n- {{jsxref(\"Array.prototype.flatMap()\")}}\n- {{jsxref(\"Array.prototype.reduceRight()\")}}\n- {{jsxref(\"TypedArray.prototype.reduce()\")}}\n- {{jsxref(\"Object.groupBy()\")}}\n- {{jsxref(\"Map.groupBy()\")}}\n"
    },
    "reduceright": {
      "index.md": "---\ntitle: Array.prototype.reduceRight()\nslug: Web/JavaScript/Reference/Global_Objects/Array/reduceRight\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.reduceRight\n---\n\n{{JSRef}}\n\nThe **`reduceRight()`** method of {{jsxref(\"Array\")}} instances applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.\n\nSee also {{jsxref(\"Array.prototype.reduce()\")}} for left-to-right.\n\n{{EmbedInteractiveExample(\"pages/js/array-reduce-right.html\")}}\n\n## Syntax\n\n```js-nolint\nreduceRight(callbackFn)\nreduceRight(callbackFn, initialValue)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. Its return value becomes the value of the `accumulator` parameter on the next invocation of `callbackFn`. For the last invocation, the return value becomes the return value of `reduceRight()`. The function is called with the following arguments:\n    - `accumulator`\n      - : The value resulting from the previous call to `callbackFn`. On the first call, its value is `initialValue` if the latter is specified; otherwise its value is the last element of the array.\n    - `currentValue`\n      - : The value of the current element. On the first call, its value is the last element if `initialValue` is specified; otherwise its value is the second-to-last element.\n    - `currentIndex`\n      - : The index position of `currentValue` in the array. On the first call, its value is `array.length - 1` if `initialValue` is specified, otherwise `array.length - 2`.\n    - `array`\n      - : The array `reduceRight()` was called upon.\n- `initialValue` {{optional_inline}}\n  - : Value to use as accumulator to the first call of the `callbackFn`. If no initial value is supplied, the last element in the array will be used and skipped. Calling `reduceRight()` on an empty array without an initial value creates a `TypeError`.\n\n### Return value\n\nThe value that results from the reduction.\n\n## Description\n\nThe `reduceRight()` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It runs a \"reducer\" callback function over all elements in the array, in descending-index order, and accumulates them into a single value. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\nUnlike other [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods), `reduceRight()` does not accept a `thisArg` argument. `callbackFn` is always called with `undefined` as `this`, which gets substituted with `globalThis` if `callbackFn` is non-strict.\n\nThe `reduceRight()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\nAll caveats about `reduce` discussed in [when not to use reduce()](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#when_not_to_use_reduce) apply to `reduceRight` as well. Because JavaScript has no lazy evaluation semantics, there is no performance difference between `reduce` and `reduceRight`.\n\n## Examples\n\n### How reduceRight() works without an initial value\n\nThe call to the reduceRight `callbackFn` would look something like this:\n\n```js\narr.reduceRight((accumulator, currentValue, index, array) => {\n  // …\n});\n```\n\nThe first time the function is called, the `accumulator` and `currentValue` can be one of two values. If an `initialValue` was provided in the call to `reduceRight`, then `accumulator` will be equal to `initialValue` and `currentValue` will be equal to the last value in the array. If no `initialValue` was provided, then `accumulator` will be equal to the last value in the array and `currentValue` will be equal to the second-to-last value.\n\nIf the array is empty and no `initialValue` was provided, {{jsxref(\"TypeError\")}} would be thrown. If the array has only one element (regardless of position) and no `initialValue` was provided, or if `initialValue` is provided but the array is empty, the solo value would be returned without calling `callbackFn`.\n\nSome example run-throughs of the function would look like this:\n\n```js\n[0, 1, 2, 3, 4].reduceRight(\n  (accumulator, currentValue, index, array) => accumulator + currentValue,\n);\n```\n\nThe callback would be invoked four times, with the arguments and return values in each call being as follows:\n\n|             | `accumulator` | `currentValue` | `index` | Return value |\n| ----------- | ------------- | -------------- | ------- | ------------ |\n| First call  | `4`           | `3`            | `3`     | `7`          |\n| Second call | `7`           | `2`            | `2`     | `9`          |\n| Third call  | `9`           | `1`            | `1`     | `10`         |\n| Fourth call | `10`          | `0`            | `0`     | `10`         |\n\nThe `array` parameter never changes through the process — it's always `[0, 1, 2, 3, 4]`. The value returned by `reduceRight` would be that of the last callback invocation (`10`).\n\n### How reduceRight() works with an initial value\n\nHere we reduce the same array using the same algorithm, but with an `initialValue` of `10` passed as the second argument to `reduceRight()`:\n\n```js\n[0, 1, 2, 3, 4].reduceRight(\n  (accumulator, currentValue, index, array) => accumulator + currentValue,\n  10,\n);\n```\n\n|             | `accumulator` | `currentValue` | `index` | Return value |\n| ----------- | ------------- | -------------- | ------- | ------------ |\n| First call  | `10`          | `4`            | `4`     | `14`         |\n| Second call | `14`          | `3`            | `3`     | `17`         |\n| Third call  | `17`          | `2`            | `2`     | `19`         |\n| Fourth call | `19`          | `1`            | `1`     | `20`         |\n| Fifth call  | `20`          | `0`            | `0`     | `20`         |\n\nThe value returned by `reduceRight` this time would be, of course, `20`.\n\n### Sum up all values within an array\n\n```js\nconst sum = [0, 1, 2, 3].reduceRight((a, b) => a + b);\n// sum is 6\n```\n\n### Run a list of asynchronous functions with callbacks in series each passing their results to the next\n\n```js\nconst waterfall =\n  (...functions) =>\n  (callback, ...args) =>\n    functions.reduceRight(\n      (composition, fn) =>\n        (...results) =>\n          fn(composition, ...results),\n      callback,\n    )(...args);\n\nconst randInt = (max) => Math.floor(Math.random() * max);\n\nconst add5 = (callback, x) => {\n  setTimeout(callback, randInt(1000), x + 5);\n};\nconst mult3 = (callback, x) => {\n  setTimeout(callback, randInt(1000), x * 3);\n};\nconst sub2 = (callback, x) => {\n  setTimeout(callback, randInt(1000), x - 2);\n};\nconst split = (callback, x) => {\n  setTimeout(callback, randInt(1000), x, x);\n};\nconst add = (callback, x, y) => {\n  setTimeout(callback, randInt(1000), x + y);\n};\nconst div4 = (callback, x) => {\n  setTimeout(callback, randInt(1000), x / 4);\n};\n\nconst computation = waterfall(add5, mult3, sub2, split, add, div4);\ncomputation(console.log, 5); // Logs 14\n\n// same as:\n\nconst computation2 = (input, callback) => {\n  const f6 = (x) => div4(callback, x);\n  const f5 = (x, y) => add(f6, x, y);\n  const f4 = (x) => split(f5, x);\n  const f3 = (x) => sub2(f4, x);\n  const f2 = (x) => mult3(f3, x);\n  add5(f2, input);\n};\n```\n\n### Difference between reduce and reduceRight\n\n```js\nconst a = [\"1\", \"2\", \"3\", \"4\", \"5\"];\nconst left = a.reduce((prev, cur) => prev + cur);\nconst right = a.reduceRight((prev, cur) => prev + cur);\n\nconsole.log(left); // \"12345\"\nconsole.log(right); // \"54321\"\n```\n\n### Defining composable functions\n\nFunction composition is a mechanism for combining functions, in which the output of each function is passed into the next one, and the output of the last function is the final result. In this example we use `reduceRight()` to implement function composition.\n\nSee also [Function composition](<https://en.wikipedia.org/wiki/Function_composition_(computer_science)>) on Wikipedia.\n\n```js\nconst compose =\n  (...args) =>\n  (value) =>\n    args.reduceRight((acc, fn) => fn(acc), value);\n\n// Increment passed number\nconst inc = (n) => n + 1;\n\n// Doubles the passed value\nconst double = (n) => n * 2;\n\n// using composition function\nconsole.log(compose(double, inc)(2)); // 6\n\n// using composition function\nconsole.log(compose(inc, double)(2)); // 5\n```\n\n### Using reduceRight() with sparse arrays\n\n`reduceRight()` skips missing elements in sparse arrays, but it does not skip `undefined` values.\n\n```js\nconsole.log([1, 2, , 4].reduceRight((a, b) => a + b)); // 7\nconsole.log([1, 2, undefined, 4].reduceRight((a, b) => a + b)); // NaN\n```\n\n### Calling reduceRight() on non-array objects\n\nThe `reduceRight()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 99, // ignored by reduceRight() since length is 3\n};\nconsole.log(Array.prototype.reduceRight.call(arrayLike, (x, y) => x - y));\n// -1, which is 4 - 3 - 2\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.reduceRight` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.map()\")}}\n- {{jsxref(\"Array.prototype.flat()\")}}\n- {{jsxref(\"Array.prototype.flatMap()\")}}\n- {{jsxref(\"Array.prototype.reduce()\")}}\n- {{jsxref(\"TypedArray.prototype.reduceRight()\")}}\n- {{jsxref(\"Object.groupBy()\")}}\n- {{jsxref(\"Map.groupBy()\")}}\n"
    },
    "reverse": {
      "index.md": "---\ntitle: Array.prototype.reverse()\nslug: Web/JavaScript/Reference/Global_Objects/Array/reverse\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.reverse\n---\n\n{{JSRef}}\n\nThe **`reverse()`** method of {{jsxref(\"Array\")}} instances reverses an array _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_ and returns the reference to the same array, the first array element now becoming the last, and the last array element becoming the first. In other words, elements order in the array will be turned towards the direction opposite to that previously stated.\n\nTo reverse the elements in an array without mutating the original array, use {{jsxref(\"Array/toReversed\", \"toReversed()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/array-reverse.html\")}}\n\n## Syntax\n\n```js-nolint\nreverse()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe reference to the original array, now reversed. Note that the array is reversed _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_, and no copy is made.\n\n## Description\n\nThe `reverse()` method transposes the elements of the calling array object in\nplace, mutating the array, and returning a reference to the array.\n\nThe `reverse()` method preserves empty slots. If the source array is [sparse](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the empty slots' corresponding new indices are [deleted](/en-US/docs/Web/JavaScript/Reference/Operators/delete) and also become empty slots.\n\nThe `reverse()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## Examples\n\n### Reversing the elements in an array\n\nThe following example creates an array `items`, containing three elements, then\nreverses the array. The call to `reverse()` returns a reference to the\nreversed array `items`.\n\n```js\nconst items = [1, 2, 3];\nconsole.log(items); // [1, 2, 3]\n\nitems.reverse();\nconsole.log(items); // [3, 2, 1]\n```\n\n### The reverse() method returns the reference to the same array\n\nThe `reverse()` method returns reference to the original array, so mutating the returned array will mutate the original array as well.\n\n```js\nconst numbers = [3, 2, 4, 1, 5];\nconst reversed = numbers.reverse();\n// numbers and reversed are both in reversed order [5, 1, 4, 2, 3]\nreversed[0] = 5;\nconsole.log(numbers[0]); // 5\n```\n\nIn case you want `reverse()` to not mutate the original array, but return a [shallow-copied](/en-US/docs/Glossary/Shallow_copy) array like other array methods (e.g. [`map()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)) do, use the {{jsxref(\"Array/toReversed\", \"toReversed()\")}} method. Alternatively, you can do a shallow copy before calling `reverse()`, using the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) or [`Array.from()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).\n\n```js\nconst numbers = [3, 2, 4, 1, 5];\n// [...numbers] creates a shallow copy, so reverse() does not mutate the original\nconst reverted = [...numbers].reverse();\nreverted[0] = 5;\nconsole.log(numbers[0]); // 3\n```\n\n### Using reverse() on sparse arrays\n\nSparse arrays remain sparse after calling `reverse()`. Empty slots are copied over to their respective new indices as empty slots.\n\n```js\nconsole.log([1, , 3].reverse()); // [3, empty, 1]\nconsole.log([1, , 3, 4].reverse()); // [4, 3, empty, 1]\n```\n\n### Calling reverse() on non-array objects\n\nThe `reverse()` method reads the `length` property of `this`. It then visits each property having an integer key between `0` and `length / 2`, and swaps the two corresponding indices on both ends, [deleting](/en-US/docs/Web/JavaScript/Reference/Operators/delete) any destination property for which the source property did not exist.\n\n```js\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n  3: 33, // ignored by reverse() since length is 3\n};\nconsole.log(Array.prototype.reverse.call(arrayLike));\n// { 0: 4, 3: 33, length: 3, unrelated: 'foo' }\n// The index 2 is deleted because there was no index 0 present originally\n// The index 3 is unchanged since the length is 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.reverse` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.join()\")}}\n- {{jsxref(\"Array.prototype.sort()\")}}\n- {{jsxref(\"Array.prototype.toReversed()\")}}\n- {{jsxref(\"TypedArray.prototype.reverse()\")}}\n"
    },
    "shift": {
      "index.md": "---\ntitle: Array.prototype.shift()\nslug: Web/JavaScript/Reference/Global_Objects/Array/shift\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.shift\n---\n\n{{JSRef}}\n\nThe **`shift()`** method of {{jsxref(\"Array\")}} instances removes the **first**\nelement from an array and returns that removed element. This method changes the length\nof the array.\n\n{{EmbedInteractiveExample(\"pages/js/array-shift.html\")}}\n\n## Syntax\n\n```js-nolint\nshift()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe removed element from the array; {{jsxref(\"undefined\")}} if the array is empty.\n\n## Description\n\nThe `shift()` method removes the element at the zeroth index and shifts the\nvalues at consecutive indexes down, then returns the removed value. If the\n{{jsxref(\"Array/length\", \"length\")}} property is 0, {{jsxref(\"undefined\")}} is returned.\n\nThe {{jsxref(\"Array/pop\", \"pop()\")}} method has similar behavior to `shift()`, but applied to the last element in an array.\n\nThe `shift()` method is a [mutating method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It changes the length and the content of `this`. In case you want the value of `this` to be the same, but return a new array with the first element removed, you can use [`arr.slice(1)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) instead.\n\nThe `shift()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## Examples\n\n### Removing an element from an array\n\nThe following code displays the `myFish` array before and after removing its\nfirst element. It also displays the removed element:\n\n```js\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"];\n\nconsole.log(\"myFish before:\", myFish);\n// myFish before: ['angel', 'clown', 'mandarin', 'surgeon']\n\nconst shifted = myFish.shift();\n\nconsole.log(\"myFish after:\", myFish);\n// myFish after: ['clown', 'mandarin', 'surgeon']\n\nconsole.log(\"Removed this element:\", shifted);\n// Removed this element: angel\n```\n\n### Using shift() method in while loop\n\nThe shift() method is often used in condition inside while loop. In the following\nexample every iteration will remove the next element from an array, until it is empty:\n\n```js\nconst names = [\"Andrew\", \"Tyrone\", \"Paul\", \"Maria\", \"Gayatri\"];\n\nwhile (typeof (i = names.shift()) !== \"undefined\") {\n  console.log(i);\n}\n// Andrew, Tyrone, Paul, Maria, Gayatri\n```\n\n### Calling shift() on non-array objects\n\nThe `shift()` method reads the `length` property of `this`. If the [normalized length](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#normalization_of_the_length_property) is 0, `length` is set to `0` again (whereas it may be negative or `undefined` before). Otherwise, the property at `0` is returned, and the rest of the properties are shifted left by one. The `length` property is decremented by one.\n\n```js\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n};\nconsole.log(Array.prototype.shift.call(arrayLike));\n// undefined, because it is an empty slot\nconsole.log(arrayLike);\n// { '1': 4, length: 2, unrelated: 'foo' }\n\nconst plainObj = {};\n// There's no length property, so the length is 0\nArray.prototype.shift.call(plainObj);\nconsole.log(plainObj);\n// { length: 0 }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.push()\")}}\n- {{jsxref(\"Array.prototype.pop()\")}}\n- {{jsxref(\"Array.prototype.unshift()\")}}\n- {{jsxref(\"Array.prototype.concat()\")}}\n- {{jsxref(\"Array.prototype.splice()\")}}\n"
    },
    "slice": {
      "index.md": "---\ntitle: Array.prototype.slice()\nslug: Web/JavaScript/Reference/Global_Objects/Array/slice\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.slice\n---\n\n{{JSRef}}\n\nThe **`slice()`** method of {{jsxref(\"Array\")}} instances returns a [shallow copy](/en-US/docs/Glossary/Shallow_copy) of a portion of\nan array into a new array object selected from `start` to `end`\n(`end` not included) where `start` and `end` represent\nthe index of items in that array. The original array will not be modified.\n\n{{EmbedInteractiveExample(\"pages/js/array-slice.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nslice()\nslice(start)\nslice(start, end)\n```\n\n### Parameters\n\n- `start` {{optional_inline}}\n  - : Zero-based index at which to start extraction, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n    - Negative index counts back from the end of the array — if `-array.length <= start < 0`, `start + array.length` is used.\n    - If `start < -array.length` or `start` is omitted, `0` is used.\n    - If `start >= array.length`, nothing is extracted.\n- `end` {{optional_inline}}\n  - : Zero-based index at which to end extraction, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `slice()` extracts up to but not including `end`.\n    - Negative index counts back from the end of the array — if `-array.length <= end < 0`, `end + array.length` is used.\n    - If `end < -array.length`, `0` is used.\n    - If `end >= array.length` or `end` is omitted, `array.length` is used, causing all elements until the end to be extracted.\n    - If `end` implies a position before or at the position that `start` implies, nothing is extracted.\n\n### Return value\n\nA new array containing the extracted elements.\n\n## Description\n\nThe `slice()` method is a [copying method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It does not alter `this` but instead returns a [shallow copy](/en-US/docs/Glossary/Shallow_copy) that contains some of the same elements as the ones from the original array.\n\nThe `slice()` method preserves empty slots. If the sliced portion is [sparse](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the returned array is sparse as well.\n\nThe `slice()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Return a portion of an existing array\n\n```js\nconst fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\nconst citrus = fruits.slice(1, 3);\n\n// fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']\n// citrus contains ['Orange','Lemon']\n```\n\n### Using slice\n\nIn the following example, `slice` creates a new array, `newCar`,\nfrom `myCar`. Both include a reference to the object `myHonda`.\nWhen the color of `myHonda` is changed to purple, both arrays reflect the\nchange.\n\n```js\n// Using slice, create newCar from myCar.\nconst myHonda = {\n  color: \"red\",\n  wheels: 4,\n  engine: { cylinders: 4, size: 2.2 },\n};\nconst myCar = [myHonda, 2, \"cherry condition\", \"purchased 1997\"];\nconst newCar = myCar.slice(0, 2);\n\nconsole.log(\"myCar =\", myCar);\nconsole.log(\"newCar =\", newCar);\nconsole.log(\"myCar[0].color =\", myCar[0].color);\nconsole.log(\"newCar[0].color =\", newCar[0].color);\n\n// Change the color of myHonda.\nmyHonda.color = \"purple\";\nconsole.log(\"The new color of my Honda is\", myHonda.color);\n\nconsole.log(\"myCar[0].color =\", myCar[0].color);\nconsole.log(\"newCar[0].color =\", newCar[0].color);\n```\n\nThis script writes:\n\n```plain\nmyCar = [\n  { color: 'red', wheels: 4, engine: { cylinders: 4, size: 2.2 } },\n  2,\n  'cherry condition',\n  'purchased 1997'\n]\nnewCar = [ { color: 'red', wheels: 4, engine: { cylinders: 4, size: 2.2 } }, 2 ]\nmyCar[0].color = red\nnewCar[0].color = red\nThe new color of my Honda is purple\nmyCar[0].color = purple\nnewCar[0].color = purple\n```\n\n### Calling slice() on non-array objects\n\nThe `slice()` method reads the `length` property of `this`. It then reads the integer-keyed properties from `start` to `end` and defines them on a newly created array.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 2,\n  1: 3,\n  2: 4,\n  3: 33, // ignored by slice() since length is 3\n};\nconsole.log(Array.prototype.slice.call(arrayLike, 1, 3));\n// [ 3, 4 ]\n```\n\n### Using slice() to convert array-like objects to arrays\n\nThe `slice()` method is often used with {{jsxref(\"Function/bind\", \"bind()\")}} and {{jsxref(\"Function/call\", \"call()\")}} to create a utility method that converts an array-like object into an array.\n\n```js\n// slice() is called with `this` passed as the first argument\nconst slice = Function.prototype.call.bind(Array.prototype.slice);\n\nfunction list() {\n  return slice(arguments);\n}\n\nconst list1 = list(1, 2, 3); // [1, 2, 3]\n```\n\n### Using slice() on sparse arrays\n\nThe array returned from `slice()` may be sparse if the source is sparse.\n\n```js\nconsole.log([1, 2, , 4, 5].slice(1, 4)); // [2, empty, 4]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.slice` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.pop()\")}}\n- {{jsxref(\"Array.prototype.shift()\")}}\n- {{jsxref(\"Array.prototype.concat()\")}}\n- {{jsxref(\"Array.prototype.splice()\")}}\n- {{jsxref(\"TypedArray.prototype.slice()\")}}\n- {{jsxref(\"String.prototype.slice()\")}}\n"
    },
    "some": {
      "index.md": "---\ntitle: Array.prototype.some()\nslug: Web/JavaScript/Reference/Global_Objects/Array/some\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.some\n---\n\n{{JSRef}}\n\nThe **`some()`** method of {{jsxref(\"Array\")}} instances tests whether\nat least one element in the array passes the test implemented by the provided\nfunction. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.\n\n{{EmbedInteractiveExample(\"pages/js/array-some.html\")}}\n\n## Syntax\n\n```js-nolint\nsome(callbackFn)\nsome(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n    - `array`\n      - : The array `some()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\n`false` unless `callbackFn` returns a {{Glossary(\"truthy\")}} value for an array element, in which case `true` is immediately returned.\n\n## Description\n\nThe `some()` method is an [iterative method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods). It calls a provided `callbackFn` function once for each element in an array, until the `callbackFn` returns a [truthy](/en-US/docs/Glossary/Truthy) value. If such an element is found, `some()` immediately returns `true` and stops iterating through the array. Otherwise, if `callbackFn` returns a [falsy](/en-US/docs/Glossary/Falsy) value for all elements, `some()` returns `false`. Read the [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods) section for more information about how these methods work in general.\n\n`some()` acts like the \"there exists\" quantifier in mathematics. In particular, for an empty array, it returns `false` for any condition.\n\n`callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays).\n\n`some()` does not mutate the array on which it is called, but the function provided as `callbackFn` can. Note, however, that the length of the array is saved _before_ the first invocation of `callbackFn`. Therefore:\n\n- `callbackFn` will not visit any elements added beyond the array's initial length when the call to `some()` began.\n- Changes to already-visited indexes do not cause `callbackFn` to be invoked on them again.\n- If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the `callbackFn` will be the value at the time that element gets visited. [Deleted](/en-US/docs/Web/JavaScript/Reference/Operators/delete) elements are not visited.\n\n> **Warning:** Concurrent modifications of the kind described above frequently lead to hard-to-understand code and are generally to be avoided (except in special cases).\n\nThe `some()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Testing value of array elements\n\nThe following example tests whether any element in the array is bigger than 10.\n\n```js\nfunction isBiggerThan10(element, index, array) {\n  return element > 10;\n}\n\n[2, 5, 8, 1, 4].some(isBiggerThan10); // false\n[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n```\n\n### Testing array elements using arrow functions\n\n[Arrow functions](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\nprovide a shorter syntax for the same test.\n\n```js\n[2, 5, 8, 1, 4].some((x) => x > 10); // false\n[12, 5, 8, 1, 4].some((x) => x > 10); // true\n```\n\n### Checking whether a value exists in an array\n\nTo mimic the function of the `includes()` method, this custom function returns `true` if the element exists in the array:\n\n```js\nconst fruits = [\"apple\", \"banana\", \"mango\", \"guava\"];\n\nfunction checkAvailability(arr, val) {\n  return arr.some((arrVal) => val === arrVal);\n}\n\ncheckAvailability(fruits, \"kela\"); // false\ncheckAvailability(fruits, \"banana\"); // true\n```\n\n### Converting any value to Boolean\n\n```js\nconst TRUTHY_VALUES = [true, \"true\", 1];\n\nfunction getBoolean(value) {\n  if (typeof value === \"string\") {\n    value = value.toLowerCase().trim();\n  }\n\n  return TRUTHY_VALUES.some((t) => t === value);\n}\n\ngetBoolean(false); // false\ngetBoolean(\"false\"); // false\ngetBoolean(1); // true\ngetBoolean(\"true\"); // true\n```\n\n### Using the third argument of callbackFn\n\nThe `array` argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses `filter()` to extract the positive values and then uses `some()` to check whether the array is strictly increasing.\n\n```js\nconst numbers = [3, -1, 1, 4, 1, 5];\nconst isIncreasing = !numbers\n  .filter((num) => num > 0)\n  .some((num, idx, arr) => {\n    // Without the arr argument, there's no way to easily access the\n    // intermediate array without saving it to a variable.\n    if (idx === 0) return false;\n    return num <= arr[idx - 1];\n  });\nconsole.log(isIncreasing); // false\n```\n\n### Using some() on sparse arrays\n\n`some()` will not run its predicate on empty slots.\n\n```js\nconsole.log([1, , 3].some((x) => x === undefined)); // false\nconsole.log([1, , 1].some((x) => x !== 1)); // false\nconsole.log([1, undefined, 1].some((x) => x !== 1)); // true\n```\n\n### Calling some() on non-array objects\n\nThe `some()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length` until they all have been accessed or `callbackFn` returns `true`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\",\n  3: 3, // ignored by some() since length is 3\n};\nconsole.log(Array.prototype.some.call(arrayLike, (x) => typeof x === \"number\"));\n// false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.some` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.every()\")}}\n- {{jsxref(\"Array.prototype.forEach()\")}}\n- {{jsxref(\"Array.prototype.find()\")}}\n- {{jsxref(\"Array.prototype.includes()\")}}\n- {{jsxref(\"TypedArray.prototype.some()\")}}\n"
    },
    "sort": {
      "index.md": "---\ntitle: Array.prototype.sort()\nslug: Web/JavaScript/Reference/Global_Objects/Array/sort\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.sort\n---\n\n{{JSRef}}\n\nThe **`sort()`** method of {{jsxref(\"Array\")}} instances sorts the elements of an array _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_ and returns the reference to the same array, now sorted. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.\n\nThe time and space complexity of the sort cannot be guaranteed as it depends on the\nimplementation.\n\nTo sort the elements in an array without mutating the original array, use {{jsxref(\"Array/toSorted\", \"toSorted()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/array-sort.html\")}}\n\n## Syntax\n\n```js-nolint\nsort()\nsort(compareFn)\n```\n\n### Parameters\n\n- `compareFn` {{optional_inline}}\n\n  - : A function that defines the sort order. The return value should be a number whose sign indicates the relative order of the two elements: negative if `a` is less than `b`, positive if `a` is greater than `b`, and zero if they are equal. `NaN` is treated as `0`. The function is called with the following arguments:\n\n    - `a`\n      - : The first element for comparison. Will never be `undefined`.\n    - `b`\n      - : The second element for comparison. Will never be `undefined`.\n\n    If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value.\n\n### Return value\n\nThe reference to the original array, now sorted. Note that the array is sorted _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_, and no copy is made.\n\n## Description\n\nIf `compareFn` is not supplied, all non-`undefined` array\nelements are sorted by converting them to strings and comparing strings in UTF-16 code\nunits order. For example, \"banana\" comes before \"cherry\". In a numeric sort, 9 comes\nbefore 80, but because numbers are converted to strings, \"80\" comes before \"9\" in the\nUnicode order. All `undefined` elements are sorted to the end of the array.\n\nThe `sort()` method preserves empty slots. If the source array is [sparse](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the empty slots are moved to the end of the array, and always come after all the `undefined`.\n\n> **Note:** In UTF-16, Unicode characters above `\\uFFFF` are\n> encoded as two surrogate code units, of the range\n> `\\uD800` - `\\uDFFF`. The value of each code unit is taken\n> separately into account for the comparison. Thus the character formed by the surrogate\n> pair `\\uD855\\uDE51` will be sorted before the character\n> `\\uFF3A`.\n\nIf `compareFn` is supplied, all non-`undefined` array\nelements are sorted according to the return value of the compare function (all\n`undefined` elements are sorted to the end of the array, with no call to\n`compareFn`).\n\n| `compareFn(a, b)` return value | sort order                         |\n| ------------------------------ | ---------------------------------- |\n| > 0                            | sort `a` after `b`, e.g. `[b, a]`  |\n| < 0                            | sort `a` before `b`, e.g. `[a, b]` |\n| === 0                          | keep original order of `a` and `b` |\n\nSo, the compare function has the following form:\n\n```js-nolint\nfunction compareFn(a, b) {\n  if (a is less than b by some ordering criterion) {\n    return -1;\n  } else if (a is greater than b by the ordering criterion) {\n    return 1;\n  }\n  // a must be equal to b\n  return 0;\n}\n```\n\nMore formally, the comparator is expected to have the following properties, in order to ensure proper sort behavior:\n\n- _Pure_: The comparator does not mutate the objects being compared or any external state. (This is important because there's no guarantee _when_ and _how_ the comparator will be called, so any particular call should not produce visible effects to the outside.)\n- _Stable_: The comparator returns the same result with the same pair of input.\n- _Reflexive_: `compareFn(a, a) === 0`.\n- _Anti-symmetric_: `compareFn(a, b)` and `compareFn(b, a)` must both be `0` or have opposite signs.\n- _Transitive_: If `compareFn(a, b)` and `compareFn(b, c)` are both positive, zero, or negative, then `compareFn(a, c)` has the same positivity as the previous two.\n\nA comparator conforming to the constraints above will always be able to return all of `1`, `0`, and `-1`, or consistently return `0`. For example, if a comparator only returns `1` and `0`, or only returns `0` and `-1`, it will not be able to sort reliably because _anti-symmetry_ is broken. A comparator that always returns `0` will cause the array to not be changed at all, but is reliable nonetheless.\n\nThe default lexicographic comparator satisfies all constraints above.\n\nTo compare numbers instead of strings, the compare function can subtract `b`\nfrom `a`. The following function will sort the array in ascending order (if\nit doesn't contain `NaN`):\n\n```js\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n```\n\nThe `sort()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## Examples\n\n### Creating, displaying, and sorting an array\n\nThe following example creates four arrays and displays the original array, then the\nsorted arrays. The numeric arrays are sorted without a compare function, then sorted\nusing one.\n\n```js\nconst stringArray = [\"Blue\", \"Humpback\", \"Beluga\"];\nconst numberArray = [40, 1, 5, 200];\nconst numericStringArray = [\"80\", \"9\", \"700\"];\nconst mixedNumericArray = [\"80\", \"9\", \"700\", 40, 1, 5, 200];\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nstringArray.join(); // 'Blue,Humpback,Beluga'\nstringArray.sort(); // ['Beluga', 'Blue', 'Humpback']\n\nnumberArray.join(); // '40,1,5,200'\nnumberArray.sort(); // [1, 200, 40, 5]\nnumberArray.sort(compareNumbers); // [1, 5, 40, 200]\n\nnumericStringArray.join(); // '80,9,700'\nnumericStringArray.sort(); // ['700', '80', '9']\nnumericStringArray.sort(compareNumbers); // ['9', '80', '700']\n\nmixedNumericArray.join(); // '80,9,700,40,1,5,200'\nmixedNumericArray.sort(); // [1, 200, 40, 5, '700', '80', '9']\nmixedNumericArray.sort(compareNumbers); // [1, 5, '9', 40, '80', 200, '700']\n```\n\n### Sorting array of objects\n\nArrays of objects can be sorted by comparing the value of one of their properties.\n\n```js\nconst items = [\n  { name: \"Edward\", value: 21 },\n  { name: \"Sharpe\", value: 37 },\n  { name: \"And\", value: 45 },\n  { name: \"The\", value: -12 },\n  { name: \"Magnetic\", value: 13 },\n  { name: \"Zeros\", value: 37 },\n];\n\n// sort by value\nitems.sort((a, b) => a.value - b.value);\n\n// sort by name\nitems.sort((a, b) => {\n  const nameA = a.name.toUpperCase(); // ignore upper and lowercase\n  const nameB = b.name.toUpperCase(); // ignore upper and lowercase\n  if (nameA < nameB) {\n    return -1;\n  }\n  if (nameA > nameB) {\n    return 1;\n  }\n\n  // names must be equal\n  return 0;\n});\n```\n\n### Sorting non-ASCII characters\n\nFor sorting strings with non-{{Glossary(\"ASCII\")}} characters, i.e. strings with accented characters\n(e, é, è, a, ä, etc.), strings from languages other than English, use\n{{jsxref(\"String.prototype.localeCompare()\")}}. This function can compare those characters so they\nappear in the right order.\n\n```js\nconst items = [\"réservé\", \"premier\", \"communiqué\", \"café\", \"adieu\", \"éclair\"];\nitems.sort((a, b) => a.localeCompare(b));\n\n// items is ['adieu', 'café', 'communiqué', 'éclair', 'premier', 'réservé']\n```\n\n### Sorting with map\n\nThe `compareFn` can be invoked multiple times per element within the\narray. Depending on the `compareFn`'s nature, this may yield a high\noverhead. The more work a `compareFn` does and the more elements there\nare to sort, it may be more efficient to use [`map()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) for\nsorting. The idea is to traverse the array once to extract the actual values used for\nsorting into a temporary array, sort the temporary array, and then traverse the\ntemporary array to achieve the right order.\n\n```js\n// the array to be sorted\nconst data = [\"delta\", \"alpha\", \"charlie\", \"bravo\"];\n\n// temporary array holds objects with position and sort-value\nconst mapped = data.map((v, i) => {\n  return { i, value: someSlowOperation(v) };\n});\n\n// sorting the mapped array containing the reduced values\nmapped.sort((a, b) => {\n  if (a.value > b.value) {\n    return 1;\n  }\n  if (a.value < b.value) {\n    return -1;\n  }\n  return 0;\n});\n\nconst result = mapped.map((v) => data[v.i]);\n```\n\nThere is an open source library available called [mapsort](https://github.com/Pimm/mapsort) which applies this approach.\n\n### sort() returns the reference to the same array\n\nThe `sort()` method returns a reference to the original array, so mutating the returned array will mutate the original array as well.\n\n```js\nconst numbers = [3, 1, 4, 1, 5];\nconst sorted = numbers.sort((a, b) => a - b);\n// numbers and sorted are both [1, 1, 3, 4, 5]\nsorted[0] = 10;\nconsole.log(numbers[0]); // 10\n```\n\nIn case you want `sort()` to not mutate the original array, but return a [shallow-copied](/en-US/docs/Glossary/Shallow_copy) array like other array methods (e.g. [`map()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)) do, use the {{jsxref(\"Array/toSorted\", \"toSorted()\")}} method. Alternatively, you can do a shallow copy before calling `sort()`, using the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) or [`Array.from()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).\n\n```js\nconst numbers = [3, 1, 4, 1, 5];\n// [...numbers] creates a shallow copy, so sort() does not mutate the original\nconst sorted = [...numbers].sort((a, b) => a - b);\nsorted[0] = 10;\nconsole.log(numbers[0]); // 3\n```\n\n### Sort stability\n\nSince version 10 (or ECMAScript 2019), the specification dictates that `Array.prototype.sort` is stable.\n\nFor example, say you had a list of students alongside their grades. Note that the list of students is already pre-sorted by name in alphabetical order:\n\n```js\nconst students = [\n  { name: \"Alex\", grade: 15 },\n  { name: \"Devlin\", grade: 15 },\n  { name: \"Eagle\", grade: 13 },\n  { name: \"Sam\", grade: 14 },\n];\n```\n\nAfter sorting this array by `grade` in ascending order:\n\n```js\nstudents.sort((firstItem, secondItem) => firstItem.grade - secondItem.grade);\n```\n\nThe `students` variable will then have the following value:\n\n```js\n[\n  { name: \"Eagle\", grade: 13 },\n  { name: \"Sam\", grade: 14 },\n  { name: \"Alex\", grade: 15 }, // original maintained for similar grade (stable sorting)\n  { name: \"Devlin\", grade: 15 }, // original maintained for similar grade (stable sorting)\n];\n```\n\nIt's important to note that students that have the same grade (for example, Alex and Devlin), will remain in the same order as before calling the sort. This is what a stable sorting algorithm guarantees.\n\nBefore version 10 (or ECMAScript 2019), sort stability was not guaranteed, meaning that you could end up with the following:\n\n```js\n[\n  { name: \"Eagle\", grade: 13 },\n  { name: \"Sam\", grade: 14 },\n  { name: \"Devlin\", grade: 15 }, // original order not maintained\n  { name: \"Alex\", grade: 15 }, // original order not maintained\n];\n```\n\n### Sorting with non-well-formed comparator\n\nIf a comparing function does not satisfy all of purity, stability, reflexivity, anti-symmetry, and transitivity rules, as explained in the [description](#description), the program's behavior is not well-defined.\n\nFor example, consider this code:\n\n```js\nconst arr = [3, 1, 4, 1, 5, 9];\nconst compareFn = (a, b) => (a > b ? 1 : 0);\narr.sort(compareFn);\n```\n\nThe `compareFn` function here is not well-formed, because it does not satisfy anti-symmetry: if `a > b`, it returns `1`; but by swapping `a` and `b`, it returns `0` instead of a negative value. Therefore, the resulting array will be different across engines. For example, V8 (used by Chrome, Node.js, etc.) and JavaScriptCore (used by Safari) would not sort the array at all and return `[3, 1, 4, 1, 5, 9]`, while SpiderMonkey (used by Firefox) will return the array sorted ascendingly, as `[1, 1, 3, 4, 5, 9]`.\n\nHowever, if the `compareFn` function is changed slightly so that it returns `-1` or `0`:\n\n```js\nconst arr = [3, 1, 4, 1, 5, 9];\nconst compareFn = (a, b) => (a > b ? -1 : 0);\narr.sort(compareFn);\n```\n\nThen V8 and JavaScriptCore sorts it descendingly, as `[9, 5, 4, 3, 1, 1]`, while SpiderMonkey returns it as-is: `[3, 1, 4, 1, 5, 9]`.\n\nDue to this implementation inconsistency, you are always advised to make your comparator well-formed by following the five constraints.\n\n### Using sort() on sparse arrays\n\nEmpty slots are moved to the end of the array.\n\n```js\nconsole.log([\"a\", \"c\", , \"b\"].sort()); // ['a', 'b', 'c', empty]\nconsole.log([, undefined, \"a\", \"b\"].sort()); // [\"a\", \"b\", undefined, empty]\n```\n\n### Calling sort() on non-array objects\n\nThe `sort()` method reads the `length` property of `this`. It then collects all existing integer-keyed properties in the range of `0` to `length - 1`, sorts them, and writes them back. If there are missing properties in the range, the corresponding trailing properties are [deleted](/en-US/docs/Web/JavaScript/Reference/Operators/delete), as if the non-existent properties are sorted towards the end.\n\n```js\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  0: 5,\n  2: 4,\n};\nconsole.log(Array.prototype.sort.call(arrayLike));\n// { '0': 4, '1': 5, length: 3, unrelated: 'foo' }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.sort` with modern behavior like stable sort in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.reverse()\")}}\n- {{jsxref(\"Array.prototype.toSorted()\")}}\n- {{jsxref(\"String.prototype.localeCompare()\")}}\n- {{jsxref(\"TypedArray.prototype.sort()\")}}\n- [Getting things sorted in V8](https://v8.dev/blog/array-sort) on v8.dev (2018)\n- [Stable `Array.prototype.sort`](https://v8.dev/features/stable-sort) on v8.dev (2019)\n- [`Array.prototype.sort` stability](https://mathiasbynens.be/demo/sort-stability) by Mathias Bynens\n"
    },
    "splice": {
      "index.md": "---\ntitle: Array.prototype.splice()\nslug: Web/JavaScript/Reference/Global_Objects/Array/splice\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.splice\n---\n\n{{JSRef}}\n\nThe **`splice()`** method of {{jsxref(\"Array\")}} instances changes the contents of an array by\nremoving or replacing existing elements and/or adding new elements [in place](https://en.wikipedia.org/wiki/In-place_algorithm).\n\nTo create a new array with a segment removed and/or replaced without mutating the original array, use {{jsxref(\"Array/toSpliced\", \"toSpliced()\")}}. To access part of an array without modifying it, see {{jsxref(\"Array/slice\", \"slice()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/array-splice.html\")}}\n\n## Syntax\n\n```js-nolint\nsplice(start)\nsplice(start, deleteCount)\nsplice(start, deleteCount, item1)\nsplice(start, deleteCount, item1, item2)\nsplice(start, deleteCount, item1, item2, /* …, */ itemN)\n```\n\n### Parameters\n\n- `start`\n\n  - : Zero-based index at which to start changing the array, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n    - Negative index counts back from the end of the array — if `-array.length <= start < 0`, `start + array.length` is used.\n    - If `start < -array.length`, `0` is used.\n    - If `start >= array.length`, no element will be deleted, but the method will behave as an adding function, adding as many elements as provided.\n    - If `start` is omitted (and `splice()` is called with no arguments), nothing is deleted. This is different from passing `undefined`, which is converted to `0`.\n\n- `deleteCount` {{optional_inline}}\n\n  - : An integer indicating the number of elements in the array to remove from `start`.\n\n    If `deleteCount` is omitted, or if its value is greater than or equal to the number of elements after the position specified by `start`, then all the elements from `start` to the end of the array will be deleted. However, if you wish to pass any `itemN` parameter, you should pass `Infinity` as `deleteCount` to delete all elements after `start`, because an explicit `undefined` gets [converted](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) to `0`.\n\n    If `deleteCount` is `0` or negative, no elements are removed.\n    In this case, you should specify at least one new element (see below).\n\n- `item1`, …, `itemN` {{optional_inline}}\n\n  - : The elements to add to the array, beginning from `start`.\n\n    If you do not specify any elements, `splice()` will only remove elements from the array.\n\n### Return value\n\nAn array containing the deleted elements.\n\nIf only one element is removed, an array of one element is returned.\n\nIf no elements are removed, an empty array is returned.\n\n## Description\n\nThe `splice()` method is a [mutating method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods). It may change the content of `this`. If the specified number of elements to insert differs from the number of elements being removed, the array's `length` will be changed as well. At the same time, it uses [`@@species`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species) to create a new array instance to be returned.\n\nIf the deleted portion is [sparse](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the array returned by `splice()` is sparse as well, with those corresponding indices being empty slots.\n\nThe `splice()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## Examples\n\n### Remove 0 (zero) elements before index 2, and insert \"drum\"\n\n```js\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(2, 0, \"drum\");\n\n// myFish is [\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"]\n// removed is [], no elements removed\n```\n\n### Remove 0 (zero) elements before index 2, and insert \"drum\" and \"guitar\"\n\n```js\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(2, 0, \"drum\", \"guitar\");\n\n// myFish is [\"angel\", \"clown\", \"drum\", \"guitar\", \"mandarin\", \"sturgeon\"]\n// removed is [], no elements removed\n```\n\n### Remove 0 (zero) elements at index 0, and insert \"angel\"\n\n`splice(0, 0, ...elements)` inserts elements at the start of the array like {{jsxref(\"Array/unshift\", \"unshift()\")}}.\n\n```js\nconst myFish = [\"clown\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(0, 0, \"angel\");\n\n// myFish is [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"]\n// no items removed\n```\n\n### Remove 0 (zero) elements at last index, and insert \"sturgeon\"\n\n`splice(array.length, 0, ...elements)` inserts elements at the end of the array like {{jsxref(\"Array/push\", \"push()\")}}.\n\n```js\nconst myFish = [\"angel\", \"clown\", \"mandarin\"];\nconst removed = myFish.splice(myFish.length, 0, \"sturgeon\");\n\n// myFish is [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"]\n// no items removed\n```\n\n### Remove 1 element at index 3\n\n```js\nconst myFish = [\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(3, 1);\n\n// myFish is [\"angel\", \"clown\", \"drum\", \"sturgeon\"]\n// removed is [\"mandarin\"]\n```\n\n### Remove 1 element at index 2, and insert \"trumpet\"\n\n```js\nconst myFish = [\"angel\", \"clown\", \"drum\", \"sturgeon\"];\nconst removed = myFish.splice(2, 1, \"trumpet\");\n\n// myFish is [\"angel\", \"clown\", \"trumpet\", \"sturgeon\"]\n// removed is [\"drum\"]\n```\n\n### Remove 2 elements from index 0, and insert \"parrot\", \"anemone\" and \"blue\"\n\n```js\nconst myFish = [\"angel\", \"clown\", \"trumpet\", \"sturgeon\"];\nconst removed = myFish.splice(0, 2, \"parrot\", \"anemone\", \"blue\");\n\n// myFish is [\"parrot\", \"anemone\", \"blue\", \"trumpet\", \"sturgeon\"]\n// removed is [\"angel\", \"clown\"]\n```\n\n### Remove 2 elements, starting from index 2\n\n```js\nconst myFish = [\"parrot\", \"anemone\", \"blue\", \"trumpet\", \"sturgeon\"];\nconst removed = myFish.splice(2, 2);\n\n// myFish is [\"parrot\", \"anemone\", \"sturgeon\"]\n// removed is [\"blue\", \"trumpet\"]\n```\n\n### Remove 1 element from index -2\n\n```js\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(-2, 1);\n\n// myFish is [\"angel\", \"clown\", \"sturgeon\"]\n// removed is [\"mandarin\"]\n```\n\n### Remove all elements, starting from index 2\n\n```js\nconst myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\nconst removed = myFish.splice(2);\n\n// myFish is [\"angel\", \"clown\"]\n// removed is [\"mandarin\", \"sturgeon\"]\n```\n\n### Using splice() on sparse arrays\n\nThe `splice()` method preserves the array's sparseness.\n\n```js\nconst arr = [1, , 3, 4, , 6];\nconsole.log(arr.splice(1, 2)); // [empty, 3]\nconsole.log(arr); // [1, 4, empty, 6]\n```\n\n### Calling splice() on non-array objects\n\nThe `splice()` method reads the `length` property of `this`. It then updates the integer-keyed properties and the `length` property as needed.\n\n```js\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  0: 5,\n  2: 4,\n};\nconsole.log(Array.prototype.splice.call(arrayLike, 0, 1, 2, 3));\n// [ 5 ]\nconsole.log(arrayLike);\n// { '0': 2, '1': 3, '3': 4, length: 4, unrelated: 'foo' }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.concat()\")}}\n- {{jsxref(\"Array.prototype.push()\")}}\n- {{jsxref(\"Array.prototype.pop()\")}}\n- {{jsxref(\"Array.prototype.shift()\")}}\n- {{jsxref(\"Array.prototype.slice()\")}}\n- {{jsxref(\"Array.prototype.toSpliced()\")}}\n- {{jsxref(\"Array.prototype.unshift()\")}}\n"
    },
    "tolocalestring": {
      "index.md": "---\ntitle: Array.prototype.toLocaleString()\nslug: Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.toLocaleString\n---\n\n{{JSRef}}\n\nThe **`toLocaleString()`** method of {{jsxref(\"Array\")}} instances returns a string representing\nthe elements of the array. The elements are converted to strings using their\n`toLocaleString` methods and these strings are separated by a locale-specific\nstring (such as a comma \",\").\n\n{{EmbedInteractiveExample(\"pages/js/array-tolocalestring.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ntoLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n```\n\n### Parameters\n\n- `locales` {{optional_inline}}\n  - : A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object with configuration properties. For numbers, see {{jsxref(\"Number.prototype.toLocaleString()\")}}; for dates, see {{jsxref(\"Date.prototype.toLocaleString()\")}}.\n\n### Return value\n\nA string representing the elements of the array.\n\n## Description\n\nThe `Array.prototype.toLocaleString` method traverses its content, calling the `toLocaleString` method of every element with the `locales` and `options` parameters provided, and concatenates them with an implementation-defined separator (such as a comma \",\"). Note that the method itself does not consume the two parameters — it only passes them to the `toLocaleString()` of each element. The choice of the separator string depends on the host's current locale, not the `locales` parameter.\n\nIf an element is `undefined`, `null`, it is converted to an empty string instead of the string `\"null\"` or `\"undefined\"`.\n\nWhen used on [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `toLocaleString()` method iterates empty slots as if they have the value `undefined`.\n\nThe `toLocaleString()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Using locales and options\n\nThe elements of the array are converted to strings using their\n`toLocaleString` methods.\n\n- `Object`: {{jsxref(\"Object.prototype.toLocaleString()\")}}\n- `Number`: {{jsxref(\"Number.prototype.toLocaleString()\")}}\n- `Date`: {{jsxref(\"Date.prototype.toLocaleString()\")}}\n\nAlways display the currency for the strings and numbers in the `prices`\narray:\n\n```js\nconst prices = [\"￥7\", 500, 8123, 12];\nprices.toLocaleString(\"ja-JP\", { style: \"currency\", currency: \"JPY\" });\n\n// \"￥7,￥500,￥8,123,￥12\"\n```\n\nFor more examples, see also the [`Intl.NumberFormat`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) and [`Intl.DateTimeFormat`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) pages.\n\n### Using toLocaleString() on sparse arrays\n\n`toLocaleString()` treats empty slots the same as `undefined` and produces an extra separator:\n\n```js\nconsole.log([1, , 3].toLocaleString()); // '1,,3'\n```\n\n### Calling toLocaleString() on non-array objects\n\nThe `toLocaleString()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: 1,\n  1: 2,\n  2: 3,\n  3: 4, // ignored by toLocaleString() since length is 3\n};\nconsole.log(Array.prototype.toLocaleString.call(arrayLike));\n// 1,2,3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.toString()\")}}\n- {{jsxref(\"TypedArray.prototype.toLocaleString()\")}}\n- {{jsxref(\"Intl\")}}\n- {{jsxref(\"Intl.ListFormat\")}}\n- {{jsxref(\"Object.prototype.toLocaleString()\")}}\n- {{jsxref(\"Number.prototype.toLocaleString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleString()\")}}\n"
    },
    "toreversed": {
      "index.md": "---\ntitle: Array.prototype.toReversed()\nslug: Web/JavaScript/Reference/Global_Objects/Array/toReversed\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.toReversed\n---\n\n{{JSRef}}\n\nThe **`toReversed()`** method of {{jsxref(\"Array\")}} instances is the [copying](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) counterpart of the {{jsxref(\"Array/reverse\", \"reverse()\")}} method. It returns a new array with the elements in reversed order.\n\n## Syntax\n\n```js-nolint\ntoReversed()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new array containing the elements in reversed order.\n\n## Description\n\nThe `toReversed()` method transposes the elements of the calling array object in reverse order and returns a new array.\n\nWhen used on [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `toReversed()` method iterates empty slots as if they have the value `undefined`.\n\nThe `toReversed()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Reversing the elements in an array\n\nThe following example creates an array `items`, containing three elements, then creates a new array that's the reverse of `items`. The `items` array remains unchanged.\n\n```js\nconst items = [1, 2, 3];\nconsole.log(items); // [1, 2, 3]\n\nconst reversedItems = items.toReversed();\nconsole.log(reversedItems); // [3, 2, 1]\nconsole.log(items); // [1, 2, 3]\n```\n\n### Using toReversed() on sparse arrays\n\nThe return value of `toReversed()` is never sparse. Empty slots become `undefined` in the returned array.\n\n```js\nconsole.log([1, , 3].toReversed()); // [3, undefined, 1]\nconsole.log([1, , 3, 4].toReversed()); // [4, 3, undefined, 1]\n```\n\n### Calling toReversed() on non-array objects\n\nThe `toReversed()` method reads the `length` property of `this`. It then visits each property having an integer key between `length - 1` and `0` in descending order, adding the value of the current property to the end of the array to be returned.\n\n```js\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n};\nconsole.log(Array.prototype.toReversed.call(arrayLike));\n// [4, undefined, undefined]\n// The '0' and '1' indices are not present so they become undefined\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.toReversed` in `core-js`](https://github.com/zloirock/core-js#change-array-by-copy)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array.prototype.reverse()\")}}\n- {{jsxref(\"Array.prototype.toSorted()\")}}\n- {{jsxref(\"Array.prototype.toSpliced()\")}}\n- {{jsxref(\"Array.prototype.with()\")}}\n- {{jsxref(\"TypedArray.prototype.toReversed()\")}}\n"
    },
    "tosorted": {
      "index.md": "---\ntitle: Array.prototype.toSorted()\nslug: Web/JavaScript/Reference/Global_Objects/Array/toSorted\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.toSorted\n---\n\n{{JSRef}}\n\nThe **`toSorted()`** method of {{jsxref(\"Array\")}} instances is the [copying](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) version of the {{jsxref(\"Array/sort\", \"sort()\")}} method. It returns a new array with the elements sorted in ascending order.\n\n## Syntax\n\n```js-nolint\ntoSorted()\ntoSorted(compareFn)\n```\n\n### Parameters\n\n- `compareFn` {{optional_inline}}\n\n  - : Specifies a function that defines the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value.\n\n    - `a`\n      - : The first element for comparison.\n    - `b`\n      - : The second element for comparison.\n\n### Return value\n\nA new array with the elements sorted in ascending order.\n\n## Description\n\nSee {{jsxref(\"Array/sort\", \"sort()\")}} for more information on the `compareFn` parameter.\n\nWhen used on [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `toSorted()` method iterates empty slots as if they have the value `undefined`.\n\nThe `toSorted()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Sorting an array\n\n```js\nconst months = [\"Mar\", \"Jan\", \"Feb\", \"Dec\"];\nconst sortedMonths = months.toSorted();\nconsole.log(sortedMonths); // ['Dec', 'Feb', 'Jan', 'Mar']\nconsole.log(months); // ['Mar', 'Jan', 'Feb', 'Dec']\n\nconst values = [1, 10, 21, 2];\nconst sortedValues = values.toSorted((a, b) => a - b);\nconsole.log(sortedValues); // [1, 2, 10, 21]\nconsole.log(values); // [1, 10, 21, 2]\n```\n\nFor more usage examples, see {{jsxref(\"Array/sort\", \"sort()\")}}.\n\n### Using toSorted() on sparse arrays\n\nEmpty slots are sorted as if they have the value `undefined`. They are always sorted to the end of the array and `compareFn` is not called for them.\n\n```js\nconsole.log([\"a\", \"c\", , \"b\"].toSorted()); // ['a', 'b', 'c', undefined]\nconsole.log([, undefined, \"a\", \"b\"].toSorted()); // [\"a\", \"b\", undefined, undefined]\n```\n\n### Calling toSorted() on non-array objects\n\nThe `toSorted()` method reads the `length` property of `this`. It then collects all existing integer-keyed properties in the range of `0` to `length - 1`, sorts them, and writes them into a new array.\n\n```js\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  0: 5,\n  2: 4,\n  3: 3, // ignored by toSorted() since length is 3\n};\nconsole.log(Array.prototype.toSorted.call(arrayLike));\n// [4, 5, undefined]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.toSorted` in `core-js`](https://github.com/zloirock/core-js#change-array-by-copy)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array.prototype.sort()\")}}\n- {{jsxref(\"Array.prototype.toReversed()\")}}\n- {{jsxref(\"Array.prototype.toSpliced()\")}}\n- {{jsxref(\"Array.prototype.with()\")}}\n- {{jsxref(\"TypedArray.prototype.toSorted()\")}}\n"
    },
    "tospliced": {
      "index.md": "---\ntitle: Array.prototype.toSpliced()\nslug: Web/JavaScript/Reference/Global_Objects/Array/toSpliced\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.toSpliced\n---\n\n{{JSRef}}\n\nThe **`toSpliced()`** method of {{jsxref(\"Array\")}} instances is the [copying](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) version of the {{jsxref(\"Array/splice\", \"splice()\")}} method. It returns a new array with some elements removed and/or replaced at a given index.\n\n## Syntax\n\n```js-nolint\ntoSpliced(start)\ntoSpliced(start, deleteCount)\ntoSpliced(start, deleteCount, item1)\ntoSpliced(start, deleteCount, item1, item2)\ntoSpliced(start, deleteCount, item1, item2, /* …, */ itemN)\n```\n\n### Parameters\n\n- `start`\n\n  - : Zero-based index at which to start changing the array, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n    - Negative index counts back from the end of the array — if `-array.length <= start < 0`, `start + array.length` is used.\n    - If `start < -array.length` or `start` is omitted, `0` is used.\n    - If `start >= array.length`, no element will be deleted, but the method will behave as an adding function, adding as many elements as provided.\n\n- `deleteCount` {{optional_inline}}\n\n  - : An integer indicating the number of elements in the array to remove from `start`.\n\n    If `deleteCount` is omitted, or if its value is greater than or equal to the number of elements after the position specified by `start`, then all the elements from `start` to the end of the array will be deleted. However, if you wish to pass any `itemN` parameter, you should pass `Infinity` as `deleteCount` to delete all elements after `start`, because an explicit `undefined` gets [converted](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) to `0`.\n\n    If `deleteCount` is `0` or negative, no elements are removed.\n    In this case, you should specify at least one new element (see below).\n\n- `item1`, …, `itemN` {{optional_inline}}\n\n  - : The elements to add to the array, beginning from `start`.\n\n    If you do not specify any elements, `toSpliced()` will only remove elements from the array.\n\n### Return value\n\nA new array that consists of all elements before `start`, `item1`, `item2`, …, `itemN`, and all elements after `start + deleteCount`.\n\n## Description\n\nThe `toSpliced()` method, like `splice()`, does multiple things at once: it removes the given number of elements from the array, starting at a given index, and then inserts the given elements at the same index. However, it returns a new array instead of modifying the original array. The deleted elements therefore are not returned from this method.\n\nThe `toSpliced()` method never produces a [sparse array](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays). If the source array is sparse, the empty slots will be replaced with `undefined` in the new array.\n\nThe `toSpliced()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Deleting, adding, and replacing elements\n\nYou can use `toSpliced()` to delete, add, and replace elements in an array and create a new array more efficiently than using `slice()` and `concat()`.\n\n```js\nconst months = [\"Jan\", \"Mar\", \"Apr\", \"May\"];\n\n// Inserting an element at index 1\nconst months2 = months.toSpliced(1, 0, \"Feb\");\nconsole.log(months2); // [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"]\n\n// Deleting two elements starting from index 2\nconst months3 = months2.toSpliced(2, 2);\nconsole.log(months3); // [\"Jan\", \"Feb\", \"May\"]\n\n// Replacing one element at index 1 with two new elements\nconst months4 = months3.toSpliced(1, 1, \"Feb\", \"Mar\");\nconsole.log(months4); // [\"Jan\", \"Feb\", \"Mar\", \"May\"]\n\n// Original array is not modified\nconsole.log(months); // [\"Jan\", \"Mar\", \"Apr\", \"May\"]\n```\n\n### Using toSpliced() on sparse arrays\n\nThe `toSpliced()` method always creates a dense array.\n\n```js\nconst arr = [1, , 3, 4, , 6];\nconsole.log(arr.toSpliced(1, 2)); // [1, 4, undefined, 6]\n```\n\n### Calling toSpliced() on non-array objects\n\nThe `toSpliced()` method reads the `length` property of `this`. It then reads the integer-keyed properties needed and writes them into the new array.\n\n```js\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  0: 5,\n  2: 4,\n};\nconsole.log(Array.prototype.toSpliced.call(arrayLike, 0, 1, 2, 3));\n// [2, 3, undefined, 4]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.toSpliced` in `core-js`](https://github.com/zloirock/core-js#change-array-by-copy)\n- {{jsxref(\"Array.prototype.splice()\")}}\n- {{jsxref(\"Array.prototype.toReversed()\")}}\n- {{jsxref(\"Array.prototype.toSorted()\")}}\n- {{jsxref(\"Array.prototype.with()\")}}\n"
    },
    "tostring": {
      "index.md": "---\ntitle: Array.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/Array/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"Array\")}} instances returns a string representing the\nspecified array and its elements.\n\n{{EmbedInteractiveExample(\"pages/js/array-tostring.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the elements of the array.\n\n## Description\n\nThe {{jsxref(\"Array\")}} object overrides the `toString` method of {{jsxref(\"Object\")}}. The `toString` method of arrays calls [`join()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join) internally, which joins the array and returns one string containing each array element separated by commas. If the `join` method is unavailable or is not a function, [`Object.prototype.toString`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) is used instead, returning `[object Array]`.\n\n```js\nconst arr = [];\narr.join = 1; // re-assign `join` with a non-function\nconsole.log(arr.toString()); // [object Array]\n\nconsole.log(Array.prototype.toString.call({ join: () => 1 })); // 1\n```\n\nJavaScript calls the `toString` method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.\n\n`Array.prototype.toString` recursively converts each element, including other arrays, to strings. Because the string returned by `Array.prototype.toString` does not have delimiters, nested arrays look like they are flattened.\n\n```js\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\nconsole.log(matrix.toString()); // 1,2,3,4,5,6,7,8,9\n```\n\nWhen an array is cyclic (it contains an element that is itself), browsers avoid infinite recursion by ignoring the cyclic reference.\n\n```js\nconst arr = [];\narr.push(1, [3, arr, 4], 2);\nconsole.log(arr.toString()); // 1,3,,4,2\n```\n\n## Examples\n\n### Using toString()\n\n```js\nconst array1 = [1, 2, \"a\", \"1a\"];\n\nconsole.log(array1.toString()); // \"1,2,a,1a\"\n```\n\n### Using toString() on sparse arrays\n\nFollowing the behavior of `join()`, `toString()` treats empty slots the same as `undefined` and produces an extra separator:\n\n```js\nconsole.log([1, , 3].toString()); // '1,,3'\n```\n\n### Calling toString() on non-array objects\n\n`toString()` is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It expects `this` to have a `join()` method; or, failing that, uses `Object.prototype.toString()` instead.\n\n```js\nconsole.log(Array.prototype.toString.call({ join: () => 1 }));\n// 1; a number\nconsole.log(Array.prototype.toString.call({ join: () => undefined }));\n// undefined\nconsole.log(Array.prototype.toString.call({ join: \"not function\" }));\n// \"[object Object]\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.join()\")}}\n- {{jsxref(\"Array.prototype.toLocaleString()\")}}\n- {{jsxref(\"TypedArray.prototype.toString()\")}}\n- {{jsxref(\"String.prototype.toString()\")}}\n"
    },
    "unshift": {
      "index.md": "---\ntitle: Array.prototype.unshift()\nslug: Web/JavaScript/Reference/Global_Objects/Array/unshift\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.unshift\n---\n\n{{JSRef}}\n\nThe **`unshift()`** method of {{jsxref(\"Array\")}} instances adds the specified elements to the\nbeginning of an array and returns the new length of the array.\n\n{{EmbedInteractiveExample(\"pages/js/array-unshift.html\")}}\n\n## Syntax\n\n```js-nolint\nunshift()\nunshift(element1)\nunshift(element1, element2)\nunshift(element1, element2, /* …, */ elementN)\n```\n\n### Parameters\n\n- `element1`, …, `elementN`\n  - : The elements to add to the front of the `arr`.\n\n### Return value\n\nThe new {{jsxref(\"Array/length\", \"length\")}} property of the object upon which the\nmethod was called.\n\n## Description\n\nThe `unshift()` method inserts the given values to the beginning of an\narray-like object.\n\n{{jsxref(\"Array.prototype.push()\")}} has similar behavior to `unshift()`, but applied to the end of an array.\n\nPlease note that, if multiple elements are passed as parameters, they're inserted in\nchunk at the beginning of the object, in the exact same order they were passed as\nparameters. Hence, calling `unshift()` with `n`\narguments **once**, or calling it `n` times with\n**1** argument (with a loop, for example), don't yield the same results.\n\nSee example:\n\n```js\nlet arr = [4, 5, 6];\n\narr.unshift(1, 2, 3);\nconsole.log(arr);\n// [1, 2, 3, 4, 5, 6]\n\narr = [4, 5, 6]; // resetting the array\n\narr.unshift(1);\narr.unshift(2);\narr.unshift(3);\n\nconsole.log(arr);\n// [3, 2, 1, 4, 5, 6]\n```\n\nThe `unshift()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties. Although strings are also array-like, this method is not suitable to be applied on them, as strings are immutable.\n\n## Examples\n\n### Using unshift()\n\n```js\nconst arr = [1, 2];\n\narr.unshift(0); // result of the call is 3, which is the new array length\n// arr is [0, 1, 2]\n\narr.unshift(-2, -1); // the new array length is 5\n// arr is [-2, -1, 0, 1, 2]\n\narr.unshift([-4, -3]); // the new array length is 6\n// arr is [[-4, -3], -2, -1, 0, 1, 2]\n\narr.unshift([-7, -6], [-5]); // the new array length is 8\n// arr is [ [-7, -6], [-5], [-4, -3], -2, -1, 0, 1, 2 ]\n```\n\n### Calling unshift() on non-array objects\n\nThe `unshift()` method reads the `length` property of `this`. It shifts all indices in the range `0` to `length - 1` right by the number of arguments (incrementing their values by this number). Then, it sets each index starting at `0` with the arguments passed to `unshift()`. Finally, it sets the `length` to the previous length plus the number of prepended elements.\n\n```js\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  2: 4,\n};\nArray.prototype.unshift.call(arrayLike, 1, 2);\nconsole.log(arrayLike);\n// { '0': 1, '1': 2, '4': 4, length: 5, unrelated: 'foo' }\n\nconst plainObj = {};\n// There's no length property, so the length is 0\nArray.prototype.unshift.call(plainObj, 1, 2);\nconsole.log(plainObj);\n// { '0': 1, '1': 2, length: 2 }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.unshift` in `core-js` with fixes of this method](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.push()\")}}\n- {{jsxref(\"Array.prototype.pop()\")}}\n- {{jsxref(\"Array.prototype.shift()\")}}\n- {{jsxref(\"Array.prototype.concat()\")}}\n- {{jsxref(\"Array.prototype.splice()\")}}\n"
    },
    "values": {
      "index.md": "---\ntitle: Array.prototype.values()\nslug: Web/JavaScript/Reference/Global_Objects/Array/values\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.values\n---\n\n{{JSRef}}\n\nThe **`values()`** method of {{jsxref(\"Array\")}} instances returns a new _[array iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that iterates the value of each item in the array.\n\n{{EmbedInteractiveExample(\"pages/js/array-values.html\")}}\n\n## Syntax\n\n```js-nolint\nvalues()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Description\n\n`Array.prototype.values()` is the default implementation of [`Array.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator).\n\n```js\nArray.prototype.values === Array.prototype[Symbol.iterator]; // true\n```\n\nWhen used on [sparse arrays](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays), the `values()` method iterates empty slots as if they have the value `undefined`.\n\nThe `values()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Iteration using for...of loop\n\nBecause `values()` returns an iterable iterator, you can use a [`for...of`](/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop to iterate it.\n\n```js\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst iterator = arr.values();\n\nfor (const letter of iterator) {\n  console.log(letter);\n} // \"a\" \"b\" \"c\" \"d\" \"e\"\n```\n\n### Iteration using next()\n\nBecause the return value is also an iterator, you can directly call its `next()` method.\n\n```js\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst iterator = arr.values();\niterator.next(); // { value: \"a\", done: false }\niterator.next(); // { value: \"b\", done: false }\niterator.next(); // { value: \"c\", done: false }\niterator.next(); // { value: \"d\", done: false }\niterator.next(); // { value: \"e\", done: false }\niterator.next(); // { value: undefined, done: true }\nconsole.log(iterator.next().value); // undefined\n```\n\n### Reusing the iterable\n\n> **Warning:** The array iterator object should be a one-time use object. Do not reuse it.\n\nThe iterable returned from `values()` is not reusable. When `next().done = true` or `currentIndex > length`, [the `for...of` loop ends](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#interactions_between_the_language_and_iteration_protocols), and further iterating it has no effect.\n\n```js\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst values = arr.values();\nfor (const letter of values) {\n  console.log(letter);\n}\n// \"a\" \"b\" \"c\" \"d\" \"e\"\nfor (const letter of values) {\n  console.log(letter);\n}\n// undefined\n```\n\nIf you use a [`break`](/en-US/docs/Web/JavaScript/Reference/Statements/break) statement to end the iteration early, the iterator can resume from the current position when continuing to iterate it.\n\n```js\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst values = arr.values();\nfor (const letter of values) {\n  console.log(letter);\n  if (letter === \"b\") {\n    break;\n  }\n}\n// \"a\" \"b\"\n\nfor (const letter of values) {\n  console.log(letter);\n}\n// \"c\" \"d\" \"e\"\n```\n\n### Mutations during iteration\n\nThere are no values stored in the array iterator object returned from `values()`; instead, it stores the address of the array used in its creation, and reads the currently visited index on each iteration. Therefore, its iteration output depends on the value stored in that index at the time of stepping. If the values in the array changed, the array iterator object's values change too.\n\n```js\nconst arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconst iterator = arr.values();\nconsole.log(iterator); // Array Iterator { }\nconsole.log(iterator.next().value); // \"a\"\narr[1] = \"n\";\nconsole.log(iterator.next().value); // \"n\"\n```\n\n### Iterating sparse arrays\n\n`values()` will visit empty slots as if they are `undefined`.\n\n```js\nfor (const element of [, \"a\"].values()) {\n  console.log(element);\n}\n// undefined\n// 'a'\n```\n\n### Calling values() on non-array objects\n\nThe `values()` method reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  0: \"a\",\n  1: \"b\",\n  2: \"c\",\n  3: \"d\", // ignored by values() since length is 3\n};\nfor (const entry of Array.prototype.values.call(arrayLike)) {\n  console.log(entry);\n}\n// a\n// b\n// c\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.values` in `core-js`](https://github.com/zloirock/core-js#ecmascript-array)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Array.prototype.entries()\")}}\n- {{jsxref(\"Array.prototype.keys()\")}}\n- [`Array.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)\n- {{jsxref(\"TypedArray.prototype.values()\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "with": {
      "index.md": "---\ntitle: Array.prototype.with()\nslug: Web/JavaScript/Reference/Global_Objects/Array/with\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Array.with\n---\n\n{{JSRef}}\n\nThe **`with()`** method of {{jsxref(\"Array\")}} instances is the [copying](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) version of using the [bracket notation](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation) to change the value of a given index. It returns a new array with the element at the given index replaced with the given value.\n\n## Syntax\n\n```js-nolint\narrayInstance.with(index, value)\n```\n\n### Parameters\n\n- `index`\n  - : Zero-based index at which to change the array, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n    - Negative index counts back from the end of the array — if `-array.length <= index < 0`, `index + array.length` is used.\n    - If the index after normalization is out of bounds, a {{jsxref(\"RangeError\")}} is thrown.\n- `value`\n  - : Any value to be assigned to the given index.\n\n### Return value\n\nA new array with the element at `index` replaced with `value`.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index >= array.length` or `index < -array.length`.\n\n## Description\n\nThe `with()` method changes the value of a given index in the array, returning a new array with the element at the given index replaced with the given value. The original array is not modified. This allows you to chain array methods while doing manipulations.\n\nBy combining `with()` with {{jsxref(\"Array/at\", \"at()\")}}, you can both write and read (respectively) an array using negative indices.\n\nThe `with()` method never produces a [sparse array](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays). If the source array is sparse, the empty slots will be replaced with `undefined` in the new array.\n\nThe `with()` method is [generic](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#generic_array_methods). It only expects the `this` value to have a `length` property and integer-keyed properties.\n\n## Examples\n\n### Creating a new array with a single element changed\n\n```js\nconst arr = [1, 2, 3, 4, 5];\nconsole.log(arr.with(2, 6)); // [1, 2, 6, 4, 5]\nconsole.log(arr); // [1, 2, 3, 4, 5]\n```\n\n### Chaining array methods\n\nWith the `with()` method, you can update a single element in an array and then apply other array methods.\n\n```js\nconst arr = [1, 2, 3, 4, 5];\nconsole.log(arr.with(2, 6).map((x) => x ** 2)); // [1, 4, 36, 16, 25]\n```\n\n### Using with() on sparse arrays\n\nThe `with()` method always creates a dense array.\n\n```js\nconst arr = [1, , 3, 4, , 6];\nconsole.log(arr.with(0, 2)); // [2, undefined, 3, 4, undefined, 6]\n```\n\n### Calling with() on non-array objects\n\nThe `with()` method creates and returns a new array. It reads the `length` property of `this` and then accesses each property whose key is a nonnegative integer less than `length`. As each property of `this` is accessed, the array element having an index equal to the key of the property is set to the value of the property. Finally, the array value at `index` is set to `value`.\n\n```js\nconst arrayLike = {\n  length: 3,\n  unrelated: \"foo\",\n  0: 5,\n  2: 4,\n  3: 3, // ignored by with() since length is 3\n};\nconsole.log(Array.prototype.with.call(arrayLike, 0, 1));\n// [ 1, undefined, 4 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Array.prototype.with` in `core-js`](https://github.com/zloirock/core-js#change-array-by-copy)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array.prototype.toReversed()\")}}\n- {{jsxref(\"Array.prototype.toSorted()\")}}\n- {{jsxref(\"Array.prototype.toSpliced()\")}}\n- {{jsxref(\"Array.prototype.at()\")}}\n- {{jsxref(\"TypedArray.prototype.with()\")}}\n"
    }
  },
  "arraybuffer": {
    "@@species": {
      "index.md": "---\ntitle: ArrayBuffer[@@species]\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer/@@species\npage-type: javascript-static-accessor-property\nbrowser-compat: javascript.builtins.ArrayBuffer.@@species\n---\n\n{{JSRef}}\n\nThe **`ArrayBuffer[@@species]`** static accessor property returns the constructor used to construct return values from array buffer methods.\n\n> **Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible.\n\n## Syntax\n\n```js-nolint\nArrayBuffer[Symbol.species]\n```\n\n### Return value\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct return values from array buffer methods that create new array buffers.\n\n## Description\n\nThe `@@species` accessor property returns the default constructor for `ArrayBuffer` objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically:\n\n```js\n// Hypothetical underlying implementation for illustration\nclass ArrayBuffer {\n  static get [Symbol.species]() {\n    return this;\n  }\n}\n```\n\nBecause of this polymorphic implementation, `@@species` of derived subclasses would also return the constructor itself by default.\n\n```js\nclass SubArrayBuffer extends ArrayBuffer {}\nSubArrayBuffer[Symbol.species] === SubArrayBuffer; // true\n```\n\nWhen calling array buffer methods that do not mutate the existing object but return a new array buffer instance (for example, [`slice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice)), the object's `constructor[@@species]` will be accessed. The returned constructor will be used to construct the return value of the array buffer method.\n\n## Examples\n\n### Species in ordinary objects\n\nThe `@@species` property returns the default constructor function, which is the `ArrayBuffer` constructor for `ArrayBuffer`.\n\n```js\nArrayBuffer[Symbol.species]; // function ArrayBuffer()\n```\n\n### Species in derived objects\n\nIn an instance of a custom `ArrayBuffer` subclass, such as `MyArrayBuffer`, the `MyArrayBuffer` species is the `MyArrayBuffer` constructor. However, you might want to overwrite this, in order to return parent `ArrayBuffer` objects in your derived class methods:\n\n```js\nclass MyArrayBuffer extends ArrayBuffer {\n  // Overwrite MyArrayBuffer species to the parent ArrayBuffer constructor\n  static get [Symbol.species]() {\n    return ArrayBuffer;\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Symbol.species\")}}\n"
    },
    "arraybuffer": {
      "index.md": "---\ntitle: ArrayBuffer() constructor\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.ArrayBuffer.ArrayBuffer\n---\n\n{{JSRef}}\n\nThe **`ArrayBuffer()`** constructor creates {{jsxref(\"ArrayBuffer\")}} objects.\n\n{{EmbedInteractiveExample(\"pages/js/arraybuffer-constructor.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nnew ArrayBuffer(length)\nnew ArrayBuffer(length, options)\n```\n\n> **Note:** `ArrayBuffer()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `length`\n  - : The size, in bytes, of the array buffer to create.\n- `options` {{optional_inline}}\n  - : An object, which can contain the following properties:\n    - `maxByteLength` {{optional_inline}}\n      - : The maximum size, in bytes, that the array buffer can be resized to.\n\n### Return value\n\nA new `ArrayBuffer` object of the specified size, with its {{jsxref(\"ArrayBuffer/maxByteLength\", \"maxByteLength\")}} property set to the specified `maxByteLength` if one was specified. Its contents are initialized to 0.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown in one of the following cases:\n    - `length` or `maxByteLength` is larger than {{jsxref(\"Number.MAX_SAFE_INTEGER\")}} (≥ 2<sup>53</sup>) or negative.\n    - `length` is larger than `maxByteLength`.\n\n## Examples\n\n### Creating an ArrayBuffer\n\nIn this example, we create a 8-byte buffer with a {{jsxref(\"Int32Array\")}} view referring to the buffer:\n\n```js\nconst buffer = new ArrayBuffer(8);\nconst view = new Int32Array(buffer);\n```\n\n### Creating a resizable ArrayBuffer\n\nIn this example, we create a 8-byte buffer that is resizable to a max length of 16 bytes, then {{jsxref(\"ArrayBuffer/resize\", \"resize()\")}} it to 12 bytes:\n\n```js\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\n\nbuffer.resize(12);\n```\n\n> **Note:** It is recommended that `maxByteLength` is set to the smallest value possible for your use case. It should never exceed `1073741824` (1GB) to reduce the risk of out-of-memory errors.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `ArrayBuffer` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"SharedArrayBuffer\")}}\n"
    },
    "bytelength": {
      "index.md": "---\ntitle: ArrayBuffer.prototype.byteLength\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.ArrayBuffer.byteLength\n---\n\n{{JSRef}}\n\nThe **`byteLength`** accessor property of {{jsxref(\"ArrayBuffer\")}} instances returns the length (in bytes) of this array buffer.\n\n{{EmbedInteractiveExample(\"pages/js/arraybuffer-bytelength.html\")}}\n\n## Description\n\nThe `byteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the array is constructed and cannot be changed. This property returns 0 if this `ArrayBuffer` has been detached.\n\n## Examples\n\n### Using byteLength\n\n```js\nconst buffer = new ArrayBuffer(8);\nbuffer.byteLength; // 8\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"ArrayBuffer\")}}\n"
    },
    "detached": {
      "index.md": "---\ntitle: ArrayBuffer.prototype.detached\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer/detached\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.ArrayBuffer.detached\n---\n\n{{JSRef}}\n\nThe **`detached`** accessor property of {{jsxref(\"ArrayBuffer\")}} instances returns a boolean indicating whether or not this buffer has been detached (transferred).\n\n## Description\n\nThe `detached` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is `false` when the `ArrayBuffer` is first created. The value becomes `true` if the `ArrayBuffer` is [transferred](/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer#transferring_arraybuffers), which detaches the instance from its underlying memory. Once a buffer becomes detached, it is no longer usable.\n\n## Examples\n\n### Using detached\n\n```js\nconst buffer = new ArrayBuffer(8);\nconsole.log(buffer.detached); // false\nconst newBuffer = buffer.transfer();\nconsole.log(buffer.detached); // true\nconsole.log(newBuffer.detached); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `ArrayBuffer.prototype.detached` in `core-js`](https://github.com/zloirock/core-js#arraybufferprototypetransfer-and-friends)\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"ArrayBuffer.prototype.transfer()\")}}\n- {{jsxref(\"ArrayBuffer.prototype.transferToFixedLength()\")}}\n"
    },
    "index.md": "---\ntitle: ArrayBuffer\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer\npage-type: javascript-class\nbrowser-compat: javascript.builtins.ArrayBuffer\n---\n\n{{JSRef}}\n\nThe **`ArrayBuffer`** object is used to represent a generic raw binary data buffer.\n\nIt is an array of bytes, often referred to in other languages as a \"byte array\". You cannot directly manipulate the contents of an `ArrayBuffer`; instead, you create one of the [typed array objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) or a {{jsxref(\"DataView\")}} object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.\n\nThe [`ArrayBuffer()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer) constructor creates a new `ArrayBuffer` of the given length in bytes. You can also get an array buffer from existing data, for example, from a [Base64](/en-US/docs/Glossary/Base64) string or [from a local file](/en-US/docs/Web/API/FileReader/readAsArrayBuffer).\n\n`ArrayBuffer` is a [transferable object](/en-US/docs/Web/API/Web_Workers_API/Transferable_objects).\n\n## Description\n\n### Resizing ArrayBuffers\n\n`ArrayBuffer` objects can be made resizable by including the `maxByteLength` option when calling the {{jsxref(\"ArrayBuffer/ArrayBuffer\", \"ArrayBuffer()\")}} constructor. You can query whether an `ArrayBuffer` is resizable and what its maximum size is by accessing its {{jsxref(\"ArrayBuffer/resizable\", \"resizable\")}} and {{jsxref(\"ArrayBuffer/maxByteLength\", \"maxByteLength\")}} properties, respectively. You can assign a new size to a resizable `ArrayBuffer` with a {{jsxref(\"ArrayBuffer/resize\", \"resize()\")}} call. New bytes are initialized to 0.\n\nThese features make resizing `ArrayBuffer`s more efficient — otherwise, you have to make a copy of the buffer with a new size. It also gives JavaScript parity with WebAssembly in this regard (Wasm linear memory can be resized with [`WebAssembly.Memory.prototype.grow()`](/en-US/docs/WebAssembly/JavaScript_interface/Memory/grow)).\n\n### Transferring ArrayBuffers\n\n`ArrayBuffer` objects can be transferred between different execution contexts, like [Web Workers](/en-US/docs/Web/API/Web_Workers_API) or [Service Workers](/en-US/docs/Web/API/Service_Worker_API), using the [structured clone algorithm](/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm). This is done by passing the `ArrayBuffer` as a [transferable object](/en-US/docs/Web/API/Web_Workers_API/Transferable_objects) in a call to {{domxref(\"Worker.postMessage()\")}} or {{domxref(\"ServiceWorker.postMessage()\")}}. In pure JavaScript, you can also transfer the ownership of memory from one `ArrayBuffer` to another using its {{jsxref(\"ArrayBuffer/transfer\", \"transfer()\")}} or {{jsxref(\"ArrayBuffer/transferToFixedLength\", \"transferToFixedLength()\")}} method.\n\nWhen an `ArrayBuffer` is transferred, its original copy becomes _detached_ — this means it is no longer usable. At any moment, there will only be one copy of the `ArrayBuffer` that actually has access to the underlying memory. Detached buffers have the following behaviors:\n\n- {{jsxref(\"ArrayBuffer/byteLength\", \"byteLength\")}} becomes 0 (in both the buffer and the associated typed array views).\n- Methods, such as {{jsxref(\"ArrayBuffer/resize\", \"resize()\")}} and {{jsxref(\"ArrayBuffer/slice\", \"slice()\")}}, throw a {{jsxref(\"TypeError\")}} when invoked. The associated typed array views' methods also throw a `TypeError`.\n\nYou can check whether an `ArrayBuffer` is detached by its {{jsxref(\"ArrayBuffer/detached\", \"detached\")}} property.\n\n## Constructor\n\n- {{jsxref(\"ArrayBuffer/ArrayBuffer\", \"ArrayBuffer()\")}}\n  - : Creates a new `ArrayBuffer` object.\n\n## Static properties\n\n- {{jsxref(\"ArrayBuffer/@@species\", \"ArrayBuffer[@@species]\")}}\n  - : The constructor function that is used to create derived objects.\n\n## Static methods\n\n- {{jsxref(\"ArrayBuffer.isView()\")}}\n  - : Returns `true` if `arg` is one of the ArrayBuffer views, such as [typed array objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) or a {{jsxref(\"DataView\")}}. Returns `false` otherwise.\n\n## Instance properties\n\nThese properties are defined on `ArrayBuffer.prototype` and shared by all `ArrayBuffer` instances.\n\n- {{jsxref(\"ArrayBuffer.prototype.byteLength\")}}\n  - : The size, in bytes, of the `ArrayBuffer`. This is established when the array is constructed and can only be changed using the {{jsxref(\"ArrayBuffer.prototype.resize()\")}} method if the `ArrayBuffer` is resizable.\n- {{jsxref(\"Object/constructor\", \"ArrayBuffer.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `ArrayBuffer` instances, the initial value is the {{jsxref(\"ArrayBuffer/ArrayBuffer\", \"ArrayBuffer\")}} constructor.\n- {{jsxref(\"ArrayBuffer.prototype.detached\")}}\n  - : Read-only. Returns `true` if the `ArrayBuffer` has been detached (transferred), or `false` if not.\n- {{jsxref(\"ArrayBuffer.prototype.maxByteLength\")}}\n  - : The read-only maximum length, in bytes, that the `ArrayBuffer` can be resized to. This is established when the array is constructed and cannot be changed.\n- {{jsxref(\"ArrayBuffer.prototype.resizable\")}}\n  - : Read-only. Returns `true` if the `ArrayBuffer` can be resized, or `false` if not.\n- `ArrayBuffer.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"ArrayBuffer\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"ArrayBuffer.prototype.resize()\")}}\n  - : Resizes the `ArrayBuffer` to the specified size, in bytes.\n- {{jsxref(\"ArrayBuffer.prototype.slice()\")}}\n  - : Returns a new `ArrayBuffer` whose contents are a copy of this `ArrayBuffer`'s bytes from `begin` (inclusive) up to `end` (exclusive). If either `begin` or `end` is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n- {{jsxref(\"ArrayBuffer.prototype.transfer()\")}}\n  - : Creates a new `ArrayBuffer` with the same byte content as this buffer, then detaches this buffer.\n- {{jsxref(\"ArrayBuffer.prototype.transferToFixedLength()\")}}\n  - : Creates a new non-resizable `ArrayBuffer` with the same byte content as this buffer, then detaches this buffer.\n\n## Examples\n\n### Creating an ArrayBuffer\n\nIn this example, we create a 8-byte buffer with a {{jsxref(\"Int32Array\")}} view referring to the buffer:\n\n```js\nconst buffer = new ArrayBuffer(8);\nconst view = new Int32Array(buffer);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `ArrayBuffer` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"SharedArrayBuffer\")}}\n- [RangeError: invalid array length](/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length)\n",
    "isview": {
      "index.md": "---\ntitle: ArrayBuffer.isView()\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.ArrayBuffer.isView\n---\n\n{{JSRef}}\n\nThe **`ArrayBuffer.isView()`** static method determines whether the\npassed value is one of the `ArrayBuffer` views,\nsuch as [typed array objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)\nor a {{jsxref(\"DataView\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/arraybuffer-isview.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nArrayBuffer.isView(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value to be checked.\n\n### Return value\n\n`true` if the given argument is one of the {{jsxref(\"ArrayBuffer\")}} views;\notherwise, `false`.\n\n## Examples\n\n### Using isView\n\n```js\nArrayBuffer.isView(); // false\nArrayBuffer.isView([]); // false\nArrayBuffer.isView({}); // false\nArrayBuffer.isView(null); // false\nArrayBuffer.isView(undefined); // false\nArrayBuffer.isView(new ArrayBuffer(10)); // false\n\nArrayBuffer.isView(new Uint8Array()); // true\nArrayBuffer.isView(new Float32Array()); // true\nArrayBuffer.isView(new Int8Array(10).subarray(0, 3)); // true\n\nconst buffer = new ArrayBuffer(2);\nconst dv = new DataView(buffer);\nArrayBuffer.isView(dv); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n"
    },
    "maxbytelength": {
      "index.md": "---\ntitle: ArrayBuffer.prototype.maxByteLength\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer/maxByteLength\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.ArrayBuffer.maxByteLength\n---\n\n{{JSRef}}\n\nThe **`maxByteLength`** accessor property of {{jsxref(\"ArrayBuffer\")}} instances returns the maximum length (in bytes) that this array buffer can be resized to.\n\n{{EmbedInteractiveExample(\"pages/js/arraybuffer-maxbytelength.html\")}}\n\n## Description\n\nThe `maxByteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the array is constructed, set via the `maxByteLength` option of the {{jsxref(\"ArrayBuffer/ArrayBuffer\", \"ArrayBuffer()\")}} constructor, and cannot be changed.\n\nThis property returns 0 if this `ArrayBuffer` has been detached. If this `ArrayBuffer` was constructed without specifying a `maxByteLength` value, this property returns a value equal to the value of the `ArrayBuffer`'s {{jsxref(\"ArrayBuffer/byteLength\", \"byteLength\")}}.\n\n## Examples\n\n### Using maxByteLength\n\nIn this example, we create an 8-byte buffer that is resizable to a max length of 16 bytes, then return its `maxByteLength`:\n\n```js\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\n\nbuffer.maxByteLength; // 16\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"ArrayBuffer.prototype.byteLength\")}}\n- {{jsxref(\"ArrayBuffer.prototype.resize()\")}}\n"
    },
    "resizable": {
      "index.md": "---\ntitle: ArrayBuffer.prototype.resizable\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resizable\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.ArrayBuffer.resizable\n---\n\n{{JSRef}}\n\nThe **`resizable`** accessor property of {{jsxref(\"ArrayBuffer\")}} instances returns whether this array buffer can be resized or not.\n\n{{EmbedInteractiveExample(\"pages/js/arraybuffer-resizable.html\")}}\n\n## Description\n\nThe `resizable` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the array is constructed. If the `maxByteLength` option was set in the constructor, `resizable` will return `true`; if not, it will return `false`.\n\n## Examples\n\n### Using resizable\n\nIn this example, we create a 8-byte buffer that is resizable to a max length of 16 bytes, then check its `resizable` property, resizing it if `resizable` returns `true`:\n\n```js\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\n\nif (buffer.resizable) {\n  console.log(\"Buffer is resizable!\");\n  buffer.resize(12);\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"ArrayBuffer.prototype.maxByteLength\")}}\n- {{jsxref(\"ArrayBuffer.prototype.resize()\")}}\n"
    },
    "resize": {
      "index.md": "---\ntitle: ArrayBuffer.prototype.resize()\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resize\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.ArrayBuffer.resize\n---\n\n{{JSRef}}\n\nThe **`resize()`** method of {{jsxref(\"ArrayBuffer\")}} instances resizes the `ArrayBuffer` to the specified size, in bytes.\n\n{{EmbedInteractiveExample(\"pages/js/arraybuffer-resize.html\")}}\n\n## Syntax\n\n```js-nolint\nresize(newLength)\n```\n\n### Parameters\n\n- `newLength`\n  - : The new length, in bytes, to resize the `ArrayBuffer` to.\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if the `ArrayBuffer` is detached or is not resizable.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `newLength` is larger than the {{jsxref(\"ArrayBuffer/maxByteLength\", \"maxByteLength\")}} of the `ArrayBuffer`.\n\n## Description\n\nThe `resize()` method resizes an `ArrayBuffer` to the size specified by the `newLength` parameter, provided that the `ArrayBuffer` is [resizable](/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/resizable) and the new size is less than or equal to the {{jsxref(\"ArrayBuffer/maxByteLength\", \"maxByteLength\")}} of the `ArrayBuffer`. New bytes are initialized to 0.\n\nNote that you can use `resize()` to shrink as well as grow an `ArrayBuffer` — it is permissible for `newLength` to be smaller than the `ArrayBuffer`'s current {{jsxref(\"ArrayBuffer/byteLength\", \"byteLength\")}}.\n\n## Examples\n\n### Using resize()\n\nIn this example, we create a 8-byte buffer that is resizable to a max length of 16 bytes, then check its `resizable` property, resizing it if `resizable` returns `true`:\n\n```js\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\n\nif (buffer.resizable) {\n  console.log(\"Buffer is resizable!\");\n  buffer.resize(12);\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"ArrayBuffer.prototype.resizable\")}}\n- {{jsxref(\"ArrayBuffer.prototype.maxByteLength\")}}\n"
    },
    "slice": {
      "index.md": "---\ntitle: ArrayBuffer.prototype.slice()\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.ArrayBuffer.slice\n---\n\n{{JSRef}}\n\nThe **`slice()`** method of {{jsxref(\"ArrayBuffer\")}} instances returns a new `ArrayBuffer` whose contents are a copy of this `ArrayBuffer`'s bytes from `start`, inclusive, up to `end`, exclusive. If either `start` or `end` is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n\n{{EmbedInteractiveExample(\"pages/js/arraybuffer-slice.html\")}}\n\n## Syntax\n\n```js-nolint\nslice()\nslice(start)\nslice(start, end)\n```\n\n### Parameters\n\n- `start` {{optional_inline}}\n  - : Zero-based index at which to start extraction, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n    - Negative index counts back from the end of the buffer — if `-buffer.length <= start < 0`, `start + buffer.length` is used.\n    - If `start < -buffer.length` or `start` is omitted, `0` is used.\n    - If `start >= buffer.length`, nothing is extracted.\n- `end` {{optional_inline}}\n  - : Zero-based index at which to end extraction, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `slice()` extracts up to but not including `end`.\n    - Negative index counts back from the end of the buffer — if `-buffer.length <= end < 0`, `end + buffer.length` is used.\n    - If `end < -buffer.length`, `0` is used.\n    - If `end >= buffer.length` or `end` is omitted, `buffer.length` is used, causing all elements until the end to be extracted.\n    - If `end` implies a position before or at the position that `start` implies, nothing is extracted.\n\n### Return value\n\nA new {{jsxref(\"ArrayBuffer\")}} containing the extracted elements.\n\n## Examples\n\n### Copying an ArrayBuffer\n\n```js\nconst buf1 = new ArrayBuffer(8);\nconst buf2 = buf1.slice(0);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"SharedArrayBuffer.prototype.slice()\")}}\n"
    },
    "transfer": {
      "index.md": "---\ntitle: ArrayBuffer.prototype.transfer()\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.ArrayBuffer.transfer\n---\n\n{{JSRef}}\n\nThe **`transfer()`** method of {{jsxref(\"ArrayBuffer\")}} instances creates a new `ArrayBuffer` with the same byte content as this buffer, then detaches this buffer.\n\n## Syntax\n\n```js-nolint\ntransfer()\ntransfer(newByteLength)\n```\n\n### Parameters\n\n- `newByteLength` {{optional_inline}}\n  - : The {{jsxref(\"ArrayBuffer/byteLength\", \"byteLength\")}} of the new `ArrayBuffer`. Defaults to the `byteLength` of this `ArrayBuffer`.\n    - If `newByteLength` is smaller than the `byteLength` of this `ArrayBuffer`, the \"overflowing\" bytes are dropped.\n    - If `newByteLength` is larger than the `byteLength` of this `ArrayBuffer`, the extra bytes are filled with zeros.\n    - If this `ArrayBuffer` is resizable, `newByteLength` must not be greater than its {{jsxref(\"ArrayBuffer/maxByteLength\", \"maxByteLength\")}}.\n\n### Return value\n\nA new {{jsxref(\"ArrayBuffer\")}} object. Its contents are initialized to the contents of this `ArrayBuffer`, and extra bytes, if any, are filled with zeros. The new `ArrayBuffer` is resizable if and only if this `ArrayBuffer` is resizable, in which case its {{jsxref(\"ArrayBuffer/maxByteLength\", \"maxByteLength\")}} is the same as this `ArrayBuffer`'s. The original `ArrayBuffer` is detached.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if this `ArrayBuffer` is resizable and `newByteLength` is greater than the {{jsxref(\"ArrayBuffer/maxByteLength\", \"maxByteLength\")}} of this `ArrayBuffer`.\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if this `ArrayBuffer` is already detached.\n\n## Description\n\nThe `transfer()` method performs the same operation as the [structured clone algorithm](/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm). It copies the bytes of this `ArrayBuffer` into a new `ArrayBuffer` object, then detaches this `ArrayBuffer` object. See [transferring ArrayBuffers](/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer#transferring_arraybuffers) for more information.\n\n`transfer()` preserves the resizability of this `ArrayBuffer`. If you want the new `ArrayBuffer` to be non-resizable, use {{jsxref(\"ArrayBuffer/transferToFixedLength\", \"transferToFixedLength()\")}} instead. There's no way to transfer a buffer that makes a fixed-length buffer become resizable.\n\n`transfer()` is very efficient because implementations may implement this method as a zero-copy move or a `realloc` — there does not need to be an actual copy of the data.\n\n## Examples\n\n### Transferring an ArrayBuffer\n\n```js\n// Create an ArrayBuffer and write a few bytes\nconst buffer = new ArrayBuffer(8);\nconst view = new Uint8Array(buffer);\nview[1] = 2;\nview[7] = 4;\n\n// Copy the buffer to the same size\nconst buffer2 = buffer.transfer();\nconsole.log(buffer.detached); // true\nconsole.log(buffer2.byteLength); // 8\nconst view2 = new Uint8Array(buffer2);\nconsole.log(view2[1]); // 2\nconsole.log(view2[7]); // 4\n\n// Copy the buffer to a smaller size\nconst buffer3 = buffer2.transfer(4);\nconsole.log(buffer3.byteLength); // 4\nconst view3 = new Uint8Array(buffer3);\nconsole.log(view3[1]); // 2\nconsole.log(view3[7]); // undefined\n\n// Copy the buffer to a larger size\nconst buffer4 = buffer3.transfer(8);\nconsole.log(buffer4.byteLength); // 8\nconst view4 = new Uint8Array(buffer4);\nconsole.log(view4[1]); // 2\nconsole.log(view4[7]); // 0\n\n// Already detached, throws TypeError\nbuffer.transfer(); // TypeError: Cannot perform ArrayBuffer.prototype.transfer on a detached ArrayBuffer\n```\n\n### Transferring a resizable ArrayBuffer\n\n```js\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst view = new Uint8Array(buffer);\nview[1] = 2;\nview[7] = 4;\n\n// Copy the buffer to a smaller size\nconst buffer2 = buffer.transfer(4);\nconsole.log(buffer2.byteLength); // 4\nconsole.log(buffer2.maxByteLength); // 16\nconst view2 = new Uint8Array(buffer2);\nconsole.log(view2[1]); // 2\nconsole.log(view2[7]); // undefined\nbuffer2.resize(8);\nconsole.log(view2[7]); // 0\n\n// Copy the buffer to a larger size within maxByteLength\nconst buffer3 = buffer2.transfer(12);\nconsole.log(buffer3.byteLength); // 12\n\n// Copy the buffer to a larger size than maxByteLength\nbuffer3.transfer(20); // RangeError: Invalid array buffer length\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `ArrayBuffer.prototype.transfer()` in `core-js`](https://github.com/zloirock/core-js#arraybufferprototypetransfer-and-friends)\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"ArrayBuffer.prototype.detached\")}}\n- {{jsxref(\"ArrayBuffer.prototype.transferToFixedLength()\")}}\n"
    },
    "transfertofixedlength": {
      "index.md": "---\ntitle: ArrayBuffer.prototype.transferToFixedLength()\nslug: Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transferToFixedLength\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.ArrayBuffer.transferToFixedLength\n---\n\n{{JSRef}}\n\nThe **`transferToFixedLength()`** method of {{jsxref(\"ArrayBuffer\")}} instances creates a new non-resizable `ArrayBuffer` with the same byte content as this buffer, then detaches this buffer.\n\n## Syntax\n\n```js-nolint\ntransferToFixedLength()\ntransferToFixedLength(newByteLength)\n```\n\n### Parameters\n\n- `newByteLength`\n  - : The {{jsxref(\"ArrayBuffer/byteLength\", \"byteLength\")}} of the new `ArrayBuffer`. Defaults to the `byteLength` of this `ArrayBuffer`.\n    - If `newByteLength` is smaller than the `byteLength` of this `ArrayBuffer`, the \"overflowing\" bytes are dropped.\n    - If `newByteLength` is larger than the `byteLength` of this `ArrayBuffer`, the extra bytes are filled with zeros.\n\n### Return value\n\nA new {{jsxref(\"ArrayBuffer\")}} object. Its contents are initialized to the contents of this `ArrayBuffer`, and extra bytes, if any, are filled with zeros. The new `ArrayBuffer` is always non-resizable. The original `ArrayBuffer` is detached.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if this `ArrayBuffer` is already detached.\n\n## Description\n\nUnlike {{jsxref(\"ArrayBuffer/transfer\", \"transfer()\")}}, `transferToFixedLength()` always creates a non-resizable `ArrayBuffer`. This means `newByteLength` can be larger than the `maxByteLength`, even if this `ArrayBuffer` is resizable. See [transferring ArrayBuffers](/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer#transferring_arraybuffers) for more information.\n\n## Examples\n\n### Transferring a resizable ArrayBuffer to fixed-length\n\n```js\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst view = new Uint8Array(buffer);\nview[1] = 2;\nview[7] = 4;\n\nconst buffer2 = buffer.transferToFixedLength();\nconsole.log(buffer2.byteLength); // 8\nconsole.log(buffer2.resizable); // false\nconst view2 = new Uint8Array(buffer2);\nconsole.log(view2[1]); // 2\nconsole.log(view2[7]); // 4\n```\n\nUsing `transferToFixedLength`, `newByteLength` can be larger than the `maxByteLength` of the original `ArrayBuffer`.\n\n```js\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst view = new Uint8Array(buffer);\nview[1] = 2;\nview[7] = 4;\n\nconst buffer2 = buffer.transferToFixedLength(20);\nconsole.log(buffer2.byteLength); // 20\nconsole.log(buffer2.resizable); // false\nconst view2 = new Uint8Array(buffer2);\nconsole.log(view2[1]); // 2\nconsole.log(view2[7]); // 4\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `ArrayBuffer.prototype.transferToFixedLength()` in `core-js`](https://github.com/zloirock/core-js#arraybufferprototypetransfer-and-friends)\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"ArrayBuffer.prototype.detached\")}}\n- {{jsxref(\"ArrayBuffer.prototype.transfer()\")}}\n"
    }
  },
  "asyncfunction": {
    "asyncfunction": {
      "index.md": "---\ntitle: AsyncFunction() constructor\nslug: Web/JavaScript/Reference/Global_Objects/AsyncFunction/AsyncFunction\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.AsyncFunction.AsyncFunction\n---\n\n{{JSRef}}\n\nThe **`AsyncFunction()`** constructor creates {{jsxref(\"AsyncFunction\")}} objects.\n\nNote that `AsyncFunction` is _not_ a global object. It can be obtained with the following code:\n\n```js\nconst AsyncFunction = async function () {}.constructor;\n```\n\nThe `AsyncFunction()` constructor is not intended to be used directly, and all caveats mentioned in the {{jsxref(\"Function/Function\", \"Function()\")}} description apply to `AsyncFunction()`.\n\n## Syntax\n\n```js-nolint\nnew AsyncFunction(functionBody)\nnew AsyncFunction(arg1, functionBody)\nnew AsyncFunction(arg1, arg2, functionBody)\nnew AsyncFunction(arg1, arg2, /* …, */ argN, functionBody)\n\nAsyncFunction(functionBody)\nAsyncFunction(arg1, functionBody)\nAsyncFunction(arg1, arg2, functionBody)\nAsyncFunction(arg1, arg2, /* …, */ argN, functionBody)\n```\n\n> **Note:** `AsyncFunction()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `AsyncFunction` instance.\n\n### Parameters\n\nSee {{jsxref(\"Function/Function\", \"Function()\")}}.\n\n## Examples\n\n### Creating an async function from an AsyncFunction() constructor\n\n```js\nfunction resolveAfter2Seconds(x) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nconst AsyncFunction = async function () {}.constructor;\n\nconst fn = new AsyncFunction(\n  \"a\",\n  \"b\",\n  \"return await resolveAfter2Seconds(a) + await resolveAfter2Seconds(b);\",\n);\n\nfn(10, 20).then((v) => {\n  console.log(v); // prints 30 after 4 seconds\n});\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`async function`](/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n- [`async function` expression](/en-US/docs/Web/JavaScript/Reference/Operators/async_function)\n- [`Function()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function)\n"
    },
    "index.md": "---\ntitle: AsyncFunction\nslug: Web/JavaScript/Reference/Global_Objects/AsyncFunction\npage-type: javascript-class\nbrowser-compat: javascript.builtins.AsyncFunction\n---\n\n{{JSRef}}\n\nThe **`AsyncFunction`** object provides methods for [async functions](/en-US/docs/Web/JavaScript/Reference/Statements/async_function). In JavaScript, every async function is actually an `AsyncFunction` object.\n\nNote that `AsyncFunction` is _not_ a global object. It can be obtained with the following code:\n\n```js\nconst AsyncFunction = async function () {}.constructor;\n```\n\n`AsyncFunction` is a subclass of {{jsxref(\"Function\")}}.\n\n## Constructor\n\n- {{jsxref(\"AsyncFunction/AsyncFunction\", \"AsyncFunction()\")}}\n  - : Creates a new `AsyncFunction` object.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"Function\")}}_.\n\nThese properties are defined on `AsyncFunction.prototype` and shared by all `AsyncFunction` instances.\n\n- {{jsxref(\"Object/constructor\", \"AsyncFunction.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `AsyncFunction` instances, the initial value is the {{jsxref(\"AsyncFunction/AsyncFunction\", \"AsyncFunction\")}} constructor.\n- `AsyncFunction.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"AsyncFunction\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n> **Note:** `AsyncFunction` instances do not have the [`prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"Function\")}}_.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`async function`](/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n- [`async function` expression](/en-US/docs/Web/JavaScript/Reference/Operators/async_function)\n- {{jsxref(\"Function\")}}\n- {{jsxref(\"AsyncGeneratorFunction\")}}\n- {{jsxref(\"GeneratorFunction\")}}\n- {{jsxref(\"Functions\", \"Functions\", \"\", 1)}}\n"
  },
  "asyncgenerator": {
    "index.md": "---\ntitle: AsyncGenerator\nslug: Web/JavaScript/Reference/Global_Objects/AsyncGenerator\npage-type: javascript-class\nbrowser-compat: javascript.builtins.AsyncGenerator\n---\n\n{{JSRef}}\n\nThe **`AsyncGenerator`** object is returned by an {{jsxref(\"Statements/async_function*\", \"async generator function\", \"\", 1)}} and it conforms to both the [async iterable protocol and the async iterator protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols).\n\nAsync generator methods always yield {{jsxref(\"Promise\")}} objects.\n\n`AsyncGenerator` is a subclass of the hidden {{jsxref(\"AsyncIterator\")}} class.\n\n{{EmbedInteractiveExample(\"pages/js/expressions-async-function-asterisk.html\", \"taller\")}}\n\n## Constructor\n\nThe `AsyncGenerator` constructor is not available globally. Instances of `AsyncGenerator` must be returned from [async generator functions](/en-US/docs/Web/JavaScript/Reference/Statements/async_function*)\n\n```js\nasync function* createAsyncGenerator() {\n  yield await Promise.resolve(1);\n  yield await Promise.resolve(2);\n  yield await Promise.resolve(3);\n}\nconst asyncGen = createAsyncGenerator();\nasyncGen.next().then((res) => console.log(res.value)); // 1\nasyncGen.next().then((res) => console.log(res.value)); // 2\nasyncGen.next().then((res) => console.log(res.value)); // 3\n```\n\nIn fact, there's no JavaScript entity that corresponds to the `AsyncGenerator` constructor. There's only a hidden object which is the prototype object shared by all objects created by async generator functions. This object is often stylized as `AsyncGenerator.prototype` to make it look like a class, but it should be more appropriately called [`AsyncGeneratorFunction.prototype.prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction), because `AsyncGeneratorFunction` is an actual JavaScript entity.\n\n## Instance properties\n\nThese properties are defined on `AsyncGenerator.prototype` and shared by all `AsyncGenerator` instances.\n\n- {{jsxref(\"Object/constructor\", \"AsyncGenerator.prototype.constructor\")}}\n\n  - : The constructor function that created the instance object. For `AsyncGenerator` instances, the initial value is [`AsyncGeneratorFunction.prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction).\n\n    > **Note:** `AsyncGenerator` objects do not store a reference to the async generator function that created them.\n\n- `AsyncGenerator.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"AsyncGenerator\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n_Also inherits instance methods from its parent {{jsxref(\"AsyncIterator\")}}_.\n\n- {{jsxref(\"AsyncGenerator.prototype.next()\")}}\n  - : Returns a {{jsxref(\"Promise\")}} which will be resolved with the given value yielded by the {{jsxref(\"Operators/yield\", \"yield\")}} expression.\n- {{jsxref(\"AsyncGenerator.prototype.return()\")}}\n  - : Acts as if a `return` statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a [`try...finally`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) block.\n- {{jsxref(\"AsyncGenerator.prototype.throw()\")}}\n  - : Acts as if a `throw` statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.\n\n## Examples\n\n### Async generator iteration\n\nThe following example iterates over an async generator, logging values 1–6 to the console at decreasing time intervals. Notice how each time a Promise is yielded, but it's automatically resolved within the `for await...of` loop.\n\n```js\n// An async task. Pretend it's doing something more useful\n// in practice.\nfunction delayedValue(time, value) {\n  return new Promise((resolve /*, reject*/) => {\n    setTimeout(() => resolve(value), time);\n  });\n}\n\nasync function* generate() {\n  yield delayedValue(2000, 1);\n  yield delayedValue(100, 2);\n  yield delayedValue(500, 3);\n  yield delayedValue(250, 4);\n  yield delayedValue(125, 5);\n  yield delayedValue(50, 6);\n  console.log(\"All done!\");\n}\n\nasync function main() {\n  for await (const value of generate()) {\n    console.log(\"value\", value);\n  }\n}\n\nmain().catch((e) => console.error(e));\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Statements/function*\", \"function*\", \"\", 1)}}\n- {{jsxref(\"Statements/async_function*\", \"async function*\", \"\", 1)}}\n- [`function*` expression](/en-US/docs/Web/JavaScript/Reference/Operators/function*)\n- {{jsxref(\"GeneratorFunction\", \"Generator Function\", \"\", 1)}}\n- {{jsxref(\"AsyncGeneratorFunction\", \"Async Generator Function\", \"\", 1)}}\n- [Iterators and generators](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) guide\n",
    "next": {
      "index.md": "---\ntitle: AsyncGenerator.prototype.next()\nslug: Web/JavaScript/Reference/Global_Objects/AsyncGenerator/next\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.AsyncGenerator.next\n---\n\n{{JSRef}}\n\nThe **`next()`** method of {{jsxref(\"AsyncGenerator\")}} instances returns the next value in the sequence.\n\n## Syntax\n\n```js-nolint\nnext()\nnext(value)\n```\n\n### Parameters\n\n- `value` {{optional_inline}}\n  - : An optional value used to modify the internal state of the generator. A value passed to the `next()` method will be received by `yield`\n\n### Return value\n\nA {{jsxref(\"Promise\")}} which when resolved returns an {{jsxref(\"Object\")}} with two properties:\n\n- `done`\n  - : A boolean value:\n    - `true` if the generator is past the end of its control flow. In this case `value` specifies the _return value_ of the generator (which may be undefined).\n    - `false` if the generator is able to produce more values.\n- `value`\n  - : Any JavaScript value yielded or returned by the generator.\n\n## Examples\n\n### Using next()\n\nThe following example shows a simple generator and the object that the `next` method returns:\n\n```js\n// An async task. Pretend it's doing something more useful\n// in practice.\nfunction delayedValue(time, value) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve(value), time);\n  });\n}\n\nasync function* createAsyncGenerator() {\n  yield delayedValue(500, 1);\n  yield delayedValue(500, 2);\n  yield delayedValue(500, 3);\n}\n\nconst asyncGen = createAsyncGenerator();\nasyncGen.next().then((res) => console.log(res)); // { value: 1, done: false }\nasyncGen.next().then((res) => console.log(res)); // { value: 2, done: false }\nasyncGen.next().then((res) => console.log(res)); // { value: 3, done: false }\nasyncGen.next().then((res) => console.log(res)); // { value: undefined, done: true }\n```\n\n### Sending values to the generator\n\nIn this example, `next` is called with a value.\n\n> **Note:** The first call does not log anything, because the generator was not yielding anything initially.\n\n```js\n// An async task. Pretend it's doing something more useful\n// in practice.\nfunction sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, time);\n  });\n}\n\nasync function* createAsyncGenerator() {\n  while (true) {\n    await sleep(500);\n    const value = yield;\n    console.log(value);\n  }\n}\n\nasync function main() {\n  const asyncGen = createAsyncGenerator();\n  // No log at this step: the first value sent through `next` is lost\n  console.log(await asyncGen.next(1)); // { value: undefined, done: false }\n  // Logs 2: the value sent through `next`\n  console.log(await asyncGen.next(2)); // { value: undefined, done: false }\n}\n\nmain();\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Statements/async_function*\", \"async function*\")}}\n- [Iterators and generators](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) guide\n"
    },
    "return": {
      "index.md": "---\ntitle: AsyncGenerator.prototype.return()\nslug: Web/JavaScript/Reference/Global_Objects/AsyncGenerator/return\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.AsyncGenerator.return\n---\n\n{{JSRef}}\n\nThe **`return()`** method of {{jsxref(\"AsyncGenerator\")}} instances acts as if a `return` statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a [`try...finally`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) block.\n\n## Syntax\n\n```js-nolint\nasyncGeneratorInstance.return()\nasyncGeneratorInstance.return(value)\n```\n\n### Parameters\n\n- `value` {{optional_inline}}\n  - : The value to return.\n\n### Return value\n\nA {{jsxref(\"Promise\")}} which resolves with an {{jsxref(\"Object\")}} with two properties:\n\n- `done`\n  - : A boolean value:\n    - `true` if the generator function's control flow has reached the end.\n    - `false` if the generator function's control flow hasn't reached the end and can produce more values. This can only happen if the `return` is captured in a [`try...finally`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) and there are more `yield` expressions in the `finally` block.\n- `value`\n  - : The value that is given as an argument, or, if the `yield` expression is wrapped in a [`try...finally`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block), the value yielded/returned from the `finally` block.\n\n## Description\n\nThe `return()` method, when called, can be seen as if a `return value;` statement is inserted in the generator's body at the current suspended position, where `value` is the value passed to the `return()` method. Therefore, in a typical flow, calling `return(value)` will return `{ done: true, value: value }`. However, if the `yield` expression is wrapped in a `try...finally` block, the control flow doesn't exit the function body, but proceeds to the `finally` block instead. In this case, the value returned may be different, and `done` may even be `false`, if there are more `yield` expressions within the `finally` block.\n\n## Examples\n\n### Using return()\n\nThe following example shows a simple async generator and the `return` method.\n\n```js\n// An async task. Pretend it's doing something more useful\n// in practice.\nfunction delayedValue(time, value) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve(value), time);\n  });\n}\n\nasync function* createAsyncGenerator() {\n  yield delayedValue(500, 1);\n  yield delayedValue(500, 2);\n  yield delayedValue(500, 3);\n}\n\nconst asyncGen = createAsyncGenerator();\nasyncGen.next().then((res) => console.log(res)); // { value: 1, done: false }\nasyncGen.return(\"foo\").then((res) => console.log(res)); // { value: \"foo\", done: true }\nasyncGen.next().then((res) => console.log(res)); // { value: undefined, done: true }\n```\n\n### Using return() once a generator is complete\n\nIf no `value` argument is passed into the `return()` method, the promise will resolve as if the [next()](/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/next) method has been called. In this example the generator has completed, so the value returned is `undefined`.\n\n`return()` can still be called after the generator is in a \"completed\" state, however the generator will stay in this state.\n\n```js\nasync function* createAsyncGenerator() {\n  yield await Promise.resolve(1);\n  yield await Promise.resolve(2);\n  yield await Promise.resolve(3);\n}\nconst asyncGen = createAsyncGenerator();\nasyncGen.next().then((res) => console.log(res)); // { value: 1, done: false }\nasyncGen.next().then((res) => console.log(res)); // { value: 2, done: false }\nasyncGen.next().then((res) => console.log(res)); // { value: 3, done: false }\n// value is returned undefined, as no value is passed and generator is 'done'\nasyncGen.return().then((res) => console.log(res)); // { value: undefined, done: true }\n// we can still return a value once the generator is complete\nasyncGen.return(1).then((res) => console.log(res)); // { value: 1, done: true }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Statements/async_function*\", \"async function*\")}}\n- [Iterators and generators](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) guide\n"
    },
    "throw": {
      "index.md": "---\ntitle: AsyncGenerator.prototype.throw()\nslug: Web/JavaScript/Reference/Global_Objects/AsyncGenerator/throw\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.AsyncGenerator.throw\n---\n\n{{JSRef}}\n\nThe **`throw()`** method of {{jsxref(\"AsyncGenerator\")}} instances acts as if a `throw` statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.\n\n## Syntax\n\n```js-nolint\nasyncGeneratorInstance.throw(exception)\n```\n\n### Parameters\n\n- `exception`\n  - : The exception to throw. For debugging purposes, it is useful to make it an `instanceof` {{jsxref(\"Error\")}}.\n\n### Return value\n\nIf the thrown error is not caught, it will return a {{jsxref(\"Promise\")}} which rejects with the exception passed in.\n\nIf the exception is caught by a [`try...catch`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) and the generator resumes to yield more values, it will return a {{jsxref(\"Promise\")}} which resolves with an {{jsxref(\"Object\")}} with two properties:\n\n- `done`\n  - : A boolean value:\n    - `true` if the generator function's control flow has reached the end.\n    - `false` if the generator function is able to produce more values.\n- `value`\n  - : The value yielded from the next `yield` expression.\n\n## Examples\n\n### Using throw()\n\nThe following example shows a simple generator and an error that is thrown using the `throw` method. An error can be caught by a {{jsxref(\"Statements/try...catch\", \"try...catch\")}} block as usual.\n\n```js\n// An async task. Pretend it's doing something more useful\n// in practice.\nfunction sleep(time) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, time);\n  });\n}\n\nasync function* createAsyncGenerator() {\n  while (true) {\n    try {\n      await sleep(500);\n      yield 42;\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nconst asyncGen = createAsyncGenerator();\nasyncGen.next(1).then((res) => console.log(res)); // { value: 42, done: false }\nasyncGen\n  .throw(new Error(\"Something went wrong\")) // Error: Something went wrong\n  .then((res) => console.log(res)); // { value: 42, done: false }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Statements/async_function*\", \"async function*\")}}\n- [Iterators and generators](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) guide\n"
    }
  },
  "asyncgeneratorfunction": {
    "asyncgeneratorfunction": {
      "index.md": "---\ntitle: AsyncGeneratorFunction() constructor\nslug: Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/AsyncGeneratorFunction\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.AsyncGeneratorFunction.AsyncGeneratorFunction\n---\n\n{{JSRef}}\n\nThe **`AsyncGeneratorFunction()`** constructor creates {{jsxref(\"AsyncGeneratorFunction\")}} objects.\n\nNote that `AsyncGeneratorFunction` is not a global object. It could be obtained by evaluating the following code.\n\n```js\nconst AsyncGeneratorFunction = async function* () {}.constructor;\n```\n\nThe `AsyncGeneratorFunction()` constructor is not intended to be used directly, and all caveats mentioned in the {{jsxref(\"Function/Function\", \"Function()\")}} description apply to `AsyncGeneratorFunction()`.\n\n## Syntax\n\n```js-nolint\nnew AsyncGeneratorFunction(functionBody)\nnew AsyncGeneratorFunction(arg1, functionBody)\nnew AsyncGeneratorFunction(arg1, arg2, functionBody)\nnew AsyncGeneratorFunction(arg1, arg2, /* …, */ argN, functionBody)\n\nAsyncGeneratorFunction(functionBody)\nAsyncGeneratorFunction(arg1, functionBody)\nAsyncGeneratorFunction(arg1, arg2, functionBody)\nAsyncGeneratorFunction(arg1, arg2, /* …, */ argN, functionBody)\n```\n\n> **Note:** `AsyncGeneratorFunction()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `AsyncGeneratorFunction` instance.\n\n### Parameters\n\nSee {{jsxref(\"Function/Function\", \"Function()\")}}.\n\n## Examples\n\n### Using the constructor\n\nThe following example uses the `AsyncGeneratorFunction` constructor to create an async generator function.\n\n```js\nconst AsyncGeneratorFunction = async function* () {}.constructor;\nconst createAsyncGenerator = new AsyncGeneratorFunction(\"a\", \"yield a * 2\");\nconst asyncGen = createAsyncGenerator(10);\nasyncGen.next().then((res) => console.log(res.value)); // 20\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`async function*`](/en-US/docs/Web/JavaScript/Reference/Statements/async_function*)\n- [`async function*` expression](/en-US/docs/Web/JavaScript/Reference/Operators/async_function*)\n- [`Function()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function)\n- [Iterators and generators](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) guide\n- {{jsxref(\"Functions\", \"Functions\", \"\", 1)}}\n"
    },
    "index.md": "---\ntitle: AsyncGeneratorFunction\nslug: Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\npage-type: javascript-class\nbrowser-compat: javascript.builtins.AsyncGeneratorFunction\n---\n\n{{JSRef}}\n\nThe **`AsyncGeneratorFunction`** object provides methods for [async generator functions](/en-US/docs/Web/JavaScript/Reference/Statements/async_function*). In JavaScript, every async generator function is actually an `AsyncGeneratorFunction` object.\n\nNote that `AsyncGeneratorFunction` is _not_ a global object. It can be obtained with the following code:\n\n```js\nconst AsyncGeneratorFunction = async function* () {}.constructor;\n```\n\n`AsyncGeneratorFunction` is a subclass of {{jsxref(\"Function\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/async-functionasterisk-function.html\", \"taller\")}}\n\n## Constructor\n\n- {{jsxref(\"AsyncGeneratorFunction/AsyncGeneratorFunction\", \"AsyncGeneratorFunction()\")}}\n  - : Creates a new `AsyncGeneratorFunction` object.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"Function\")}}_.\n\nThese properties are defined on `AsyncGeneratorFunction.prototype` and shared by all `AsyncGeneratorFunction` instances.\n\n- {{jsxref(\"Object/constructor\", \"AsyncGeneratorFunction.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `AsyncGeneratorFunction` instances, the initial value is the {{jsxref(\"AsyncGeneratorFunction/AsyncGeneratorFunction\", \"AsyncGeneratorFunction\")}} constructor.\n- `AsyncGeneratorFunction.prototype.prototype`\n  - : All async generator functions share the same [`prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property, which is [`AsyncGenerator.prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator). Each async generator function instance also has its own `prototype` property. When the async generator function is called, the returned async generator object inherits from the async generator function's `prototype` property, which in turn inherits from `AsyncGeneratorFunction.prototype.prototype`.\n- `AsyncGeneratorFunction.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"AsyncGeneratorFunction\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"Function\")}}_.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`async function*`](/en-US/docs/Web/JavaScript/Reference/Statements/async_function*)\n- [`async function*` expression](/en-US/docs/Web/JavaScript/Reference/Operators/async_function*)\n- {{jsxref(\"Function\")}}\n- {{jsxref(\"AsyncFunction\")}}\n- {{jsxref(\"GeneratorFunction\")}}\n- {{jsxref(\"Functions\", \"Functions\", \"\", 1)}}\n"
  },
  "asynciterator": {
    "@@asynciterator": {
      "index.md": "---\ntitle: AsyncIterator.prototype[@@asyncIterator]()\nslug: Web/JavaScript/Reference/Global_Objects/AsyncIterator/@@asyncIterator\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.AsyncIterator.@@asyncIterator\n---\n\n{{JSRef}}\n\nThe **`[@@asyncIterator]()`** method of {{jsxref(\"AsyncIterator\")}} instances implements the [async iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) and allows built-in async iterators to be consumed by most syntaxes expecting async iterables, such as [`for await...of`](/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of) loops. It returns the value of [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this), which is the async iterator object itself.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-@@iterator.html\")}}\n\n## Syntax\n\n```js-nolint\nasyncIterator[Symbol.asyncIterator]()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe value of [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this), which is the async iterator object itself.\n\n## Examples\n\n### Iteration using for await...of loop\n\nNote that you seldom need to call this method directly. The existence of the `@@asyncIterator` method makes all built-in async iterators [async iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols), and iterating syntaxes like the `for await...of` loop automatically calls this method to obtain the async iterator to loop over.\n\n```js\nconst asyncIterator = (async function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\n(async () => {\n  for await (const value of asyncIterator) {\n    console.log(value);\n  }\n})();\n// Logs: 1, 2, 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`for await...of`](/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)\n"
    },
    "index.md": "---\ntitle: AsyncIterator\nslug: Web/JavaScript/Reference/Global_Objects/AsyncIterator\npage-type: javascript-class\nbrowser-compat: javascript.builtins.AsyncIterator\n---\n\n{{JSRef}}\n\nAn **`AsyncIterator`** object is an object that conforms to the [async iterator protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) by providing a `next()` method that returns a promise fulfilling to an iterator result object. The `AsyncIterator.prototype` object is a hidden global object that all built-in async iterators inherit from. It provides an [`@@asyncIterator`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator/@@asyncIterator) method that returns the async iterator object itself, making the async iterator also [async iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols).\n\nNote that `AsyncIterator` is _not_ a global object, although it will be in the future with the [async iterator helpers proposal](https://github.com/tc39/proposal-async-iterator-helpers). The `AsyncIterator.prototype` object shared by all built-in async iterators can be obtained with the following code:\n\n```js\nconst AsyncIteratorPrototype = Object.getPrototypeOf(\n  Object.getPrototypeOf(Object.getPrototypeOf((async function* () {})())),\n);\n```\n\n## Description\n\nCurrently, the only built-in JavaScript async iterator is the {{jsxref(\"AsyncGenerator\")}} object returned by [async generator functions](/en-US/docs/Web/JavaScript/Reference/Statements/async_function*). There are some other built-in async iterators in web API, such as the one of a {{domxref(\"ReadableStream\")}}.\n\nEach of these async iterators have a distinct prototype object, which defines the `next()` method used by the particular async iterator. All of these prototype objects inherit from `AsyncIterator.prototype`, which provides am [`@@asyncIterator`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator) method that returns the async iterator object itself, making the async iterator also [async iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols).\n\n> **Note:** `AsyncIterator.prototype` does not implement [`@@iterator`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator), so async iterators are not [sync iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) by default.\n\n## Instance methods\n\n- [`AsyncIterator.prototype[@@asyncIterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator/@@asyncIterator)\n  - : Returns the async iterator object itself. This allows async iterator objects to also be async iterable.\n\n## Examples\n\n### Using an async iterator as an async iterable\n\nAll built-in async iterators are also async iterable, so you can use them in a `for await...of` loop:\n\n```js\nconst asyncIterator = (async function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\n(async () => {\n  for await (const value of asyncIterator) {\n    console.log(value);\n  }\n})();\n// Logs: 1, 2, 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Statements/async_function*\", \"async function*\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
  },
  "atomics": {
    "add": {
      "index.md": "---\ntitle: Atomics.add()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/add\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.add\n---\n\n{{JSRef}}\n\nThe **`Atomics.add()`** static\nmethod adds a given value at a given position in the array and returns the old value at\nthat position. This atomic operation guarantees that no other write happens until the\nmodified value is written back.\n\n{{EmbedInteractiveExample(\"pages/js/atomics-add.html\")}}\n\n## Syntax\n\n```js-nolint\nAtomics.add(typedArray, index, value)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An integer typed array. One of {{jsxref(\"Int8Array\")}}, {{jsxref(\"Uint8Array\")}},\n    {{jsxref(\"Int16Array\")}}, {{jsxref(\"Uint16Array\")}}, {{jsxref(\"Int32Array\")}},\n    {{jsxref(\"Uint32Array\")}}, {{jsxref(\"BigInt64Array\")}}, or\n    {{jsxref(\"BigUint64Array\")}}.\n- `index`\n  - : The position in the `typedArray` to add a\n    `value` to.\n- `value`\n  - : The number to add.\n\n### Return value\n\nThe old value at the given position\n(`typedArray[index]`).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `typedArray` is not one of the allowed integer types.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Examples\n\n### Using add()\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\n\nAtomics.add(ta, 0, 12); // returns 0, the old value\nAtomics.load(ta, 0); // 12\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.sub()\")}}\n"
    },
    "and": {
      "index.md": "---\ntitle: Atomics.and()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/and\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.and\n---\n\n{{JSRef}}\n\nThe **`Atomics.and()`** static\nmethod computes a bitwise AND with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.\n\n{{EmbedInteractiveExample(\"pages/js/atomics-and.html\")}}\n\n## Syntax\n\n```js-nolint\nAtomics.and(typedArray, index, value)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An integer typed array. One of {{jsxref(\"Int8Array\")}}, {{jsxref(\"Uint8Array\")}},\n    {{jsxref(\"Int16Array\")}}, {{jsxref(\"Uint16Array\")}}, {{jsxref(\"Int32Array\")}},\n    {{jsxref(\"Uint32Array\")}}, {{jsxref(\"BigInt64Array\")}}, or\n    {{jsxref(\"BigUint64Array\")}}.\n- `index`\n  - : The position in the `typedArray` to compute the bitwise AND.\n- `value`\n  - : The number to compute the bitwise AND with.\n\n### Return value\n\nThe old value at the given position\n(`typedArray[index]`).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `typedArray` is not one of the allowed integer types.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Description\n\nThe bitwise AND operation only yields 1, if both `a` and `b` are\n1\\. The truth table for the AND operation is:\n\n| `a` | `b` | `a & b` |\n| --- | --- | ------- |\n| 0   | 0   | 0       |\n| 0   | 1   | 0       |\n| 1   | 0   | 0       |\n| 1   | 1   | 1       |\n\nFor example, a bitwise AND of `5 & 1` results in `0001` which\nis 1 in decimal.\n\n```plain\n5  0101\n1  0001\n   ----\n1  0001\n```\n\n## Examples\n\n### Using and()\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\nta[0] = 5;\n\nAtomics.and(ta, 0, 1); // returns 5, the old value\nAtomics.load(ta, 0); // 1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.or()\")}}\n- {{jsxref(\"Atomics.xor()\")}}\n"
    },
    "compareexchange": {
      "index.md": "---\ntitle: Atomics.compareExchange()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/compareExchange\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.compareExchange\n---\n\n{{JSRef}}\n\nThe **`Atomics.compareExchange()`** static method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value. It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.\n\n{{EmbedInteractiveExample(\"pages/js/atomics-compareexchange.html\")}}\n\n## Syntax\n\n```js-nolint\nAtomics.compareExchange(typedArray, index, expectedValue, replacementValue)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An integer typed array. One of {{jsxref(\"Int8Array\")}}, {{jsxref(\"Uint8Array\")}}, {{jsxref(\"Int16Array\")}}, {{jsxref(\"Uint16Array\")}}, {{jsxref(\"Int32Array\")}}, {{jsxref(\"Uint32Array\")}}, {{jsxref(\"BigInt64Array\")}}, or {{jsxref(\"BigUint64Array\")}}.\n- `index`\n  - : The position in the `typedArray` to exchange a `replacementValue`.\n- `expectedValue`\n  - : The value to check for equality.\n- `replacementValue`\n  - : The number to exchange.\n\n### Return value\n\nThe old value at the given position (`typedArray[index]`).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `typedArray` is not one of the allowed integer types.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Examples\n\n### Using compareExchange()\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\nta[0] = 7;\n\nAtomics.compareExchange(ta, 0, 7, 12); // returns 7, the old value\nAtomics.load(ta, 0); // 12\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.exchange()\")}}\n"
    },
    "exchange": {
      "index.md": "---\ntitle: Atomics.exchange()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/exchange\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.exchange\n---\n\n{{JSRef}}\n\nThe **`Atomics.exchange()`** static method exchanges a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.\n\n{{EmbedInteractiveExample(\"pages/js/atomics-exchange.html\")}}\n\n## Syntax\n\n```js-nolint\nAtomics.exchange(typedArray, index, value)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An integer typed array. One of {{jsxref(\"Int8Array\")}}, {{jsxref(\"Uint8Array\")}}, {{jsxref(\"Int16Array\")}}, {{jsxref(\"Uint16Array\")}}, {{jsxref(\"Int32Array\")}}, {{jsxref(\"Uint32Array\")}}, {{jsxref(\"BigInt64Array\")}}, or {{jsxref(\"BigUint64Array\")}}.\n- `index`\n  - : The position in the `typedArray` to exchange a `value`.\n- `value`\n  - : The number to exchange.\n\n### Return value\n\nThe old value at the given position (`typedArray[index]`).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `typedArray` is not one of the allowed integer types.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Examples\n\n### Using exchange()\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\n\nAtomics.exchange(ta, 0, 12); // returns 0, the old value\nAtomics.load(ta, 0); // 12\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.compareExchange()\")}}\n"
    },
    "index.md": "---\ntitle: Atomics\nslug: Web/JavaScript/Reference/Global_Objects/Atomics\npage-type: javascript-namespace\nbrowser-compat: javascript.builtins.Atomics\n---\n\n{{JSRef}}\n\nThe **`Atomics`** namespace object contains static methods for carrying out atomic operations. They are used with {{jsxref(\"SharedArrayBuffer\")}} and {{jsxref(\"ArrayBuffer\")}} objects.\n\n## Description\n\nUnlike most global objects, `Atomics` is not a constructor. You cannot use it with the [`new` operator](/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `Atomics` object as a function. All properties and methods of `Atomics` are static (just like the {{jsxref(\"Math\")}} object).\n\n### Atomic operations\n\nWhen memory is shared, multiple threads can read and write the same data in memory. Atomic operations make sure that predictable values are written and read, that operations are finished before the next operation starts and that operations are not interrupted.\n\n### Wait and notify\n\nThe `wait()` and `notify()` methods are modeled on Linux futexes (\"fast user-space mutex\") and provide ways for waiting until a certain condition becomes true and are typically used as blocking constructs.\n\n## Static properties\n\n- `Atomics[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Atomics\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Static methods\n\n- {{jsxref(\"Atomics.add()\")}}\n  - : Adds the provided value to the existing value at the specified index of the array. Returns the old value at that index.\n- {{jsxref(\"Atomics.and()\")}}\n  - : Computes a bitwise AND on the value at the specified index of the array with the provided value. Returns the old value at that index.\n- {{jsxref(\"Atomics.compareExchange()\")}}\n  - : Stores a value at the specified index of the array, if it equals a value. Returns the old value.\n- {{jsxref(\"Atomics.exchange()\")}}\n  - : Stores a value at the specified index of the array. Returns the old value.\n- {{jsxref(\"Atomics.isLockFree()\")}}\n  - : An optimization primitive that can be used to determine whether to use locks or atomic operations. Returns `true` if an atomic operation on arrays of the given element size will be implemented using a hardware atomic operation (as opposed to a lock). Experts only.\n- {{jsxref(\"Atomics.load()\")}}\n  - : Returns the value at the specified index of the array.\n- {{jsxref(\"Atomics.notify()\")}}\n  - : Notifies agents that are waiting on the specified index of the array. Returns the number of agents that were notified.\n- {{jsxref(\"Atomics.or()\")}}\n  - : Computes a bitwise OR on the value at the specified index of the array with the provided value. Returns the old value at that index.\n- {{jsxref(\"Atomics.store()\")}}\n  - : Stores a value at the specified index of the array. Returns the value.\n- {{jsxref(\"Atomics.sub()\")}}\n  - : Subtracts a value at the specified index of the array. Returns the old value at that index.\n- {{jsxref(\"Atomics.wait()\")}}\n  - : Verifies that the specified index of the array still contains a value and sleeps awaiting or times out. Returns either `\"ok\"`, `\"not-equal\"`, or `\"timed-out\"`. If waiting is not allowed in the calling agent then it throws an exception. (Most browsers will not allow `wait()` on the browser's main thread.)\n- {{jsxref(\"Atomics.waitAsync()\")}}\n  - : Waits asynchronously (i.e. without blocking, unlike `Atomics.wait`) on a shared memory location and returns a {{jsxref(\"Promise\")}}.\n- {{jsxref(\"Atomics.xor()\")}}\n  - : Computes a bitwise XOR on the value at the specified index of the array with the provided value. Returns the old value at that index.\n\n## Examples\n\n### Using Atomics\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\n\nta[0]; // 0\nta[0] = 5; // 5\n\nAtomics.add(ta, 0, 12); // 5\nAtomics.load(ta, 0); // 17\n\nAtomics.and(ta, 0, 1); // 17\nAtomics.load(ta, 0); // 1\n\nAtomics.compareExchange(ta, 0, 5, 12); // 1\nAtomics.load(ta, 0); // 1\n\nAtomics.exchange(ta, 0, 12); // 1\nAtomics.load(ta, 0); // 12\n\nAtomics.isLockFree(1); // true\nAtomics.isLockFree(2); // true\nAtomics.isLockFree(3); // false\nAtomics.isLockFree(4); // true\n\nAtomics.or(ta, 0, 1); // 12\nAtomics.load(ta, 0); // 13\n\nAtomics.store(ta, 0, 12); // 12\n\nAtomics.sub(ta, 0, 2); // 12\nAtomics.load(ta, 0); // 10\n\nAtomics.xor(ta, 0, 1); // 10\nAtomics.load(ta, 0); // 11\n```\n\n### Waiting and notifying\n\nGiven a shared `Int32Array`:\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst int32 = new Int32Array(sab);\n```\n\nA reading thread is sleeping and waiting on location 0 which is expected to be 0. As long as that is true, it will not go on. However, once the writing thread has stored a new value, it will be notified by the writing thread and return the new value (123).\n\n```js\nAtomics.wait(int32, 0, 0);\nconsole.log(int32[0]); // 123\n```\n\nA writing thread stores a new value and notifies the waiting thread once it has written:\n\n```js\nconsole.log(int32[0]); // 0;\nAtomics.store(int32, 0, 123);\nAtomics.notify(int32, 0, 1);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"ArrayBuffer\")}}\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- [Web Workers](/en-US/docs/Web/API/Web_Workers_API)\n- [Shared Memory – a brief tutorial](https://github.com/tc39/proposal-ecmascript-sharedmem/blob/main/TUTORIAL.md) in the TC39 ecmascript-sharedmem proposal\n- [A Taste of JavaScript's New Parallel Primitives](https://hacks.mozilla.org/2016/05/a-taste-of-javascripts-new-parallel-primitives/) on hacks.mozilla.org (2016)\n",
    "islockfree": {
      "index.md": "---\ntitle: Atomics.isLockFree()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/isLockFree\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.isLockFree\n---\n\n{{JSRef}}\n\nThe **`Atomics.isLockFree()`** static\nmethod is used to determine whether the `Atomics` methods use locks\nor atomic hardware operations when applied to typed arrays with the given element\nbyte size.\nIt returns `false` if the given size is not one of the [BYTES_PER_ELEMENT](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)\nproperty of integer TypedArray types.\n\n{{EmbedInteractiveExample(\"pages/js/atomics-islockfree.html\")}}\n\n## Syntax\n\n```js-nolint\nAtomics.isLockFree(size)\n```\n\n### Parameters\n\n- `size`\n  - : The size in bytes to check.\n\n### Return value\n\nA `true` or `false` value indicating whether the operation is lock free.\n\n## Examples\n\n### Using isLockFree\n\n```js\nAtomics.isLockFree(1); // true\nAtomics.isLockFree(2); // true\nAtomics.isLockFree(3); // false\nAtomics.isLockFree(4); // true\nAtomics.isLockFree(5); // false\nAtomics.isLockFree(6); // false\nAtomics.isLockFree(7); // false\nAtomics.isLockFree(8); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n"
    },
    "load": {
      "index.md": "---\ntitle: Atomics.load()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/load\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.load\n---\n\n{{JSRef}}\n\nThe **`Atomics.load()`** static\nmethod returns a value at a given position in the array.\n\n{{EmbedInteractiveExample(\"pages/js/atomics-load.html\")}}\n\n## Syntax\n\n```js-nolint\nAtomics.load(typedArray, index)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An integer typed array. One of {{jsxref(\"Int8Array\")}}, {{jsxref(\"Uint8Array\")}},\n    {{jsxref(\"Int16Array\")}}, {{jsxref(\"Uint16Array\")}}, {{jsxref(\"Int32Array\")}},\n    {{jsxref(\"Uint32Array\")}}, {{jsxref(\"BigInt64Array\")}}, or\n    {{jsxref(\"BigUint64Array\")}}.\n- `index`\n  - : The position in the `typedArray` to load from.\n\n### Return value\n\nThe value at the given position (`typedArray[index]`).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `typedArray` is not one of the allowed integer types.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Examples\n\n### Using `load`\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\n\nAtomics.add(ta, 0, 12);\nAtomics.load(ta, 0); // 12\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.store()\")}}\n"
    },
    "notify": {
      "index.md": "---\ntitle: Atomics.notify()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/notify\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.notify\n---\n\n{{JSRef}}\n\nThe **`Atomics.notify()`** static\nmethod notifies up some agents that are sleeping in the wait queue.\n\n> **Note:** This operation only works with an {{jsxref(\"Int32Array\")}} or {{jsxref(\"BigInt64Array\")}} that views a {{jsxref(\"SharedArrayBuffer\")}}.\n> It will return `0` on non-shared `ArrayBuffer` objects.\n\n## Syntax\n\n```js-nolint\nAtomics.notify(typedArray, index, count)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An {{jsxref(\"Int32Array\")}} or {{jsxref(\"BigInt64Array\")}} that views a {{jsxref(\"SharedArrayBuffer\")}}.\n- `index`\n  - : The position in the `typedArray` to wake up on.\n- `count` {{optional_inline}}\n  - : The number of sleeping agents to notify. Defaults to {{jsxref(\"Infinity\")}}.\n\n### Return value\n\n- Returns the number of woken up agents.\n- Returns `0`, if a non-shared {{jsxref(\"ArrayBuffer\")}} object is used.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `typedArray` is not an {{jsxref(\"Int32Array\")}} or {{jsxref(\"BigInt64Array\")}} that views a {{jsxref(\"SharedArrayBuffer\")}}.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Examples\n\n### Using `notify`\n\nGiven a shared `Int32Array`:\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst int32 = new Int32Array(sab);\n```\n\nA reading thread is sleeping and waiting on location 0 which is expected to be 0. As\nlong as that is true, it will not go on. However, once the writing thread has stored a\nnew value, it will be notified by the writing thread and return the new value (123).\n\n```js\nAtomics.wait(int32, 0, 0);\nconsole.log(int32[0]); // 123\n```\n\nA writing thread stores a new value and notifies the waiting thread once it has\nwritten:\n\n```js\nconsole.log(int32[0]); // 0;\nAtomics.store(int32, 0, 123);\nAtomics.notify(int32, 0, 1);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.wait()\")}}\n- {{jsxref(\"Atomics.waitAsync()\")}}\n"
    },
    "or": {
      "index.md": "---\ntitle: Atomics.or()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/or\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.or\n---\n\n{{JSRef}}\n\nThe **`Atomics.or()`** static\nmethod computes a bitwise OR with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.\n\n{{EmbedInteractiveExample(\"pages/js/atomics-or.html\")}}\n\n## Syntax\n\n```js-nolint\nAtomics.or(typedArray, index, value)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An integer typed array. One of {{jsxref(\"Int8Array\")}}, {{jsxref(\"Uint8Array\")}},\n    {{jsxref(\"Int16Array\")}}, {{jsxref(\"Uint16Array\")}}, {{jsxref(\"Int32Array\")}},\n    {{jsxref(\"Uint32Array\")}}, {{jsxref(\"BigInt64Array\")}}, or\n    {{jsxref(\"BigUint64Array\")}}.\n- `index`\n  - : The position in the `typedArray` to compute the bitwise OR.\n- `value`\n  - : The number to compute the bitwise OR with.\n\n### Return value\n\nThe old value at the given position\n(`typedArray[index]`).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `typedArray` is not one of the allowed integer types.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Description\n\nThe bitwise OR operation yields 1, if either `a` or `b` are 1.\nThe truth table for the OR operation is:\n\n| `a` | `b` | `a \\| b` |\n| --- | --- | -------- |\n| 0   | 0   | 0        |\n| 0   | 1   | 1        |\n| 1   | 0   | 1        |\n| 1   | 1   | 1        |\n\nFor example, a bitwise OR of `5 | 1` results in `0101` which is 5\nin decimal.\n\n```plain\n5  0101\n1  0001\n   ----\n5  0101\n```\n\n## Examples\n\n### Using or\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\nta[0] = 2;\n\nAtomics.or(ta, 0, 1); // returns 2, the old value\nAtomics.load(ta, 0); // 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.and()\")}}\n- {{jsxref(\"Atomics.xor()\")}}\n"
    },
    "store": {
      "index.md": "---\ntitle: Atomics.store()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/store\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.store\n---\n\n{{JSRef}}\n\nThe **`Atomics.store()`** static\nmethod stores a given value at the given position in the array and returns that value.\n\n{{EmbedInteractiveExample(\"pages/js/atomics-store.html\")}}\n\n## Syntax\n\n```js-nolint\nAtomics.store(typedArray, index, value)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An integer typed array. One of {{jsxref(\"Int8Array\")}}, {{jsxref(\"Uint8Array\")}},\n    {{jsxref(\"Int16Array\")}}, {{jsxref(\"Uint16Array\")}}, {{jsxref(\"Int32Array\")}},\n    {{jsxref(\"Uint32Array\")}}, {{jsxref(\"BigInt64Array\")}}, or\n    {{jsxref(\"BigUint64Array\")}}.\n- `index`\n  - : The position in the `typedArray` to store a\n    `value` in.\n- `value`\n  - : The number to store.\n\n### Return value\n\nThe value that has been stored.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `typedArray` is not one of the allowed integer types.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Examples\n\n### Using store()\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\n\nAtomics.store(ta, 0, 12); // 12\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.load()\")}}\n"
    },
    "sub": {
      "index.md": "---\ntitle: Atomics.sub()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/sub\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.sub\n---\n\n{{JSRef}}\n\nThe **`Atomics.sub()`** static method subtracts a given value\nat a given position in the array and returns the old value at that position. This atomic\noperation guarantees that no other write happens until the modified value is written\nback.\n\n{{EmbedInteractiveExample(\"pages/js/atomics-sub.html\")}}\n\n## Syntax\n\n```js-nolint\nAtomics.sub(typedArray, index, value)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An integer typed array. One of {{jsxref(\"Int8Array\")}}, {{jsxref(\"Uint8Array\")}},\n    {{jsxref(\"Int16Array\")}}, {{jsxref(\"Uint16Array\")}}, {{jsxref(\"Int32Array\")}},\n    {{jsxref(\"Uint32Array\")}}, {{jsxref(\"BigInt64Array\")}}, or\n    {{jsxref(\"BigUint64Array\")}}.\n- `index`\n  - : The position in the `typedArray` to subtract a\n    `value` from.\n- `value`\n  - : The number to subtract.\n\n### Return value\n\nThe old value at the given position\n(`typedArray[index]`).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `typedArray` is not one of the allowed integer types.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Examples\n\n### Using sub\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\nta[0] = 48;\n\nAtomics.sub(ta, 0, 12); // returns 48, the old value\nAtomics.load(ta, 0); // 36\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.add()\")}}\n"
    },
    "wait": {
      "index.md": "---\ntitle: Atomics.wait()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/wait\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.wait\n---\n\n{{JSRef}}\n\nThe **`Atomics.wait()`** static\nmethod verifies that a shared memory location still contains a\ngiven value and if so sleeps, awaiting a wake-up notification or times out. It returns a string which\nis either `\"ok\"`, `\"not-equal\"`, or `\"timed-out\"`.\n\n> **Note:** This operation only works with an {{jsxref(\"Int32Array\")}} or {{jsxref(\"BigInt64Array\")}} that views a {{jsxref(\"SharedArrayBuffer\")}}, and may not be allowed on the main thread.\n> For a non-blocking, asynchronous version of this method, see {{jsxref(\"Atomics.waitAsync()\")}}.\n\n## Syntax\n\n```js-nolint\nAtomics.wait(typedArray, index, value)\nAtomics.wait(typedArray, index, value, timeout)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An {{jsxref(\"Int32Array\")}} or {{jsxref(\"BigInt64Array\")}} that views a {{jsxref(\"SharedArrayBuffer\")}}.\n- `index`\n  - : The position in the `typedArray` to wait on.\n- `value`\n  - : The expected value to test.\n- `timeout` {{optional_inline}}\n  - : Time to wait in milliseconds. {{jsxref(\"NaN\")}} (and values that get converted to `NaN`, such as `undefined`) becomes {{jsxref(\"Infinity\")}}. Negative values become `0`.\n\n### Return value\n\nA string which is either `\"ok\"`, `\"not-equal\"`, or `\"timed-out\"`.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown in one of the following cases:\n    - If `typedArray` is not an {{jsxref(\"Int32Array\")}} or {{jsxref(\"BigInt64Array\")}} that views a {{jsxref(\"SharedArrayBuffer\")}}.\n    - If the current thread cannot be blocked (for example, because it's the main thread).\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Examples\n\n### Using wait()\n\nGiven a shared `Int32Array`:\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst int32 = new Int32Array(sab);\n```\n\nA reading thread is sleeping and waiting on location 0 which is expected to be 0. As\nlong as that is true, it will not go on. However, once the writing thread has stored a\nnew value, it will be notified by the writing thread and return the new value (123).\n\n```js\nAtomics.wait(int32, 0, 0);\nconsole.log(int32[0]); // 123\n```\n\nA writing thread stores a new value and notifies the waiting thread once it has\nwritten:\n\n```js\nconsole.log(int32[0]); // 0;\nAtomics.store(int32, 0, 123);\nAtomics.notify(int32, 0, 1);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.waitAsync()\")}}\n- {{jsxref(\"Atomics.notify()\")}}\n"
    },
    "waitasync": {
      "index.md": "---\ntitle: Atomics.waitAsync()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/waitAsync\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.waitAsync\n---\n\n{{JSRef}}\n\nThe **`Atomics.waitAsync()`** static method waits asynchronously on a shared memory location and returns a {{jsxref(\"Promise\")}}.\n\nUnlike {{jsxref(\"Atomics.wait()\")}}, `waitAsync` is non-blocking and usable on the main thread.\n\n> **Note:** This operation only works with an {{jsxref(\"Int32Array\")}} or {{jsxref(\"BigInt64Array\")}} that views a {{jsxref(\"SharedArrayBuffer\")}}.\n\n## Syntax\n\n```js-nolint\nAtomics.waitAsync(typedArray, index, value)\nAtomics.waitAsync(typedArray, index, value, timeout)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An {{jsxref(\"Int32Array\")}} or {{jsxref(\"BigInt64Array\")}} that views a {{jsxref(\"SharedArrayBuffer\")}}.\n- `index`\n  - : The position in the `typedArray` to wait on.\n- `value`\n  - : The expected value to test.\n- `timeout` {{optional_inline}}\n  - : Time to wait in milliseconds. {{jsxref(\"NaN\")}} (and values that get converted to `NaN`, such as `undefined`) becomes {{jsxref(\"Infinity\")}}. Negative values become `0`.\n\n### Return value\n\nAn {{jsxref(\"Object\")}} with the following properties:\n\n- `async`\n  - : A boolean indicating whether the `value` property is a {{jsxref(\"Promise\")}} or not.\n- `value`\n  - : If `async` is `false`, it will be a string which is either `\"not-equal\"` or `\"timed-out\"` (only when the `timeout` parameter is `0`). If `async` is `true`, it will be a {{jsxref(\"Promise\")}} which is fulfilled with a string value, either `\"ok\"` or `\"timed-out\"`. The promise is never rejected.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `typedArray` is not an {{jsxref(\"Int32Array\")}} or {{jsxref(\"BigInt64Array\")}} that views a {{jsxref(\"SharedArrayBuffer\")}}.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Examples\n\n### Using waitAsync()\n\nGiven a shared `Int32Array`.\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst int32 = new Int32Array(sab);\n```\n\nA reading thread is sleeping and waiting on location 0 which is expected to be 0.\nThe `result.value` will be a promise.\n\n```js\nconst result = Atomics.waitAsync(int32, 0, 0, 1000);\n// { async: true, value: Promise {<pending>} }\n```\n\nIn the reading thread or in another thread, the memory location 0 is called and the promise can be resolved with `\"ok\"`.\n\n```js\nAtomics.notify(int32, 0);\n// { async: true, value: Promise {<fulfilled>: 'ok'} }\n```\n\nIf it isn't resolving to `\"ok\"`, the value in the shared memory location wasn't the expected (the `value` would be `\"not-equal\"` instead of a promise) or the timeout was reached (the promise will resolve to `\"time-out\"`).\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.wait()\")}}\n- {{jsxref(\"Atomics.notify()\")}}\n"
    },
    "xor": {
      "index.md": "---\ntitle: Atomics.xor()\nslug: Web/JavaScript/Reference/Global_Objects/Atomics/xor\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Atomics.xor\n---\n\n{{JSRef}}\n\nThe **`Atomics.xor()`** static\nmethod computes a bitwise XOR with a given value at a given position in the array, and\nreturns the old value at that position. This atomic operation guarantees that no other\nwrite happens until the modified value is written back.\n\n{{EmbedInteractiveExample(\"pages/js/atomics-xor.html\")}}\n\n## Syntax\n\n```js-nolint\nAtomics.xor(typedArray, index, value)\n```\n\n### Parameters\n\n- `typedArray`\n  - : An integer typed array. One of {{jsxref(\"Int8Array\")}}, {{jsxref(\"Uint8Array\")}},\n    {{jsxref(\"Int16Array\")}}, {{jsxref(\"Uint16Array\")}}, {{jsxref(\"Int32Array\")}},\n    {{jsxref(\"Uint32Array\")}}, {{jsxref(\"BigInt64Array\")}}, or\n    {{jsxref(\"BigUint64Array\")}}.\n- `index`\n  - : The position in the `typedArray` to compute the bitwise XOR.\n- `value`\n  - : The number to compute the bitwise XOR with.\n\n### Return value\n\nThe old value at the given position (`typedArray[index]`).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `typedArray` is not one of the allowed integer types.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index` is out of bounds in the `typedArray`.\n\n## Description\n\nThe bitwise XOR operation yields 1, if `a` and `b` are different.\nThe truth table for the XOR operation is:\n\n| `a` | `b` | `a ^ b` |\n| --- | --- | ------- |\n| 0   | 0   | 0       |\n| 0   | 1   | 1       |\n| 1   | 0   | 1       |\n| 1   | 1   | 0       |\n\nFor example, a bitwise XOR of `5 ^ 1` results in `0100` which is\n4 in decimal.\n\n```plain\n5  0101\n1  0001\n   ----\n4  0100\n```\n\n## Examples\n\n### Using xor\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nconst ta = new Uint8Array(sab);\nta[0] = 5;\n\nAtomics.xor(ta, 0, 1); // returns 5, the old value\nAtomics.load(ta, 0); // 4\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"Atomics.and()\")}}\n- {{jsxref(\"Atomics.or()\")}}\n"
    }
  },
  "bigint": {
    "asintn": {
      "index.md": "---\ntitle: BigInt.asIntN()\nslug: Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.BigInt.asIntN\n---\n\n{{JSRef}}\n\nThe **`BigInt.asIntN()`** static method truncates a `BigInt` value to the given number of least significant bits and returns that value as a signed integer.\n\n{{EmbedInteractiveExample(\"pages/js/bigint-asintn.html\")}}\n\n## Syntax\n\n```js-nolint\nBigInt.asIntN(bits, bigint)\n```\n\n### Parameters\n\n- `bits`\n  - : The amount of bits available for the returned BigInt. Should be an integer between 0 and 2<sup>53</sup> - 1, inclusive.\n- `bigint`\n  - : The BigInt value to truncate to fit into the supplied bits.\n\n### Return value\n\nThe value of `bigint` modulo 2^`bits`, as a signed integer.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `bits` is negative or greater than 2<sup>53</sup> - 1.\n\n## Description\n\nThe `BigInt.asIntN` method truncates a `BigInt` value to the given number of bits, and interprets the result as a signed integer. For example, for `BigInt.asIntN(3, 25n)`, the value `25n` is truncated to `1n`:\n\n```plain\n25n = 00011001 (base 2)\n          ^=== Use only the three remaining bits\n===>       001 (base 2) = 1n\n```\n\nIf the leading bit of the remaining number is `1`, the result is negative. For example, `BigInt.asIntN(4, 25n)` yields `-7n`, because `1001` is the encoding of `-7` under two's complement:\n\n```plain\n25n = 00011001 (base 2)\n         ^==== Use only the four remaining bits\n===>      1001 (base 2) = -7n\n```\n\n> **Note:** `BigInt` values are always encoded as two's complement in binary.\n\nUnlike similar language APIs such as {{jsxref(\"Number.prototype.toExponential()\")}}, `asIntN` is a static property of {{jsxref(\"BigInt\")}}, so you always use it as `BigInt.asIntN()`, rather than as a method of a BigInt value. Exposing `asIntN()` as a \"standard library function\" allows [interop with asm.js](https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md#dont-break-asmjs).\n\n## Examples\n\n### Staying in 64-bit ranges\n\nThe `BigInt.asIntN()` method can be useful to stay in the range of 64-bit arithmetic.\n\n```js\nconst max = 2n ** (64n - 1n) - 1n;\n\nBigInt.asIntN(64, max); // 9223372036854775807n\n\nBigInt.asIntN(64, max + 1n); // -9223372036854775808n\n// negative because the 64th bit of 2^63 is 1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"BigInt\")}}\n- {{jsxref(\"BigInt.asUintN()\")}}\n"
    },
    "asuintn": {
      "index.md": "---\ntitle: BigInt.asUintN()\nslug: Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.BigInt.asUintN\n---\n\n{{JSRef}}\n\nThe **`BigInt.asUintN()`** static method truncates a `BigInt` value to the given number of least significant bits and returns that value as an unsigned integer.\n\n{{EmbedInteractiveExample(\"pages/js/bigint-asuintn.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nBigInt.asUintN(bits, bigint)\n```\n\n### Parameters\n\n- `bits`\n  - : The amount of bits available for the returned BigInt. Should be an integer between 0 and 2<sup>53</sup> - 1, inclusive.\n- `bigint`\n  - : The BigInt value to truncate to fit into the supplied bits.\n\n### Return value\n\nThe value of `bigint` modulo 2^`bits`, as an unsigned integer.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `bits` is negative or greater than 2<sup>53</sup> - 1.\n\n## Description\n\nThe `BigInt.asUintN` method truncates a `BigInt` value to the given number of bits, and interprets the result as an unsigned integer. Unsigned integers have no sign bits and are always non-negative. For example, for `BigInt.asUintN(4, 25n)`, the value `25n` is truncated to `9n`:\n\n```plain\n25n = 00011001 (base 2)\n         ^==== Use only the four remaining bits\n===>      1001 (base 2) = 9n\n```\n\n> **Note:** `BigInt` values are always encoded as two's complement in binary.\n\nUnlike similar language APIs such as {{jsxref(\"Number.prototype.toExponential()\")}}, `asUintN` is a static property of {{jsxref(\"BigInt\")}}, so you always use it as `BigInt.asUintN()`, rather than as a method of a BigInt value. Exposing `asUintN()` as a \"standard library function\" allows [interop with asm.js](https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md#dont-break-asmjs).\n\n## Examples\n\n### Staying in 64-bit ranges\n\nThe `BigInt.asUintN()` method can be useful to stay in the range of 64-bit arithmetic.\n\n```js\nconst max = 2n ** 64n - 1n;\n\nBigInt.asUintN(64, max); // 18446744073709551615n\n\nBigInt.asUintN(64, max + 1n); // 0n\n// zero because of overflow: the lowest 64 bits are all zeros\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"BigInt\")}}\n- {{jsxref(\"BigInt.asIntN()\")}}\n"
    },
    "bigint": {
      "index.md": "---\ntitle: BigInt() constructor\nslug: Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.BigInt.BigInt\n---\n\n{{JSRef}}\n\nThe **`BigInt()`** function returns primitive values of type BigInt.\n\n## Syntax\n\n```js-nolint\nBigInt(value)\n```\n\n> **Note:** `BigInt()` can only be called without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to construct it with `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `value`\n  - : The value to be converted to a BigInt value. It may be a string, an integer, a boolean, or another `BigInt`.\n\n### Return value\n\nA {{jsxref(\"BigInt\")}} value. Number values must be integers and are converted to BigInts. The boolean value `true` becomes `1n`, and `false` becomes `0n`. Strings are parsed as if they are source text for integer literals, which means they can have leading and trailing whitespaces and can be prefixed with `0b`, `0o`, or `0x`.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the parameter is a non-integral number.\n- {{jsxref(\"TypeError\")}}\n  - : Thrown in one of the following cases:\n    - The parameter cannot be converted to a primitive.\n    - After conversion to a primitive, the result is {{jsxref(\"undefined\")}}, {{jsxref(\"Operators/null\", \"null\")}}, {{jsxref(\"symbol\")}}.\n- {{jsxref(\"SyntaxError\")}}\n  - : Thrown if the parameter is a string that cannot be parsed as a `BigInt`.\n\n## Examples\n\n### Using BigInt() to convert a number to a BigInt\n\n`BigInt()` is the only case where a number can be converted to a BigInt without throwing, because it's very explicit. However, only integers are allowed.\n\n```js\nBigInt(123); // 123n\nBigInt(123.3); // RangeError: The number 123.3 cannot be converted to a BigInt because it is not an integer\n```\n\n### Using string values\n\n```js\nBigInt(\"123\"); // 123n\nBigInt(\"0b10101\"); // 21n, which is 10101 in binary\nBigInt(\"0o123\"); // 83n, which is 123 in octal\nBigInt(\"0x123\"); // 291n, which is 123 in hexadecimal\nBigInt(\"  123  \"); // 123n, leading and trailing whitespaces are allowed\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"BigInt\")}}\n"
    },
    "index.md": "---\ntitle: BigInt\nslug: Web/JavaScript/Reference/Global_Objects/BigInt\npage-type: javascript-class\nbrowser-compat: javascript.builtins.BigInt\n---\n\n{{JSRef}}\n\n**`BigInt`** values represent numeric values which are [too large](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) to be represented by the `number` {{Glossary(\"Primitive\", \"primitive\")}}.\n\n## Description\n\nA **BigInt value**, also sometimes just called a **BigInt**, is a `bigint` {{Glossary(\"Primitive\", \"primitive\")}}, created by appending `n` to the end of an integer literal, or by calling the {{jsxref(\"BigInt/BigInt\", \"BigInt()\")}} function (without the `new` operator) and giving it an integer value or string value.\n\n```js\nconst previouslyMaxSafeInteger = 9007199254740991n;\n\nconst alsoHuge = BigInt(9007199254740991);\n// 9007199254740991n\n\nconst hugeString = BigInt(\"9007199254740991\");\n// 9007199254740991n\n\nconst hugeHex = BigInt(\"0x1fffffffffffff\");\n// 9007199254740991n\n\nconst hugeOctal = BigInt(\"0o377777777777777777\");\n// 9007199254740991n\n\nconst hugeBin = BigInt(\n  \"0b11111111111111111111111111111111111111111111111111111\",\n);\n// 9007199254740991n\n```\n\nBigInt values are similar to Number values in some ways, but also differ in a few key matters: A BigInt value cannot be used with methods in the built-in [`Math`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) object and cannot be mixed with a Number value in operations; they must be coerced to the same type. Be careful coercing values back and forth, however, as the precision of a BigInt value may be lost when it is coerced to a Number value.\n\n### Type information\n\nWhen tested against `typeof`, a BigInt value (`bigint` primitive) will give `\"bigint\"`:\n\n```js\ntypeof 1n === \"bigint\"; // true\ntypeof BigInt(\"1\") === \"bigint\"; // true\n```\n\nA BigInt value can also be wrapped in an `Object`:\n\n```js\ntypeof Object(1n) === \"object\"; // true\n```\n\n### Operators\n\nMost operators support BigInts, however most do not permit operands to be of mixed types — both operands must be BigInt or neither:\n\n- [Arithmetic operators](/en-US/docs/Web/JavaScript/Reference/Operators#arithmetic_operators): `+`, `-`, `*`, `/`, `%`, `**`\n- [Bitwise operators](/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_shift_operators): `>>`, `<<`, `&`, `|`, `^`, `~`\n- [Unary negation (`-`)](/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation)\n- [Increment/decrement](/en-US/docs/Web/JavaScript/Reference/Operators#increment_and_decrement): `++`, `--`\n\nThe boolean-returning operators allow mixing numbers and BigInts as operands:\n\n- [Relational operators](/en-US/docs/Web/JavaScript/Reference/Operators#relational_operators) and [equality operators](/en-US/docs/Web/JavaScript/Reference/Operators#equality_operators): `>`, `<`, `>=`, `<=`, `==`, `!=`, `===`, `!==`\n- [Logical operators](/en-US/docs/Web/JavaScript/Reference/Operators#binary_logical_operators) only rely on the [truthiness](/en-US/docs/Glossary/Truthy) of operands\n\nA couple of operators do not support BigInt at all:\n\n- [Unary plus (`+`)](/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus) cannot be supported due to conflicting usage in asm.js, so it has been left out [in order to not break asm.js](https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md#dont-break-asmjs).\n- [Unsigned right shift (`>>>`)](/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift) is the only bitwise operator that's unsupported, as every BigInt value is signed.\n\nSpecial cases:\n\n- Addition (`+`) involving a string and a BigInt returns a string.\n- Division (`/`) truncates fractional components towards zero, since BigInt is unable to represent fractional quantities.\n\n```js\nconst previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER); // 9007199254740991n\nconst maxPlusOne = previousMaxSafe + 1n; // 9007199254740992n\nconst theFuture = previousMaxSafe + 2n; // 9007199254740993n, this works now!\nconst multi = previousMaxSafe * 2n; // 18014398509481982n\nconst subtr = multi - 10n; // 18014398509481972n\nconst mod = multi % 10n; // 2n\nconst bigN = 2n ** 54n; // 18014398509481984n\nbigN * -1n; // -18014398509481984n\nconst expected = 4n / 2n; // 2n\nconst truncated = 5n / 2n; // 2n, not 2.5n\n```\n\n### Comparisons\n\nA BigInt value is not strictly equal to a Number value, but it _is_ loosely so:\n\n```js\n0n === 0; // false\n0n == 0; // true\n```\n\nA Number value and a BigInt value may be compared as usual:\n\n```js\n1n < 2; // true\n2n > 1; // true\n2 > 2; // false\n2n > 2; // false\n2n >= 2; // true\n```\n\nBigInt values and Number values may be mixed in arrays and sorted:\n\n```js\nconst mixed = [4n, 6, -12n, 10, 4, 0, 0n];\n// [4n, 6, -12n, 10, 4, 0, 0n]\n\nmixed.sort(); // default sorting behavior\n// [ -12n, 0, 0n, 10, 4n, 4, 6 ]\n\nmixed.sort((a, b) => a - b);\n// won't work since subtraction will not work with mixed types\n// TypeError: can't convert BigInt value to Number value\n\n// sort with an appropriate numeric comparator\nmixed.sort((a, b) => (a < b ? -1 : a > b ? 1 : 0));\n// [ -12n, 0, 0n, 4n, 4, 6, 10 ]\n```\n\nNote that comparisons with `Object`-wrapped BigInt values act as with other objects, only indicating equality when the same object instance is compared:\n\n```js\nObject(0n) === 0n; // false\nObject(0n) === Object(0n); // false\n\nconst o = Object(0n);\no === o; // true\n```\n\nBecause coercing between Number values and BigInt values can lead to loss of precision, the following are recommended:\n\n- Only use a BigInt value when values greater than 2<sup>53</sup> are reasonably expected.\n- Don't coerce between BigInt values and Number values.\n\n### Conditionals\n\nA BigInt value follows the same conversion rules as Numbers when:\n\n- it is converted to a [`Boolean`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean): via the [`Boolean`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) function;\n- when used with [logical operators](/en-US/docs/Web/JavaScript/Reference/Operators) `||`, `&&`, and `!`; or\n- within a conditional test like an [`if`](/en-US/docs/Web/JavaScript/Reference/Statements/if...else) statement.\n\nNamely, only `0n` is [falsy](/en-US/docs/Glossary/Falsy); everything else is [truthy](/en-US/docs/Glossary/Truthy).\n\n```js\nif (0n) {\n  console.log(\"Hello from the if!\");\n} else {\n  console.log(\"Hello from the else!\");\n}\n// \"Hello from the else!\"\n\n0n || 12n; // 12n\n0n && 12n; // 0n\nBoolean(0n); // false\nBoolean(12n); // true\n!12n; // false\n!0n; // true\n```\n\n### Cryptography\n\nThe operations supported on BigInt values are not constant-time and are thus open to [timing attacks](https://en.wikipedia.org/wiki/Timing_attack). JavaScript BigInts therefore could be dangerous for use in cryptography without mitigating factors. As a very generic example, an attacker could measure the time difference between `101n ** 65537n` and `17n ** 9999n`, and deduce the magnitude of secrets, such as private keys, based on the time elapsed. If you still have to use BigInts, take a look at the [Timing attack FAQ](https://timing.attacks.cr.yp.to/programming.html) for general advice regarding the issue.\n\n### Use within JSON\n\nUsing [`JSON.stringify()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) with any BigInt value will raise a `TypeError`, as BigInt values aren't serialized in JSON by default. However, `JSON.stringify()` specifically leaves a backdoor for BigInt values: it would try to call the BigInt's `toJSON()` method. (It doesn't do so for any other primitive values.) Therefore, you can implement your own `toJSON()` method (which is one of the few cases where patching built-in objects is not explicitly discouraged):\n\n```js\nBigInt.prototype.toJSON = function () {\n  return this.toString();\n};\n```\n\nInstead of throwing, `JSON.stringify()` now produces a string like this:\n\n```js\nconsole.log(JSON.stringify({ a: 1n }));\n// {\"a\":\"1\"}\n```\n\nIf you do not wish to patch `BigInt.prototype`, you can use the [`replacer`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter) parameter of `JSON.stringify` to serialize BigInt values:\n\n```js\nconst replacer = (key, value) =>\n  typeof value === \"bigint\" ? value.toString() : value;\n\nconst data = {\n  number: 1,\n  big: 18014398509481982n,\n};\nconst stringified = JSON.stringify(data, replacer);\n\nconsole.log(stringified);\n// {\"number\":1,\"big\":\"18014398509481982\"}\n```\n\nIf you have JSON data containing values you know will be large integers, you can use the [`reviver`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#using_the_reviver_parameter) parameter of `JSON.parse` to handle them:\n\n```js\nconst reviver = (key, value) => (key === \"big\" ? BigInt(value) : value);\n\nconst payload = '{\"number\":1,\"big\":\"18014398509481982\"}';\nconst parsed = JSON.parse(payload, reviver);\n\nconsole.log(parsed);\n// { number: 1, big: 18014398509481982n }\n```\n\n> **Note:** While it's possible to make the replacer of `JSON.stringify()` generic and properly serialize BigInt values for all objects, the reviver of `JSON.parse()` must be specific to the payload shape you expect, because the serialization is _lossy_: it's not possible to distinguish between a string that represents a BigInt and a normal string.\n\n### BigInt coercion\n\nMany built-in operations that expect BigInts first coerce their arguments to BigInts. [The operation](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tobigint) can be summarized as follows:\n\n- BigInts are returned as-is.\n- [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) throw a {{jsxref(\"TypeError\")}}.\n- `true` turns into `1n`; `false` turns into `0n`.\n- Strings are converted by parsing them as if they contain an integer literal. Any parsing failure results in a {{jsxref(\"SyntaxError\")}}. The syntax is a subset of [string numeric literals](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), where decimal points or exponent indicators are not allowed.\n- [Numbers](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) throw a {{jsxref(\"TypeError\")}} to prevent unintended implicit coercion causing loss of precision.\n- [Symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) throw a {{jsxref(\"TypeError\")}}.\n- Objects are first [converted to a primitive](/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) by calling their [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) (with `\"number\"` as hint), `valueOf()`, and `toString()` methods, in that order. The resulting primitive is then converted to a BigInt.\n\nThe best way to achieve nearly the same effect in JavaScript is through the [`BigInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function: `BigInt(x)` uses the same algorithm to convert `x`, except that [Numbers](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) don't throw a {{jsxref(\"TypeError\")}}, but are converted to BigInts if they are integers.\n\nNote that built-in operations expecting BigInts often truncate the BigInt to a fixed width after coercion. This includes {{jsxref(\"BigInt.asIntN()\")}}, {{jsxref(\"BigInt.asUintN()\")}}, and methods of {{jsxref(\"BigInt64Array\")}} and {{jsxref(\"BigUint64Array\")}}.\n\n## Constructor\n\n- {{jsxref(\"BigInt/BigInt\", \"BigInt()\")}}\n  - : Creates a new BigInt value.\n\n## Static methods\n\n- {{jsxref(\"BigInt.asIntN()\")}}\n  - : Clamps a BigInt value to a signed integer value, and returns that value.\n- {{jsxref(\"BigInt.asUintN()\")}}\n  - : Clamps a BigInt value to an unsigned integer value, and returns that value.\n\n## Instance properties\n\nThese properties are defined on `BigInt.prototype` and shared by all `BigInt` instances.\n\n- {{jsxref(\"Object/constructor\", \"BigInt.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `BigInt` instances, the initial value is the {{jsxref(\"BigInt/BigInt\", \"BigInt\")}} constructor.\n- `BigInt.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"BigInt\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}. However, because `BigInt` also has its own [`toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString) method, this property is not used unless you call [`Object.prototype.toString.call()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) with a BigInt as `thisArg`.\n\n## Instance methods\n\n- {{jsxref(\"BigInt.prototype.toLocaleString()\")}}\n  - : Returns a string with a language-sensitive representation of this BigInt value. Overrides the [`Object.prototype.toLocaleString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString) method.\n- {{jsxref(\"BigInt.prototype.toString()\")}}\n  - : Returns a string representing this BigInt value in the specified radix (base). Overrides the [`Object.prototype.toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method.\n- {{jsxref(\"BigInt.prototype.valueOf()\")}}\n  - : Returns this BigInt value. Overrides the [`Object.prototype.valueOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) method.\n\n## Examples\n\n### Calculating Primes\n\n```js\n// Returns true if the passed BigInt value is a prime number\nfunction isPrime(p) {\n  for (let i = 2n; i * i <= p; i++) {\n    if (p % i === 0n) return false;\n  }\n  return true;\n}\n\n// Takes a BigInt value as an argument, returns nth prime number as a BigInt value\nfunction nthPrime(nth) {\n  let maybePrime = 2n;\n  let prime = 0n;\n\n  while (nth >= 0n) {\n    if (isPrime(maybePrime)) {\n      nth--;\n      prime = maybePrime;\n    }\n    maybePrime++;\n  }\n\n  return prime;\n}\n\nnthPrime(20n);\n// 73n\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`Number`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\n- [`Number.MAX_SAFE_INTEGER`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\n",
    "tolocalestring": {
      "index.md": "---\ntitle: BigInt.prototype.toLocaleString()\nslug: Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.BigInt.toLocaleString\n---\n\n{{JSRef}}\n\nThe **`toLocaleString()`** method of {{jsxref(\"BigInt\")}} values returns a string with a language-sensitive representation of this BigInt. In implementations with [`Intl.NumberFormat` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) support, this method simply calls `Intl.NumberFormat`.\n\nEvery time `toLocaleString` is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a {{jsxref(\"Intl.NumberFormat\")}} object and use its {{jsxref(\"Intl/NumberFormat/format\", \"format()\")}} method, because a `NumberFormat` object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.\n\n{{EmbedInteractiveExample(\"pages/js/bigint-tolocalestring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n```\n\n### Parameters\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.NumberFormat` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat), these parameters correspond exactly to the [`Intl.NumberFormat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor's parameters. Implementations without `Intl.NumberFormat` support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales) parameter of the `Intl.NumberFormat()` constructor.\n\n    In implementations without `Intl.NumberFormat` support, this parameter is ignored and the host's locale is usually used.\n\n- `options` {{optional_inline}}\n\n  - : An object adjusting the output format. Corresponds to the [`options`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options) parameter of the `Intl.NumberFormat()` constructor.\n\n    In implementations without `Intl.NumberFormat` support, this parameter is ignored.\n\nSee the [`Intl.NumberFormat()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) for details on these parameters and how to use them.\n\n### Return value\n\nA string representing the given BigInt according to language-specific conventions.\n\nIn implementations with `Intl.NumberFormat`, this is equivalent to `new Intl.NumberFormat(locales, options).format(number)`.\n\n> **Note:** Most of the time, the formatting returned by `toLocaleString()` is consistent. However, the output may vary with time, language, and implementation — output variations are by design and allowed by the specification. You should not compare the results of `toLocaleString()` to static values.\n\n## Examples\n\n### Using toLocaleString()\n\nBasic use of this method without specifying a `locale` returns a formatted string in the default locale and with default options.\n\n```js\nconst bigint = 3500n;\n\nconsole.log(bigint.toLocaleString());\n// \"3,500\" if in U.S. English locale\n```\n\n### Checking for support for locales and options parameters\n\nThe `locales` and `options` parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, `toLocaleString()` always uses the system's locale, which may not be what you want. Because any implementation that supports the `locales` and `options` parameters must support the {{jsxref(\"Intl\")}} API, you can check the existence of the latter for support:\n\n```js\nfunction toLocaleStringSupportsLocales() {\n  return (\n    typeof Intl === \"object\" &&\n    !!Intl &&\n    typeof Intl.NumberFormat === \"function\"\n  );\n}\n```\n\n### Using locales\n\nThis example shows some of the variations in localized number formats. In order to get\nthe format of the language used in the user interface of your application, make sure to\nspecify that language (and possibly some fallback languages) using the\n`locales` argument:\n\n```js\nconst bigint = 123456789123456789n;\n\n// German uses period for thousands\nconsole.log(bigint.toLocaleString(\"de-DE\"));\n// 123.456.789.123.456.789\n\n// Arabic in most Arabic speaking countries uses Eastern Arabic digits\nconsole.log(bigint.toLocaleString(\"ar-EG\"));\n// ١٢٣٬٤٥٦٬٧٨٩٬١٢٣٬٤٥٦٬٧٨٩\n\n// India uses thousands/lakh/crore separators\nconsole.log(bigint.toLocaleString(\"en-IN\"));\n// 1,23,45,67,89,12,34,56,789\n\n// the nu extension key requests a numbering system, e.g. Chinese decimal\nconsole.log(bigint.toLocaleString(\"zh-Hans-CN-u-nu-hanidec\"));\n// 一二三,四五六,七八九,一二三,四五六,七八九\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(bigint.toLocaleString([\"ban\", \"id\"]));\n// 123.456.789.123.456.789\n```\n\n### Using options\n\nThe results provided by `toLocaleString()` can be customized using the `options` parameter:\n\n```js\nconst bigint = 123456789123456789n;\n\n// request a currency format\nconsole.log(\n  bigint.toLocaleString(\"de-DE\", { style: \"currency\", currency: \"EUR\" }),\n);\n// 123.456.789.123.456.789,00 €\n\n// the Japanese yen doesn't use a minor unit\nconsole.log(\n  bigint.toLocaleString(\"ja-JP\", { style: \"currency\", currency: \"JPY\" }),\n);\n// ￥123,456,789,123,456,789\n\n// limit to three significant digits\nconsole.log(bigint.toLocaleString(\"en-IN\", { maximumSignificantDigits: 3 }));\n// 1,23,00,00,00,00,00,00,000\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.NumberFormat\")}}\n- {{jsxref(\"BigInt.prototype.toString()\")}}\n"
    },
    "tostring": {
      "index.md": "---\ntitle: BigInt.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/BigInt/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.BigInt.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"BigInt\")}} values returns a string representing the specified {{jsxref(\"BigInt\")}} value. The trailing \"n\" is not part of the string.\n\n{{EmbedInteractiveExample(\"pages/js/bigint-tostring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\ntoString(radix)\n```\n\n### Parameters\n\n- `radix` {{optional_inline}}\n  - : An integer in the range 2 through 36 specifying the base to use for representing the BigInt value. Defaults to 10.\n\n### Return value\n\nA string representing the specified {{jsxref(\"BigInt\")}} value.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `radix` is less than 2 or greater than 36.\n\n## Description\n\nThe {{jsxref(\"BigInt\")}} object overrides the `toString` method of {{jsxref(\"Object\")}}; it does not inherit\n{{jsxref(\"Object.prototype.toString()\")}}. For {{jsxref(\"BigInt\")}} values, the `toString()` method returns a string representation of the value in the specified radix.\n\nFor radixes above 10, the letters of the alphabet indicate digits greater than 9. For example, for hexadecimal numbers (base 16) `a` through `f` are used.\n\nIf the specified BigInt value is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the BigInt value preceded by a `-` sign, **not** the two's complement of the BigInt value.\n\nThe `toString()` method requires its `this` value to be a `BigInt` primitive or wrapper object. It throws a {{jsxref(\"TypeError\")}} for other `this` values without attempting to coerce them to BigInt values.\n\nBecause `BigInt` doesn't have a [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, JavaScript calls the `toString()` method automatically when a `BigInt` _object_ is used in a context expecting a string, such as in a [template literal](/en-US/docs/Web/JavaScript/Reference/Template_literals). However, BigInt _primitive_ values do not consult the `toString()` method to be [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) — rather, they are directly converted using the same algorithm as the initial `toString()` implementation.\n\n```js\nBigInt.prototype.toString = () => \"Overridden\";\nconsole.log(`${1n}`); // \"1\"\nconsole.log(`${Object(1n)}`); // \"Overridden\"\n```\n\n## Examples\n\n### Using toString()\n\n```js\n17n.toString(); // \"17\"\n66n.toString(2); // \"1000010\"\n254n.toString(16); // \"fe\"\n(-10n).toString(2); // \"-1010\"\n(-0xffn).toString(2); // \"-11111111\"\n```\n\n### Negative-zero BigInt\n\nThere is no negative-zero `BigInt` as there are no negative zeros in integers. `-0.0` is an IEEE floating-point concept that only appears in the JavaScript [`Number`](/en-US/docs/Web/JavaScript/Data_structures#number_type) type.\n\n```js\n(-0n).toString(); // \"0\"\nBigInt(-0).toString(); // \"0\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"BigInt.prototype.toLocaleString()\")}}\n- {{jsxref(\"BigInt.prototype.valueOf()\")}}\n- {{jsxref(\"Number.prototype.toString()\")}}\n"
    },
    "valueof": {
      "index.md": "---\ntitle: BigInt.prototype.valueOf()\nslug: Web/JavaScript/Reference/Global_Objects/BigInt/valueOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.BigInt.valueOf\n---\n\n{{JSRef}}\n\nThe **`valueOf()`** method of {{jsxref(\"BigInt\")}} values returns the wrapped primitive value\nof a {{jsxref(\"BigInt\")}} object.\n\n{{EmbedInteractiveExample(\"pages/js/bigint-valueof.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nvalueOf()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA BigInt representing the primitive value of the specified {{jsxref(\"BigInt\")}} object.\n\n## Examples\n\n### Using `valueOf`\n\n```js\ntypeof Object(1n); // object\ntypeof Object(1n).valueOf(); // bigint\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"BigInt.prototype.toString()\")}}\n"
    }
  },
  "bigint64array": {
    "bigint64array": {
      "index.md": "---\ntitle: BigInt64Array() constructor\nslug: Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.BigInt64Array.BigInt64Array\n---\n\n{{JSRef}}\n\nThe **`BigInt64Array()`** constructor creates {{jsxref(\"BigInt64Array\")}} objects. The contents are initialized to `0n`.\n\n## Syntax\n\n```js-nolint\nnew BigInt64Array()\nnew BigInt64Array(length)\nnew BigInt64Array(typedArray)\nnew BigInt64Array(object)\n\nnew BigInt64Array(buffer)\nnew BigInt64Array(buffer, byteOffset)\nnew BigInt64Array(buffer, byteOffset, length)\n```\n\n> **Note:** `BigInt64Array()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#parameters).\n\n### Exceptions\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#exceptions).\n\n## Examples\n\n### Different ways to create a BigInt64Array\n\n```js\n// From a length\nconst bigint64 = new BigInt64Array(2);\nbigint64[0] = 42n;\nconsole.log(bigint64[0]); // 42n\nconsole.log(bigint64.length); // 2\nconsole.log(bigint64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new BigInt64Array([21n, 31n]);\nconsole.log(x[1]); // 31n\n\n// From another TypedArray\nconst y = new BigInt64Array(x);\nconsole.log(y[0]); // 21n\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new BigInt64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1n, 2n, 3n];\n})();\nconst bigint64FromIterable = new BigInt64Array(iterable);\nconsole.log(bigint64FromIterable);\n// BigInt64Array [1n, 2n, 3n]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
    },
    "index.md": "---\ntitle: BigInt64Array\nslug: Web/JavaScript/Reference/Global_Objects/BigInt64Array\npage-type: javascript-class\nbrowser-compat: javascript.builtins.BigInt64Array\n---\n\n{{JSRef}}\n\nThe **`BigInt64Array`** typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use {{jsxref(\"DataView\")}} instead. The contents are initialized to `0n`. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`BigInt64Array` is a subclass of the hidden {{jsxref(\"TypedArray\")}} class.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-bigint64.html\", \"taller\")}}\n\n## Constructor\n\n- {{jsxref(\"BigInt64Array/BigInt64Array\", \"BigInt64Array()\")}}\n  - : Creates a new `BigInt64Array` object.\n\n## Static properties\n\n_Also inherits static properties from its parent {{jsxref(\"TypedArray\")}}_.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"BigInt64Array.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `8` in the case of `BigInt64Array`.\n\n## Static methods\n\n_Inherits static methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"TypedArray\")}}_.\n\nThese properties are defined on `BigInt64Array.prototype` and shared by all `BigInt64Array` instances.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"BigInt64Array.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `8` in the case of a `BigInt64Array`.\n- {{jsxref(\"Object/constructor\", \"BigInt64Array.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `BigInt64Array` instances, the initial value is the {{jsxref(\"BigInt64Array/BigInt64Array\", \"BigInt64Array\")}} constructor.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Examples\n\n### Different ways to create a BigInt64Array\n\n```js\n// From a length\nconst bigint64 = new BigInt64Array(2);\nbigint64[0] = 42n;\nconsole.log(bigint64[0]); // 42n\nconsole.log(bigint64.length); // 2\nconsole.log(bigint64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new BigInt64Array([21n, 31n]);\nconsole.log(x[1]); // 31n\n\n// From another TypedArray\nconst y = new BigInt64Array(x);\nconsole.log(y[0]); // 21n\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new BigInt64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1n, 2n, 3n];\n})();\nconst bigint64FromIterable = new BigInt64Array(iterable);\nconsole.log(bigint64FromIterable);\n// BigInt64Array [1n, 2n, 3n]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
  },
  "biguint64array": {
    "biguint64array": {
      "index.md": "---\ntitle: BigUint64Array() constructor\nslug: Web/JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.BigUint64Array.BigUint64Array\n---\n\n{{JSRef}}\n\nThe **`BigUint64Array()`** constructor creates {{jsxref(\"BigUint64Array\")}} objects. The contents are initialized to `0n`.\n\n## Syntax\n\n```js-nolint\nnew BigUint64Array()\nnew BigUint64Array(length)\nnew BigUint64Array(typedArray)\nnew BigUint64Array(object)\n\nnew BigUint64Array(buffer)\nnew BigUint64Array(buffer, byteOffset)\nnew BigUint64Array(buffer, byteOffset, length)\n```\n\n> **Note:** `BigUint64Array()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#parameters).\n\n### Exceptions\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#exceptions).\n\n## Examples\n\n### Different ways to create a BigUint64Array\n\n```js\n// From a length\nconst biguint64 = new BigUint64Array(2);\nbiguint64[0] = 42n;\nconsole.log(biguint64[0]); // 42n\nconsole.log(biguint64.length); // 2\nconsole.log(biguint64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new BigUint64Array([21n, 31n]);\nconsole.log(x[1]); // 31n\n\n// From another TypedArray\nconst y = new BigUint64Array(x);\nconsole.log(y[0]); // 21n\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new BigUint64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1n, 2n, 3n];\n})();\nconst biguint64FromIterable = new BigUint64Array(iterable);\nconsole.log(biguint64FromIterable);\n// BigUint64Array [1n, 2n, 3n]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
    },
    "index.md": "---\ntitle: BigUint64Array\nslug: Web/JavaScript/Reference/Global_Objects/BigUint64Array\npage-type: javascript-class\nbrowser-compat: javascript.builtins.BigUint64Array\n---\n\n{{JSRef}}\n\nThe **`BigUint64Array`** typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use {{jsxref(\"DataView\")}} instead. The contents are initialized to `0n`. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`BigUint64Array` is a subclass of the hidden {{jsxref(\"TypedArray\")}} class.\n\n## Constructor\n\n- {{jsxref(\"BigUint64Array/BigUint64Array\", \"BigUint64Array()\")}}\n  - : Creates a new `BigUint64Array` object.\n\n## Static properties\n\n_Also inherits static properties from its parent {{jsxref(\"TypedArray\")}}_.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"BigUint64Array.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `8` in the case of `BigUint64Array`.\n\n## Static methods\n\n_Inherits static methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"TypedArray\")}}_.\n\nThese properties are defined on `BigUint64Array.prototype` and shared by all `BigUint64Array` instances.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"BigUint64Array.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `8` in the case of a `BigUint64Array`.\n- {{jsxref(\"Object/constructor\", \"BigUint64Array.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `BigUint64Array` instances, the initial value is the {{jsxref(\"BigUint64Array/BigUint64Array\", \"BigUint64Array\")}} constructor.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Examples\n\n### Different ways to create a BigUint64Array\n\n```js\n// From a length\nconst biguint64 = new BigUint64Array(2);\nbiguint64[0] = 42n;\nconsole.log(biguint64[0]); // 42n\nconsole.log(biguint64.length); // 2\nconsole.log(biguint64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new BigUint64Array([21n, 31n]);\nconsole.log(x[1]); // 31n\n\n// From another TypedArray\nconst y = new BigUint64Array(x);\nconsole.log(y[0]); // 21n\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new BigUint64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1n, 2n, 3n];\n})();\nconst biguint64FromIterable = new BigUint64Array(iterable);\nconsole.log(biguint64FromIterable);\n// BigUint64Array [1n, 2n, 3n]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
  },
  "boolean": {
    "boolean": {
      "index.md": "---\ntitle: Boolean() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Boolean/Boolean\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Boolean.Boolean\n---\n\n{{JSRef}}\n\nThe **`Boolean()`** constructor creates {{jsxref(\"Boolean\")}} objects. When called as a function, it returns primitive values of type Boolean.\n\n{{EmbedInteractiveExample(\"pages/js/boolean-constructor.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nnew Boolean(value)\nBoolean(value)\n```\n\n> **Note:** `Boolean()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new), but with different effects. See [Return value](#return_value).\n\n### Parameters\n\n- `value`\n  - : The initial value of the `Boolean` object.\n\n### Return value\n\nWhen `Boolean()` is called as a constructor (with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new)), it creates a {{jsxref(\"Boolean\")}} object, which is **not** a primitive.\n\nWhen `Boolean()` is called as a function (without `new`), it coerces the parameter to a boolean primitive.\n\n> **Warning:** You should rarely find yourself using `Boolean` as a constructor.\n\n## Description\n\nThe value passed as the first parameter is [converted to a boolean value](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion). If the value is omitted or is `0`, `-0`, `0n`, [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null), `false`, {{jsxref(\"NaN\")}}, {{jsxref(\"undefined\")}}, or the empty string (`\"\"`), then the object has an initial value of `false`. All other values, including any object, an empty array (`[]`), or the string `\"false\"`, create an object with an initial value of `true`.\n\n> **Note:** When the non-standard property [`document.all`](/en-US/docs/Web/API/Document/all) is used as an argument for this constructor, the result is a `Boolean` object with the value `false`. This property is legacy and non-standard and should not be used.\n\n## Examples\n\n### Creating Boolean objects with an initial value of false\n\n```js\nconst bZero = new Boolean(0);\nconst bNull = new Boolean(null);\nconst bEmptyString = new Boolean(\"\");\nconst bfalse = new Boolean(false);\n\ntypeof bfalse; // \"object\"\nBoolean(bfalse); // true\n```\n\nNote how converting a `Boolean` object to a primitive with `Boolean()` always yields `true`, even if the object holds a value of `false`. You are therefore always advised to avoid constructing `Boolean` wrapper objects.\n\nIf you need to take the primitive value out from the wrapper object, instead of using the `Boolean()` function, use the object's [`valueOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf) method instead.\n\n```js\nconst bfalse = new Boolean(false);\n\nbfalse.valueOf(); // false\n```\n\n### Creating `Boolean` objects with an initial value of `true`\n\n```js\nconst btrue = new Boolean(true);\nconst btrueString = new Boolean(\"true\");\nconst bfalseString = new Boolean(\"false\");\nconst bSuLin = new Boolean(\"Su Lin\");\nconst bArrayProto = new Boolean([]);\nconst bObjProto = new Boolean({});\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Boolean](/en-US/docs/Glossary/Boolean)\n"
    },
    "index.md": "---\ntitle: Boolean\nslug: Web/JavaScript/Reference/Global_Objects/Boolean\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Boolean\n---\n\n{{JSRef}}\n\nThe **`Boolean`** object represents a truth value: `true` or `false`.\n\n## Description\n\n### Boolean primitives and Boolean objects\n\nDo not confuse the {{Glossary(\"Primitive\", \"primitive\")}} `Boolean` values `true` and `false` with the `true` and `false` values of the `Boolean` object.\n\n**Any** object, including a `Boolean` object whose value is `false`, evaluates to `true` when passed to a conditional statement. For example, the condition in the following {{jsxref(\"Statements/if...else\", \"if\")}} statement evaluates to `true`:\n\n```js\nconst x = new Boolean(false);\nif (x) {\n  // this code is executed\n}\n```\n\nThis behavior does not apply to `Boolean` primitives. For example, the condition in the following {{jsxref(\"Statements/if...else\", \"if\")}} statement evaluates to `false`:\n\n```js\nconst x = false;\nif (x) {\n  // this code is not executed\n}\n```\n\nDo not use the `Boolean()` constructor with `new` to convert a non-boolean value to a boolean value — use `Boolean` as a function or a [double NOT](/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!) instead:\n\n```js\nconst good = Boolean(expression); // use this\nconst good2 = !!expression; // or this\nconst bad = new Boolean(expression); // don't use this!\n```\n\nIf you specify any object, including a `Boolean` object whose value is `false`, as the initial value of a `Boolean` object, the new `Boolean` object has a value of `true`.\n\n```js\nconst myFalse = new Boolean(false); // initial value of false\nconst g = Boolean(myFalse); // initial value of true\nconst myString = new String(\"Hello\"); // string object\nconst s = Boolean(myString); // initial value of true\n```\n\n> **Warning:** You should rarely find yourself using `Boolean` as a constructor.\n\n### Boolean coercion\n\nMany built-in operations that expect booleans first coerce their arguments to booleans. [The operation](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toboolean) can be summarized as follows:\n\n- Booleans are returned as-is.\n- [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) turns into `false`.\n- [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) turns into `false`.\n- `0`, `-0`, and `NaN` turn into `false`; other numbers turn into `true`.\n- `0n` turns into `false`; other [BigInts](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) turn into `true`.\n- The empty string `\"\"` turns into `false`; other strings turn into `true`.\n- [Symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) turn into `true`.\n- All objects become `true`.\n\n> **Note:** A legacy behavior makes [`document.all`](/en-US/docs/Web/API/Document/all) return `false` when used as a boolean, despite it being an object. This property is legacy and non-standard and should not be used.\n\n> **Note:** Unlike other type conversions like [string coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) or [number coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), boolean coercion does not attempt to convert objects to primitives.\n\nIn other words, there are only a handful of values that get coerced to `false` — these are called [falsy](/en-US/docs/Glossary/Falsy) values. All other values are called [truthy](/en-US/docs/Glossary/Truthy) values. A value's truthiness is important when used with logical operators, conditional statements, or any boolean context.\n\nThere are two ways to achieve the same effect in JavaScript.\n\n- [Double NOT](/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#double_not_!!): `!!x` negates `x` twice, which converts `x` to a boolean using the same algorithm as above.\n- The [`Boolean()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean) function: `Boolean(x)` uses the same algorithm as above to convert `x`.\n\nNote that truthiness is not the same as being [loosely equal](/en-US/docs/Web/JavaScript/Reference/Operators/Equality) to `true` or `false`.\n\n```js\nif ([]) {\n  console.log(\"[] is truthy\");\n}\nif ([] == false) {\n  console.log(\"[] == false\");\n}\n// [] is truthy\n// [] == false\n```\n\n`[]` is truthy, but it's also loosely equal to `false`. It's truthy, because all objects are truthy. However, when comparing with `false`, which is a primitive, `[]` is also converted to a primitive, which is `\"\"` via {{jsxref(\"Array.prototype.toString()\")}}. Comparing strings and booleans results in both being [converted to numbers](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), and they both become `0`, so `[] == false` is `true`. In general, falsiness and `== false` differ in the following cases:\n\n- `NaN`, `undefined`, and `null` are falsy but not loosely equal to `false`.\n- `\"0\"` (and other string literals that are not `\"\"` but [get coerced to 0](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion)) is truthy but loosely equal to `false`.\n- Objects are always truthy, but their primitive representation may be loosely equal to `false`.\n\nTruthy values are even more unlikely to be loosely equal to `true`. All values are either truthy or falsy, but most values are loosely equal to neither `true` nor `false`.\n\n## Constructor\n\n- {{jsxref(\"Boolean/Boolean\", \"Boolean()\")}}\n  - : Creates a new `Boolean` object.\n\n## Instance properties\n\nThese properties are defined on `Boolean.prototype` and shared by all `Boolean` instances.\n\n- {{jsxref(\"Object/constructor\", \"Boolean.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Boolean` instances, the initial value is the {{jsxref(\"Boolean/Boolean\", \"Boolean\")}} constructor.\n\n## Instance methods\n\n- {{jsxref(\"Boolean.prototype.toString()\")}}\n  - : Returns a string of either `true` or `false` depending upon the value of the object. Overrides the {{jsxref(\"Object.prototype.toString()\")}} method.\n- {{jsxref(\"Boolean.prototype.valueOf()\")}}\n  - : Returns the primitive value of the {{jsxref(\"Boolean\")}} object. Overrides the {{jsxref(\"Object.prototype.valueOf()\")}} method.\n\n## Examples\n\n### Creating Boolean objects with an initial value of false\n\n```js\nconst bNoParam = new Boolean();\nconst bZero = new Boolean(0);\nconst bNull = new Boolean(null);\nconst bEmptyString = new Boolean(\"\");\nconst bfalse = new Boolean(false);\n```\n\n### Creating Boolean objects with an initial value of true\n\n```js\nconst btrue = new Boolean(true);\nconst btrueString = new Boolean(\"true\");\nconst bfalseString = new Boolean(\"false\");\nconst bSuLin = new Boolean(\"Su Lin\");\nconst bArrayProto = new Boolean([]);\nconst bObjProto = new Boolean({});\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Boolean](/en-US/docs/Glossary/Boolean)\n- [Boolean primitives](/en-US/docs/Web/JavaScript/Data_structures#boolean_type)\n- [Boolean data type](https://en.wikipedia.org/wiki/Boolean_data_type) on Wikipedia\n",
    "tostring": {
      "index.md": "---\ntitle: Boolean.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/Boolean/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Boolean.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"Boolean\")}} values returns a string representing the specified boolean value.\n\n{{EmbedInteractiveExample(\"pages/js/boolean-tostring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the specified boolean value.\n\n## Description\n\nThe {{jsxref(\"Boolean\")}} object overrides the `toString` method of {{jsxref(\"Object\")}}; it does not inherit\n{{jsxref(\"Object.prototype.toString()\")}}. For `Boolean` values, the `toString` method returns a string representation of the boolean value, which is either `\"true\"` or `\"false\"`.\n\nThe `toString()` method requires its `this` value to be a `Boolean` primitive or wrapper object. It throws a {{jsxref(\"TypeError\")}} for other `this` values without attempting to coerce them to boolean values.\n\nBecause `Boolean` doesn't have a [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, JavaScript calls the `toString()` method automatically when a `Boolean` _object_ is used in a context expecting a string, such as in a [template literal](/en-US/docs/Web/JavaScript/Reference/Template_literals). However, boolean _primitive_ values do not consult the `toString()` method to be [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) — rather, they are directly converted using the same algorithm as the initial `toString()` implementation.\n\n```js\nBoolean.prototype.toString = () => \"Overridden\";\nconsole.log(`${true}`); // \"true\"\nconsole.log(`${new Boolean(true)}`); // \"Overridden\"\n```\n\n## Examples\n\n### Using toString()\n\n```js\nconst flag = new Boolean(true);\nconsole.log(flag.toString()); // \"true\"\nconsole.log(false.toString()); // \"false\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.toString()\")}}\n"
    },
    "valueof": {
      "index.md": "---\ntitle: Boolean.prototype.valueOf()\nslug: Web/JavaScript/Reference/Global_Objects/Boolean/valueOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Boolean.valueOf\n---\n\n{{JSRef}}\n\nThe **`valueOf()`** method of {{jsxref(\"Boolean\")}} values returns the primitive value of a\n{{jsxref(\"Boolean\")}} object.\n\n{{EmbedInteractiveExample(\"pages/js/boolean-valueof.html\")}}\n\n## Syntax\n\n```js-nolint\nvalueOf()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe primitive value of the given {{jsxref(\"Boolean\")}} object.\n\n## Description\n\nThe `valueOf()` method of {{jsxref(\"Boolean\")}} returns the primitive value\nof a `Boolean` object or literal `Boolean` as a Boolean data type.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n## Examples\n\n### Using `valueOf()`\n\n```js\nx = new Boolean();\nmyVar = x.valueOf(); // assigns false to myVar\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.valueOf()\")}}\n"
    }
  },
  "dataview": {
    "buffer": {
      "index.md": "---\ntitle: DataView.prototype.buffer\nslug: Web/JavaScript/Reference/Global_Objects/DataView/buffer\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.DataView.buffer\n---\n\n{{JSRef}}\n\nThe **`buffer`** accessor property of {{jsxref(\"DataView\")}} instances returns the {{jsxref(\"ArrayBuffer\")}} or {{jsxref(\"SharedArrayBuffer\")}} referenced by this view at construction time.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-buffer.html\")}}\n\n## Description\n\nThe `buffer` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the `DataView` is constructed and cannot be changed.\n\n## Examples\n\n### Using the buffer property\n\n```js\nconst buffer = new ArrayBuffer(8);\nconst dataview = new DataView(buffer);\ndataview.buffer; // ArrayBuffer { byteLength: 8 }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"SharedArrayBuffer\")}}\n"
    },
    "bytelength": {
      "index.md": "---\ntitle: DataView.prototype.byteLength\nslug: Web/JavaScript/Reference/Global_Objects/DataView/byteLength\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.DataView.byteLength\n---\n\n{{JSRef}}\n\nThe **`byteLength`** accessor property of {{jsxref(\"DataView\")}} instances returns the length (in bytes) of this view.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-bytelength.html\")}}\n\n## Description\n\nThe `byteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when an `DataView` is constructed and cannot be changed. If the `DataView` is not specifying an offset or a `byteLength`, the `byteLength` of the referenced `ArrayBuffer` or `SharedArrayBuffer` will be returned.\n\n## Examples\n\n### Using the byteLength property\n\n```js\nconst buffer = new ArrayBuffer(8);\nconst dataview = new DataView(buffer);\ndataview.byteLength; // 8 (matches the byteLength of the buffer)\n\nconst dataview2 = new DataView(buffer, 1, 5);\ndataview2.byteLength; // 5 (as specified when constructing the DataView)\n\nconst dataview3 = new DataView(buffer, 2);\ndataview3.byteLength; // 6 (due to the offset of the constructed DataView)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"SharedArrayBuffer\")}}\n"
    },
    "byteoffset": {
      "index.md": "---\ntitle: DataView.prototype.byteOffset\nslug: Web/JavaScript/Reference/Global_Objects/DataView/byteOffset\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.DataView.byteOffset\n---\n\n{{JSRef}}\n\nThe **`byteOffset`** accessor property of {{jsxref(\"DataView\")}} instances returns the offset (in bytes) of this view from the start of its {{jsxref(\"ArrayBuffer\")}} or {{jsxref(\"SharedArrayBuffer\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-byteoffset.html\")}}\n\n## Description\n\nThe `byteOffset` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when an `DataView` is constructed and cannot be changed.\n\n## Examples\n\n### Using the byteOffset property\n\n```js\nconst buffer = new ArrayBuffer(8);\nconst dataview = new DataView(buffer);\ndataview.byteOffset; // 0 (no offset specified)\n\nconst dataview2 = new DataView(buffer, 3);\ndataview2.byteOffset; // 3 (as specified when constructing the DataView)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"SharedArrayBuffer\")}}\n"
    },
    "dataview": {
      "index.md": "---\ntitle: DataView() constructor\nslug: Web/JavaScript/Reference/Global_Objects/DataView/DataView\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.DataView.DataView\n---\n\n{{JSRef}}\n\nThe **`DataView()`** constructor creates {{jsxref(\"DataView\")}} objects.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-constructor.html\")}}\n\n## Syntax\n\n```js-nolint\nnew DataView(buffer)\nnew DataView(buffer, byteOffset)\nnew DataView(buffer, byteOffset, byteLength)\n```\n\n> **Note:** `DataView()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `buffer`\n  - : An existing {{jsxref(\"ArrayBuffer\")}} or {{jsxref(\"SharedArrayBuffer\")}} to use as\n    the storage backing the new `DataView` object.\n- `byteOffset` {{optional_inline}}\n  - : The offset, in bytes, to the first byte in the above buffer for the new view to\n    reference. If unspecified, the buffer view starts with the first byte.\n- `byteLength` {{optional_inline}}\n  - : The number of elements in the byte array. If unspecified, the view's length will\n    match the buffer's length.\n\n### Return value\n\nA new {{jsxref(\"DataView\")}} object representing the specified data buffer.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` or `byteLength` parameter values result in the view extending past the end of the buffer. In other words, `byteOffset + byteLength > buffer.byteLength`.\n\n## Examples\n\n### Using DataView\n\n```js\nconst buffer = new ArrayBuffer(16);\nconst view = new DataView(buffer, 0);\n\nview.setInt16(1, 42);\nview.getInt16(1); // 42\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `DataView` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- {{jsxref(\"DataView\")}}\n"
    },
    "getbigint64": {
      "index.md": "---\ntitle: DataView.prototype.getBigInt64()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/getBigInt64\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.getBigInt64\n---\n\n{{JSRef}}\n\nThe **`getBigInt64()`** method of {{jsxref(\"DataView\")}} instances reads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-getbigint64.html\")}}\n\n## Syntax\n\n```js-nolint\ngetBigInt64(byteOffset)\ngetBigInt64(byteOffset, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to read the data from.\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### Return value\n\nA {{jsxref(\"BigInt\")}} from -2<sup>63</sup> to 2<sup>63</sup>-1, inclusive.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## Examples\n\n### Using getBigInt64()\n\n```js\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getBigInt64(1)); // 72623859790382856n\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"BigInt64Array\")}}\n"
    },
    "getbiguint64": {
      "index.md": "---\ntitle: DataView.prototype.getBigUint64()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/getBigUint64\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.getBigUint64\n---\n\n{{JSRef}}\n\nThe **`getBigUint64()`** method of {{jsxref(\"DataView\")}} instances reads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-getbiguint64.html\")}}\n\n## Syntax\n\n```js-nolint\ngetBigUint64(byteOffset)\ngetBigUint64(byteOffset, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to read the data from.\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### Return value\n\nA {{jsxref(\"BigInt\")}} from 0 to 2<sup>64</sup>-1, inclusive.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## Examples\n\n### Using getBigUint64()\n\n```js\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getBigUint64(1)); // 72623859790382856n\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"BigUint64Array\")}}\n"
    },
    "getfloat32": {
      "index.md": "---\ntitle: DataView.prototype.getFloat32()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/getFloat32\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.getFloat32\n---\n\n{{JSRef}}\n\nThe **`getFloat32()`** method of {{jsxref(\"DataView\")}} instances reads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-getfloat32.html\")}}\n\n## Syntax\n\n```js-nolint\ngetFloat32(byteOffset)\ngetFloat32(byteOffset, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to read the data from.\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### Return value\n\nA floating point number from `-3.4e38` to `3.4e38`.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## Examples\n\n### Using getFloat32()\n\n```js\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getFloat32(1)); // 2.387939260590663e-38\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Float32Array\")}}\n"
    },
    "getfloat64": {
      "index.md": "---\ntitle: DataView.prototype.getFloat64()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/getFloat64\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.getFloat64\n---\n\n{{JSRef}}\n\nThe **`getFloat64()`** method of {{jsxref(\"DataView\")}} instances reads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit floating point number. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-getfloat64.html\")}}\n\n## Syntax\n\n```js-nolint\ngetFloat64(byteOffset)\ngetFloat64(byteOffset, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to read the data from.\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### Return value\n\nAny number value.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## Examples\n\n### Using getFloat64()\n\n```js\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getFloat64(1)); // 8.20788039913184e-304\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Float64Array\")}}\n"
    },
    "getint16": {
      "index.md": "---\ntitle: DataView.prototype.getInt16()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/getInt16\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.getInt16\n---\n\n{{JSRef}}\n\nThe **`getInt16()`** method of {{jsxref(\"DataView\")}} instances reads 2 bytes starting at the specified byte offset of this `DataView` and interprets them as a 16-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-getint16.html\")}}\n\n## Syntax\n\n```js-nolint\ngetInt16(byteOffset)\ngetInt16(byteOffset, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to read the data from.\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### Return value\n\nAn integer from -32768 to 32767, inclusive.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## Examples\n\n### Using getInt16()\n\n```js\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getInt16(1)); // 258\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Int16Array\")}}\n"
    },
    "getint32": {
      "index.md": "---\ntitle: DataView.prototype.getInt32()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/getInt32\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.getInt32\n---\n\n{{JSRef}}\n\nThe **`getInt32()`** method of {{jsxref(\"DataView\")}} instances reads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit signed integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-getint32.html\")}}\n\n## Syntax\n\n```js-nolint\ngetInt32(byteOffset)\ngetInt32(byteOffset, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to read the data from.\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### Return value\n\nAn integer from -2147483648 to 2147483647, inclusive.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## Examples\n\n### Using getInt32()\n\n```js\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getInt32(1)); // 16909060\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Int32Array\")}}\n"
    },
    "getint8": {
      "index.md": "---\ntitle: DataView.prototype.getInt8()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/getInt8\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.getInt8\n---\n\n{{JSRef}}\n\nThe **`getInt8()`** method of {{jsxref(\"DataView\")}} instances reads 1 byte at the specified byte offset of this `DataView` and interprets it as an 8-bit signed integer.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-getint8.html\")}}\n\n## Syntax\n\n```js-nolint\ngetInt8(byteOffset)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to read the data from.\n\n### Return value\n\nAn integer from -128 to 127, inclusive.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## Examples\n\n### Using getInt8()\n\n```js\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getInt8(1)); // 1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Int8Array\")}}\n"
    },
    "getuint16": {
      "index.md": "---\ntitle: DataView.prototype.getUint16()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/getUint16\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.getUint16\n---\n\n{{JSRef}}\n\nThe **`getUint16()`** method of {{jsxref(\"DataView\")}} instances reads 2 bytes starting at the specified byte offset of this `DataView` and interprets them as a 16-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-getuint16.html\")}}\n\n## Syntax\n\n```js-nolint\ngetUint16(byteOffset)\ngetUint16(byteOffset, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to read the data from.\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### Return value\n\nAn integer from 0 to 65535, inclusive.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## Examples\n\n### Using getUint16()\n\n```js\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getUint16(1)); // 258\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Uint16Array\")}}\n"
    },
    "getuint32": {
      "index.md": "---\ntitle: DataView.prototype.getUint32()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/getUint32\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.getUint32\n---\n\n{{JSRef}}\n\nThe **`getUint32()`** method of {{jsxref(\"DataView\")}} instances reads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit unsigned integer. There is no alignment constraint; multi-byte values may be fetched from any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-getuint32.html\")}}\n\n## Syntax\n\n```js-nolint\ngetUint32(byteOffset)\ngetUint32(byteOffset, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to read the data from.\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is read.\n\n### Return value\n\nAn integer from 0 to 4294967295, inclusive.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## Examples\n\n### Using getUint32()\n\n```js\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getUint32(1)); // 16909060\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Uint32Array\")}}\n"
    },
    "getuint8": {
      "index.md": "---\ntitle: DataView.prototype.getUint8()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/getUint8\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.getUint8\n---\n\n{{JSRef}}\n\nThe **`getUint8()`** method of {{jsxref(\"DataView\")}} instances reads 1 byte at the specified byte offset of this `DataView` and interprets it as an 8-bit unsigned integer.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-getuint8.html\")}}\n\n## Syntax\n\n```js-nolint\ngetUint8(byteOffset)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to read the data from.\n\n### Return value\n\nAn integer from 0 to 255, inclusive.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would read beyond the end of the view.\n\n## Examples\n\n### Using getUint8()\n\n```js\nconst { buffer } = new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst dataview = new DataView(buffer);\nconsole.log(dataview.getUint8(1)); // 1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Uint8Array\")}}\n"
    },
    "index.md": "---\ntitle: DataView\nslug: Web/JavaScript/Reference/Global_Objects/DataView\npage-type: javascript-class\nbrowser-compat: javascript.builtins.DataView\n---\n\n{{JSRef}}\n\nThe **`DataView`** view provides a low-level interface for reading and writing multiple number types in a binary {{jsxref(\"ArrayBuffer\")}}, without having to care about the platform's [endianness](/en-US/docs/Glossary/Endianness).\n\n## Description\n\n### Endianness\n\nMulti-byte number formats are represented in memory differently depending on machine architecture — see [Endianness](/en-US/docs/Glossary/Endianness) for an explanation. `DataView` accessors provide explicit control of how data is accessed, regardless of the executing computer's endianness.\n\n```js\nconst littleEndian = (() => {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n  // Int16Array uses the platform's endianness.\n  return new Int16Array(buffer)[0] === 256;\n})();\nconsole.log(littleEndian); // true or false\n```\n\n### 64-bit Integer Values\n\nSome browsers don't have support for {{jsxref(\"DataView.prototype.setBigInt64()\")}} and {{jsxref(\"DataView.prototype.setBigUint64()\")}}. So to enable 64-bit operations in your code that will work across browsers, you could implement your own `getUint64()` function, to obtain values with precision up to {{jsxref(\"Number.MAX_SAFE_INTEGER\")}} — which could suffice for certain cases.\n\n```js\nfunction getUint64(dataview, byteOffset, littleEndian) {\n  // split 64-bit number into two 32-bit (4-byte) parts\n  const left = dataview.getUint32(byteOffset, littleEndian);\n  const right = dataview.getUint32(byteOffset + 4, littleEndian);\n\n  // combine the two 32-bit values\n  const combined = littleEndian\n    ? left + 2 ** 32 * right\n    : 2 ** 32 * left + right;\n\n  if (!Number.isSafeInteger(combined))\n    console.warn(combined, \"exceeds MAX_SAFE_INTEGER. Precision may be lost\");\n\n  return combined;\n}\n```\n\nAlternatively, if you need full 64-bit range, you can create a {{jsxref(\"BigInt\")}}. Further, although native BigInts are much faster than user-land library equivalents, BigInts will always be much slower than 32-bit integers in JavaScript due to the nature of their variable size.\n\n```js\nconst BigInt = window.BigInt,\n  bigThirtyTwo = BigInt(32),\n  bigZero = BigInt(0);\nfunction getUint64BigInt(dataview, byteOffset, littleEndian) {\n  // split 64-bit number into two 32-bit (4-byte) parts\n  const left = BigInt(dataview.getUint32(byteOffset | 0, !!littleEndian) >>> 0);\n  const right = BigInt(\n    dataview.getUint32(((byteOffset | 0) + 4) | 0, !!littleEndian) >>> 0,\n  );\n\n  // combine the two 32-bit values and return\n  return littleEndian\n    ? (right << bigThirtyTwo) | left\n    : (left << bigThirtyTwo) | right;\n}\n```\n\n## Constructor\n\n- {{jsxref(\"DataView/DataView\", \"DataView()\")}}\n  - : Creates a new `DataView` object.\n\n## Instance properties\n\nThese properties are defined on `DataView.prototype` and shared by all `DataView` instances.\n\n- {{jsxref(\"DataView.prototype.buffer\")}}\n  - : The {{jsxref(\"ArrayBuffer\")}} referenced by this view. Fixed at construction time and thus **read only.**\n- {{jsxref(\"DataView.prototype.byteLength\")}}\n  - : The length (in bytes) of this view. Fixed at construction time and thus **read only.**\n- {{jsxref(\"DataView.prototype.byteOffset\")}}\n  - : The offset (in bytes) of this view from the start of its {{jsxref(\"ArrayBuffer\")}}. Fixed at construction time and thus **read only.**\n- {{jsxref(\"Object/constructor\", \"DataView.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `DataView` instances, the initial value is the {{jsxref(\"DataView/DataView\", \"DataView\")}} constructor.\n- `DataView.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"DataView\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"DataView.prototype.getBigInt64()\")}}\n  - : Reads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit signed integer.\n- {{jsxref(\"DataView.prototype.getBigUint64()\")}}\n  - : Reads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit unsigned integer.\n- {{jsxref(\"DataView.prototype.getFloat32()\")}}\n  - : Reads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit floating point number.\n- {{jsxref(\"DataView.prototype.getFloat64()\")}}\n  - : Reads 8 bytes starting at the specified byte offset of this `DataView` and interprets them as a 64-bit floating point number.\n- {{jsxref(\"DataView.prototype.getInt16()\")}}\n  - : Reads 2 bytes starting at the specified byte offset of this `DataView` and interprets them as a 16-bit signed integer.\n- {{jsxref(\"DataView.prototype.getInt32()\")}}\n  - : Reads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit signed integer.\n- {{jsxref(\"DataView.prototype.getInt8()\")}}\n  - : Reads 1 byte at the specified byte offset of this `DataView` and interprets it as an 8-bit signed integer.\n- {{jsxref(\"DataView.prototype.getUint16()\")}}\n  - : Reads 2 bytes starting at the specified byte offset of this `DataView` and interprets them as a 16-bit unsigned integer.\n- {{jsxref(\"DataView.prototype.getUint32()\")}}\n  - : Reads 4 bytes starting at the specified byte offset of this `DataView` and interprets them as a 32-bit unsigned integer.\n- {{jsxref(\"DataView.prototype.getUint8()\")}}\n  - : Reads 1 byte at the specified byte offset of this `DataView` and interprets it as an 8-bit unsigned integer.\n- {{jsxref(\"DataView.prototype.setBigInt64()\")}}\n  - : Takes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this `DataView`.\n- {{jsxref(\"DataView.prototype.setBigUint64()\")}}\n  - : Takes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this `DataView`.\n- {{jsxref(\"DataView.prototype.setFloat32()\")}}\n  - : Takes a number and stores it as a 32-bit float in the 4 bytes starting at the specified byte offset of this `DataView`.\n- {{jsxref(\"DataView.prototype.setFloat64()\")}}\n  - : Takes a number and stores it as a 64-bit float in the 8 bytes starting at the specified byte offset of this `DataView`.\n- {{jsxref(\"DataView.prototype.setInt16()\")}}\n  - : Takes a number and stores it as a 16-bit signed integer in the 2 bytes at the specified byte offset of this `DataView`.\n- {{jsxref(\"DataView.prototype.setInt32()\")}}\n  - : Takes a number and stores it as a 32-bit signed integer in the 4 bytes at the specified byte offset of this `DataView`.\n- {{jsxref(\"DataView.prototype.setInt8()\")}}\n  - : Takes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this `DataView`.\n- {{jsxref(\"DataView.prototype.setUint16()\")}}\n  - : Takes a number and stores it as a 16-bit unsigned integer in the 2 bytes at the specified byte offset of this `DataView`.\n- {{jsxref(\"DataView.prototype.setUint32()\")}}\n  - : Takes a number and stores it as a 32-bit unsigned integer in the 4 bytes at the specified byte offset of this `DataView`.\n- {{jsxref(\"DataView.prototype.setUint8()\")}}\n  - : Takes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this `DataView`.\n\n## Examples\n\n### Using DataView\n\n```js\nconst buffer = new ArrayBuffer(16);\nconst view = new DataView(buffer, 0);\n\nview.setInt16(1, 42);\nview.getInt16(1); // 42\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `DataView` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"SharedArrayBuffer\")}}\n",
    "setbigint64": {
      "index.md": "---\ntitle: DataView.prototype.setBigInt64()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.setBigInt64\n---\n\n{{JSRef}}\n\nThe **`setBigInt64()`** method of {{jsxref(\"DataView\")}} instances takes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-setbigint64.html\")}}\n\n## Syntax\n\n```js-nolint\nsetBigInt64(byteOffset, value)\nsetBigInt64(byteOffset, value, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to store the data in.\n- `value`\n  - : The value to set as a {{jsxref(\"BigInt\")}}. For how the value is encoded in bytes, see [Value encoding and normalization](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### Return value\n\n{{jsxref(\"undefined\")}}.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## Examples\n\n### Using setBigInt64()\n\n```js\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setBigInt64(0, 3n);\ndataview.getBigInt64(1); // 768n\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"BigInt64Array\")}}\n"
    },
    "setbiguint64": {
      "index.md": "---\ntitle: DataView.prototype.setBigUint64()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.setBigUint64\n---\n\n{{JSRef}}\n\nThe **`setBigUint64()`** method of {{jsxref(\"DataView\")}} instances takes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-setbiguint64.html\")}}\n\n## Syntax\n\n```js-nolint\nsetBigUint64(byteOffset, value)\nsetBigUint64(byteOffset, value, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to store the data in.\n- `value`\n  - : The value to set as a {{jsxref(\"BigInt\")}}. For how the value is encoded in bytes, see [Value encoding and normalization](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### Return value\n\n{{jsxref(\"undefined\")}}.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## Examples\n\n### Using setBigUint64()\n\n```js\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setBigUint64(0, 3n);\ndataview.getBigUint64(1); // 768n\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"BigUint64Array\")}}\n"
    },
    "setfloat32": {
      "index.md": "---\ntitle: DataView.prototype.setFloat32()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/setFloat32\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.setFloat32\n---\n\n{{JSRef}}\n\nThe **`setFloat32()`** method of {{jsxref(\"DataView\")}} instances takes a number and stores it as a 32-bit floating point number in the 4 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-setfloat32.html\")}}\n\n## Syntax\n\n```js-nolint\nsetFloat32(byteOffset, value)\nsetFloat32(byteOffset, value, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to store the data in.\n- `value`\n  - : The value to set. For how the value is encoded in bytes, see [Value encoding and normalization](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### Return value\n\n{{jsxref(\"undefined\")}}.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## Examples\n\n### Using setFloat32()\n\n```js\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setFloat32(0, 3);\ndataview.getFloat32(1); // 2\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Float32Array\")}}\n"
    },
    "setfloat64": {
      "index.md": "---\ntitle: DataView.prototype.setFloat64()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/setFloat64\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.setFloat64\n---\n\n{{JSRef}}\n\nThe **`setFloat64()`** method of {{jsxref(\"DataView\")}} instances takes a number and stores it as a 64-bit floating point number in the 8 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-setfloat64.html\")}}\n\n## Syntax\n\n```js-nolint\nsetFloat64(byteOffset, value)\nsetFloat64(byteOffset, value, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to store the data in.\n- `value`\n  - : The value to set. For how the value is encoded in bytes, see [Value encoding and normalization](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### Return value\n\n{{jsxref(\"undefined\")}}.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## Examples\n\n### Using setFloat64()\n\n```js\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setFloat64(0, 3);\ndataview.getFloat64(1); // 3.785766995733679e-270\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Float64Array\")}}\n"
    },
    "setint16": {
      "index.md": "---\ntitle: DataView.prototype.setInt16()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/setInt16\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.setInt16\n---\n\n{{JSRef}}\n\nThe **`setInt16()`** method of {{jsxref(\"DataView\")}} instances takes a number and stores it as a 16-bit signed integer in the 2 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-setint16.html\")}}\n\n## Syntax\n\n```js-nolint\nsetInt16(byteOffset, value)\nsetInt16(byteOffset, value, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to store the data in.\n- `value`\n  - : The value to set. For how the value is encoded in bytes, see [Value encoding and normalization](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### Return value\n\n{{jsxref(\"undefined\")}}.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## Examples\n\n### Using setInt16()\n\n```js\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setInt16(0, 3);\ndataview.getInt16(1); // 768\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Int16Array\")}}\n"
    },
    "setint32": {
      "index.md": "---\ntitle: DataView.prototype.setInt32()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/setInt32\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.setInt32\n---\n\n{{JSRef}}\n\nThe **`setInt32()`** method of {{jsxref(\"DataView\")}} instances takes a number and stores it as a 32-bit signed integer in the 4 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-setint32.html\")}}\n\n## Syntax\n\n```js-nolint\nsetInt32(byteOffset, value)\nsetInt32(byteOffset, value, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to store the data in.\n- `value`\n  - : The value to set. For how the value is encoded in bytes, see [Value encoding and normalization](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### Return value\n\n{{jsxref(\"undefined\")}}.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## Examples\n\n### Using setInt32()\n\n```js\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setInt32(0, 3);\ndataview.getInt32(1); // 768\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Int32Array\")}}\n"
    },
    "setint8": {
      "index.md": "---\ntitle: DataView.prototype.setInt8()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/setInt8\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.setInt8\n---\n\n{{JSRef}}\n\nThe **`setInt8()`** method of {{jsxref(\"DataView\")}} instances takes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this `DataView`.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-setint8.html\")}}\n\n## Syntax\n\n```js-nolint\nsetInt8(byteOffset, value)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to store the data in.\n- `value`\n  - : The value to set. For how the value is encoded in bytes, see [Value encoding and normalization](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n### Return value\n\n{{jsxref(\"undefined\")}}.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## Examples\n\n### Using setInt8()\n\n```js\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setInt8(0, 3);\ndataview.getInt8(0); // 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Int8Array\")}}\n"
    },
    "setuint16": {
      "index.md": "---\ntitle: DataView.prototype.setUint16()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/setUint16\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.setUint16\n---\n\n{{JSRef}}\n\nThe **`setUint16()`** method of {{jsxref(\"DataView\")}} instances takes a number and stores it as a 16-bit unsigned integer in the 2 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-setuint16.html\")}}\n\n## Syntax\n\n```js-nolint\nsetUint16(byteOffset, value)\nsetUint16(byteOffset, value, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to store the data in.\n- `value`\n  - : The value to set. For how the value is encoded in bytes, see [Value encoding and normalization](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### Return value\n\n{{jsxref(\"undefined\")}}.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## Examples\n\n### Using setUint16()\n\n```js\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setUint16(0, 3);\ndataview.getUint16(1); // 768\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Uint16Array\")}}\n"
    },
    "setuint32": {
      "index.md": "---\ntitle: DataView.prototype.setUint32()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/setUint32\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.setUint32\n---\n\n{{JSRef}}\n\nThe **`setUint32()`** method of {{jsxref(\"DataView\")}} instances takes a number and stores it as a 32-bit unsigned integer in the 4 bytes starting at the specified byte offset of this `DataView`. There is no alignment constraint; multi-byte values may be stored at any offset within bounds.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-setuint32.html\")}}\n\n## Syntax\n\n```js-nolint\nsetUint32(byteOffset, value)\nsetUint32(byteOffset, value, littleEndian)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to store the data in.\n- `value`\n  - : The value to set. For how the value is encoded in bytes, see [Value encoding and normalization](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n- `littleEndian` {{optional_inline}}\n  - : Indicates whether the data is stored in [little- or big-endian](/en-US/docs/Glossary/Endianness) format. If `false` or `undefined`, a big-endian value is written.\n\n### Return value\n\n{{jsxref(\"undefined\")}}.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## Examples\n\n### Using setUint32()\n\n```js\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setUint32(0, 3);\ndataview.getUint32(1); // 768\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Uint32Array\")}}\n"
    },
    "setuint8": {
      "index.md": "---\ntitle: DataView.prototype.setUint8()\nslug: Web/JavaScript/Reference/Global_Objects/DataView/setUint8\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.DataView.setUint8\n---\n\n{{JSRef}}\n\nThe **`setUint8()`** method of {{jsxref(\"DataView\")}} instances takes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this `DataView`.\n\n{{EmbedInteractiveExample(\"pages/js/dataview-setuint8.html\")}}\n\n## Syntax\n\n```js-nolint\nsetUint8(byteOffset, value)\n```\n\n### Parameters\n\n- `byteOffset`\n  - : The offset, in bytes, from the start of the view to store the data in.\n- `value`\n  - : The value to set. For how the value is encoded in bytes, see [Value encoding and normalization](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#value_encoding_and_normalization).\n\n### Return value\n\n{{jsxref(\"undefined\")}}.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the `byteOffset` is set such that it would store beyond the end of the view.\n\n## Examples\n\n### Using setUint8()\n\n```js\nconst buffer = new ArrayBuffer(10);\nconst dataview = new DataView(buffer);\ndataview.setUint8(0, 3);\ndataview.getUint8(0); // 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"Uint8Array\")}}\n"
    }
  },
  "date": {
    "@@toprimitive": {
      "index.md": "---\ntitle: Date.prototype[@@toPrimitive]()\nslug: Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.@@toPrimitive\n---\n\n{{JSRef}}\n\nThe **`[@@toPrimitive]()`** method of {{jsxref(\"Date\")}} instances returns a primitive value representing this date. It may either be a string or a number, depending on the hint given.\n\n{{EmbedInteractiveExample(\"pages/js/date-toprimitive.html\")}}\n\n## Syntax\n\n```js-nolint\ndate[Symbol.toPrimitive](hint)\n```\n\n### Parameters\n\n- `hint`\n  - : A string representing the type of the primitive value to return. The following values are valid:\n    - `\"string\"` or `\"default\"`: The method should return a string.\n    - `\"number\"`: The method should return a number.\n\n### Return value\n\nIf `hint` is `\"string\"` or `\"default\"`, this method returns a string by [coercing the `this` value to a string](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) (first trying `toString()` then trying `valueOf()`).\n\nIf `hint` is `\"number\"`, this method returns a number by [coercing the `this` value to a number](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) (first trying `valueOf()` then trying `toString()`).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if the `hint` argument is not one of the three valid values.\n\n## Description\n\nThe `[@@toPrimitive]()` method is part of the [type coercion protocol](/en-US/docs/Web/JavaScript/Data_structures#type_coercion). JavaScript always calls the `[@@toPrimitive]()` method in priority to convert an object to a primitive value. You rarely need to invoke the `[@@toPrimitive]()` method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\nThe `[@@toPrimitive]()` method of the {{jsxref(\"Date\")}} object returns a primitive value by either invoking {{jsxref(\"Date/valueOf\", \"this.valueOf()\")}} and returning a number, or invoking {{jsxref(\"Date/toString\", \"this.toString()\")}} and returning a string. It exists to override the default [primitive coercion](/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) process to return a string instead of a number, because primitive coercion, by default, calls {{jsxref(\"Date/valueOf\", \"valueOf()\")}} before {{jsxref(\"Date/toString\", \"toString()\")}}. With the custom `[@@toPrimitive]()`, `new Date(0) + 1` returns `\"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1\"` (a string) instead of `1` (a number).\n\n## Examples\n\n### Using \\[@@toPrimitive]()\n\n```js\nconst d = new Date(0); // 1970-01-01T00:00:00.000Z\n\nd[Symbol.toPrimitive](\"string\"); // \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\"\nd[Symbol.toPrimitive](\"number\"); // 0\nd[Symbol.toPrimitive](\"default\"); // \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Symbol.toPrimitive\")}}\n"
    },
    "date": {
      "index.md": "---\ntitle: Date() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Date/Date\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Date.Date\n---\n\n{{JSRef}}\n\nThe **`Date()`** constructor creates {{jsxref(\"Date\")}} objects. When called as a function, it returns a string representing the current time.\n\n{{EmbedInteractiveExample(\"pages/js/date-constructor.html\")}}\n\n## Syntax\n\n```js-nolint\nnew Date()\nnew Date(value)\nnew Date(dateString)\nnew Date(dateObject)\n\nnew Date(year, monthIndex)\nnew Date(year, monthIndex, day)\nnew Date(year, monthIndex, day, hours)\nnew Date(year, monthIndex, day, hours, minutes)\nnew Date(year, monthIndex, day, hours, minutes, seconds)\nnew Date(year, monthIndex, day, hours, minutes, seconds, milliseconds)\n\nDate()\n```\n\n> **Note:** `Date()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new), but with different effects. See [Return value](#return_value).\n\n### Parameters\n\nThere are five basic forms for the `Date()` constructor:\n\n#### No parameters\n\nWhen no parameters are provided, the newly-created `Date` object represents the current date and time as of the time of instantiation. The returned date's [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) is the same as the number returned by {{jsxref(\"Date.now()\")}}.\n\n#### Time value or timestamp number\n\n- `value`\n  - : An integer value representing the [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) (the number of milliseconds since midnight at the beginning of January 1, 1970, UTC — a.k.a. the [epoch](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date)).\n\n#### Date string\n\n- `dateString`\n  - : A string value representing a date, parsed and interpreted using the same algorithm implemented by {{jsxref(\"Date.parse()\")}}. See [date time string format](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format) for caveats on using different formats.\n\n#### Date object\n\n- `dateObject`\n  - : An existing `Date` object. This effectively makes a copy of the existing `Date` object with the same date and time. This is equivalent to `new Date(dateObject.valueOf())`, except the `valueOf()` method is not called.\n\nWhen one parameter is passed to the `Date()` constructor, `Date` instances are specially treated. All other values are [converted to primitives](/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion). If the result is a string, it will be parsed as a date string. Otherwise, the resulting primitive is further coerced to a number and treated as a timestamp.\n\n#### Individual date and time component values\n\nGiven at least a year and month, this form of `Date()` returns a `Date` object whose component values (year, month, day, hour, minute, second, and millisecond) all come from the following parameters. Any missing fields are given the lowest possible value (`1` for `day` and `0` for every other component). The parameter values are all evaluated against the local time zone, rather than UTC. {{jsxref(\"Date.UTC()\")}} accepts similar parameters but interprets the components as UTC and returns a timestamp.\n\nIf any parameter overflows its defined bounds, it \"carries over\". For example, if a `monthIndex` greater than `11` is passed in, those months will cause the year to increment; if a `minutes` greater than `59` is passed in, `hours` will increment accordingly, etc. Therefore, `new Date(1990, 12, 1)` will return January 1st, 1991; `new Date(2020, 5, 19, 25, 65)` will return 2:05 A.M. June 20th, 2020.\n\nSimilarly, if any parameter underflows, it \"borrows\" from the higher positions. For example, `new Date(2020, 5, 0)` will return May 31st, 2020.\n\n- `year`\n  - : Integer value representing the year. Values from `0` to `99` map to the years `1900` to `1999`. All other values are the actual year. See the [example](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years).\n- `monthIndex`\n  - : Integer value representing the month, beginning with `0` for January to `11` for December.\n- `day` {{optional_inline}}\n  - : Integer value representing the day of the month. Defaults to `1`.\n- `hours` {{optional_inline}}\n  - : Integer value between `0` and `23` representing the hour of the day. Defaults to `0`.\n- `minutes` {{optional_inline}}\n  - : Integer value representing the minute segment of a time. Defaults to `0`.\n- `seconds` {{optional_inline}}\n  - : Integer value representing the second segment of a time. Defaults to `0`.\n- `milliseconds` {{optional_inline}}\n  - : Integer value representing the millisecond segment of a time. Defaults to `0`.\n\n### Return value\n\nCalling `new Date()` (the `Date()` constructor) returns a [`Date`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object. If called with an invalid date string, or if the date to be constructed will have a timestamp less than `-8,640,000,000,000,000` or greater than `8,640,000,000,000,000` milliseconds, it returns an [invalid date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) (a `Date` object whose {{jsxref(\"Date/toString\", \"toString()\")}} method returns `\"Invalid Date\"` and {{jsxref(\"Date/valueOf\", \"valueOf()\")}} method returns `NaN`).\n\nCalling the `Date()` function (without the `new` keyword) returns a string representation of the current date and time, exactly as `new Date().toString()` does. Any arguments given in a `Date()` function call (without the `new` keyword) are ignored; regardless of whether it's called with an invalid date string — or even called with any arbitrary object or other primitive as an argument — it always returns a string representation of the current date and time.\n\n## Examples\n\n### Several ways to create a Date object\n\nThe following examples show several ways to create JavaScript dates:\n\n```js\nconst today = new Date();\nconst birthday = new Date(\"December 17, 1995 03:24:00\"); // DISCOURAGED: may not work in all runtimes\nconst birthday = new Date(\"1995-12-17T03:24:00\"); // This is standardized and will work reliably\nconst birthday = new Date(1995, 11, 17); // the month is 0-indexed\nconst birthday = new Date(1995, 11, 17, 3, 24, 0);\nconst birthday = new Date(628021800000); // passing epoch timestamp\n```\n\n### Passing a non-Date, non-string, non-number value\n\nIf the `Date()` constructor is called with one parameter which is not a `Date` instance, it will be coerced to a primitive and then checked whether it's a string. For example, `new Date(undefined)` is different from `new Date()`:\n\n```js\nconsole.log(new Date(undefined)); // Invalid Date\n```\n\nThis is because `undefined` is already a primitive but not a string, so it will be coerced to a number, which is [`NaN`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) and therefore not a valid timestamp. On the other hand, `null` will be coerced to `0`.\n\n```js\nconsole.log(new Date(null)); // 1970-01-01T00:00:00.000Z\n```\n\n[Arrays](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) would be coerced to a string via [`Array.prototype.toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString), which joins the elements with commas. However, the resulting string for any array with more than one element is not a valid ISO 8601 date string, so its parsing behavior would be implementation-defined. **Do not pass arrays to the `Date()` constructor.**\n\n```js\nconsole.log(new Date([\"2020-06-19\", \"17:13\"]));\n// 2020-06-19T17:13:00.000Z in Chrome, since it recognizes \"2020-06-19,17:13\"\n// \"Invalid Date\" in Firefox\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date\")}}\n"
    },
    "getdate": {
      "index.md": "---\ntitle: Date.prototype.getDate()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getDate\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getDate\n---\n\n{{JSRef}}\n\nThe **`getDate()`** method of {{jsxref(\"Date\")}} instances returns the day of the month for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-getdate.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ngetDate()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 1 and 31, representing the day of the month for the given date according to local time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Examples\n\n### Using getDate()\n\nThe `day` variable has value `25`, based on the value of the {{jsxref(\"Date\")}} object `xmas95`.\n\n```js\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst day = xmas95.getDate();\n\nconsole.log(day); // 25\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCDate()\")}}\n- {{jsxref(\"Date.prototype.getUTCDay()\")}}\n- {{jsxref(\"Date.prototype.setDate()\")}}\n"
    },
    "getday": {
      "index.md": "---\ntitle: Date.prototype.getDay()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getDay\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getDay\n---\n\n{{JSRef}}\n\nThe **`getDay()`** method of {{jsxref(\"Date\")}} instances returns the day of the week for this date according to local time, where 0 represents Sunday. For the day of the month, see {{jsxref(\"Date.prototype.getDate()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/date-getday.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ngetDay()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 0 and 6, representing the day of the week for the given date according to local time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\nThe return value of `getDay()` is zero-based, which is useful for indexing into arrays of days, for example:\n\n```js\nconst valentines = new Date(\"1995-02-14\");\nconst day = valentines.getDay();\nconst dayNames = [\"Sunday\", \"Monday\", \"Tuesday\" /* , … */];\n\nconsole.log(dayNames[day]); // \"Monday\"\n```\n\nHowever, for the purpose of internationalization, you should prefer using {{jsxref(\"Intl.DateTimeFormat\")}} with the `options` parameter instead.\n\n```js\nconst options = { weekday: \"long\" };\nconsole.log(new Intl.DateTimeFormat(\"en-US\", options).format(valentines));\n// \"Monday\"\nconsole.log(new Intl.DateTimeFormat(\"de-DE\", options).format(valentines));\n// \"Montag\"\n```\n\n## Examples\n\n### Using getDay()\n\nThe `weekday` variable has value `1`, based on the value of the {{jsxref(\"Date\")}} object `xmas95`, because December 25, 1995 is a Monday.\n\n```js\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst weekday = xmas95.getDay();\n\nconsole.log(weekday); // 1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCDate()\")}}\n- {{jsxref(\"Date.prototype.getUTCDay()\")}}\n- {{jsxref(\"Date.prototype.setDate()\")}}\n"
    },
    "getfullyear": {
      "index.md": "---\ntitle: Date.prototype.getFullYear()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getFullYear\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getFullYear\n---\n\n{{JSRef}}\n\nThe **`getFullYear()`** method of {{jsxref(\"Date\")}} instances returns the year for this date according to local time.\n\nUse this method instead of the {{jsxref(\"Date/getYear\", \"getYear()\")}} method.\n\n{{EmbedInteractiveExample(\"pages/js/date-getfullyear.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ngetFullYear()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer representing the year for the given date according to local time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\nUnlike {{jsxref(\"Date/getYear\", \"getYear()\")}}, the value returned by `getFullYear()` is an absolute number. For dates between the years 1000 and 9999, `getFullYear()` returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000.\n\n## Examples\n\n### Using getFullYear()\n\nThe `fullYear` variable has value `1995`, based on the value of the {{jsxref(\"Date\")}} object `xmas95`.\n\n```js\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst fullYear = xmas95.getFullYear();\n\nconsole.log(fullYear); // 1995\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCFullYear()\")}}\n- {{jsxref(\"Date.prototype.setFullYear()\")}}\n- {{jsxref(\"Date.prototype.getYear()\")}}\n"
    },
    "gethours": {
      "index.md": "---\ntitle: Date.prototype.getHours()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getHours\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getHours\n---\n\n{{JSRef}}\n\nThe **`getHours()`** method of {{jsxref(\"Date\")}} instances returns the hours for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-gethours.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ngetHours()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 0 and 23, representing the hours for the given date according to local time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Examples\n\n### Using getHours()\n\nThe `hours` variable has value `23`, based on the value of the {{jsxref(\"Date\")}} object `xmas95`.\n\n```js\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst hours = xmas95.getHours();\n\nconsole.log(hours); // 23\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCHours()\")}}\n- {{jsxref(\"Date.prototype.setHours()\")}}\n"
    },
    "getmilliseconds": {
      "index.md": "---\ntitle: Date.prototype.getMilliseconds()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getMilliseconds\n---\n\n{{JSRef}}\n\nThe **`getMilliseconds()`** method of {{jsxref(\"Date\")}} instances returns the milliseconds for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-getmilliseconds.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ngetMilliseconds()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 0 and 999, representing the milliseconds for the given date according to local time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Examples\n\n### Using getMilliseconds()\n\nThe `milliseconds` variable has value `0`, based on the value of the {{jsxref(\"Date\")}} object `xmas95`, which doesn't specify the milliseconds component, so it defaults to 0.\n\n```js\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst milliseconds = xmas95.getMilliseconds();\n\nconsole.log(milliseconds); // 0\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCMilliseconds()\")}}\n- {{jsxref(\"Date.prototype.setMilliseconds()\")}}\n"
    },
    "getminutes": {
      "index.md": "---\ntitle: Date.prototype.getMinutes()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getMinutes\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getMinutes\n---\n\n{{JSRef}}\n\nThe **`getMinutes()`** method of {{jsxref(\"Date\")}} instances returns the minutes for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-getminutes.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ngetMinutes()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 0 and 59, representing the minutes for the given date according to local time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Examples\n\n### Using getMinutes()\n\nThe `minutes` variable has value `15`, based on the value of the {{jsxref(\"Date\")}} object `xmas95`.\n\n```js\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst minutes = xmas95.getMinutes();\n\nconsole.log(minutes); // 15\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCMinutes()\")}}\n- {{jsxref(\"Date.prototype.setMinutes()\")}}\n"
    },
    "getmonth": {
      "index.md": "---\ntitle: Date.prototype.getMonth()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getMonth\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getMonth\n---\n\n{{JSRef}}\n\nThe **`getMonth()`** method of {{jsxref(\"Date\")}} instances returns the month for this date according to local time, as a zero-based value (where zero indicates the first month of the year).\n\n{{EmbedInteractiveExample(\"pages/js/date-getmonth.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ngetMonth()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 0 and 11, representing the month for the given date according to local time: 0 for January, 1 for February, and so on. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\nThe return value of `getMonth()` is zero-based, which is useful for indexing into arrays of months, for example:\n\n```js\nconst valentines = new Date(\"1995-02-14\");\nconst month = valentines.getMonth();\nconst monthNames = [\"January\", \"February\", \"March\" /* , … */];\n\nconsole.log(monthNames[month]); // \"February\"\n```\n\nHowever, for the purpose of internationalization, you should prefer using {{jsxref(\"Intl.DateTimeFormat\")}} with the `options` parameter instead.\n\n```js\nconst options = { month: \"long\" };\nconsole.log(new Intl.DateTimeFormat(\"en-US\", options).format(valentines));\n// \"February\"\nconsole.log(new Intl.DateTimeFormat(\"de-DE\", options).format(valentines));\n// \"Februar\"\n```\n\n## Examples\n\n### Using getMonth()\n\nThe `month` variable has value `11`, based on the value of the {{jsxref(\"Date\")}} object `xmas95`.\n\n```js\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst month = xmas95.getMonth();\n\nconsole.log(month); // 11\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCMonth()\")}}\n- {{jsxref(\"Date.prototype.setMonth()\")}}\n"
    },
    "getseconds": {
      "index.md": "---\ntitle: Date.prototype.getSeconds()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getSeconds\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getSeconds\n---\n\n{{JSRef}}\n\nThe **`getSeconds()`** method of {{jsxref(\"Date\")}} instances returns the seconds for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-getseconds.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ngetSeconds()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 0 and 59, representing the seconds for the given date according to local time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Examples\n\n### Using getSeconds()\n\nThe `seconds` variable has value `30`, based on the value of the {{jsxref(\"Date\")}} object `xmas95`.\n\n```js\nconst xmas95 = new Date(\"1995-12-25T23:15:30\");\nconst seconds = xmas95.getSeconds();\n\nconsole.log(seconds); // 30\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCSeconds()\")}}\n- {{jsxref(\"Date.prototype.setSeconds()\")}}\n"
    },
    "gettime": {
      "index.md": "---\ntitle: Date.prototype.getTime()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getTime\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getTime\n---\n\n{{JSRef}}\n\nThe **`getTime()`** method of {{jsxref(\"Date\")}} instances returns the number of milliseconds for this date since the [epoch](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), which is defined as the midnight at the beginning of January 1, 1970, UTC.\n\n{{EmbedInteractiveExample(\"pages/js/date-gettime.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ngetTime()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA number representing the [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), in milliseconds, of this date. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\n`Date` objects are fundamentally represented by a [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), and this method allows you to retrieve the timestamp. You can use this method to help assign a date and time to another {{jsxref(\"Date\")}} object. This method is functionally equivalent to the {{jsxref(\"Date/valueof\", \"valueOf()\")}} method.\n\n### Reduced time precision\n\nTo offer protection against timing attacks and [fingerprinting](/en-US/docs/Glossary/Fingerprinting), the precision of `new Date().getTime()` might get rounded depending on browser settings. In Firefox, the `privacy.reduceTimerPrecision` preference is enabled by default and defaults to 2ms. You can also enable `privacy.resistFingerprinting`, in which case the precision will be 100ms or the value of `privacy.resistFingerprinting.reduceTimerPrecision.microseconds`, whichever is larger.\n\n```js\n// reduced time precision (2ms) in Firefox 60\nnew Date().getTime();\n// 1519211809934\n// 1519211810362\n// 1519211811670\n// …\n\n// reduced time precision with `privacy.resistFingerprinting` enabled\nnew Date().getTime();\n// 1519129853500\n// 1519129858900\n// 1519129864400\n// …\n```\n\n## Examples\n\n### Using getTime() for copying dates\n\nConstructing a date object with the identical time value.\n\n```js\n// Since month is zero based, birthday will be January 10, 1995\nconst birthday = new Date(1994, 12, 10);\nconst copy = new Date();\ncopy.setTime(birthday.getTime());\n```\n\n### Measuring execution time\n\nSubtracting two subsequent `getTime()` calls on newly generated {{jsxref(\"Date\")}} objects, give the time span between these two calls. This can be used to calculate the executing time of some operations. See also {{jsxref(\"Date.now()\")}} to prevent instantiating unnecessary {{jsxref(\"Date\")}} objects.\n\n```js\nlet end, start;\n\nstart = new Date();\nfor (let i = 0; i < 1000; i++) {\n  Math.sqrt(i);\n}\nend = new Date();\n\nconsole.log(`Operation took ${end.getTime() - start.getTime()} msec`);\n```\n\n> **Note:** In browsers that support the {{domxref(\"performance_property\", \"Web Performance API\", \"\", 1)}}'s high-resolution time feature, {{domxref(\"Performance.now()\")}} can provide more reliable and precise measurements of elapsed time than {{jsxref(\"Date.now()\")}}.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.setTime()\")}}\n- {{jsxref(\"Date.prototype.valueOf()\")}}\n- {{jsxref(\"Date.now()\")}}\n"
    },
    "gettimezoneoffset": {
      "index.md": "---\ntitle: Date.prototype.getTimezoneOffset()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getTimezoneOffset\n---\n\n{{JSRef}}\n\nThe **`getTimezoneOffset()`** method of {{jsxref(\"Date\")}} instances returns the difference, in minutes, between this date as evaluated in the UTC time zone, and the same date as evaluated in the local time zone.\n\n{{EmbedInteractiveExample(\"pages/js/date-gettimezoneoffset.html\")}}\n\n## Syntax\n\n```js-nolint\ngetTimezoneOffset()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA number representing the difference, in minutes, between the date as evaluated in the UTC time zone and as evaluated in the local time zone. The actual local time algorithm is implementation-defined, and the return value is allowed to be zero in runtimes without appropriate data. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\n`date.getTimezoneOffset()` returns the difference, in minutes, between `date` as evaluated in the UTC time zone and as evaluated in the local time zone — that is, the time zone of the host system in which the browser is being used (if the code is run from the Web in a browser), or otherwise the host system of whatever JavaScript runtime (for example, a Node.js environment) the code is executed in.\n\n### Negative values and positive values\n\nThe number of minutes returned by `getTimezoneOffset()` is positive if the local time zone is behind UTC, and negative if the local time zone is ahead of UTC. For example, for UTC+10, `-600` will be returned.\n\n| Current time zone | Return value |\n| ----------------- | ------------ |\n| UTC-8             | 480          |\n| UTC               | 0            |\n| UTC+3             | -180         |\n\n### Varied results in Daylight Saving Time (DST) regions\n\nIn a region that annually shifts in and out of Daylight Saving Time (DST), as `date` varies, the number of minutes returned by calling `getTimezoneOffset()` can be non-uniform.\n\n> **Note:** `getTimezoneOffset()`'s behavior will never differ based on the time when the code is run — its behavior is always consistent when running in the same region. Only the value of `date` affects the result.\n\nIn most implementations, the [IANA time zone database](https://en.wikipedia.org/wiki/Daylight_saving_time#IANA_time_zone_database) (tzdata) is used to precisely determine the offset of the local timezone at the moment of the `date`. However, if such information is unavailable, an implementation may return zero.\n\n## Examples\n\n### Using getTimezoneOffset()\n\n```js\n// Create a Date instance for the current time\nconst currentLocalDate = new Date();\n// Create a Date instance for 03:24 GMT-0200 on May 1st in 2016\nconst laborDay2016at0324GMTminus2 = new Date(\"2016-05-01T03:24:00-02:00\");\ncurrentLocalDate.getTimezoneOffset() ===\n  laborDay2016at0324GMTminus2.getTimezoneOffset();\n// true, always, in any timezone that doesn't annually shift in and out of DST\n// false, sometimes, in any timezone that annually shifts in and out of DST\n```\n\n### getTimezoneOffset() and DST\n\nIn regions that use DST, the return value may change based on the time of the year `date` is in. Below is the output in a runtime in New York, where the timezone is UTC-05:00.\n\n```js\nconst nyOffsetSummer = new Date(\"2022-02-01\").getTimezoneOffset(); // 300\nconst nyOffsetWinter = new Date(\"2022-08-01\").getTimezoneOffset(); // 240\n```\n\n### getTimezoneOffset() and historical data\n\nDue to historical reasons, the timezone a region is in can be constantly changing, even disregarding DST. For example, below is the output in a runtime in Shanghai, where the timezone is UTC+08:00.\n\n```js\nconst shModernOffset = new Date(\"2022-01-27\").getTimezoneOffset(); // -480\nconst shHistoricalOffset = new Date(\"1943-01-27\").getTimezoneOffset(); // -540\n```\n\nThis is because during the [Sino-Japanese War](https://en.wikipedia.org/wiki/Second_Sino-Japanese_War) when Shanghai was under Japanese control, the timezone was changed to UTC+09:00 to align with Japan's (in effect, it was a \"year-round DST\"), and this was recorded in the IANA database.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date\")}}\n"
    },
    "getutcdate": {
      "index.md": "---\ntitle: Date.prototype.getUTCDate()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getUTCDate\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getUTCDate\n---\n\n{{JSRef}}\n\nThe **`getUTCDate()`** method of {{jsxref(\"Date\")}} instances returns the day of the month for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-getutcdate.html\")}}\n\n## Syntax\n\n```js-nolint\ngetUTCDate()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 1 and 31, representing day of month for the given date according to universal time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Examples\n\n### Using getUTCDate()\n\nThe following example assigns the day of month of the current date to the variable `dayOfMonth`.\n\n```js\nconst today = new Date();\nconst dayOfMonth = today.getUTCDate();\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCDate()\")}}\n- {{jsxref(\"Date.prototype.getDay()\")}}\n- {{jsxref(\"Date.prototype.setUTCDate()\")}}\n"
    },
    "getutcday": {
      "index.md": "---\ntitle: Date.prototype.getUTCDay()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getUTCDay\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getUTCDay\n---\n\n{{JSRef}}\n\nThe **`getUTCDay()`** method of {{jsxref(\"Date\")}} instances returns the day of the week for this date according to universal time, where 0 represents Sunday.\n\n{{EmbedInteractiveExample(\"pages/js/date-getutcday.html\")}}\n\n## Syntax\n\n```js-nolint\ngetUTCDay()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer corresponding to the day of the week for the given date according to universal time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Examples\n\n### Using getUTCDay()\n\nThe following example assigns the weekday portion of the current date to the variable `weekday`.\n\n```js\nconst today = new Date();\nconst weekday = today.getUTCDay();\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCDate()\")}}\n- {{jsxref(\"Date.prototype.getDay()\")}}\n- {{jsxref(\"Date.prototype.setUTCDate()\")}}\n"
    },
    "getutcfullyear": {
      "index.md": "---\ntitle: Date.prototype.getUTCFullYear()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getUTCFullYear\n---\n\n{{JSRef}}\n\nThe **`getUTCFullYear()`** method of {{jsxref(\"Date\")}} instances returns the year for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-getutcfullyear.html\")}}\n\n## Syntax\n\n```js-nolint\ngetUTCFullYear()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer representing the year for the given date according to universal time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\nUnlike {{jsxref(\"Date/getYear\", \"getYear()\")}}, the value returned by `getUTCFullYear()` is an absolute number. For dates between the years 1000 and 9999, `getFullYear()` returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000.\n\n## Examples\n\n### Using getUTCFullYear()\n\nThe following example assigns the four-digit value of the current year to the variable `year`.\n\n```js\nconst today = new Date();\nconst year = today.getUTCFullYear();\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getFullYear()\")}}\n- {{jsxref(\"Date.prototype.setFullYear()\")}}\n"
    },
    "getutchours": {
      "index.md": "---\ntitle: Date.prototype.getUTCHours()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getUTCHours\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getUTCHours\n---\n\n{{JSRef}}\n\nThe **`getUTCHours()`** method of {{jsxref(\"Date\")}} instances returns the hours for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-getutchours.html\")}}\n\n## Syntax\n\n```js-nolint\ngetUTCHours()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 0 and 23, representing the hours for the given date according to universal time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Examples\n\n### Using getUTCHours()\n\nThe following example assigns the hours portion of the current time to the variable `hours`.\n\n```js\nconst today = new Date();\nconst hours = today.getUTCHours();\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getHours()\")}}\n- {{jsxref(\"Date.prototype.setUTCHours()\")}}\n"
    },
    "getutcmilliseconds": {
      "index.md": "---\ntitle: Date.prototype.getUTCMilliseconds()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getUTCMilliseconds\n---\n\n{{JSRef}}\n\nThe **`getUTCMilliseconds()`** method of {{jsxref(\"Date\")}} instances returns the milliseconds for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-getutcmilliseconds.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ngetUTCMilliseconds()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 0 and 999, representing the milliseconds for the given date according to universal time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\nNot to be confused with the timestamp. To get the total milliseconds since the epoch, use the [`getTime()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime) method.\n\n## Examples\n\n### Using getUTCMilliseconds()\n\nThe following example assigns the milliseconds portion of the current time to the variable `milliseconds`.\n\n```js\nconst today = new Date();\nconst milliseconds = today.getUTCMilliseconds();\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getMilliseconds()\")}}\n- {{jsxref(\"Date.prototype.setUTCMilliseconds()\")}}\n"
    },
    "getutcminutes": {
      "index.md": "---\ntitle: Date.prototype.getUTCMinutes()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getUTCMinutes\n---\n\n{{JSRef}}\n\nThe **`getUTCMinutes()`** method of {{jsxref(\"Date\")}} instances returns the minutes for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-getutcminutes.html\")}}\n\n## Syntax\n\n```js-nolint\ngetUTCMinutes()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 0 and 59, representing the minutes for the given date according to universal time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Examples\n\n### Using getUTCMinutes()\n\nThe following example assigns the minutes portion of the current time to the variable `minutes`.\n\n```js\nconst today = new Date();\nconst minutes = today.getUTCMinutes();\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getMinutes()\")}}\n- {{jsxref(\"Date.prototype.setUTCMinutes()\")}}\n"
    },
    "getutcmonth": {
      "index.md": "---\ntitle: Date.prototype.getUTCMonth()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getUTCMonth\n---\n\n{{JSRef}}\n\nThe **`getUTCMonth()`** method of {{jsxref(\"Date\")}} instances returns the month for this date according to universal time, as a zero-based value (where zero indicates the first month of the year).\n\n{{EmbedInteractiveExample(\"pages/js/date-getutcmonth.html\")}}\n\n## Syntax\n\n```js-nolint\ngetUTCMonth()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 0 and 11, representing the month for the given date according to universal time: 0 for January, 1 for February, and so on. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Examples\n\n### Using getUTCMonth()\n\nThe following example assigns the month portion of the current date to the variable `month`.\n\n```js\nconst today = new Date();\nconst month = today.getUTCMonth();\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getMonth()\")}}\n- {{jsxref(\"Date.prototype.setUTCMonth()\")}}\n"
    },
    "getutcseconds": {
      "index.md": "---\ntitle: Date.prototype.getUTCSeconds()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.getUTCSeconds\n---\n\n{{JSRef}}\n\nThe **`getUTCSeconds()`** method of {{jsxref(\"Date\")}} instances returns the seconds in the specified date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-getutcseconds.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ngetUTCSeconds()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer, between 0 and 59, representing the seconds for the given date according to universal time. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Examples\n\n### Using getUTCSeconds()\n\nThe following example assigns the seconds portion of the current time to the variable `seconds`.\n\n```js\nconst today = new Date();\nconst seconds = today.getUTCSeconds();\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getSeconds()\")}}\n- {{jsxref(\"Date.prototype.setUTCSeconds()\")}}\n"
    },
    "getyear": {
      "index.md": "---\ntitle: Date.prototype.getYear()\nslug: Web/JavaScript/Reference/Global_Objects/Date/getYear\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.Date.getYear\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`getYear()`** method of {{jsxref(\"Date\")}} instances returns the year for this date according to local time. Because `getYear()` does not return full years (\"year 2000 problem\"), it is deprecated and has been replaced by the {{jsxref(\"Date/getFullYear\", \"getFullYear()\")}} method.\n\n## Syntax\n\n```js-nolint\ngetYear()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn integer representing the year for the given date according to local time, minus 1900. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n- For years greater than or equal to 2000, the value is 100 or greater. For example, if the year is 2026, `getYear()` returns 126.\n- For years between and including 1900 and 1999, the value returned by `getYear()` is between 0 and 99. For example, if the year is 1976, `getYear()` returns 76.\n- For years less than 1900, the value returned by `getYear()` is less than 0. For example, if the year is 1800, `getYear()` returns -100.\n\nThis method essentially returns the value of {{jsxref(\"Date/getFullYear\", \"getFullYear()\")}} minus 1900. You should use `getFullYear()` instead, so that the year is specified in full.\n\n## Examples\n\n### Years between 1900 and 1999\n\nThe second statement assigns the value 95 to the variable `year`.\n\n```js\nconst xmas = new Date(\"1995-12-25\");\nconst year = xmas.getYear(); // returns 95\n```\n\n### Years above 1999\n\nThe second statement assigns the value 100 to the variable `year`.\n\n```js\nconst xmas = new Date(\"2000-12-25\");\nconst year = xmas.getYear(); // returns 100\n```\n\n### Years below 1900\n\nThe second statement assigns the value -100 to the variable `year`.\n\n```js\nconst xmas = new Date(\"1800-12-25\");\nconst year = xmas.getYear(); // returns -100\n```\n\n### Setting and getting a year between 1900 and 1999\n\nThe third statement assigns the value 95 to the variable `year`, representing the year 1995.\n\n```js\nconst xmas = new Date(\"2015-12-25\");\nxmas.setYear(95);\nconst year = xmas.getYear(); // returns 95\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Date.prototype.getYear` in `core-js`](https://github.com/zloirock/core-js#ecmascript-date)\n- {{jsxref(\"Date.prototype.getFullYear()\")}}\n- {{jsxref(\"Date.prototype.getUTCFullYear()\")}}\n- {{jsxref(\"Date.prototype.setYear()\")}}\n"
    },
    "index.md": "---\ntitle: Date\nslug: Web/JavaScript/Reference/Global_Objects/Date\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Date\n---\n\n{{JSRef}}\n\nJavaScript **`Date`** objects represent a single moment in time in a platform-independent format. `Date` objects encapsulate an integral number that represents milliseconds since the midnight at the beginning of January 1, 1970, UTC (the _epoch_).\n\n> **Note:** TC39 is working on [Temporal](https://tc39.es/proposal-temporal/docs/index.html), a new Date/Time API. Read more about it on the [Igalia blog](https://blogs.igalia.com/compilers/2020/06/23/dates-and-times-in-javascript/). It is not yet ready for production use!\n\n## Description\n\n### The epoch, timestamps, and invalid date\n\nA JavaScript date is fundamentally specified as the time in milliseconds that has elapsed since the [epoch](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-time-values-and-time-range), which is defined as the midnight at the beginning of January 1, 1970, UTC (equivalent to the [UNIX epoch](/en-US/docs/Glossary/Unix_time)). This timestamp is _timezone-agnostic_ and uniquely defines an instant in history.\n\n> **Note:** While the time value at the heart of a Date object is UTC, the basic methods to fetch the date and time or its components all work in the local (i.e. host system) time zone and offset.\n\nThe maximum timestamp representable by a `Date` object is slightly smaller than the maximum safe integer ({{jsxref(\"Number.MAX_SAFE_INTEGER\")}}, which is 9,007,199,254,740,991). A `Date` object can represent a maximum of ±8,640,000,000,000,000 milliseconds, or ±100,000,000 (one hundred million) days, relative to the epoch. This is the range from April 20, 271821 BC to September 13, 275760 AD. Any attempt to represent a time outside this range results in the `Date` object holding a timestamp value of [`NaN`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN), which is an \"Invalid Date\".\n\n```js\nconsole.log(new Date(8.64e15).toString()); // \"Sat Sep 13 275760 00:00:00 GMT+0000 (Coordinated Universal Time)\"\nconsole.log(new Date(8.64e15 + 1).toString()); // \"Invalid Date\"\n```\n\nThere are various methods that allow you to interact with the timestamp stored in the date:\n\n- You can interact with the timestamp value directly using the {{jsxref(\"Date/getTime\", \"getTime()\")}} and {{jsxref(\"Date/setTime\", \"setTime()\")}} methods.\n- The {{jsxref(\"Date/valueOf\", \"valueOf()\")}} and [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) (when passed `\"number\"`) methods — which are automatically called in [number coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) — return the timestamp, causing `Date` objects to behave like their timestamps when used in number contexts.\n- All static methods ({{jsxref(\"Date.now()\")}}, {{jsxref(\"Date.parse()\")}}, and {{jsxref(\"Date.UTC()\")}}) return timestamps instead of `Date` objects.\n- The {{jsxref(\"Date/Date\", \"Date()\")}} constructor can be called with a timestamp as the only argument.\n\n### Date components and time zones\n\nA date is represented internally as a single number, the _timestamp_. When interacting with it, the timestamp needs to be interpreted as a structured date-and-time representation. There are always two ways to interpret a timestamp: as a local time or as a Coordinated Universal Time (UTC), the global standard time defined by the World Time Standard. The local timezone is not stored in the date object, but is determined by the host environment (user's device).\n\n> **Note:** UTC should not be confused with the [Greenwich Mean Time](https://en.wikipedia.org/wiki/Greenwich_Mean_Time) (GMT), because they are not always equal — this is explained in more detail in the linked Wikipedia page.\n\nFor example, the timestamp 0 represents a unique instant in history, but it can be interpreted in two ways:\n\n- As a UTC time, it is midnight at the beginning of January 1, 1970, UTC,\n- As a local time in New York (UTC-5), it is 19:00:00 on December 31, 1969.\n\nThe {{jsxref(\"Date/getTimezoneOffset\", \"getTimezoneOffset()\")}} method returns the difference between UTC and the local time in minutes. Note that the timezone offset does not only depend on the current timezone, but also on the time represented by the `Date` object, because of daylight saving time and historical changes. In essence, the timezone offset is the offset from UTC time, at the time represented by the `Date` object and at the location of the host environment.\n\nThere are two groups of `Date` methods: one group gets and sets various date components by interpreting the timestamp as a local time, while the other uses UTC.\n\n<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th rowspan=\"2\">Component</th>\n      <th colspan=\"2\">Local</th>\n      <th colspan=\"2\">UTC</th>\n    </tr>\n    <tr>\n      <th>Get</th>\n      <th>Set</th>\n      <th>Get</th>\n      <th>Set</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Year</td>\n      <td>{{jsxref(\"Date/getFullYear\", \"getFullYear()\")}}</td>\n      <td>{{jsxref(\"Date/setFullYear\", \"setFullYear()\")}}</td>\n      <td>{{jsxref(\"Date/getUTCFullYear\", \"getUTCFullYear()\")}}</td>\n      <td>{{jsxref(\"Date/setUTCFullYear\", \"setUTCFullYear()\")}}</td>\n    </tr>\n    <tr>\n      <td>Month</td>\n      <td>{{jsxref(\"Date/getMonth\", \"getMonth()\")}}</td>\n      <td>{{jsxref(\"Date/setMonth\", \"setMonth()\")}}</td>\n      <td>{{jsxref(\"Date/getUTCMonth\", \"getUTCMonth()\")}}</td>\n      <td>{{jsxref(\"Date/setUTCMonth\", \"setUTCMonth()\")}}</td>\n    </tr>\n    <tr>\n      <td>Date (of month)</td>\n      <td>{{jsxref(\"Date/getDate\", \"getDate()\")}}</td>\n      <td>{{jsxref(\"Date/setDate\", \"setDate()\")}}</td>\n      <td>{{jsxref(\"Date/getUTCDate\", \"getUTCDate()\")}}</td>\n      <td>{{jsxref(\"Date/setUTCDate\", \"setUTCDate()\")}}</td>\n    </tr>\n    <tr>\n      <td>Hours</td>\n      <td>{{jsxref(\"Date/getHours\", \"getHours()\")}}</td>\n      <td>{{jsxref(\"Date/setHours\", \"setHours()\")}}</td>\n      <td>{{jsxref(\"Date/getUTCHours\", \"getUTCHours()\")}}</td>\n      <td>{{jsxref(\"Date/setUTCHours\", \"setUTCHours()\")}}</td>\n    </tr>\n    <tr>\n      <td>Minutes</td>\n      <td>{{jsxref(\"Date/getMinutes\", \"getMinutes()\")}}</td>\n      <td>{{jsxref(\"Date/setMinutes\", \"setMinutes()\")}}</td>\n      <td>{{jsxref(\"Date/getUTCMinutes\", \"getUTCMinutes()\")}}</td>\n      <td>{{jsxref(\"Date/setUTCMinutes\", \"setUTCMinutes()\")}}</td>\n    </tr>\n    <tr>\n      <td>Seconds</td>\n      <td>{{jsxref(\"Date/getSeconds\", \"getSeconds()\")}}</td>\n      <td>{{jsxref(\"Date/setSeconds\", \"setSeconds()\")}}</td>\n      <td>{{jsxref(\"Date/getUTCSeconds\", \"getUTCSeconds()\")}}</td>\n      <td>{{jsxref(\"Date/setUTCSeconds\", \"setUTCSeconds()\")}}</td>\n    </tr>\n    <tr>\n      <td>Milliseconds</td>\n      <td>{{jsxref(\"Date/getMilliseconds\", \"getMilliseconds()\")}}</td>\n      <td>{{jsxref(\"Date/setMilliseconds\", \"setMilliseconds()\")}}</td>\n      <td>{{jsxref(\"Date/getUTCMilliseconds\", \"getUTCMilliseconds()\")}}</td>\n      <td>{{jsxref(\"Date/setUTCMilliseconds\", \"setUTCMilliseconds()\")}}</td>\n    </tr>\n    <tr>\n      <td>Day (of week)</td>\n      <td>{{jsxref(\"Date/getDay\", \"getDay()\")}}</td>\n      <td>N/A</td>\n      <td>{{jsxref(\"Date/getUTCDay\", \"getUTCDay()\")}}</td>\n      <td>N/A</td>\n    </tr>\n  </tbody>\n</table>\n\nThe {{jsxref(\"Date/Date\", \"Date()\")}} constructor can be called with two or more arguments, in which case they are interpreted as the year, month, day, hour, minute, second, and millisecond, respectively, in local time. {{jsxref(\"Date.UTC()\")}} works similarly, but it interprets the components as UTC time and also accepts a single argument representing the year.\n\n> **Note:** Some methods, including the `Date()` constructor, `Date.UTC()`, and the deprecated {{jsxref(\"Date/getYear\", \"getYear()\")}}/{{jsxref(\"Date/setYear\", \"setYear()\")}} methods, interpret a two-digit year as a year in the 1900s. For example, `new Date(99, 5, 24)` is interpreted as June 24, 1999, not June 24, 99. See [Interpretation of two-digit years](#interpretation_of_two-digit_years) for more information.\n\nWhen a segment overflows or underflows its expected range, it usually \"carries over to\" or \"borrows from\" the higher segment. For example, if the month is set to 12 (months are zero-based, so December is 11), it become the January of the next year. If the day of month is set to 0, it becomes the last day of the previous month. This also applies to dates specified with the [date time string format](#date_time_string_format).\n\n### Date time string format\n\nThere are many ways to format a date as a string. The JavaScript specification only specifies one format to be universally supported: the [_date time string format_](https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-date-time-string-format), a simplification of the ISO 8601 calendar date extended format. The format is as follows:\n\n```plain\nYYYY-MM-DDTHH:mm:ss.sssZ\n```\n\n- `YYYY` is the year, with four digits (`0000` to `9999`), or as an _expanded year_ of `+` or `-` followed by six digits. The sign is required for expanded years. `-000000` is explicitly disallowed as a valid year.\n- `MM` is the month, with two digits (`01` to `12`). Defaults to `01`.\n- `DD` is the day of the month, with two digits (`01` to `31`). Defaults to `01`.\n- `T` is a literal character, which indicates the beginning of the _time_ part of the string. The `T` is required when specifying the time part.\n- `HH` is the hour, with two digits (`00` to `23`). As a special case, `24:00:00` is allowed, and is interpreted as midnight at the beginning of the next day. Defaults to `00`.\n- `mm` is the minute, with two digits (`00` to `59`). Defaults to `00`.\n- `ss` is the second, with two digits (`00` to `59`). Defaults to `00`.\n- `sss` is the millisecond, with three digits (`000` to `999`). Defaults to `000`.\n- `Z` is the timezone offset, which can either be the literal character `Z` (indicating UTC), or `+` or `-` followed by `HH:mm`, the offset in hours and minutes from UTC.\n\nVarious components can be omitted, so the following are all valid:\n\n- Date-only form: `YYYY`, `YYYY-MM`, `YYYY-MM-DD`\n- Date-time form: one of the above date-only forms, followed by `T`, followed by `HH:mm`, `HH:mm:ss`, or `HH:mm:ss.sss`. Each combination can be followed by a time zone offset.\n\nFor example, `\"2011-10-10\"` (_date-only_ form), `\"2011-10-10T14:48:00\"` (_date-time_ form), or `\"2011-10-10T14:48:00.000+09:00\"` (_date-time_ form with milliseconds and time zone) are all valid date time strings.\n\nWhen the time zone offset is absent, **date-only forms are interpreted as a UTC time and date-time forms are interpreted as local time.** This is due to a historical spec error that was not consistent with ISO 8601 but could not be changed due to web compatibility. See [Broken Parser – A Web Reality Issue](https://maggiepint.com/2017/04/11/fixing-javascript-date-web-compatibility-and-reality/).\n\n{{jsxref(\"Date.parse()\")}} and the {{jsxref(\"Date/Date\", \"Date()\")}} constructor both accept strings in the date time string format as input. Furthermore, implementations are allowed to support other date formats when the input fails to match this format.\n\nThe {{jsxref(\"Date/toISOString\", \"toISOString()\")}} method returns a string representation of the date in the date time string format, with the time zone offset always set to `Z` (UTC).\n\n> **Note:** You are encouraged to make sure your input conforms to the date time string format above for maximum compatibility, because support for other formats is not guaranteed. However, there are some formats that are supported in all major implementations — like {{rfc(2822)}} format — in which case their usage can be acceptable. Always conduct [cross-browser tests](/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing) to ensure your code works in all target browsers. A library can help if many different formats are to be accommodated.\n\nNon-standard strings can be parsed in any way as desired by the implementation, including the time zone — most implementations use the local time zone by default. Implementations are not required to return invalid date for out-of-bounds date components, although they usually do. A string may have in-bounds date components (with the bounds defined above), but does not represent a date in reality (for example, \"February 30\"). Implementations behave inconsistently in this case. The [`Date.parse()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse#examples) page offers more examples about these non-standard cases.\n\n### Other ways to format a date\n\n- {{jsxref(\"Date/toISOString\", \"toISOString()\")}} returns a string in the format `1970-01-01T00:00:00.000Z` (the date time string format introduced above, which is simplified [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)). {{jsxref(\"Date/toJSON\", \"toJSON()\")}} calls `toISOString()` and returns the result.\n- {{jsxref(\"Date/toString\", \"toString()\")}} returns a string in the format `Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)`, while {{jsxref(\"Date/toDateString\", \"toDateString()\")}} and {{jsxref(\"Date/toTimeString\", \"toTimeString()\")}} return the date and time parts of the string, respectively. [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) (when passed `\"string\"` or `\"default\"`) calls `toString()` and returns the result.\n- {{jsxref(\"Date/toUTCString\", \"toUTCString()\")}} returns a string in the format `Thu, 01 Jan 1970 00:00:00 GMT` (generalized {{rfc(7231)}}).\n- {{jsxref(\"Date/toLocaleDateString\", \"toLocaleDateString()\")}}, {{jsxref(\"Date/toLocaleTimeString\", \"toLocaleTimeString()\")}}, and {{jsxref(\"Date/toLocaleString\", \"toLocaleString()\")}} use locale-specific date and time formats, usually provided by the [`Intl`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl) API.\n\nSee the [Formats of `toString` method return values](#formats_of_tostring_method_return_values) section for examples.\n\n## Constructor\n\n- {{jsxref(\"Date/Date\", \"Date()\")}}\n  - : When called as a constructor, returns a new `Date` object. When called as a function, returns a string representation of the current date and time.\n\n## Static methods\n\n- {{jsxref(\"Date.now()\")}}\n  - : Returns the numeric value corresponding to the current time—the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored.\n- {{jsxref(\"Date.parse()\")}}\n  - : Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00 UTC, with leap seconds ignored.\n- {{jsxref(\"Date.UTC()\")}}\n  - : Accepts the same parameters as the longest form of the constructor (i.e. 2 to 7) and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.\n\n## Instance properties\n\nThese properties are defined on `Date.prototype` and shared by all `Date` instances.\n\n- {{jsxref(\"Object/constructor\", \"Date.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Date` instances, the initial value is the {{jsxref(\"Date/Date\", \"Date\")}} constructor.\n\n## Instance methods\n\n- {{jsxref(\"Date.prototype.getDate()\")}}\n  - : Returns the day of the month (`1` – `31`) for the specified date according to local time.\n- {{jsxref(\"Date.prototype.getDay()\")}}\n  - : Returns the day of the week (`0` – `6`) for the specified date according to local time.\n- {{jsxref(\"Date.prototype.getFullYear()\")}}\n  - : Returns the year (4 digits for 4-digit years) of the specified date according to local time.\n- {{jsxref(\"Date.prototype.getHours()\")}}\n  - : Returns the hour (`0` – `23`) in the specified date according to local time.\n- {{jsxref(\"Date.prototype.getMilliseconds()\")}}\n  - : Returns the milliseconds (`0` – `999`) in the specified date according to local time.\n- {{jsxref(\"Date.prototype.getMinutes()\")}}\n  - : Returns the minutes (`0` – `59`) in the specified date according to local time.\n- {{jsxref(\"Date.prototype.getMonth()\")}}\n  - : Returns the month (`0` – `11`) in the specified date according to local time.\n- {{jsxref(\"Date.prototype.getSeconds()\")}}\n  - : Returns the seconds (`0` – `59`) in the specified date according to local time.\n- {{jsxref(\"Date.prototype.getTime()\")}}\n  - : Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC. (Negative values are returned for prior times.)\n- {{jsxref(\"Date.prototype.getTimezoneOffset()\")}}\n  - : Returns the time-zone offset in minutes for the current locale.\n- {{jsxref(\"Date.prototype.getUTCDate()\")}}\n  - : Returns the day (date) of the month (`1` – `31`) in the specified date according to universal time.\n- {{jsxref(\"Date.prototype.getUTCDay()\")}}\n  - : Returns the day of the week (`0` – `6`) in the specified date according to universal time.\n- {{jsxref(\"Date.prototype.getUTCFullYear()\")}}\n  - : Returns the year (4 digits for 4-digit years) in the specified date according to universal time.\n- {{jsxref(\"Date.prototype.getUTCHours()\")}}\n  - : Returns the hours (`0` – `23`) in the specified date according to universal time.\n- {{jsxref(\"Date.prototype.getUTCMilliseconds()\")}}\n  - : Returns the milliseconds (`0` – `999`) in the specified date according to universal time.\n- {{jsxref(\"Date.prototype.getUTCMinutes()\")}}\n  - : Returns the minutes (`0` – `59`) in the specified date according to universal time.\n- {{jsxref(\"Date.prototype.getUTCMonth()\")}}\n  - : Returns the month (`0` – `11`) in the specified date according to universal time.\n- {{jsxref(\"Date.prototype.getUTCSeconds()\")}}\n  - : Returns the seconds (`0` – `59`) in the specified date according to universal time.\n- {{jsxref(\"Date.prototype.getYear()\")}} {{deprecated_inline}}\n  - : Returns the year (usually 2–3 digits) in the specified date according to local time. Use {{jsxref(\"Date/getFullYear\", \"getFullYear()\")}} instead.\n- {{jsxref(\"Date.prototype.setDate()\")}}\n  - : Sets the day of the month for a specified date according to local time.\n- {{jsxref(\"Date.prototype.setFullYear()\")}}\n  - : Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.\n- {{jsxref(\"Date.prototype.setHours()\")}}\n  - : Sets the hours for a specified date according to local time.\n- {{jsxref(\"Date.prototype.setMilliseconds()\")}}\n  - : Sets the milliseconds for a specified date according to local time.\n- {{jsxref(\"Date.prototype.setMinutes()\")}}\n  - : Sets the minutes for a specified date according to local time.\n- {{jsxref(\"Date.prototype.setMonth()\")}}\n  - : Sets the month for a specified date according to local time.\n- {{jsxref(\"Date.prototype.setSeconds()\")}}\n  - : Sets the seconds for a specified date according to local time.\n- {{jsxref(\"Date.prototype.setTime()\")}}\n  - : Sets the {{jsxref(\"Date\")}} object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC. Use negative numbers for times prior.\n- {{jsxref(\"Date.prototype.setUTCDate()\")}}\n  - : Sets the day of the month for a specified date according to universal time.\n- {{jsxref(\"Date.prototype.setUTCFullYear()\")}}\n  - : Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.\n- {{jsxref(\"Date.prototype.setUTCHours()\")}}\n  - : Sets the hour for a specified date according to universal time.\n- {{jsxref(\"Date.prototype.setUTCMilliseconds()\")}}\n  - : Sets the milliseconds for a specified date according to universal time.\n- {{jsxref(\"Date.prototype.setUTCMinutes()\")}}\n  - : Sets the minutes for a specified date according to universal time.\n- {{jsxref(\"Date.prototype.setUTCMonth()\")}}\n  - : Sets the month for a specified date according to universal time.\n- {{jsxref(\"Date.prototype.setUTCSeconds()\")}}\n  - : Sets the seconds for a specified date according to universal time.\n- {{jsxref(\"Date.prototype.setYear()\")}} {{deprecated_inline}}\n  - : Sets the year (usually 2–3 digits) for a specified date according to local time. Use {{jsxref(\"Date/setFullYear\", \"setFullYear()\")}} instead.\n- {{jsxref(\"Date.prototype.toDateString()\")}}\n  - : Returns the \"date\" portion of the {{jsxref(\"Date\")}} as a human-readable string like `'Thu Apr 12 2018'`.\n- {{jsxref(\"Date.prototype.toISOString()\")}}\n  - : Converts a date to a string following the ISO 8601 Extended Format.\n- {{jsxref(\"Date.prototype.toJSON()\")}}\n  - : Returns a string representing the {{jsxref(\"Date\")}} using {{jsxref(\"Date/toISOString\", \"toISOString()\")}}. Intended for use by {{jsxref(\"JSON.stringify()\")}}.\n- {{jsxref(\"Date.prototype.toLocaleDateString()\")}}\n  - : Returns a string with a locality sensitive representation of the date portion of this date based on system settings.\n- {{jsxref(\"Date.prototype.toLocaleString()\")}}\n  - : Returns a string with a locality-sensitive representation of this date. Overrides the {{jsxref(\"Object.prototype.toLocaleString()\")}} method.\n- {{jsxref(\"Date.prototype.toLocaleTimeString()\")}}\n  - : Returns a string with a locality-sensitive representation of the time portion of this date, based on system settings.\n- {{jsxref(\"Date.prototype.toString()\")}}\n  - : Returns a string representing the specified {{jsxref(\"Date\")}} object. Overrides the {{jsxref(\"Object.prototype.toString()\")}} method.\n- {{jsxref(\"Date.prototype.toTimeString()\")}}\n  - : Returns the \"time\" portion of the {{jsxref(\"Date\")}} as a human-readable string.\n- {{jsxref(\"Date.prototype.toUTCString()\")}}\n  - : Converts a date to a string using the UTC timezone.\n- {{jsxref(\"Date.prototype.valueOf()\")}}\n  - : Returns the primitive value of a {{jsxref(\"Date\")}} object. Overrides the {{jsxref(\"Object.prototype.valueOf()\")}} method.\n- [`Date.prototype[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive)\n  - : Converts this `Date` object to a primitive value.\n\n## Examples\n\n### Several ways to create a Date object\n\nThe following examples show several ways to create JavaScript dates:\n\n> **Note:** Creating a date from a string has a lot of behavior inconsistencies. See [date time string format](#date_time_string_format) for caveats on using different formats.\n\n```js\nconst today = new Date();\nconst birthday = new Date(\"December 17, 1995 03:24:00\"); // DISCOURAGED: may not work in all runtimes\nconst birthday2 = new Date(\"1995-12-17T03:24:00\"); // This is standardized and will work reliably\nconst birthday3 = new Date(1995, 11, 17); // the month is 0-indexed\nconst birthday4 = new Date(1995, 11, 17, 3, 24, 0);\nconst birthday5 = new Date(628021800000); // passing epoch timestamp\n```\n\n### Formats of toString method return values\n\n```js\nconst date = new Date(\"2020-05-12T23:50:21.817Z\");\ndate.toString(); // Tue May 12 2020 18:50:21 GMT-0500 (Central Daylight Time)\ndate.toDateString(); // Tue May 12 2020\ndate.toTimeString(); // 18:50:21 GMT-0500 (Central Daylight Time)\ndate[Symbol.toPrimitive](\"string\"); // Tue May 12 2020 18:50:21 GMT-0500 (Central Daylight Time)\n\ndate.toISOString(); // 2020-05-12T23:50:21.817Z\ndate.toJSON(); // 2020-05-12T23:50:21.817Z\n\ndate.toUTCString(); // Tue, 12 May 2020 23:50:21 GMT\n\ndate.toLocaleString(); // 5/12/2020, 6:50:21 PM\ndate.toLocaleDateString(); // 5/12/2020\ndate.toLocaleTimeString(); // 6:50:21 PM\n```\n\n### To get Date, Month and Year or Time\n\n```js\nconst date = new Date(\"2000-01-17T16:45:30\");\nconst [month, day, year] = [\n  date.getMonth(),\n  date.getDate(),\n  date.getFullYear(),\n];\n// [0, 17, 2000] as month are 0-indexed\nconst [hour, minutes, seconds] = [\n  date.getHours(),\n  date.getMinutes(),\n  date.getSeconds(),\n];\n// [16, 45, 30]\n```\n\n### Interpretation of two-digit years\n\n`new Date()` exhibits legacy undesirable, inconsistent behavior with two-digit year values; specifically, when a `new Date()` call is given a two-digit year value, that year value does not get treated as a literal year and used as-is but instead gets interpreted as a relative offset — in some cases as an offset from the year `1900`, but in other cases, as an offset from the year `2000`.\n\n```js\nlet date = new Date(98, 1); // Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)\ndate = new Date(22, 1); // Wed Feb 01 1922 00:00:00 GMT+0000 (GMT)\ndate = new Date(\"2/1/22\"); // Tue Feb 01 2022 00:00:00 GMT+0000 (GMT)\n\n// Legacy method; always interprets two-digit year values as relative to 1900\ndate.setYear(98);\ndate.toString(); // Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)\ndate.setYear(22);\ndate.toString(); // Wed Feb 01 1922 00:00:00 GMT+0000 (GMT)\n```\n\nSo, to create and get dates between the years `0` and `99`, instead use the preferred {{jsxref(\"Date/setFullYear\", \"setFullYear()\")}} and {{jsxref(\"Date/getFullYear\", \"getFullYear()\")}} methods:.\n\n```js\n// Preferred method; never interprets any value as being a relative offset,\n// but instead uses the year value as-is\ndate.setFullYear(98);\ndate.getFullYear(); // 98 (not 1998)\ndate.setFullYear(22);\ndate.getFullYear(); // 22 (not 1922, not 2022)\n```\n\n### Calculating elapsed time\n\nThe following examples show how to determine the elapsed time between two JavaScript dates in milliseconds.\n\nDue to the differing lengths of days (due to daylight saving changeover), months, and years, expressing elapsed time in units greater than hours, minutes, and seconds requires addressing a number of issues, and should be thoroughly researched before being attempted.\n\n```js\n// Using Date objects\nconst start = Date.now();\n\n// The event to time goes here:\ndoSomethingForALongTime();\nconst end = Date.now();\nconst elapsed = end - start; // elapsed time in milliseconds\n```\n\n```js\n// Using built-in methods\nconst start = new Date();\n\n// The event to time goes here:\ndoSomethingForALongTime();\nconst end = new Date();\nconst elapsed = end.getTime() - start.getTime(); // elapsed time in milliseconds\n```\n\n```js\n// To test a function and get back its return\nfunction printElapsedTime(testFn) {\n  const startTime = Date.now();\n  const result = testFn();\n  const endTime = Date.now();\n\n  console.log(`Elapsed time: ${String(endTime - startTime)} milliseconds`);\n  return result;\n}\n\nconst yourFunctionReturn = printElapsedTime(yourFunction);\n```\n\n> **Note:** In browsers that support the {{domxref(\"performance_property\", \"Web Performance API\", \"\", 1)}}'s high-resolution time feature, {{domxref(\"Performance.now()\")}} can provide more reliable and precise measurements of elapsed time than {{jsxref(\"Date.now()\")}}.\n\n### Get the number of seconds since the ECMAScript Epoch\n\n```js\nconst seconds = Math.floor(Date.now() / 1000);\n```\n\nIn this case, it's important to return only an integer—so a simple division won't do. It's also important to only return actually elapsed seconds. (That's why this code uses {{jsxref(\"Math.floor()\")}}, and _not_ {{jsxref(\"Math.round()\")}}.)\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date/Date\", \"Date()\")}}\n",
    "now": {
      "index.md": "---\ntitle: Date.now()\nslug: Web/JavaScript/Reference/Global_Objects/Date/now\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Date.now\n---\n\n{{JSRef}}\n\nThe **`Date.now()`** static method returns the number of milliseconds elapsed since the [epoch](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), which is defined as the midnight at the beginning of January 1, 1970, UTC.\n\n{{EmbedInteractiveExample(\"pages/js/date-now.html\")}}\n\n## Syntax\n\n```js-nolint\nDate.now()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA number representing the [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), in milliseconds, of the current time.\n\n## Description\n\n### Reduced time precision\n\nTo offer protection against timing attacks and [fingerprinting](/en-US/docs/Glossary/Fingerprinting), the precision of `Date.now()` might get rounded depending on browser settings. In Firefox, the `privacy.reduceTimerPrecision` preference is enabled by default and defaults to 2ms. You can also enable `privacy.resistFingerprinting`, in which case the precision will be 100ms or the value of `privacy.resistFingerprinting.reduceTimerPrecision.microseconds`, whichever is larger.\n\n```js\n// reduced time precision (2ms) in Firefox 60\nDate.now();\n// 1519211809934\n// 1519211810362\n// 1519211811670\n// …\n\n// reduced time precision with `privacy.resistFingerprinting` enabled\nDate.now();\n// 1519129853500\n// 1519129858900\n// 1519129864400\n// …\n```\n\n## Examples\n\n### Measuring time elapsed\n\nYou can use `Date.now()` to get the current time in milliseconds, then subtract a previous time to find out how much time elapsed between the two calls.\n\n```js\nconst start = Date.now();\ndoSomeLongRunningProcess();\nconsole.log(`Time elapsed: ${Date.now() - start} ms`);\n```\n\nFor more complex scenarios, you may want to use the [performance API](/en-US/docs/Web/API/Performance_API/High_precision_timing) instead.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Date.now` in `core-js`](https://github.com/zloirock/core-js#ecmascript-date)\n- {{domxref(\"Performance.now()\")}}\n- {{domxref(\"console/time_static\", \"console.time()\")}}\n- {{domxref(\"console/timeEnd_static\", \"console.timeEnd()\")}}\n"
    },
    "parse": {
      "index.md": "---\ntitle: Date.parse()\nslug: Web/JavaScript/Reference/Global_Objects/Date/parse\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Date.parse\n---\n\n{{JSRef}}\n\nThe **`Date.parse()`** static method parses a string representation of a date, and returns the date's [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\nOnly the [date time string format](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format) is explicitly specified to be supported. Other formats are implementation-defined and may not work across all browsers. A library can help if many different formats are to be accommodated.\n\n{{EmbedInteractiveExample(\"pages/js/date-parse.html\")}}\n\n## Syntax\n\n```js-nolint\nDate.parse(dateString)\n```\n\n### Parameters\n\n- `dateString`\n  - : A string in [the date time string format](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format). See the linked reference for caveats on using different formats.\n\n### Return value\n\nA number representing the [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) of the given date. If `dateString` fails to be parsed as a valid date, {{jsxref(\"NaN\")}} is returned.\n\n## Description\n\nThis function is useful for setting date values based on string values, for example in conjunction with the {{jsxref(\"Date/setTime\", \"setTime()\")}} method.\n\nBecause `parse()` is a static method of `Date`, you always use it as `Date.parse()`, rather than as a method of a `Date` object you created.\n\n## Examples\n\n### Using Date.parse()\n\nThe following calls all return `1546300800000`. The first will imply UTC time because it's date-only, and the others explicitly specify the UTC timezone.\n\n```js\nDate.parse(\"2019-01-01\");\nDate.parse(\"2019-01-01T00:00:00.000Z\");\nDate.parse(\"2019-01-01T00:00:00.000+00:00\");\n```\n\nThe following call, which does not specify a time zone will be set to 2019-01-01 at 00:00:00 in the local timezone of the system, because it has both date and time.\n\n```js\nDate.parse(\"2019-01-01T00:00:00\");\n```\n\n### Non-standard date strings\n\n> **Note:** This section contains implementation-specific behavior that can be inconsistent across implementations.\n\nImplementations usually default to the local time zone when the date string is non-standard. For consistency, we will assume that the code uses the UTC timezone.\n\n```js\nDate.parse(\"Jan 1, 1970\"); // 0 in all implementations\n\nDate.parse(\"Thu, 01 Jan 1970 00:00:00\"); // 0 in all implementations\n\nDate.parse(\"1970,1,1\"); // 0 in Chrome and Firefox, NaN in Safari\n\nDate.parse(\"02 01 1970\");\n// 2678400000 in Chrome and Firefox (Sun Feb 01 1970 00:00:00 GMT+0000);\n// NaN in Safari\n\n// With explicit timezone\nDate.parse(\"Thu, 01 Jan 1970 00:00:00 GMT+0300\");\n// -10800000 in all implementations in all timezones\n\n// Single number\nDate.parse(\"0\");\n// 946684800000 in Chrome (Sat Jan 01 2000 00:00:00 GMT+0000);\n// NaN in Firefox;\n// -62167219200000 in Safari (Sat Jan 01 0000 00:00:00 GMT+0000)\n\n// Two-digit number that may be a month\nDate.parse(\"28\"); // NaN in all implementations\n\n// Two-digit year\nDate.parse(\"70/01/01\"); // 0 in all implementations\n\n// Out-of-bounds date components\nDate.parse(\"2014-25-23\"); // NaN in all implementations\nDate.parse(\"Mar 32, 2014\"); // NaN in all implementations\nDate.parse(\"2014/25/23\"); // NaN in all implementations\n\nDate.parse(\"2014-02-30\");\n// NaN in Safari and Firefox;\n// 1393718400000 in Chrome (Sun Mar 02 2014 00:00:00 GMT+0000)\nDate.parse(\"02/30/2014\"); // 1393718400000 in all implementations\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.UTC()\")}}\n"
    },
    "setdate": {
      "index.md": "---\ntitle: Date.prototype.setDate()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setDate\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setDate\n---\n\n{{JSRef}}\n\nThe **`setDate()`** method of {{jsxref(\"Date\")}} instances changes the day of the month for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setdate.html\")}}\n\n## Syntax\n\n```js-nolint\nsetDate(dateValue)\n```\n\n### Parameters\n\n- `dateValue`\n  - : An integer representing the day of the month.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `dateValue` is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you specify a number outside the expected range, the date information in the {{jsxref(\"Date\")}} object is updated accordingly. For example, if the `Date` object holds June 1st, a `dateValue` of 40 changes the date to July 10th, while a `dateValue` of 0 changes the date to the last day of the previous month, May 31st.\n\n## Examples\n\n### Using setDate()\n\n```js\nconst theBigDay = new Date(1962, 6, 7, 12); // noon of 1962-07-07 (7th of July 1962, month is 0-indexed)\nconst theBigDay2 = new Date(theBigDay).setDate(24); // 1962-07-24 (24th of July 1962)\nconst theBigDay3 = new Date(theBigDay).setDate(32); // 1962-08-01 (1st of August 1962)\nconst theBigDay4 = new Date(theBigDay).setDate(22); // 1962-07-22 (22nd of July 1962)\nconst theBigDay5 = new Date(theBigDay).setDate(0); // 1962-06-30 (30th of June 1962)\nconst theBigDay6 = new Date(theBigDay).setDate(98); // 1962-10-06 (6th of October 1962)\nconst theBigDay7 = new Date(theBigDay).setDate(-50); // 1962-05-11 (11th of May 1962)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date/Date\", \"Date()\")}}\n- {{jsxref(\"Date.prototype.getDate()\")}}\n- {{jsxref(\"Date.prototype.setUTCDate()\")}}\n"
    },
    "setfullyear": {
      "index.md": "---\ntitle: Date.prototype.setFullYear()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setFullYear\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setFullYear\n---\n\n{{JSRef}}\n\nThe **`setFullYear()`** method of {{jsxref(\"Date\")}} instances changes the year, month, and/or day of month for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setfullyear.html\")}}\n\n## Syntax\n\n```js-nolint\nsetFullYear(yearValue)\nsetFullYear(yearValue, monthValue)\nsetFullYear(yearValue, monthValue, dateValue)\n```\n\n### Parameters\n\n- `yearValue`\n  - : An integer representing the year. For example, 1995.\n- `monthValue` {{optional_inline}}\n  - : An integer representing the month: 0 for January, 1 for February, and so on.\n- `dateValue` {{optional_inline}}\n  - : An integer between 1 and 31 representing the day of the month. If you specify `dateValue`, you must also specify `monthValue`.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you do not specify the `monthValue` and `dateValue` parameters, the same values as what are returned by {{jsxref(\"Date/getMonth\", \"getMonth()\")}} and {{jsxref(\"Date/getDate\", \"getDate()\")}} are used.\n\nIf a parameter you specify is outside of the expected range, other parameters and the date information in the {{jsxref(\"Date\")}} object are updated accordingly. For example, if you specify 15 for `monthValue`, the year is incremented by 1 (`yearValue + 1`), and 3 is used for the month.\n\n## Examples\n\n### Using setFullYear()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setFullYear(1997);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCFullYear()\")}}\n- {{jsxref(\"Date.prototype.setUTCFullYear()\")}}\n- {{jsxref(\"Date.prototype.setYear()\")}}\n"
    },
    "sethours": {
      "index.md": "---\ntitle: Date.prototype.setHours()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setHours\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setHours\n---\n\n{{JSRef}}\n\nThe **`setHours()`** method of {{jsxref(\"Date\")}} instances changes the hours, minutes, seconds, and/or milliseconds for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-sethours.html\")}}\n\n## Syntax\n\n```js-nolint\nsetHours(hoursValue)\nsetHours(hoursValue, minutesValue)\nsetHours(hoursValue, minutesValue, secondsValue)\nsetHours(hoursValue, minutesValue, secondsValue, msValue)\n```\n\n### Parameters\n\n- `hoursValue`\n  - : An integer between 0 and 23 representing the hours.\n- `minutesValue` {{optional_inline}}\n  - : An integer between 0 and 59 representing the minutes.\n- `secondsValue` {{optional_inline}}\n  - : An integer between 0 and 59 representing the seconds. If you specify `secondsValue`, you must also specify `minutesValue`.\n- `msValue` {{optional_inline}}\n  - : An integer between 0 and 999 representing the milliseconds. If you specify `msValue`, you must also specify `minutesValue` and `secondsValue`.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you do not specify the `minutesValue`, `secondsValue`, and `msValue` parameters, the same values as what are returned by {{jsxref(\"Date/getMinutes\", \"getMinutes()\")}}, {{jsxref(\"Date/getSeconds\", \"getSeconds()\")}}, and {{jsxref(\"Date/getMilliseconds\", \"getMilliseconds()\")}} are used.\n\nIf a parameter you specify is outside of the expected range, other parameters and the date information in the {{jsxref(\"Date\")}} object are updated accordingly. For example, if you specify 100 for `secondsValue`, the minutes are incremented by 1 (`minutesValue + 1`), and 40 is used for seconds.\n\n## Examples\n\n### Using setHours()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setHours(7);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getHours()\")}}\n- {{jsxref(\"Date.prototype.setUTCHours()\")}}\n"
    },
    "setmilliseconds": {
      "index.md": "---\ntitle: Date.prototype.setMilliseconds()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setMilliseconds\n---\n\n{{JSRef}}\n\nThe **`setMilliseconds()`** method of {{jsxref(\"Date\")}} instances changes the milliseconds for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setmilliseconds.html\")}}\n\n## Syntax\n\n```js-nolint\nsetMilliseconds(millisecondsValue)\n```\n\n### Parameters\n\n- `millisecondsValue`\n  - : An integer between 0 and 999 representing the milliseconds.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `millisecondsValue` is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you specify a number outside the expected range, the date information in the {{jsxref(\"Date\")}} object is updated accordingly. For example, if you specify 1005, the number of seconds is incremented by 1, and 5 is used for the milliseconds.\n\n## Examples\n\n### Using setMilliseconds()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setMilliseconds(100);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getMilliseconds()\")}}\n- {{jsxref(\"Date.prototype.setUTCMilliseconds()\")}}\n"
    },
    "setminutes": {
      "index.md": "---\ntitle: Date.prototype.setMinutes()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setMinutes\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setMinutes\n---\n\n{{JSRef}}\n\nThe **`setMinutes()`** method of {{jsxref(\"Date\")}} instances changes the minutes for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setminutes.html\")}}\n\n## Syntax\n\n```js-nolint\nsetMinutes(minutesValue)\nsetMinutes(minutesValue, secondsValue)\nsetMinutes(minutesValue, secondsValue, msValue)\n```\n\n### Parameters\n\n- `minutesValue`\n  - : An integer between 0 and 59 representing the minutes.\n- `secondsValue` {{optional_inline}}\n  - : An integer between 0 and 59 representing the seconds. If you specify `secondsValue`, you must also specify `minutesValue`.\n- `msValue` {{optional_inline}}\n  - : An integer between 0 and 999 representing the milliseconds. If you specify `msValue`, you must also specify `minutesValue` and `secondsValue`.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you do not specify the `secondsValue` and `msValue` parameters, the same values as what are returned by {{jsxref(\"Date/getSeconds\", \"getSeconds()\")}} and {{jsxref(\"Date/getMilliseconds\", \"getMilliseconds()\")}} are used.\n\nIf a parameter you specify is outside of the expected range, other parameters and the date information in the {{jsxref(\"Date\")}} object are updated accordingly. For example, if you specify 100 for `secondsValue`, the minutes is incremented by 1 (`minutesValue + 1`), and 40 is used for seconds.\n\n## Examples\n\n### Using setMinutes()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setMinutes(45);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getMinutes()\")}}\n- {{jsxref(\"Date.prototype.setUTCMinutes()\")}}\n"
    },
    "setmonth": {
      "index.md": "---\ntitle: Date.prototype.setMonth()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setMonth\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setMonth\n---\n\n{{JSRef}}\n\nThe **`setMonth()`** method of {{jsxref(\"Date\")}} instances changes the month and/or day of the month for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setmonth.html\")}}\n\n## Syntax\n\n```js-nolint\nsetMonth(monthValue)\nsetMonth(monthValue, dateValue)\n```\n\n### Parameters\n\n- `monthValue`\n  - : An integer representing the month: 0 for January, 1 for February, and so on.\n- `dateValue` {{optional_inline}}\n  - : An integer from 1 to 31 representing the day of the month.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you do not specify the `dateValue` parameter, the same value as what is returned by {{jsxref(\"Date/getDate\", \"getDate()\")}} is used.\n\nIf a parameter you specify is outside of the expected range, other parameters and the date information in the {{jsxref(\"Date\")}} object are updated accordingly. For example, if you specify 15 for `monthValue`, the year is incremented by 1, and 3 is used for month.\n\nThe current day of month will have an impact on the behavior of this method.\nConceptually it will add the number of days given by the current day of the month to the\n1st day of the new month specified as the parameter, to return the new date.\nFor example, if the current value is 31st January 2016, calling setMonth with a value of 1 will return 2nd March 2016.\nThis is because in 2016 February had 29 days.\n\n## Examples\n\n### Using setMonth()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setMonth(6);\n\n//Watch out for end of month transitions\nconst endOfMonth = new Date(2016, 7, 31);\nendOfMonth.setMonth(1);\nconsole.log(endOfMonth); //Wed Mar 02 2016 00:00:00\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getMonth()\")}}\n- {{jsxref(\"Date.prototype.setUTCMonth()\")}}\n"
    },
    "setseconds": {
      "index.md": "---\ntitle: Date.prototype.setSeconds()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setSeconds\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setSeconds\n---\n\n{{JSRef}}\n\nThe **`setSeconds()`** method of {{jsxref(\"Date\")}} instances changes the seconds and/or milliseconds for this date according to local time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setseconds.html\")}}\n\n## Syntax\n\n```js-nolint\nsetSeconds(secondsValue)\nsetSeconds(secondsValue, msValue)\n```\n\n### Parameters\n\n- `secondsValue`\n  - : An integer between 0 and 59 representing the seconds.\n- `msValue` {{optional_inline}}\n  - : An integer between 0 and 999 representing the milliseconds.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you do not specify the `msValue` parameter, the value returned\nfrom the {{jsxref(\"Date/getMilliseconds\", \"getMilliseconds()\")}} method is\nused.\n\nIf a parameter you specify is outside of the expected range, `setSeconds()`\nattempts to update the date information in the {{jsxref(\"Date\")}} object accordingly.\nFor example, if you use 100 for `secondsValue`, the minutes stored\nin the {{jsxref(\"Date\")}} object will be incremented by 1, and 40 will be used for\nseconds.\n\n## Examples\n\n### Using setSeconds()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setSeconds(30);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getSeconds()\")}}\n- {{jsxref(\"Date.prototype.setUTCSeconds()\")}}\n"
    },
    "settime": {
      "index.md": "---\ntitle: Date.prototype.setTime()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setTime\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setTime\n---\n\n{{JSRef}}\n\nThe **`setTime()`** method of {{jsxref(\"Date\")}} instances changes the [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) for this date, which is the number of milliseconds since the [epoch](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), defined as the midnight at the beginning of January 1, 1970, UTC.\n\n{{EmbedInteractiveExample(\"pages/js/date-settime.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nsetTime(timeValue)\n```\n\n### Parameters\n\n- `timeValue`\n  - : An integer representing the new timestamp — the number of milliseconds since the midnight at the beginning of January 1, 1970, UTC.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `timeValue` is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Examples\n\n### Using setTime()\n\n```js\nconst theBigDay = new Date(\"1999-07-01\");\nconst sameAsBigDay = new Date();\nsameAsBigDay.setTime(theBigDay.getTime());\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getTime()\")}}\n- {{jsxref(\"Date.prototype.setUTCHours()\")}}\n"
    },
    "setutcdate": {
      "index.md": "---\ntitle: Date.prototype.setUTCDate()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setUTCDate\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setUTCDate\n---\n\n{{JSRef}}\n\nThe **`setUTCDate()`** method of {{jsxref(\"Date\")}} instances changes the day of the month for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setutcdate.html\")}}\n\n## Syntax\n\n```js-nolint\nsetUTCDate(dateValue)\n```\n\n### Parameters\n\n- `dateValue`\n  - : An integer from 1 to 31 representing the day of the month.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `dateValue` is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf the `dateValue` is outside of the range of date values for the month, `setDate()` will update the {{jsxref(\"Date\")}} object accordingly.\n\nFor example, if 0 is provided for `dateValue`, the date will be set to the last day of the previous month. If you use 40 for `dateValue`, and the month stored in the {{jsxref(\"Date\")}} object is June, the day will be changed to 10 and the month will be incremented to July.\n\nIf a negative number is provided for `dateValue`, the date will be set counting backwards from the last day of the previous month. -1 would result in the date being set to 1 day before the last day of the previous month.\n\n## Examples\n\n### Using setUTCDate()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setUTCDate(20);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCDate()\")}}\n- {{jsxref(\"Date.prototype.setDate()\")}}\n"
    },
    "setutcfullyear": {
      "index.md": "---\ntitle: Date.prototype.setUTCFullYear()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setUTCFullYear\n---\n\n{{JSRef}}\n\nThe **`setUTCFullYear()`** method of {{jsxref(\"Date\")}} instances changes the year for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setutcfullyear.html\")}}\n\n## Syntax\n\n```js-nolint\nsetUTCFullYear(yearValue)\nsetUTCFullYear(yearValue, monthValue)\nsetUTCFullYear(yearValue, monthValue, dateValue)\n```\n\n### Parameters\n\n- `yearValue`\n  - : An integer representing the year. For example, 1995.\n- `monthValue` {{optional_inline}}\n  - : An integer representing the month: 0 for January, 1 for February, and so on.\n- `dateValue` {{optional_inline}}\n  - : An integer between 1 and 31 representing the day of the month. If you specify `dateValue`, you must also specify `monthValue`.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you do not specify the `monthValue` and\n`dateValue` parameters, the values returned from the\n{{jsxref(\"Date/getUTCMonth\", \"getUTCMonth()\")}} and\n{{jsxref(\"Date/getUTCDate\", \"getUTCDate()\")}} methods are used.\n\nIf a parameter you specify is outside of the expected range,\n`setUTCFullYear()` attempts to update the other parameters and the date\ninformation in the {{jsxref(\"Date\")}} object accordingly. For example, if you specify 15\nfor `monthValue`, the year is incremented by 1\n(`yearValue + 1`), and 3 is used for the month.\n\n## Examples\n\n### Using setUTCFullYear()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setUTCFullYear(1997);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCFullYear()\")}}\n- {{jsxref(\"Date.prototype.setFullYear()\")}}\n"
    },
    "setutchours": {
      "index.md": "---\ntitle: Date.prototype.setUTCHours()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setUTCHours\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setUTCHours\n---\n\n{{JSRef}}\n\nThe **`setUTCHours()`** method of {{jsxref(\"Date\")}} instances changes the hours, minutes, seconds, and/or milliseconds for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setutchours.html\")}}\n\n## Syntax\n\n```js-nolint\nsetUTCHours(hoursValue)\nsetUTCHours(hoursValue, minutesValue)\nsetUTCHours(hoursValue, minutesValue, secondsValue)\nsetUTCHours(hoursValue, minutesValue, secondsValue, msValue)\n```\n\n### Parameters\n\n- `hoursValue`\n  - : An integer between 0 and 23 representing the hours.\n- `minutesValue` {{optional_inline}}\n  - : An integer between 0 and 59 representing the minutes.\n- `secondsValue` {{optional_inline}}\n  - : An integer between 0 and 59 representing the seconds. If you specify `secondsValue`, you must also specify `minutesValue`.\n- `msValue` {{optional_inline}}\n  - : An integer between 0 and 999 representing the milliseconds. If you specify `msValue`, you must also specify `minutesValue` and `secondsValue`.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you do not specify the `minutesValue`,\n`secondsValue`, and `msValue` parameters,\nthe values returned from the {{jsxref(\"Date/getUTCMinutes\", \"getUTCMinutes()\")}}, {{jsxref(\"Date/getUTCSeconds\", \"getUTCSeconds()\")}},\nand {{jsxref(\"Date/getUTCMilliseconds\", \"getUTCMilliseconds()\")}} methods\nare used.\n\nIf a parameter you specify is outside of the expected range, `setUTCHours()`\nattempts to update the date information in the {{jsxref(\"Date\")}} object accordingly.\nFor example, if you use 100 for `secondsValue`, the minutes will\nbe incremented by 1 (`minutesValue + 1`), and 40 will be used for seconds.\n\n## Examples\n\n### Using setUTCHours()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setUTCHours(8);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCHours()\")}}\n- {{jsxref(\"Date.prototype.setHours()\")}}\n"
    },
    "setutcmilliseconds": {
      "index.md": "---\ntitle: Date.prototype.setUTCMilliseconds()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setUTCMilliseconds\n---\n\n{{JSRef}}\n\nThe **`setUTCMilliseconds()`** method of {{jsxref(\"Date\")}} instances changes the milliseconds for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setutcmilliseconds.html\")}}\n\n## Syntax\n\n```js-nolint\nsetUTCMilliseconds(millisecondsValue)\n```\n\n### Parameters\n\n- `millisecondsValue`\n  - : An integer between 0 and 999 representing the milliseconds.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `millisecondsValue` is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf a parameter you specify is outside of the expected range,\n`setUTCMilliseconds()` attempts to update the date information in the\n{{jsxref(\"Date\")}} object accordingly. For example, if you use 1100 for\n`millisecondsValue`, the seconds stored in the {{jsxref(\"Date\")}}\nobject will be incremented by 1, and 100 will be used for milliseconds.\n\n## Examples\n\n### Using setUTCMilliseconds()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setUTCMilliseconds(500);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCMilliseconds()\")}}\n- {{jsxref(\"Date.prototype.setMilliseconds()\")}}\n"
    },
    "setutcminutes": {
      "index.md": "---\ntitle: Date.prototype.setUTCMinutes()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setUTCMinutes\n---\n\n{{JSRef}}\n\nThe **`setUTCMinutes()`** method of {{jsxref(\"Date\")}} instances changes the minutes for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setutcminutes.html\")}}\n\n## Syntax\n\n```js-nolint\nsetUTCMinutes(minutesValue)\nsetUTCMinutes(minutesValue, secondsValue)\nsetUTCMinutes(minutesValue, secondsValue, msValue)\n```\n\n### Parameters\n\n- `minutesValue`\n  - : An integer between 0 and 59 representing the minutes.\n- `secondsValue` {{optional_inline}}\n  - : An integer between 0 and 59 representing the seconds. If you specify `secondsValue`, you must also specify `minutesValue`.\n- `msValue` {{optional_inline}}\n  - : An integer between 0 and 999 representing the milliseconds. If you specify `msValue`, you must also specify `minutesValue` and `secondsValue`.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you do not specify the `secondsValue` and\n`msValue` parameters, the values returned from\n{{jsxref(\"Date/getUTCSeconds\", \"getUTCSeconds()\")}} and\n{{jsxref(\"Date/getUTCMilliseconds\", \"getUTCMilliseconds()\")}} methods are\nused.\n\nIf a parameter you specify is outside of the expected range,\n`setUTCMinutes()` attempts to update the date information in the\n{{jsxref(\"Date\")}} object accordingly. For example, if you use 100 for\n`secondsValue`, the minutes will be incremented by 1\n(`minutesValue + 1`), and 40 will be used for seconds.\n\n## Examples\n\n### Using setUTCMinutes()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setUTCMinutes(43);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCMinutes()\")}}\n- {{jsxref(\"Date.prototype.setMinutes()\")}}\n"
    },
    "setutcmonth": {
      "index.md": "---\ntitle: Date.prototype.setUTCMonth()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setUTCMonth\n---\n\n{{JSRef}}\n\nThe **`setUTCMonth()`** method of {{jsxref(\"Date\")}} instances changes the month and/or day of the month for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setutcmonth.html\")}}\n\n## Syntax\n\n```js-nolint\nsetUTCMonth(monthValue)\nsetUTCMonth(monthValue, dateValue)\n```\n\n### Parameters\n\n- `monthValue`\n  - : An integer representing the month: 0 for January, 1 for February, and so on.\n- `dateValue` {{optional_inline}}\n  - : An integer from 1 to 31 representing the day of the month.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you do not specify the `dateValue` parameter, the value returned from the\n{{jsxref(\"Date/getUTCDate\", \"getUTCDate()\")}} method is used.\n\nIf a parameter you specify is outside of the expected range, `setUTCMonth()`\nattempts to update the date information in the {{jsxref(\"Date\")}} object accordingly.\nFor example, if you use 15 for `monthValue`, the year will be incremented by\n1, and 3 will be used for month.\n\n## Examples\n\n### Using setUTCMonth()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setUTCMonth(11);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCMonth()\")}}\n- {{jsxref(\"Date.prototype.setMonth()\")}}\n"
    },
    "setutcseconds": {
      "index.md": "---\ntitle: Date.prototype.setUTCSeconds()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.setUTCSeconds\n---\n\n{{JSRef}}\n\nThe **`setUTCSeconds()`** method of {{jsxref(\"Date\")}} instances changes the seconds and/or milliseconds for this date according to universal time.\n\n{{EmbedInteractiveExample(\"pages/js/date-setutcseconds.html\")}}\n\n## Syntax\n\n```js-nolint\nsetUTCSeconds(secondsValue)\nsetUTCSeconds(secondsValue, msValue)\n```\n\n### Parameters\n\n- `secondsValue`\n  - : An integer between 0 and 59 representing the seconds.\n- `msValue` {{optional_inline}}\n  - : An integer between 0 and 999 representing the milliseconds.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If a parameter is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf you do not specify the `msValue` parameter, the value returned from the\n{{jsxref(\"Date/getUTCMilliseconds\", \"getUTCMilliseconds()\")}} method is\nused.\n\nIf a parameter you specify is outside of the expected range,\n`setUTCSeconds()` attempts to update the date information in the\n{{jsxref(\"Date\")}} object accordingly. For example, if you use 100 for\n`secondsValue`, the minutes stored in the {{jsxref(\"Date\")}} object will be\nincremented by 1, and 40 will be used for seconds.\n\n## Examples\n\n### Using setUTCSeconds()\n\n```js\nconst theBigDay = new Date();\ntheBigDay.setUTCSeconds(20);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.getUTCSeconds()\")}}\n- {{jsxref(\"Date.prototype.setSeconds()\")}}\n"
    },
    "setyear": {
      "index.md": "---\ntitle: Date.prototype.setYear()\nslug: Web/JavaScript/Reference/Global_Objects/Date/setYear\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.Date.setYear\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`setYear()`** method of {{jsxref(\"Date\")}} instances sets the year for a specified date according to local time.\n\nHowever, the way the legacy `setYear()` method sets year values is different from how the preferred {{jsxref(\"Date/setFullYear\", \"setFullYear()\")}} method sets year values — and in some cases, also different from how `new Date()` and {{jsxref(\"Date.parse()\")}} set year values. Specifically, given two-digit numbers, such as `22` and `61`:\n\n- `setYear()` interprets any two-digit number as an offset to `1900`; so `date.setYear(22)` results in the year value being set to `1922`, and `date.setYear(61)` results in the year value being set to `1961`. (In contrast, while `new Date(61, 1)` also results in the year value being set to `1961`, `new Date(\"2/1/22\")` results in the year value being set to `2022`; and similarly for {{jsxref(\"Date.parse()\")}}).\n\n- {{jsxref(\"Date/setFullYear\", \"setFullYear()\")}} does no special interpretation but instead uses the literal two-digit value as-is to set the year; so `date.setFullYear(61)` results in the year value being set to `0061`, and `date.setFullYear(22)` results in the year value being set to `0022`.\n\nBecause of those differences in behavior, you should no longer use the legacy `setYear()` method, but should instead use the preferred {{jsxref(\"Date/setFullYear\", \"setFullYear()\")}} method.\n\n## Syntax\n\n```js-nolint\nsetYear(yearValue)\n```\n\n### Parameters\n\n- `yearValue`\n  - : An integer.\n\n### Return value\n\nChanges the {{jsxref(\"Date\")}} object in place, and returns its new [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). If `yearValue` is `NaN` (or other values that get [coerced](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) to `NaN`, such as `undefined`), the date is set to [Invalid Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) and `NaN` is returned.\n\n## Description\n\nIf `yearValue` is a number between 0 and 99 (inclusive), then the year for\n`dateObj` is set to `1900 + yearValue`. Otherwise, the year for\n`dateObj` is set to `yearValue`.\n\n## Examples\n\n### Using setYear()\n\nThe first two lines set the year to 1996. The third sets the year to 2000.\n\n```js\nconst theBigDay = new Date();\n\ntheBigDay.setYear(96);\ntheBigDay.setYear(1996);\ntheBigDay.setYear(2000);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Date.prototype.setYear` in `core-js`](https://github.com/zloirock/core-js#ecmascript-date)\n- {{jsxref(\"Date.prototype.getFullYear()\")}}\n- {{jsxref(\"Date.prototype.getUTCFullYear()\")}}\n- {{jsxref(\"Date.prototype.setFullYear()\")}}\n- {{jsxref(\"Date.prototype.setUTCFullYear()\")}}\n"
    },
    "todatestring": {
      "index.md": "---\ntitle: Date.prototype.toDateString()\nslug: Web/JavaScript/Reference/Global_Objects/Date/toDateString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.toDateString\n---\n\n{{JSRef}}\n\nThe **`toDateString()`** method of {{jsxref(\"Date\")}} instances returns a string representing the date portion of this date interpreted in the local timezone.\n\n{{EmbedInteractiveExample(\"pages/js/date-todatestring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoDateString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the date portion of the given date (see description for the format). Returns `\"Invalid Date\"` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\n{{jsxref(\"Date\")}} instances refer to a specific point in time. `toDateString()` interprets the date in the local timezone and formats the _date_ part in English. It always uses the following format, separated by spaces:\n\n1. First three letters of the week day name\n2. First three letters of the month name\n3. Two-digit day of the month, padded on the left a zero if necessary\n4. Four-digit year (at least), padded on the left with zeros if necessary. May have a negative sign\n\nFor example: \"Thu Jan 01 1970\".\n\n- If you only want to get the _time_ part, use {{jsxref(\"Date/toTimeString\", \"toTimeString()\")}}.\n- If you want to get both the date and time, use {{jsxref(\"Date/toString\", \"toString()\")}}.\n- If you want to make the date interpreted as UTC instead of local timezone, use {{jsxref(\"Date/toUTCString\", \"toUTCString()\")}}.\n- If you want to format the date in a more user-friendly format (e.g. localization), use {{jsxref(\"Date/toLocaleDateString\", \"toLocaleDateString()\")}}.\n\n## Examples\n\n### Using toDateString()\n\n```js\nconst d = new Date(0);\n\nconsole.log(d.toString()); // \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\"\nconsole.log(d.toDateString()); // \"Thu Jan 01 1970\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.toLocaleDateString()\")}}\n- {{jsxref(\"Date.prototype.toTimeString()\")}}\n- {{jsxref(\"Date.prototype.toString()\")}}\n"
    },
    "toisostring": {
      "index.md": "---\ntitle: Date.prototype.toISOString()\nslug: Web/JavaScript/Reference/Global_Objects/Date/toISOString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.toISOString\n---\n\n{{JSRef}}\n\nThe **`toISOString()`** method of {{jsxref(\"Date\")}} instances returns a string representing this date in the [date time string format](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format), a _simplified_ format based on [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), which is always 24 or 27 characters long (`YYYY-MM-DDTHH:mm:ss.sssZ` or `±YYYYYY-MM-DDTHH:mm:ss.sssZ`, respectively). The timezone is always UTC, as denoted by the suffix `Z`.\n\n{{EmbedInteractiveExample(\"pages/js/date-toisostring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoISOString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the given date in the [date time string format](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format) according to universal time. It's the same format as the one required to be recognized by {{jsxref(\"Date.parse()\")}}.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) or if it corresponds to a year that cannot be represented in the date string format.\n\n## Examples\n\n### Using toISOString()\n\n```js\nconst d = new Date(0);\n\nconsole.log(d.toISOString()); // \"1970-01-01T00:00:00.000Z\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.toLocaleDateString()\")}}\n- {{jsxref(\"Date.prototype.toString()\")}}\n- {{jsxref(\"Date.prototype.toUTCString()\")}}\n"
    },
    "tojson": {
      "index.md": "---\ntitle: Date.prototype.toJSON()\nslug: Web/JavaScript/Reference/Global_Objects/Date/toJSON\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.toJSON\n---\n\n{{JSRef}}\n\nThe **`toJSON()`** method of {{jsxref(\"Date\")}} instances returns a string representing this date in the same ISO format as {{jsxref(\"Date/toISOString\", \"toISOString()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/date-tojson.html\")}}\n\n## Syntax\n\n```js-nolint\ntoJSON()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the given date in the [date time string format](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#date_time_string_format) according to universal time, or `null` when the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date). For valid dates, the return value is the same as that of {{jsxref(\"Date/toISOString\", \"toISOString()\")}}.\n\n## Description\n\nThe `toJSON()` method is automatically called by {{jsxref(\"JSON.stringify()\")}} when a `Date` object is stringified. This method is generally intended to, by default, usefully serialize {{jsxref(\"Date\")}} objects during [JSON](/en-US/docs/Glossary/JSON) serialization, which can then be deserialized using the {{jsxref(\"Date/Date\", \"Date()\")}} constructor as the reviver of {{jsxref(\"JSON.parse()\")}}.\n\nThe method first attempts to convert its `this` value [to a primitive](/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) by calling its [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) (with `\"number\"` as hint), {{jsxref(\"Object/valueOf\", \"valueOf()\")}}, and {{jsxref(\"Object/toString\", \"toString()\")}} methods, in that order. If the result is a [non-finite](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite) number, `null` is returned. (This generally corresponds to an invalid date, whose {{jsxref(\"Date/valueOf\", \"valueOf()\")}} returns {{jsxref(\"NaN\")}}.) Otherwise, if the converted primitive is not a number or is a finite number, the return value of {{jsxref(\"Date/toISOString\", \"this.toISOString()\")}} is returned.\n\nNote that the method does not check whether the `this` value is a valid {{jsxref(\"Date\")}} object. However, calling `Date.prototype.toJSON()` on non-`Date` objects fails unless the object's number primitive representation is `NaN`, or the object also has a `toISOString()` method.\n\n## Examples\n\n### Using toJSON()\n\n```js\nconst jsonDate = new Date(0).toJSON(); // '1970-01-01T00:00:00.000Z'\nconst backToDate = new Date(jsonDate);\n\nconsole.log(jsonDate); // 1970-01-01T00:00:00.000Z\n```\n\n### Serialization round-tripping\n\nWhen parsing JSON containing date strings, you can use the {{jsxref(\"Date/Date\", \"Date()\")}} constructor to revive them into the original date objects.\n\n```js\nconst fileData = {\n  author: \"Maria\",\n  title: \"Date.prototype.toJSON()\",\n  createdAt: new Date(2019, 3, 15),\n  updatedAt: new Date(2020, 6, 26),\n};\nconst response = JSON.stringify(fileData);\n\n// Imagine transmission through network\n\nconst data = JSON.parse(response, (key, value) => {\n  if (key === \"createdAt\" || key === \"updatedAt\") {\n    return new Date(value);\n  }\n  return value;\n});\n\nconsole.log(data);\n```\n\n> **Note:** The reviver of `JSON.parse()` must be specific to the payload shape you expect, because the serialization is _lossy_: it's not possible to distinguish between a string that represents a Date and a normal string.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.toLocaleDateString()\")}}\n- {{jsxref(\"Date.prototype.toTimeString()\")}}\n- {{jsxref(\"Date.prototype.toUTCString()\")}}\n"
    },
    "tolocaledatestring": {
      "index.md": "---\ntitle: Date.prototype.toLocaleDateString()\nslug: Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.toLocaleDateString\n---\n\n{{JSRef}}\n\nThe **`toLocaleDateString()`** method of {{jsxref(\"Date\")}} instances returns a string with a language-sensitive representation of the date portion of this date in the local timezone. In implementations with [`Intl.DateTimeFormat` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) support, this method simply calls `Intl.DateTimeFormat`.\n\nEvery time `toLocaleString` is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a {{jsxref(\"Intl.DateTimeFormat\")}} object and use its {{jsxref(\"Intl/DateTimeFormat/format\", \"format()\")}} method, because a `DateTimeFormat` object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.\n\n{{EmbedInteractiveExample(\"pages/js/date-tolocaledatestring.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\ntoLocaleDateString()\ntoLocaleDateString(locales)\ntoLocaleDateString(locales, options)\n```\n\n### Parameters\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.DateTimeFormat` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat), these parameters correspond exactly to the [`Intl.DateTimeFormat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) constructor's parameters. Implementations without `Intl.DateTimeFormat` support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales) parameter of the `Intl.DateTimeFormat()` constructor.\n\n    In implementations without `Intl.DateTimeFormat` support, this parameter is ignored and the host's locale is usually used.\n\n- `options` {{optional_inline}}\n\n  - : An object adjusting the output format. Corresponds to the [`options`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options) parameter of the `Intl.DateTimeFormat()` constructor. The `timeStyle` option must be undefined, or a {{jsxref(\"TypeError\")}} would be thrown. If `weekday`, `year`, `month`, and `day` are all undefined, then `year`, `month`, and `day` will be set to `\"numeric\"`.\n\n    In implementations without `Intl.DateTimeFormat` support, this parameter is ignored.\n\nSee the [`Intl.DateTimeFormat()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) for details on these parameters and how to use them.\n\n### Return value\n\nA string representing the date portion of the given date according to language-specific conventions.\n\nIn implementations with `Intl.DateTimeFormat`, this is equivalent to `new Intl.DateTimeFormat(locales, options).format(date)`, where `options` has been normalized as described above.\n\n> **Note:** Most of the time, the formatting returned by `toLocaleDateString()` is consistent. However, the output may vary with time, language, and implementation — output variations are by design and allowed by the specification. You should not compare the results of `toLocaleDateString()` to static values.\n\n## Examples\n\n### Using toLocaleDateString()\n\nBasic use of this method without specifying a `locale` returns a formatted string in the default locale and with default options.\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));\n\n// toLocaleDateString() without arguments depends on the implementation,\n// the default locale, and the default time zone\nconsole.log(date.toLocaleDateString());\n// \"12/11/2012\" if run in en-US locale with time zone America/Los_Angeles\n```\n\n### Checking for support for locales and options parameters\n\nThe `locales` and `options` parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, `toLocaleDateString()` always uses the system's locale, which may not be what you want. Because any implementation that supports the `locales` and `options` parameters must support the {{jsxref(\"Intl\")}} API, you can check the existence of the latter for support:\n\n```js\nfunction toLocaleDateStringSupportsLocales() {\n  return (\n    typeof Intl === \"object\" &&\n    !!Intl &&\n    typeof Intl.DateTimeFormat === \"function\"\n  );\n}\n```\n\n### Using locales\n\nThis example shows some of the variations in localized date formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// formats below assume the local time zone of the locale;\n// America/Los_Angeles for the US\n\n// US English uses month-day-year order\nconsole.log(date.toLocaleDateString(\"en-US\"));\n// \"12/20/2012\"\n\n// British English uses day-month-year order\nconsole.log(date.toLocaleDateString(\"en-GB\"));\n// \"20/12/2012\"\n\n// Korean uses year-month-day order\nconsole.log(date.toLocaleDateString(\"ko-KR\"));\n// \"2012. 12. 20.\"\n\n// Event for Persian, It's hard to manually convert date to Solar Hijri\nconsole.log(date.toLocaleDateString(\"fa-IR\"));\n// \"۱۳۹۱/۹/۳۰\"\n\n// Arabic in most Arabic speaking countries uses real Arabic digits\nconsole.log(date.toLocaleDateString(\"ar-EG\"));\n// \"٢٠‏/١٢‏/٢٠١٢\"\n\n// for Japanese, applications may want to use the Japanese calendar,\n// where 2012 was the year 24 of the Heisei era\nconsole.log(date.toLocaleDateString(\"ja-JP-u-ca-japanese\"));\n// \"24/12/20\"\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(date.toLocaleDateString([\"ban\", \"id\"]));\n// \"20/12/2012\"\n```\n\n### Using options\n\nThe results provided by `toLocaleDateString()` can be customized using the `options` parameter:\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// Request a weekday along with a long date\nconst options = {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n};\nconsole.log(date.toLocaleDateString(\"de-DE\", options));\n// \"Donnerstag, 20. Dezember 2012\"\n\n// An application may want to use UTC and make that visible\noptions.timeZone = \"UTC\";\noptions.timeZoneName = \"short\";\nconsole.log(date.toLocaleDateString(\"en-US\", options));\n// \"Thursday, December 20, 2012, UTC\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n- {{jsxref(\"Date.prototype.toLocaleString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleTimeString()\")}}\n- {{jsxref(\"Date.prototype.toString()\")}}\n"
    },
    "tolocalestring": {
      "index.md": "---\ntitle: Date.prototype.toLocaleString()\nslug: Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.toLocaleString\n---\n\n{{JSRef}}\n\nThe **`toLocaleString()`** method of {{jsxref(\"Date\")}} instances returns a string with a language-sensitive representation of this date in the local timezone. In implementations with [`Intl.DateTimeFormat` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) support, this method simply calls `Intl.DateTimeFormat`.\n\nEvery time `toLocaleString` is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a {{jsxref(\"Intl.DateTimeFormat\")}} object and use its {{jsxref(\"Intl/DateTimeFormat/format\", \"format()\")}} method, because a `DateTimeFormat` object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.\n\n{{EmbedInteractiveExample(\"pages/js/date-tolocalestring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n```\n\n### Parameters\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.DateTimeFormat` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat), these parameters correspond exactly to the [`Intl.DateTimeFormat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) constructor's parameters. Implementations without `Intl.DateTimeFormat` support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales) parameter of the `Intl.DateTimeFormat()` constructor.\n\n    In implementations without `Intl.DateTimeFormat` support, this parameter is ignored and the host's locale is usually used.\n\n- `options` {{optional_inline}}\n\n  - : An object adjusting the output format. Corresponds to the [`options`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options) parameter of the `Intl.DateTimeFormat()` constructor. If `weekday`, `year`, `month`, `day`, `dayPeriod`, `hour`, `minute`, `second`, and `fractionalSecondDigits` are all undefined, then `year`, `month`, `day`, `hour`, `minute`, `second` will be set to `\"numeric\"`.\n\n    In implementations without `Intl.DateTimeFormat` support, this parameter is ignored.\n\nSee the [`Intl.DateTimeFormat()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) for details on these parameters and how to use them.\n\n### Return value\n\nA string representing the given date according to language-specific conventions.\n\nIn implementations with `Intl.DateTimeFormat`, this is equivalent to `new Intl.DateTimeFormat(locales, options).format(date)`.\n\n> **Note:** Most of the time, the formatting returned by `toLocaleString()` is consistent. However, the output may vary with time, language, and implementation — output variations are by design and allowed by the specification. You should not compare the results of `toLocaleString()` to static values.\n\n## Examples\n\n### Using toLocaleString()\n\nBasic use of this method without specifying a `locale` returns a formatted string in the default locale and with default options.\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));\n\n// toLocaleString() without arguments depends on the\n// implementation, the default locale, and the default time zone\nconsole.log(date.toLocaleString());\n// \"12/11/2012, 7:00:00 PM\" if run in en-US locale with time zone America/Los_Angeles\n```\n\n### Checking for support for locales and options parameters\n\nThe `locales` and `options` parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, `toLocaleString()` always uses the system's locale, which may not be what you want. Because any implementation that supports the `locales` and `options` parameters must support the {{jsxref(\"Intl\")}} API, you can check the existence of the latter for support:\n\n```js\nfunction toLocaleStringSupportsLocales() {\n  return (\n    typeof Intl === \"object\" &&\n    !!Intl &&\n    typeof Intl.DateTimeFormat === \"function\"\n  );\n}\n```\n\n### Using locales\n\nThis example shows some of the variations in localized date and time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// Formats below assume the local time zone of the locale;\n// America/Los_Angeles for the US\n\n// US English uses month-day-year order and 12-hour time with AM/PM\nconsole.log(date.toLocaleString(\"en-US\"));\n// \"12/19/2012, 7:00:00 PM\"\n\n// British English uses day-month-year order and 24-hour time without AM/PM\nconsole.log(date.toLocaleString(\"en-GB\"));\n// \"20/12/2012 03:00:00\"\n\n// Korean uses year-month-day order and 12-hour time with AM/PM\nconsole.log(date.toLocaleString(\"ko-KR\"));\n// \"2012. 12. 20. 오후 12:00:00\"\n\n// Arabic in most Arabic-speaking countries uses Eastern Arabic numerals\nconsole.log(date.toLocaleString(\"ar-EG\"));\n// \"٢٠‏/١٢‏/٢٠١٢ ٥:٠٠:٠٠ ص\"\n\n// For Japanese, applications may want to use the Japanese calendar,\n// where 2012 was the year 24 of the Heisei era\nconsole.log(date.toLocaleString(\"ja-JP-u-ca-japanese\"));\n// \"24/12/20 12:00:00\"\n\n// When requesting a language that may not be supported, such as\n// Balinese, include a fallback language (in this case, Indonesian)\nconsole.log(date.toLocaleString([\"ban\", \"id\"]));\n// \"20/12/2012 11.00.00\"\n```\n\n### Using options\n\nThe results provided by `toLocaleString()` can be customized using the `options` parameter:\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// Request a weekday along with a long date\nconst options = {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n};\nconsole.log(date.toLocaleString(\"de-DE\", options));\n// \"Donnerstag, 20. Dezember 2012\"\n\n// An application may want to use UTC and make that visible\noptions.timeZone = \"UTC\";\noptions.timeZoneName = \"short\";\nconsole.log(date.toLocaleString(\"en-US\", options));\n// \"Thursday, December 20, 2012, GMT\"\n\n// Sometimes even the US needs 24-hour time\nconsole.log(date.toLocaleString(\"en-US\", { hour12: false }));\n// \"12/19/2012, 19:00:00\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n- {{jsxref(\"Date.prototype.toLocaleDateString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleTimeString()\")}}\n- {{jsxref(\"Date.prototype.toString()\")}}\n"
    },
    "tolocaletimestring": {
      "index.md": "---\ntitle: Date.prototype.toLocaleTimeString()\nslug: Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.toLocaleTimeString\n---\n\n{{JSRef}}\n\nThe **`toLocaleTimeString()`** method of {{jsxref(\"Date\")}} instances returns a string with a language-sensitive representation of the time portion of this date in the local timezone. In implementations with [`Intl.DateTimeFormat` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) support, this method simply calls `Intl.DateTimeFormat`.\n\nEvery time `toLocaleTimeString` is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a {{jsxref(\"Intl.DateTimeFormat\")}} object and use its {{jsxref(\"Intl/DateTimeFormat/format\", \"format()\")}} method, because a `DateTimeFormat` object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.\n\n{{EmbedInteractiveExample(\"pages/js/date-tolocaletimestring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoLocaleTimeString()\ntoLocaleTimeString(locales)\ntoLocaleTimeString(locales, options)\n```\n\n### Parameters\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.DateTimeFormat` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat), these parameters correspond exactly to the [`Intl.DateTimeFormat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) constructor's parameters. Implementations without `Intl.DateTimeFormat` support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#locales) parameter of the `Intl.DateTimeFormat()` constructor.\n\n    In implementations without `Intl.DateTimeFormat` support, this parameter is ignored and the host's locale is usually used.\n\n- `options` {{optional_inline}}\n\n  - : An object adjusting the output format. Corresponds to the [`options`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options) parameter of the `Intl.DateTimeFormat()` constructor. If `dayPeriod`, `hour`, `minute`, `second`, and `fractionalSecondDigits` are all undefined, then `hour`, `minute`, `second` will be set to `\"numeric\"`.\n\n    In implementations without `Intl.DateTimeFormat` support, this parameter is ignored.\n\nSee the [`Intl.DateTimeFormat()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat) for details on these parameters and how to use them.\n\n### Return value\n\nA string representing the time portion of the given date according to language-specific conventions.\n\nIn implementations with `Intl.DateTimeFormat`, this is equivalent to `new Intl.DateTimeFormat(locales, options).format(date)`, where `options` has been normalized as described above.\n\n> **Note:** Most of the time, the formatting returned by `toLocaleTimeString()` is consistent. However, the output may vary with time, language, and implementation — output variations are by design and allowed by the specification. You should not compare the results of `toLocaleTimeString()` to static values.\n\n## Examples\n\n### Using toLocaleTimeString()\n\nBasic use of this method without specifying a `locale` returns a formatted string in the default locale and with default options.\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));\n\n// toLocaleTimeString() without arguments depends on the implementation,\n// the default locale, and the default time zone\nconsole.log(date.toLocaleTimeString());\n// \"7:00:00 PM\" if run in en-US locale with time zone America/Los_Angeles\n```\n\n### Checking for support for locales and options parameters\n\nThe `locales` and `options` parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, `toLocaleTimeString()` always uses the system's locale, which may not be what you want. Because any implementation that supports the `locales` and `options` parameters must support the {{jsxref(\"Intl\")}} API, you can check the existence of the latter for support:\n\n```js\nfunction toLocaleTimeStringSupportsLocales() {\n  return (\n    typeof Intl === \"object\" &&\n    !!Intl &&\n    typeof Intl.DateTimeFormat === \"function\"\n  );\n}\n```\n\n### Using locales\n\nThis example shows some of the variations in localized time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// formats below assume the local time zone of the locale;\n// America/Los_Angeles for the US\n\n// US English uses 12-hour time with AM/PM\nconsole.log(date.toLocaleTimeString(\"en-US\"));\n// \"7:00:00 PM\"\n\n// British English uses 24-hour time without AM/PM\nconsole.log(date.toLocaleTimeString(\"en-GB\"));\n// \"03:00:00\"\n\n// Korean uses 12-hour time with AM/PM\nconsole.log(date.toLocaleTimeString(\"ko-KR\"));\n// \"오후 12:00:00\"\n\n// Arabic in most Arabic speaking countries uses real Arabic digits\nconsole.log(date.toLocaleTimeString(\"ar-EG\"));\n// \"٧:٠٠:٠٠ م\"\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(date.toLocaleTimeString([\"ban\", \"id\"]));\n// \"11.00.00\"\n```\n\n### Using options\n\nThe results provided by `toLocaleTimeString()` can be customized using the `options` parameter:\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// An application may want to use UTC and make that visible\nconst options = { timeZone: \"UTC\", timeZoneName: \"short\" };\nconsole.log(date.toLocaleTimeString(\"en-US\", options));\n// \"3:00:00 AM GMT\"\n\n// Sometimes even the US needs 24-hour time\nconsole.log(date.toLocaleTimeString(\"en-US\", { hour12: false }));\n// \"19:00:00\"\n\n// Show only hours and minutes, use options with the default locale - use an empty array\nconsole.log(\n  date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" }),\n);\n// \"20:01\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n- {{jsxref(\"Date.prototype.toLocaleDateString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleString()\")}}\n- {{jsxref(\"Date.prototype.toTimeString()\")}}\n- {{jsxref(\"Date.prototype.toString()\")}}\n"
    },
    "tostring": {
      "index.md": "---\ntitle: Date.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/Date/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"Date\")}} instances returns a string representing this date interpreted in the local timezone.\n\n{{EmbedInteractiveExample(\"pages/js/date-tostring.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the given date (see description for the format). Returns `\"Invalid Date\"` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\nThe `toString()` method is part of the [type coercion protocol](/en-US/docs/Web/JavaScript/Data_structures#type_coercion). Because `Date` has a [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) method, that method always takes priority over `toString()` when a `Date` object is implicitly [coerced to a string](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). However, `Date.prototype[@@toPrimitive]()` still calls `this.toString()` internally.\n\nThe {{jsxref(\"Date\")}} object overrides the {{jsxref(\"Object/toString\", \"toString()\")}} method of {{jsxref(\"Object\")}}. `Date.prototype.toString()` returns a string representation of the Date as interpreted in the local timezone, containing both the date and the time — it joins the string representation specified in {{jsxref(\"Date/toDateString\", \"toDateString()\")}} and {{jsxref(\"Date/toTimeString\", \"toTimeString()\")}} together, adding a space in between. For example: \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\".\n\n`Date.prototype.toString()` must be called on {{jsxref(\"Date\")}} instances. If the `this` value does not inherit from `Date.prototype`, a {{jsxref(\"TypeError\")}} is thrown.\n\n- If you only want to get the _date_ part, use {{jsxref(\"Date/toDateString\", \"toDateString()\")}}.\n- If you only want to get the _time_ part, use {{jsxref(\"Date/toTimeString\", \"toTimeString()\")}}.\n- If you want to make the date interpreted as UTC instead of local timezone, use {{jsxref(\"Date/toUTCString\", \"toUTCString()\")}}.\n- If you want to format the date in a more user-friendly format (e.g. localization), use {{jsxref(\"Date/toLocaleString\", \"toLocaleString()\")}}.\n\n## Examples\n\n### Using toString()\n\n```js\nconst d = new Date(0);\nconsole.log(d.toString()); // \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.toString()\")}}\n- {{jsxref(\"Date.prototype.toDateString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleString()\")}}\n- {{jsxref(\"Date.prototype.toTimeString()\")}}\n"
    },
    "totimestring": {
      "index.md": "---\ntitle: Date.prototype.toTimeString()\nslug: Web/JavaScript/Reference/Global_Objects/Date/toTimeString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.toTimeString\n---\n\n{{JSRef}}\n\nThe **`toTimeString()`** method of {{jsxref(\"Date\")}} instances returns a string representing the time portion of this date interpreted in the local timezone.\n\n{{EmbedInteractiveExample(\"pages/js/date-totimestring.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ntoTimeString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the time portion of the given date (see description for the format). Returns `\"Invalid Date\"` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\n{{jsxref(\"Date\")}} instances refer to a specific point in time. `toTimeString()` interprets the date in the local timezone and formats the _time_ part in English. It always uses the format of `hh:mm:ss GMT±xxxx (TZ)`, where:\n\n| Format String | Description                                                                                           |\n| ------------- | ----------------------------------------------------------------------------------------------------- |\n| `hh`          | Hour, as two digits with leading zero if required                                                     |\n| `mm`          | Minute, as two digits with leading zero if required                                                   |\n| `ss`          | Seconds, as two digits with leading zero if required                                                  |\n| `±xxxx`       | The local timezone's offset — two digits for hours and two digits for minutes (e.g. `-0500`, `+0800`) |\n| `TZ`          | The timezone's name (e.g. `PDT`, `PST`)                                                               |\n\nFor example: \"04:42:04 GMT+0000 (Coordinated Universal Time)\".\n\n- If you only want to get the _date_ part, use {{jsxref(\"Date/toDateString\", \"toDateString()\")}}.\n- If you want to get both the date and time, use {{jsxref(\"Date/toString\", \"toString()\")}}.\n- If you want to make the date interpreted as UTC instead of local timezone, use {{jsxref(\"Date/toUTCString\", \"toUTCString()\")}}.\n- If you want to format the date in a more user-friendly format (e.g. localization), use {{jsxref(\"Date/toLocaleTimeString\", \"toLocaleTimeString()\")}}.\n\n## Examples\n\n### Using toTimeString()\n\n```js\nconst d = new Date(0);\n\nconsole.log(d.toString()); // \"Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)\"\nconsole.log(d.toTimeString()); // \"00:00:00 GMT+0000 (Coordinated Universal Time)\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.toLocaleTimeString()\")}}\n- {{jsxref(\"Date.prototype.toDateString()\")}}\n- {{jsxref(\"Date.prototype.toString()\")}}\n"
    },
    "toutcstring": {
      "index.md": "---\ntitle: Date.prototype.toUTCString()\nslug: Web/JavaScript/Reference/Global_Objects/Date/toUTCString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.toUTCString\n---\n\n{{JSRef}}\n\nThe **`toUTCString()`** method of {{jsxref(\"Date\")}} instances returns a string representing this date in the [RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.1.1) format, with negative years allowed. The timezone is always UTC. `toGMTString()` is an alias of this method.\n\n{{EmbedInteractiveExample(\"pages/js/date-toutcstring.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ntoUTCString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the given date using the UTC time zone (see description for the format). Returns `\"Invalid Date\"` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\nThe value returned by `toUTCString()` is a string in the form `Www, dd Mmm yyyy hh:mm:ss GMT`, where:\n\n| Format String | Description                                                  |\n| ------------- | ------------------------------------------------------------ |\n| `Www`         | Day of week, as three letters (e.g. `Sun`, `Mon`)            |\n| `dd`          | Day of month, as two digits with leading zero if required    |\n| `Mmm`         | Month, as three letters (e.g. `Jan`, `Feb`)                  |\n| `yyyy`        | Year, as four or more digits with leading zeroes if required |\n| `hh`          | Hour, as two digits with leading zero if required            |\n| `mm`          | Minute, as two digits with leading zero if required          |\n| `ss`          | Seconds, as two digits with leading zero if required         |\n\n### Aliasing\n\nJavaScript's `Date` API was inspired by Java's `java.util.Date` library (while the latter had become de facto legacy since Java 1.1 in 1997). In particular, the Java `Date` class had a method called `toGMTString` — which was poorly named, because the [Greenwich Mean Time](https://en.wikipedia.org/wiki/Greenwich_Mean_Time) is not equivalent to the [Coordinated Universal Time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time), while JavaScript dates always operate by UTC time. For web compatibility reasons, `toGMTString` remains as an alias to `toUTCString`, and they refer to the exact same function object. This means:\n\n```js\nDate.prototype.toGMTString.name === \"toUTCString\";\n```\n\n## Examples\n\n### Using toUTCString()\n\n```js\nconst d = new Date(0);\nconsole.log(d.toUTCString()); // 'Thu, 01 Jan 1970 00:00:00 GMT'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.toLocaleString()\")}}\n- {{jsxref(\"Date.prototype.toString()\")}}\n- {{jsxref(\"Date.prototype.toISOString()\")}}\n"
    },
    "utc": {
      "index.md": "---\ntitle: Date.UTC()\nslug: Web/JavaScript/Reference/Global_Objects/Date/UTC\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Date.UTC\n---\n\n{{JSRef}}\n\nThe **`Date.UTC()`** static method accepts parameters representing the date and time components similar to the {{jsxref(\"Date\")}} constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.\n\n{{EmbedInteractiveExample(\"pages/js/date-utc.html\")}}\n\n## Syntax\n\n```js-nolint\nDate.UTC(year)\nDate.UTC(year, monthIndex)\nDate.UTC(year, monthIndex, day)\nDate.UTC(year, monthIndex, day, hour)\nDate.UTC(year, monthIndex, day, hour, minute)\nDate.UTC(year, monthIndex, day, hour, minute, second)\nDate.UTC(year, monthIndex, day, hour, minute, second, millisecond)\n```\n\n### Parameters\n\n- `year`\n  - : Integer value representing the year. Values from `0` to `99` map to the years `1900` to `1999`. All other values are the actual year. See the [example](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years).\n- `monthIndex` {{optional_inline}}\n  - : Integer value representing the month, beginning with `0` for January to `11` for December. Defaults to `0`.\n- `day` {{optional_inline}}\n  - : Integer value representing the day of the month. Defaults to `1`.\n- `hours` {{optional_inline}}\n  - : Integer value between `0` and `23` representing the hour of the day. Defaults to `0`.\n- `minutes` {{optional_inline}}\n  - : Integer value representing the minute segment of a time. Defaults to `0`.\n- `seconds` {{optional_inline}}\n  - : Integer value representing the second segment of a time. Defaults to `0`.\n- `milliseconds` {{optional_inline}}\n  - : Integer value representing the millisecond segment of a time. Defaults to `0`.\n\n### Return value\n\nA number representing the [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date) of the given date. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\nYears between `0` and `99` are converted to a year in the 20th century `(1900 + year)`. For example, `95` is converted to the year `1995`.\n\nThe `UTC()` method differs from the {{jsxref(\"Date/Date\", \"Date()\")}} constructor in three ways:\n\n1. `Date.UTC()` uses universal time instead of the local time.\n2. `Date.UTC()` returns a time value as a number instead of creating a {{jsxref(\"Date\")}} object.\n3. When passed a single number, `Date.UTC()` interprets it as a year instead of a timestamp.\n\nIf a parameter is outside of the expected range, the `UTC()` method updates the other parameters to accommodate the value. For example, if `15` is used for `monthIndex`, the year will be incremented by 1 `(year + 1)` and `3` will be used for the month.\n\nBecause `UTC()` is a static method of `Date`, you always use it as `Date.UTC()`, rather than as a method of a `Date` object you created.\n\n## Examples\n\n### Using Date.UTC()\n\nThe following statement creates a {{jsxref(\"Date\")}} object with the arguments treated as UTC instead of local:\n\n```js\nconst utcDate = new Date(Date.UTC(2018, 11, 1, 0, 0, 0));\n```\n\n### Behavior of Date.UTC() with one argument\n\n`Date.UTC()` when passed one argument used to have inconsistent behavior, because implementations only kept the behavior consistent with the {{jsxref(\"Date/Date\", \"Date()\")}} constructor, which does not interpret a single argument as the year number. Implementations are now required to treat omitted `monthIndex` as `0`, instead of coercing it to `NaN`.\n\n```js\nDate.UTC(2017); // 1483228800000\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.parse()\")}}\n- {{jsxref(\"Date\")}}\n"
    },
    "valueof": {
      "index.md": "---\ntitle: Date.prototype.valueOf()\nslug: Web/JavaScript/Reference/Global_Objects/Date/valueOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Date.valueOf\n---\n\n{{JSRef}}\n\nThe **`valueOf()`** method of {{jsxref(\"Date\")}} instances returns the number of milliseconds for this date since the [epoch](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), which is defined as the midnight at the beginning of January 1, 1970, UTC.\n\n{{EmbedInteractiveExample(\"pages/js/date-valueof.html\")}}\n\n## Syntax\n\n```js-nolint\nvalueOf()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA number representing the [timestamp](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date), in milliseconds, of this date. Returns `NaN` if the date is [invalid](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#the_epoch_timestamps_and_invalid_date).\n\n## Description\n\nThe `valueOf()` method is part of the [type coercion protocol](/en-US/docs/Web/JavaScript/Data_structures#type_coercion). Because `Date` has a [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) method, that method always takes priority over `valueOf()` when a `Date` object is implicitly [coerced to a number](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion). However, `Date.prototype[@@toPrimitive]()` still calls `this.valueOf()` internally.\n\nThe {{jsxref(\"Date\")}} object overrides the {{jsxref(\"Object/valueOf\", \"valueOf()\")}} method of {{jsxref(\"Object\")}}. `Date.prototype.valueOf()` returns the timestamp of the date, which is functionally equivalent to the {{jsxref(\"Date.prototype.getTime()\")}} method.\n\n## Examples\n\n### Using valueOf()\n\n```js\nconst d = new Date(0); // 1970-01-01T00:00:00.000Z\nconsole.log(d.valueOf()); // 0\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.valueOf()\")}}\n- {{jsxref(\"Date.prototype.getTime()\")}}\n"
    }
  },
  "decodeuri": {
    "index.md": "---\ntitle: decodeURI()\nslug: Web/JavaScript/Reference/Global_Objects/decodeURI\npage-type: javascript-function\nbrowser-compat: javascript.builtins.decodeURI\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`decodeURI()`** function decodes a Uniform Resource Identifier (URI) previously created by {{jsxref(\"encodeURI()\")}} or a similar routine.\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-decodeuri.html\")}}\n\n## Syntax\n\n```js-nolint\ndecodeURI(encodedURI)\n```\n\n### Parameters\n\n- `encodedURI`\n  - : A complete, encoded Uniform Resource Identifier.\n\n### Return value\n\nA new string representing the unencoded version of the given encoded Uniform Resource Identifier (URI).\n\n### Exceptions\n\n- {{jsxref(\"URIError\")}}\n  - : Thrown if `encodedURI` contains a `%` not followed by two hexadecimal digits, or if the escape sequence does not encode a valid UTF-8 character.\n\n## Description\n\n`decodeURI()` is a function property of the global object.\n\nThe `decodeURI()` function decodes the URI by treating each escape sequence in the form `%XX` as one UTF-8 code unit (one byte). In UTF-8, the number of leading 1 bits in the first byte, which may be 0 (for 1-byte {{Glossary(\"ASCII\")}} characters), 2, 3, or 4, indicates the number of bytes in the character. So by reading the first escape sequence, `decodeURI()` can determine how many more escape sequences to consume. If `decodeURI()` fails to find the expected number of sequences, or if the escape sequences don't encode a valid UTF-8 character, a {{jsxref(\"URIError\")}} is thrown.\n\n`decodeURI()` decodes all escape sequences, but if the escape sequence encodes one of the following characters, the escape sequence is preserved in the output string (because they are part of the URI syntax):\n\n```plain\n; / ? : @ & = + $ , #\n```\n\n## Examples\n\n### Decoding a Cyrillic URL\n\n```js\ndecodeURI(\n  \"https://developer.mozilla.org/ru/docs/JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\",\n);\n// \"https://developer.mozilla.org/ru/docs/JavaScript_шеллы\"\n```\n\n### decodeURI() vs. decodeURIComponent()\n\n`decodeURI()` assumes the input is a full URI, so it does not decode characters that are part of the URI syntax.\n\n```js\ndecodeURI(\n  \"https://developer.mozilla.org/docs/JavaScript%3A%20a_scripting_language\",\n);\n// \"https://developer.mozilla.org/docs/JavaScript%3A a_scripting_language\"\n\ndecodeURIComponent(\n  \"https://developer.mozilla.org/docs/JavaScript%3A%20a_scripting_language\",\n);\n// \"https://developer.mozilla.org/docs/JavaScript: a_scripting_language\"\n```\n\n### Catching errors\n\n```js\ntry {\n  const a = decodeURI(\"%E0%A4%A\");\n} catch (e) {\n  console.error(e);\n}\n\n// URIError: malformed URI sequence\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"decodeURIComponent()\")}}\n- {{jsxref(\"encodeURI()\")}}\n- {{jsxref(\"encodeURIComponent()\")}}\n"
  },
  "decodeuricomponent": {
    "index.md": "---\ntitle: decodeURIComponent()\nslug: Web/JavaScript/Reference/Global_Objects/decodeURIComponent\npage-type: javascript-function\nbrowser-compat: javascript.builtins.decodeURIComponent\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`decodeURIComponent()`** function decodes a Uniform Resource Identifier (URI) component previously created by {{jsxref(\"encodeURIComponent()\")}} or by a similar routine.\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-decodeuricomponent.html\")}}\n\n## Syntax\n\n```js-nolint\ndecodeURIComponent(encodedURI)\n```\n\n### Parameters\n\n- `encodedURI`\n  - : An encoded component of a Uniform Resource Identifier.\n\n### Return value\n\nA new string representing the decoded version of the given encoded Uniform Resource Identifier (URI) component.\n\n### Exceptions\n\n- {{jsxref(\"URIError\")}}\n  - : Thrown if `encodedURI` contains a `%` not followed by two hexadecimal digits, or if the escape sequence does not encode a valid UTF-8 character.\n\n## Description\n\n`decodeURIComponent()` is a function property of the global object.\n\n`decodeURIComponent()` uses the same decoding algorithm as described in {{jsxref(\"decodeURI()\")}}. It decodes _all_ escape sequences, including those that are not created by {{jsxref(\"encodeURIComponent\")}}, like `-.!~*'()`.\n\n## Examples\n\n### Decoding a Cyrillic URL component\n\n```js\ndecodeURIComponent(\"JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\");\n// \"JavaScript_шеллы\"\n```\n\n### Catching errors\n\n```js\ntry {\n  const a = decodeURIComponent(\"%E0%A4%A\");\n} catch (e) {\n  console.error(e);\n}\n\n// URIError: malformed URI sequence\n```\n\n### Decoding query parameters from a URL\n\n`decodeURIComponent()` cannot be used directly to parse query parameters from a URL. It needs a bit of preparation.\n\n```js\nfunction decodeQueryParam(p) {\n  return decodeURIComponent(p.replace(/\\+/g, \" \"));\n}\n\ndecodeQueryParam(\"search+query%20%28correct%29\");\n// 'search query (correct)'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"decodeURI\")}}\n- {{jsxref(\"encodeURI\")}}\n- {{jsxref(\"encodeURIComponent\")}}\n"
  },
  "encodeuri": {
    "index.md": "---\ntitle: encodeURI()\nslug: Web/JavaScript/Reference/Global_Objects/encodeURI\npage-type: javascript-function\nbrowser-compat: javascript.builtins.encodeURI\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`encodeURI()`** function encodes a {{Glossary(\"URI\")}} by replacing each instance of certain characters by one, two, three, or four escape sequences representing the {{Glossary(\"UTF-8\")}} encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to {{jsxref(\"encodeURIComponent()\")}}, this function encodes fewer characters, preserving those that are part of the URI syntax.\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-encodeuri.html\")}}\n\n## Syntax\n\n```js-nolint\nencodeURI(uri)\n```\n\n### Parameters\n\n- `uri`\n  - : A string to be encoded as a URI.\n\n### Return value\n\nA new string representing the provided string encoded as a URI.\n\n### Exceptions\n\n- {{jsxref(\"URIError\")}}\n  - : Thrown if `uri` contains a [lone surrogate](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## Description\n\n`encodeURI()` is a function property of the global object.\n\nThe `encodeURI()` function escapes characters by UTF-8 code units, with each octet encoded in the format `%XX`, left-padded with 0 if necessary. Because lone surrogates in UTF-16 do not encode any valid Unicode character, they cause `encodeURI()` to throw a {{jsxref(\"URIError\")}}.\n\n`encodeURI()` escapes all characters **except**:\n\n```plain\nA–Z a–z 0–9 - _ . ! ~ * ' ( )\n\n; / ? : @ & = + $ , #\n```\n\nThe characters on the second line are characters that may be part of the URI syntax, and are only escaped by `encodeURIComponent()`. Both `encodeURI()` and `encodeURIComponent()` do not encode the characters `-.!~*'()`, known as \"unreserved marks\", which do not have a reserved purpose but are allowed in a URI \"as is\". (See [RFC2396](https://www.ietf.org/rfc/rfc2396.txt))\n\nThe `encodeURI()` function does not encode characters that have special meaning (reserved characters) for a URI. The following example shows all the parts that a URI can possibly contain. Note how certain characters are used to signify special meaning:\n\n```url\nhttp://username:password@www.example.com:80/path/to/file.php?foo=316&bar=this+has+spaces#anchor\n```\n\n`encodeURI`, as the name implies, is used to encode a URL as a whole, assuming it is already well-formed. If you want to dynamically assemble string values into a URL, you probably want to use {{jsxref(\"encodeURIComponent()\")}} on each dynamic segment instead, to avoid URL syntax characters in unwanted places.\n\n```js\nconst name = \"Ben & Jerry's\";\n\n// This is bad:\nconst link = encodeURI(`https://example.com/?choice=${name}`); // \"https://example.com/?choice=Ben%20&%20Jerry's\"\nconsole.log([...new URL(link).searchParams]); // [['choice', 'Ben '], [\" Jerry's\", '']\n\n// Instead:\nconst link = encodeURI(\n  `https://example.com/?choice=${encodeURIComponent(name)}`,\n);\n// \"https://example.com/?choice=Ben%2520%2526%2520Jerry's\"\nconsole.log([...new URL(link).searchParams]); // [['choice', \"Ben%20%26%20Jerry's\"]]\n```\n\n## Examples\n\n### encodeURI() vs. encodeURIComponent()\n\n`encodeURI()` differs from {{jsxref(\"encodeURIComponent()\")}} as follows:\n\n```js\nconst set1 = \";/?:@&=+$,#\"; // Reserved Characters\nconst set2 = \"-.!~*'()\"; // Unreserved Marks\nconst set3 = \"ABC abc 123\"; // Alphanumeric Characters + Space\n\nconsole.log(encodeURI(set1)); // ;/?:@&=+$,#\nconsole.log(encodeURI(set2)); // -.!~*'()\nconsole.log(encodeURI(set3)); // ABC%20abc%20123 (the space gets encoded as %20)\n\nconsole.log(encodeURIComponent(set1)); // %3B%2C%2F%3F%3A%40%26%3D%2B%24%23\nconsole.log(encodeURIComponent(set2)); // -.!~*'()\nconsole.log(encodeURIComponent(set3)); // ABC%20abc%20123 (the space gets encoded as %20)\n```\n\n### Encoding a lone surrogate throws\n\nA {{jsxref(\"URIError\")}} will be thrown if one attempts to encode a surrogate which is not part of a high-low pair. For example:\n\n```js\n// High-low pair OK\nencodeURI(\"\\uD800\\uDFFF\"); // \"%F0%90%8F%BF\"\n\n// Lone high-surrogate code unit throws \"URIError: malformed URI sequence\"\nencodeURI(\"\\uD800\");\n\n// Lone low-surrogate code unit throws \"URIError: malformed URI sequence\"\nencodeURI(\"\\uDFFF\");\n```\n\nYou can use {{jsxref(\"String.prototype.toWellFormed()\")}}, which replaces lone surrogates with the Unicode replacement character (U+FFFD), to avoid this error. You can also use {{jsxref(\"String.prototype.isWellFormed()\")}} to check if a string contains lone surrogates before passing it to `encodeURI()`.\n\n### Encoding for RFC3986\n\nThe more recent [RFC3986](https://datatracker.ietf.org/doc/html/rfc3986) makes square brackets reserved (for {{Glossary(\"IPv6\")}}) and thus not encoded when forming something which could be part of a URL (such as a host). It also reserves !, ', (, ), and \\*, even though these characters have no formalized URI delimiting uses. The following function encodes a string for RFC3986-compliant URL format.\n\n```js\nfunction encodeRFC3986URI(str) {\n  return encodeURI(str)\n    .replace(/%5B/g, \"[\")\n    .replace(/%5D/g, \"]\")\n    .replace(\n      /[!'()*]/g,\n      (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n    );\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"decodeURI()\")}}\n- {{jsxref(\"encodeURIComponent()\")}}\n- {{jsxref(\"decodeURIComponent()\")}}\n"
  },
  "encodeuricomponent": {
    "index.md": "---\ntitle: encodeURIComponent()\nslug: Web/JavaScript/Reference/Global_Objects/encodeURIComponent\npage-type: javascript-function\nbrowser-compat: javascript.builtins.encodeURIComponent\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`encodeURIComponent()`** function encodes a {{Glossary(\"URI\")}} by replacing each instance of certain characters by one, two, three, or four escape sequences representing the {{Glossary(\"UTF-8\")}} encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to {{jsxref(\"encodeURI()\")}}, this function encodes more characters, including those that are part of the URI syntax.\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-encodeuricomponent.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nencodeURIComponent(uriComponent)\n```\n\n### Parameters\n\n- `uriComponent`\n  - : A string to be encoded as a URI component (a path, query string, fragment, etc.). Other values are [converted to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion).\n\n### Return value\n\nA new string representing the provided `uriComponent` encoded as a URI component.\n\n### Exceptions\n\n- {{jsxref(\"URIError\")}}\n  - : Thrown if `uriComponent` contains a [lone surrogate](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## Description\n\n`encodeURIComponent()` is a function property of the global object.\n\n`encodeURIComponent()` uses the same encoding algorithm as described in {{jsxref(\"encodeURI()\")}}. It escapes all characters **except**:\n\n```plain\nA–Z a–z 0–9 - _ . ! ~ * ' ( )\n```\n\nCompared to {{jsxref(\"encodeURI()\")}}, `encodeURIComponent()` escapes a larger set of characters. Use `encodeURIComponent()` on user-entered fields from forms {{HTTPMethod(\"POST\")}}'d to the server — this will encode `&` symbols that may inadvertently be generated during data entry for special HTML entities or other characters that require encoding/decoding. For example, if a user writes `Jack & Jill`, without `encodeURIComponent()`, the ampersand could be interpreted on the server as the start of a new field and jeopardize the integrity of the data.\n\nFor [`application/x-www-form-urlencoded`](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#application/x-www-form-urlencoded-encoding-algorithm), spaces are to be replaced by `+`, so one may wish to follow a `encodeURIComponent()` replacement with an additional replacement of `%20` with `+`.\n\n## Examples\n\n### Encoding for Content-Disposition and Link headers\n\nThe following example provides the special encoding required within UTF-8 {{HTTPHeader(\"Content-Disposition\")}} and {{HTTPHeader(\"Link\")}} server response header parameters (e.g., UTF-8 filenames):\n\n```js\nconst fileName = \"my file(2).txt\";\nconst header = `Content-Disposition: attachment; filename*=UTF-8''${encodeRFC5987ValueChars(\n  fileName,\n)}`;\n\nconsole.log(header);\n// \"Content-Disposition: attachment; filename*=UTF-8''my%20file%282%29.txt\"\n\nfunction encodeRFC5987ValueChars(str) {\n  return (\n    encodeURIComponent(str)\n      // The following creates the sequences %27 %28 %29 %2A (Note that\n      // the valid encoding of \"*\" is %2A, which necessitates calling\n      // toUpperCase() to properly encode). Although RFC3986 reserves \"!\",\n      // RFC5987 does not, so we do not need to escape it.\n      .replace(\n        /['()*]/g,\n        (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n      )\n      // The following are not required for percent-encoding per RFC5987,\n      // so we can allow for a little better readability over the wire: |`^\n      .replace(/%(7C|60|5E)/g, (str, hex) =>\n        String.fromCharCode(parseInt(hex, 16)),\n      )\n  );\n}\n```\n\n### Encoding for RFC3986\n\nThe more recent [RFC3986](https://datatracker.ietf.org/doc/html/rfc3986) reserves !, ', (, ), and \\*, even though these characters have no formalized URI delimiting uses. The following function encodes a string for RFC3986-compliant URL component format. It also encodes [ and ], which are part of the {{Glossary(\"IPv6\")}} URI syntax. An RFC3986-compliant `encodeURI` implementation should not escape them, which is demonstrated in the [`encodeURI()` example](/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI#encoding_for_rfc3986).\n\n```js\nfunction encodeRFC3986URIComponent(str) {\n  return encodeURIComponent(str).replace(\n    /[!'()*]/g,\n    (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n  );\n}\n```\n\n### Encoding a lone surrogate throws\n\nA {{jsxref(\"URIError\")}} will be thrown if one attempts to encode a surrogate which is not part of a high-low pair. For example:\n\n```js\n// High-low pair OK\nencodeURIComponent(\"\\uD800\\uDFFF\"); // \"%F0%90%8F%BF\"\n\n// Lone high-surrogate code unit throws \"URIError: malformed URI sequence\"\nencodeURIComponent(\"\\uD800\");\n\n// Lone high-surrogate code unit throws \"URIError: malformed URI sequence\"\nencodeURIComponent(\"\\uDFFF\");\n```\n\nYou can use {{jsxref(\"String.prototype.toWellFormed()\")}}, which replaces lone surrogates with the Unicode replacement character (U+FFFD), to avoid this error. You can also use {{jsxref(\"String.prototype.isWellFormed()\")}} to check if a string contains lone surrogates before passing it to `encodeURIComponent()`.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"decodeURI()\")}}\n- {{jsxref(\"encodeURI()\")}}\n- {{jsxref(\"decodeURIComponent()\")}}\n"
  },
  "error": {
    "cause": {
      "index.md": "---\ntitle: \"Error: cause\"\nslug: Web/JavaScript/Reference/Global_Objects/Error/cause\npage-type: javascript-instance-data-property\nbrowser-compat: javascript.builtins.Error.cause\n---\n\n{{JSRef}}\n\nThe **`cause`** data property of an {{jsxref(\"Error\")}} instance indicates the specific original cause of the error.\n\nIt is used when catching and re-throwing an error with a more-specific or useful error message in order to still have access to the original error.\n\n## Value\n\nThe value that was passed to the [`Error()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error) constructor in the `options.cause` argument. It may not be present.\n\n{{js_property_attributes(1, 0, 1)}}\n\n## Description\n\nThe value of `cause` can be of any type. You should not make assumptions that the error you caught has an `Error` as its `cause`, in the same way that you cannot be sure the variable bound in the `catch` statement is an `Error` either. The \"Providing structured data as the error cause\" example below shows a case where a non-error is deliberately provided as the cause.\n\n## Examples\n\n### Rethrowing an error with a cause\n\nIt is sometimes useful to catch an error and re-throw it with a new message.\nIn this case you should pass the original error into the constructor for the new `Error`, as shown.\n\n```js\ntry {\n  connectToDatabase();\n} catch (err) {\n  throw new Error(\"Connecting to database failed.\", { cause: err });\n}\n```\n\nFor a more detailed example see [Error > Differentiate between similar errors](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#differentiate_between_similar_errors).\n\n### Providing structured data as the error cause\n\nError messages written for human consumption may be inappropriate for machine parsing — since they're subject to rewording or punctuation changes that may break any existing parsing written to consume them. So when throwing an error from a function, as an alternative to a human-readable error message, you can instead provide the cause as structured data, for machine parsing.\n\n```js\nfunction makeRSA(p, q) {\n  if (!Number.isInteger(p) || !Number.isInteger(q)) {\n    throw new Error(\"RSA key generation requires integer inputs.\", {\n      cause: { code: \"NonInteger\", values: [p, q] },\n    });\n  }\n  if (!areCoprime(p, q)) {\n    throw new Error(\"RSA key generation requires two co-prime integers.\", {\n      cause: { code: \"NonCoprime\", values: [p, q] },\n    });\n  }\n  // rsa algorithm…\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error.prototype.message\")}}\n- {{jsxref(\"Error.prototype.toString()\")}}\n"
    },
    "columnnumber": {
      "index.md": "---\ntitle: \"Error: columnNumber\"\nslug: Web/JavaScript/Reference/Global_Objects/Error/columnNumber\npage-type: javascript-instance-data-property\nstatus:\n  - non-standard\nbrowser-compat: javascript.builtins.Error.columnNumber\n---\n\n{{JSRef}} {{Non-standard_Header}}\n\nThe **`columnNumber`** data property of an {{jsxref(\"Error\")}} instance contains the column number in the line of the file that raised this error.\n\n## Value\n\nA positive integer.\n\n{{js_property_attributes(1, 0, 1)}}\n\n## Examples\n\n### Using columnNumber\n\n```js\ntry {\n  throw new Error(\"Could not parse input\");\n} catch (err) {\n  console.log(err.columnNumber); // 9\n}\n```\n\n## Specifications\n\nNot part of any standard.\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error.prototype.stack\")}}\n- {{jsxref(\"Error.prototype.lineNumber\")}}\n- {{jsxref(\"Error.prototype.fileName\")}}\n"
    },
    "error": {
      "index.md": "---\ntitle: Error() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Error/Error\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Error.Error\n---\n\n{{JSRef}}\n\nThe **`Error()`** constructor creates {{jsxref(\"Error\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew Error()\nnew Error(message)\nnew Error(message, options)\nnew Error(message, fileName)\nnew Error(message, fileName, lineNumber)\n\nError()\nError(message)\nError(message, options)\nError(message, fileName)\nError(message, fileName, lineNumber)\n```\n\n> **Note:** `Error()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Error` instance.\n\n### Parameters\n\n- `message` {{optional_inline}}\n  - : A human-readable description of the error.\n- `options` {{optional_inline}}\n  - : An object that has the following properties:\n    - `cause` {{optional_inline}}\n      - : A value indicating the specific cause of the error, reflected in the {{jsxref(\"Error/cause\", \"cause\")}} property. When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n- `fileName` {{optional_inline}} {{non-standard_inline}}\n  - : The path to the file that raised this error, reflected in the {{jsxref(\"Error/fileName\", \"fileName\")}} property. Defaults to the name of the file containing the code that called the `Error()` constructor.\n- `lineNumber` {{optional_inline}} {{non-standard_inline}}\n  - : The line number within the file on which the error was raised, reflected in the {{jsxref(\"Error/lineNumber\", \"lineNumber\")}} property. Defaults to the line number containing the `Error()` constructor invocation.\n\n## Examples\n\n### Function call or new construction\n\nWhen `Error` is used like a function, that is without {{jsxref(\"Operators/new\", \"new\")}}, it will return an `Error` object.\nTherefore, a mere call to `Error` will produce the same output that constructing an `Error` object via the `new` keyword would.\n\n```js\nconst x = Error(\"I was created using a function call!\");\n\n// above has the same functionality as following\nconst y = new Error('I was constructed via the \"new\" keyword!');\n```\n\n### Rethrowing an error with a cause\n\nIt is sometimes useful to catch an error and re-throw it with a new message.\nIn this case you should pass the original error into the constructor for the new `Error`, as shown.\n\n```js\ntry {\n  frameworkThatCanThrow();\n} catch (err) {\n  throw new Error(\"New error message\", { cause: err });\n}\n```\n\nFor a more detailed example see [Error > Differentiate between similar errors](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#differentiate_between_similar_errors).\n\n### Omitting options argument\n\nJavaScript only tries to read `options.cause` if `options` is an object — this avoids ambiguity with the other non-standard `Error(message, fileName, lineNumber)` signature, which requires the second parameter to be a string. If you omit `options`, pass a primitive value as `options`, or pass an object without the `cause` property, then the created `Error` object will have no `cause` property.\n\n```js\n// Omitting options\nconst error1 = new Error(\"Error message\");\nconsole.log(\"cause\" in error1); // false\n\n// Passing a primitive value\nconst error2 = new Error(\"Error message\", \"\");\nconsole.log(\"cause\" in error2); // false\n\n// Passing an object without a cause property\nconst error3 = new Error(\"Error message\", { details: \"http error\" });\nconsole.log(\"cause\" in error3); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Error` with `cause` support in `core-js`](https://github.com/zloirock/core-js#ecmascript-error)\n- {{jsxref(\"Statements/throw\", \"throw\")}}\n- {{jsxref(\"Statements/try...catch\", \"try...catch\")}}\n- [Error causes](https://v8.dev/features/error-cause) on v8.dev (2021)\n"
    },
    "filename": {
      "index.md": "---\ntitle: \"Error: fileName\"\nslug: Web/JavaScript/Reference/Global_Objects/Error/fileName\npage-type: javascript-instance-data-property\nstatus:\n  - non-standard\nbrowser-compat: javascript.builtins.Error.fileName\n---\n\n{{JSRef}} {{Non-standard_Header}}\n\nThe **`fileName`** data property of an {{jsxref(\"Error\")}} instance contains the path to the file that raised this error.\n\n## Value\n\nA string.\n\n{{js_property_attributes(1, 0, 1)}}\n\n## Description\n\nThis non-standard property contains the path to the file that raised this error. If called from a debugger context, the Firefox Developer Tools for example, \"debugger eval code\" is returned.\n\n## Examples\n\n### Using fileName\n\n```js\nconst e = new Error(\"Could not parse input\");\nthrow e;\n// e.fileName could look like \"file:///C:/example.html\"\n```\n\n## Specifications\n\nNot part of any standard.\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error.prototype.stack\")}}\n- {{jsxref(\"Error.prototype.columnNumber\")}}\n- {{jsxref(\"Error.prototype.lineNumber\")}}\n"
    },
    "index.md": "---\ntitle: Error\nslug: Web/JavaScript/Reference/Global_Objects/Error\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Error\n---\n\n{{JSRef}}\n\n**`Error`** objects are thrown when runtime errors occur. The `Error` object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.\n\n## Description\n\nRuntime errors result in new `Error` objects being created and thrown.\n\n`Error` is a {{Glossary(\"serializable object\")}}, so it can be cloned with {{domxref(\"structuredClone()\")}} or copied between [Workers](/en-US/docs/Web/API/Worker) using {{domxref(\"Worker/postMessage()\", \"postMessage()\")}}.\n\n### Error types\n\nBesides the generic `Error` constructor, there are other core error constructors in JavaScript. For client-side exceptions, see [Exception handling statements](/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#exception_handling_statements).\n\n- {{jsxref(\"EvalError\")}}\n  - : Creates an instance representing an error that occurs regarding the global function {{jsxref(\"Global_Objects/eval\", \"eval()\")}}.\n- {{jsxref(\"RangeError\")}}\n  - : Creates an instance representing an error that occurs when a numeric variable or parameter is outside its valid range.\n- {{jsxref(\"ReferenceError\")}}\n  - : Creates an instance representing an error that occurs when de-referencing an invalid reference.\n- {{jsxref(\"SyntaxError\")}}\n  - : Creates an instance representing a syntax error.\n- {{jsxref(\"TypeError\")}}\n  - : Creates an instance representing an error that occurs when a variable or parameter is not of a valid type.\n- {{jsxref(\"URIError\")}}\n  - : Creates an instance representing an error that occurs when {{jsxref(\"encodeURI()\")}} or {{jsxref(\"decodeURI()\")}} are passed invalid parameters.\n- {{jsxref(\"AggregateError\")}}\n  - : Creates an instance representing several errors wrapped in a single error when multiple errors need to be reported by an operation, for example by {{jsxref(\"Promise.any()\")}}.\n- {{jsxref(\"InternalError\")}} {{non-standard_inline}}\n  - : Creates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. E.g. \"too much recursion\".\n\n## Constructor\n\n- {{jsxref(\"Error/Error\", \"Error()\")}}\n  - : Creates a new `Error` object.\n\n## Static methods\n\n- `Error.captureStackTrace()` {{non-standard_inline}}\n  - : A non-standard V8 function that creates the {{jsxref(\"Error/stack\", \"stack\")}} property on an Error instance.\n- `Error.stackTraceLimit` {{non-standard_inline}}\n  - : A non-standard V8 numerical property that limits how many stack frames to include in an error stacktrace.\n- `Error.prepareStackTrace()` {{non-standard_inline}} {{optional_inline}}\n  - : A non-standard V8 function that, if provided by usercode, is called by the V8 JavaScript engine for thrown exceptions, allowing the user to provide custom formatting for stacktraces.\n\n## Instance properties\n\nThese properties are defined on `Error.prototype` and shared by all `Error` instances.\n\n- {{jsxref(\"Object/constructor\", \"Error.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Error` instances, the initial value is the {{jsxref(\"Error/Error\", \"Error\")}} constructor.\n- {{jsxref(\"Error.prototype.name\")}}\n  - : Represents the name for the type of error. For `Error.prototype.name`, the initial value is `\"Error\"`. Subclasses like {{jsxref(\"TypeError\")}} and {{jsxref(\"SyntaxError\")}} provide their own `name` properties.\n- {{jsxref(\"Error.prototype.stack\")}} {{non-standard_inline}}\n  - : A non-standard property for a stack trace.\n\nThese properties are own properties of each `Error` instance.\n\n- {{jsxref(\"Error/cause\", \"cause\")}}\n  - : Error cause indicating the reason why the current error is thrown — usually another caught error. For user-created `Error` objects, this is the value provided as the `cause` property of the constructor's second argument.\n- {{jsxref(\"Error/columnNumber\", \"columnNumber\")}} {{non-standard_inline}}\n  - : A non-standard Mozilla property for the column number in the line that raised this error.\n- {{jsxref(\"Error/fileName\", \"fileName\")}} {{non-standard_inline}}\n  - : A non-standard Mozilla property for the path to the file that raised this error.\n- {{jsxref(\"Error/lineNumber\", \"lineNumber\")}} {{non-standard_inline}}\n  - : A non-standard Mozilla property for the line number in the file that raised this error.\n- {{jsxref(\"Error/message\", \"message\")}}\n  - : Error message. For user-created `Error` objects, this is the string provided as the constructor's first argument.\n\n## Instance methods\n\n- {{jsxref(\"Error.prototype.toString()\")}}\n  - : Returns a string representing the specified object. Overrides the {{jsxref(\"Object.prototype.toString()\")}} method.\n\n## Examples\n\n### Throwing a generic error\n\nUsually you create an `Error` object with the intention of raising it using the {{jsxref(\"Statements/throw\", \"throw\")}} keyword.\nYou can handle the error using the {{jsxref(\"Statements/try...catch\", \"try...catch\")}} construct:\n\n```js\ntry {\n  throw new Error(\"Whoops!\");\n} catch (e) {\n  console.error(`${e.name}: ${e.message}`);\n}\n```\n\n### Handling a specific error type\n\nYou can choose to handle only specific error types by testing the error type with the {{jsxref(\"Operators/instanceof\", \"instanceof\")}} keyword:\n\n```js\ntry {\n  foo.bar();\n} catch (e) {\n  if (e instanceof EvalError) {\n    console.error(`${e.name}: ${e.message}`);\n  } else if (e instanceof RangeError) {\n    console.error(`${e.name}: ${e.message}`);\n  }\n  // etc.\n  else {\n    // If none of our cases matched leave the Error unhandled\n    throw e;\n  }\n}\n```\n\n### Differentiate between similar errors\n\nSometimes a block of code can fail for reasons that require different handling, but which throw very similar errors (i.e. with the same type and message).\n\nIf you don't have control over the original errors that are thrown, one option is to catch them and throw new `Error` objects that have more specific messages.\nThe original error should be passed to the new `Error` in the constructor's [`options`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error#options) parameter as its `cause` property. This ensures that the original error and stack trace are available to higher-level try/catch blocks.\n\nThe example below shows this for two methods that would otherwise fail with similar errors (`doFailSomeWay()` and `doFailAnotherWay()`):\n\n```js\nfunction doWork() {\n  try {\n    doFailSomeWay();\n  } catch (err) {\n    throw new Error(\"Failed in some way\", { cause: err });\n  }\n  try {\n    doFailAnotherWay();\n  } catch (err) {\n    throw new Error(\"Failed in another way\", { cause: err });\n  }\n}\n\ntry {\n  doWork();\n} catch (err) {\n  switch (err.message) {\n    case \"Failed in some way\":\n      handleFailSomeWay(err.cause);\n      break;\n    case \"Failed in another way\":\n      handleFailAnotherWay(err.cause);\n      break;\n  }\n}\n```\n\n> **Note:** If you are making a library, you should prefer to use error cause to discriminate between different errors emitted — rather than asking your consumers to parse the error message. See the [error cause page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause#providing_structured_data_as_the_error_cause) for an example.\n\n[Custom error types](#custom_error_types) can also use the `cause` property, provided the subclasses' constructor passes the `options` parameter when calling `super()`. The `Error()` base class constructor will read `options.cause` and define the `cause` property on the new error instance.\n\n```js\nclass MyError extends Error {\n  constructor(message, options) {\n    // Need to pass `options` as the second parameter to install the \"cause\" property.\n    super(message, options);\n  }\n}\n\nconsole.log(new MyError(\"test\", { cause: new Error(\"cause\") }).cause);\n// Error: cause\n```\n\n### Custom error types\n\nYou might want to define your own error types deriving from `Error` to be able to `throw new MyError()` and use `instanceof MyError` to check the kind of error in the exception handler. This results in cleaner and more consistent error handling code.\n\nSee [\"What's a good way to extend Error in JavaScript?\"](https://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript) on StackOverflow for an in-depth discussion.\n\n> **Warning:** Builtin subclassing cannot be reliably transpiled to pre-ES6 code, because there's no way to construct the base class with a particular `new.target` without {{jsxref(\"Reflect.construct()\")}}. You need [additional configuration](https://github.com/loganfsmyth/babel-plugin-transform-builtin-extend) or manually call {{jsxref(\"Object/setPrototypeOf\", \"Object.setPrototypeOf(this, CustomError.prototype)\")}} at the end of the constructor; otherwise, the constructed instance will not be a `CustomError` instance. See [the TypeScript FAQ](https://github.com/microsoft/TypeScript/wiki/FAQ#why-doesnt-extending-built-ins-like-error-array-and-map-work) for more information.\n\n> **Note:** Some browsers include the `CustomError` constructor in the stack trace when using ES2015 classes.\n\n```js\nclass CustomError extends Error {\n  constructor(foo = \"bar\", ...params) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CustomError);\n    }\n\n    this.name = \"CustomError\";\n    // Custom debugging information\n    this.foo = foo;\n    this.date = new Date();\n  }\n}\n\ntry {\n  throw new CustomError(\"baz\", \"bazMessage\");\n} catch (e) {\n  console.error(e.name); // CustomError\n  console.error(e.foo); // baz\n  console.error(e.message); // bazMessage\n  console.error(e.stack); // stacktrace\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Error` with `cause` support in `core-js`](https://github.com/zloirock/core-js#ecmascript-error)\n- {{jsxref(\"Statements/throw\", \"throw\")}}\n- {{jsxref(\"Statements/try...catch\", \"try...catch\")}}\n- [Stack trace API](https://v8.dev/docs/stack-trace-api) in the V8 docs\n",
    "linenumber": {
      "index.md": "---\ntitle: \"Error: lineNumber\"\nslug: Web/JavaScript/Reference/Global_Objects/Error/lineNumber\npage-type: javascript-instance-data-property\nstatus:\n  - non-standard\nbrowser-compat: javascript.builtins.Error.lineNumber\n---\n\n{{JSRef}} {{Non-standard_Header}}\n\nThe **`lineNumber`** data property of an {{jsxref(\"Error\")}} instance contains the line number in the file that raised this error.\n\n## Value\n\nA positive integer.\n\n{{js_property_attributes(1, 0, 1)}}\n\n## Examples\n\n### Using lineNumber\n\n```js\ntry {\n  throw new Error(\"Could not parse input\");\n} catch (err) {\n  console.log(err.lineNumber); // 2\n}\n```\n\n### Alternative example using error event\n\n```js\nwindow.addEventListener(\"error\", (e) => {\n  console.log(e.lineNumber); // 5\n});\nconst e = new Error(\"Could not parse input\");\nthrow e;\n```\n\nThis is not a standard feature and lacks widespread support. See the browser compatibility table below.\n\n## Specifications\n\nNot part of any standard.\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error.prototype.stack\")}}\n- {{jsxref(\"Error.prototype.columnNumber\")}}\n- {{jsxref(\"Error.prototype.fileName\")}}\n"
    },
    "message": {
      "index.md": "---\ntitle: \"Error: message\"\nslug: Web/JavaScript/Reference/Global_Objects/Error/message\npage-type: javascript-instance-data-property\nbrowser-compat: javascript.builtins.Error.message\n---\n\n{{JSRef}}\n\nThe **`message`** data property of an {{jsxref(\"Error\")}} instance is a human-readable description of the error.\n\n## Value\n\nA string corresponding to the value passed to the [`Error()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error) constructor as the first argument.\n\n{{js_property_attributes(1, 0, 1)}}\n\n## Description\n\nThis property contains a brief description of the error if one is available or has been set. The `message` property combined with the {{jsxref(\"Error/name\", \"name\")}} property is used by the {{jsxref(\"Error.prototype.toString()\")}} method to create a string representation of the Error.\n\nBy default, the `message` property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the {{jsxref(\"Error/Error\", \"Error\")}} constructor.\n\n## Examples\n\n### Throwing a custom error\n\n```js\nconst e = new Error(\"Could not parse input\");\n// e.message is 'Could not parse input'\nthrow e;\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error.prototype.name\")}}\n- {{jsxref(\"Error.prototype.toString()\")}}\n"
    },
    "name": {
      "index.md": "---\ntitle: Error.prototype.name\nslug: Web/JavaScript/Reference/Global_Objects/Error/name\npage-type: javascript-instance-data-property\nbrowser-compat: javascript.builtins.Error.name\n---\n\n{{JSRef}}\n\nThe **`name`** data property of `Error.prototype` is shared by all {{jsxref(\"Error\")}} instances. It represents the name for the type of error. For `Error.prototype.name`, the initial value is `\"Error\"`. Subclasses like {{jsxref(\"TypeError\")}} and {{jsxref(\"SyntaxError\")}} provide their own `name` properties.\n\n## Value\n\nA string. For `Error.prototype.name`, the initial value is `\"Error\"`.\n\n{{js_property_attributes(1, 0, 1)}}\n\n## Description\n\nBy default, {{jsxref(\"Error\")}} instances are given the name \"Error\". The `name` property, in addition to the {{jsxref(\"Error/message\", \"message\")}} property, is used by the {{jsxref(\"Error.prototype.toString()\")}} method to create a string representation of the error.\n\n## Examples\n\n### Throwing a custom error\n\n```js\nconst e = new Error(\"Malformed input\"); // e.name is 'Error'\n\ne.name = \"ParseError\";\nthrow e;\n// e.toString() would return 'ParseError: Malformed input'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error.prototype.message\")}}\n- {{jsxref(\"Error.prototype.toString()\")}}\n"
    },
    "stack": {
      "index.md": "---\ntitle: Error.prototype.stack\nslug: Web/JavaScript/Reference/Global_Objects/Error/stack\npage-type: javascript-instance-data-property\nstatus:\n  - non-standard\nbrowser-compat: javascript.builtins.Error.stack\n---\n\n{{JSRef}} {{Non-standard_Header}}\n\n> **Note:** The `stack` property is de facto implemented by all major JavaScript engines, and [the JavaScript standards committee is looking to standardize it](https://github.com/tc39/proposal-error-stacks). You cannot rely on the precise content of the stack string due to implementation inconsistencies, but you can generally assume it exists and use it for debugging purposes.\n\nThe non-standard **`stack`** property of an {{jsxref(\"Error\")}} instance offers a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call.\n\n## Value\n\nA string.\n\nBecause the `stack` property is non-standard, implementations differ about where it's installed.\n\n- In Firefox, it's an accessor property on `Error.prototype`.\n- In Chrome and Safari, it's a data property on each `Error` instance, with the descriptor:\n\n{{js_property_attributes(1, 0, 1)}}\n\n## Description\n\nEach JavaScript engine uses its own format for stack traces, but they are fairly consistent in their high-level structure. Every implementation uses a separate line in the stack to represent each function call. The call that directly caused the error is placed at the top, and the call that started the whole call chain is placed at the bottom. Below are some examples of stack traces:\n\n```js\nfunction foo() {\n  bar();\n}\n\nfunction bar() {\n  baz();\n}\n\nfunction baz() {\n  console.log(new Error().stack);\n}\n\nfoo();\n```\n\n```plain\n#### JavaScriptCore\nbaz@filename.js:10:24\nbar@filename.js:6:6\nfoo@filename.js:2:6\nglobal code@filename.js:13:4\n\n#### SpiderMonkey\nbaz@filename.js:10:15\nbar@filename.js:6:3\nfoo@filename.js:2:3\n@filename.js:13:1\n\n#### V8\nError\n    at baz (filename.js:10:15)\n    at bar (filename.js:6:3)\n    at foo (filename.js:2:3)\n    at filename.js:13:1\n```\n\nDifferent engines set this value at different times. Most modern engines set it when the {{jsxref(\"Error\")}} object is created. This means you can get the full call stack information within a function using the following:\n\n```js\nfunction foo() {\n  console.log(new Error().stack);\n}\n```\n\nWithout having to throw an error and then catch it.\n\nIn V8, the non-standard `Error.captureStackTrace()`, `Error.stackTraceLimit`, and `Error.prepareStackTrace()` APIs can be used to customize the stack trace. Read the [Stack trace API](https://v8.dev/docs/stack-trace-api) in the V8 docs for more information.\n\nStack frames can be things other than explicit function calls, too. For example, event listeners, timeout jobs, and promise handlers all begin their own call chain. Source code within {{jsxref(\"Global_Objects/eval\", \"eval()\")}} and {{jsxref(\"Function\")}} constructor calls also appear in the stack:\n\n```js\nconsole.log(new Function(\"return new Error('Function failed')\")().stack);\nconsole.log(\"====\");\nconsole.log(eval(\"new Error('eval failed')\").stack);\n```\n\n```plain\n#### JavaScriptCore\nanonymous@\nglobal code@filename.js:1:65\n====\neval code@\neval@[native code]\nglobal code@filename.js:3:17\n\n#### SpiderMonkey\nanonymous@filename.js line 1 > Function:1:8\n@filename.js:1:65\n\n====\n@filename.js line 3 > eval:1:1\n@filename.js:3:13\n\n#### V8\nError: Function failed\n    at eval (eval at <anonymous> (filename.js:1:13), <anonymous>:1:8)\n    at filename.js:1:65\n====\nError: eval failed\n    at eval (eval at <anonymous> (filename.js:3:13), <anonymous>:1:1)\n    at filename.js:3:13\n```\n\nIn Firefox, you can use the `//# sourceURL` directive to name an eval source. See the Firefox [Debug eval sources](https://firefox-source-docs.mozilla.org/devtools-user/debugger/how_to/debug_eval_sources/index.html) docs and the [Naming `eval` Scripts with the `//# sourceURL` Directive](https://fitzgeraldnick.com/2014/12/05/name-eval-scripts.html) blog post for more details.\n\n## Examples\n\n### Using the stack property\n\nThe following script demonstrates how to use the `stack` property to output a stack trace into your browser window. You can use this to check what your browser's stack structure looks like.\n\n```html hidden\n<div id=\"output\"></div>\n```\n\n```css hidden\n#output {\n  white-space: pre;\n  font-family: monospace;\n}\n```\n\n```js\nfunction trace() {\n  throw new Error(\"trace() failed\");\n}\nfunction b() {\n  trace();\n}\nfunction a() {\n  b(3, 4, \"\\n\\n\", undefined, {});\n}\ntry {\n  a(\"first call, firstarg\");\n} catch (e) {\n  document.getElementById(\"output\").textContent = e.stack;\n}\n```\n\n{{EmbedLiveSample(\"Using_the_stack_property\", \"700\", \"200\")}}\n\n## Specifications\n\nNot part of any standard.\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [TraceKit](https://github.com/csnover/TraceKit/) on GitHub\n- [stacktrace.js](https://github.com/stacktracejs/stacktrace.js) on GitHub\n- [Stack trace API](https://v8.dev/docs/stack-trace-api) in the V8 docs\n"
    },
    "tostring": {
      "index.md": "---\ntitle: Error.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/Error/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Error.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"Error\")}} instances returns a string representing this error.\n\n## Syntax\n\n```js-nolint\ntoString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the specified {{jsxref(\"Error\")}} object.\n\n## Description\n\nThe {{jsxref(\"Error\")}} object overrides the {{jsxref(\"Object.prototype.toString()\")}}\nmethod inherited by all objects. Its semantics are as follows:\n\n```js\nError.prototype.toString = function () {\n  if (\n    this === null ||\n    (typeof this !== \"object\" && typeof this !== \"function\")\n  ) {\n    throw new TypeError();\n  }\n  let name = this.name;\n  name = name === undefined ? \"Error\" : `${name}`;\n  let msg = this.message;\n  msg = msg === undefined ? \"\" : `${msg}`;\n  if (name === \"\") {\n    return msg;\n  }\n  if (msg === \"\") {\n    return name;\n  }\n  return `${name}: ${msg}`;\n};\n```\n\n## Examples\n\n### Using toString()\n\n```js\nconst e1 = new Error(\"fatal error\");\nconsole.log(e1.toString()); // \"Error: fatal error\"\n\nconst e2 = new Error(\"fatal error\");\ne2.name = undefined;\nconsole.log(e2.toString()); // \"Error: fatal error\"\n\nconst e3 = new Error(\"fatal error\");\ne3.name = \"\";\nconsole.log(e3.toString()); // \"fatal error\"\n\nconst e4 = new Error(\"fatal error\");\ne4.name = \"\";\ne4.message = undefined;\nconsole.log(e4.toString()); // \"\"\n\nconst e5 = new Error(\"fatal error\");\ne5.name = \"hello\";\ne5.message = undefined;\nconsole.log(e5.toString()); // \"hello\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Error.prototype.toString` with many bug fixes in `core-js`](https://github.com/zloirock/core-js#ecmascript-error)\n"
    }
  },
  "escape": {
    "index.md": "---\ntitle: escape()\nslug: Web/JavaScript/Reference/Global_Objects/escape\npage-type: javascript-function\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.escape\n---\n\n{{jsSidebar(\"Objects\")}}{{Deprecated_Header}}\n\n> **Note:** `escape()` is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use {{jsxref(\"encodeURIComponent()\")}} or {{jsxref(\"encodeURI()\")}} if possible.\n\nThe **`escape()`** function computes a new string in which certain characters have been replaced by hexadecimal escape sequences.\n\n## Syntax\n\n```js-nolint\nescape(str)\n```\n\n### Parameters\n\n- `str`\n  - : A string to be encoded.\n\n### Return value\n\nA new string in which certain characters have been escaped.\n\n## Description\n\n`escape()` is a function property of the global object.\n\nThe `escape()` function replaces all characters with escape sequences, with the exception of {{Glossary(\"ASCII\")}} word characters (A–Z, a–z, 0–9, \\_) and `@\\*_+-./`. Characters are escaped by UTF-16 code units. If the code unit's value is less than 256, it is represented by a two-digit hexadecimal number in the format `%XX`, left-padded with 0 if necessary. Otherwise, it is represented by a four-digit hexadecimal number in the format `%uXXXX`, left-padded with 0 if necessary.\n\n> **Note:** This function was used mostly for [URL encoding](https://en.wikipedia.org/wiki/URL_encoding) and is partly based on the escape format in {{rfc(1738)}}. The escape format is _not_ an [escape sequence](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#escape_sequences) in string literals. You can replace `%XX` with `\\xXX` and `%uXXXX` with `\\uXXXX` to get a string containing actual string-literal escape sequences.\n\n## Examples\n\n### Using escape()\n\n```js\nescape(\"abc123\"); // \"abc123\"\nescape(\"äöü\"); // \"%E4%F6%FC\"\nescape(\"ć\"); // \"%u0107\"\n\n// special characters\nescape(\"@*_+-./\"); // \"@*_+-./\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `escape` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"encodeURI\")}}\n- {{jsxref(\"encodeURIComponent\")}}\n- {{jsxref(\"unescape\")}}\n"
  },
  "eval": {
    "index.md": "---\ntitle: eval()\nslug: Web/JavaScript/Reference/Global_Objects/eval\npage-type: javascript-function\nbrowser-compat: javascript.builtins.eval\n---\n\n{{jsSidebar(\"Objects\")}}\n\n> **Warning:** Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. See [Never use eval()!](#never_use_eval!), below.\n\nThe **`eval()`** function evaluates JavaScript code represented as a string and returns its completion value. The source is parsed as a script.\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-eval.html\")}}\n\n## Syntax\n\n```js-nolint\neval(script)\n```\n\n### Parameters\n\n- `script`\n  - : A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects. It will be parsed as a script, so [`import`](/en-US/docs/Web/JavaScript/Reference/Statements/import) declarations (which can only exist in modules) are not allowed.\n\n### Return value\n\nThe completion value of evaluating the given code. If the completion value is empty, {{jsxref(\"undefined\")}} is returned. If `script` is not a string primitive, `eval()` returns the argument unchanged.\n\n### Exceptions\n\nThrows any exception that occurs during evaluation of the code, including {{jsxref(\"SyntaxError\")}} if `script` fails to be parsed as a script.\n\n## Description\n\n`eval()` is a function property of the global object.\n\nThe argument of the `eval()` function is a string. It will evaluate the source string as a script body, which means both statements and expressions are allowed. It returns the completion value of the code. For expressions, it's the value the expression evaluates to. Many statements and declarations have completion values as well, but the result may be surprising (for example, the completion value of an assignment is the assigned value, but the completion value of [`let`](/en-US/docs/Web/JavaScript/Reference/Statements/let) is undefined), so it's recommended to not rely on statements' completion values.\n\nIn strict mode, declaring a variable named `eval` or re-assigning `eval` is a {{jsxref(\"SyntaxError\")}}.\n\n```js-nolint example-bad\n\"use strict\";\n\nconst eval = 1; // SyntaxError: Unexpected eval or arguments in strict mode\n```\n\nIf the argument of `eval()` is not a string, `eval()` returns the argument unchanged. In the following example, passing a `String` object instead of a primitive causes `eval()` to return the `String` object rather than evaluating the string.\n\n```js\neval(new String(\"2 + 2\")); // returns a String object containing \"2 + 2\"\neval(\"2 + 2\"); // returns 4\n```\n\nTo work around the issue in a generic fashion, you can [coerce the argument to a string](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) yourself before passing it to `eval()`.\n\n```js\nconst expression = new String(\"2 + 2\");\neval(String(expression)); // returns 4\n```\n\n### Direct and indirect eval\n\nThere are two modes of `eval()` calls: _direct_ eval and _indirect_ eval. Direct eval, as the name implies, refers to _directly_ calling the global `eval` function with `eval(...)`. Everything else, including invoking it via an aliased variable, via a member access or other expression, or through the optional chaining [`?.`](/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) operator, is indirect.\n\n```js\n// Direct call\neval(\"x + y\");\n\n// Indirect call using the comma operator to return eval\n(0, eval)(\"x + y\");\n\n// Indirect call through optional chaining\neval?.(\"x + y\");\n\n// Indirect call using a variable to store and return eval\nconst geval = eval;\ngeval(\"x + y\");\n\n// Indirect call through member access\nconst obj = { eval };\nobj.eval(\"x + y\");\n```\n\nIndirect eval can be seen as if the code is evaluated within a separate `<script>` tag. This means:\n\n- Indirect eval works in the global scope rather than the local scope, and the code being evaluated doesn't have access to local variables within the scope where it's being called.\n\n  ```js\n  function test() {\n    const x = 2;\n    const y = 4;\n    // Direct call, uses local scope\n    console.log(eval(\"x + y\")); // Result is 6\n    console.log(eval?.(\"x + y\")); // Uses global scope, throws because x is undefined\n  }\n  ```\n\n- Indirect `eval` would not inherit the strictness of the surrounding context, and would only be in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode) if the source string itself has a `\"use strict\"` directive.\n\n  ```js\n  function strictContext() {\n    \"use strict\";\n    eval?.(`with (Math) console.log(PI);`);\n  }\n  function strictContextStrictEval() {\n    \"use strict\";\n    eval?.(`\"use strict\"; with (Math) console.log(PI);`);\n  }\n  strictContext(); // Logs 3.141592653589793\n  strictContextStrictEval(); // Throws a SyntaxError because the source string is in strict mode\n  ```\n\n  On the other hand, direct eval inherits the strictness of the invoking context.\n\n  ```js\n  function nonStrictContext() {\n    eval(`with (Math) console.log(PI);`);\n  }\n  function strictContext() {\n    \"use strict\";\n    eval(`with (Math) console.log(PI);`);\n  }\n  nonStrictContext(); // Logs 3.141592653589793\n  strictContext(); // Throws a SyntaxError because it's in strict mode\n  ```\n\n- `var`-declared variables and [function declarations](/en-US/docs/Web/JavaScript/Reference/Statements/function) would go into the surrounding scope if the source string is not interpreted in strict mode — for indirect eval, they become global variables. If it's a direct eval in a strict mode context, or if the `eval` source string itself is in strict mode, then `var` and function declarations do not \"leak\" into the surrounding scope.\n\n  ```js\n  // Neither context nor source string is strict,\n  // so var creates a variable in the surrounding scope\n  eval(\"var a = 1;\");\n  console.log(a); // 1\n  // Context is not strict, but eval source is strict,\n  // so b is scoped to the evaluated script\n  eval(\"'use strict'; var b = 1;\");\n  console.log(b); // ReferenceError: b is not defined\n\n  function strictContext() {\n    \"use strict\";\n    // Context is strict, but this is indirect and the source\n    // string is not strict, so c is still global\n    eval?.(\"var c = 1;\");\n    // Direct eval in a strict context, so d is scoped\n    eval(\"var d = 1;\");\n  }\n  strictContext();\n  console.log(c); // 1\n  console.log(d); // ReferenceError: d is not defined\n  ```\n\n  [`let`](/en-US/docs/Web/JavaScript/Reference/Statements/let) and [`const`](/en-US/docs/Web/JavaScript/Reference/Statements/const) declarations within the evaluated string are always scoped to that script.\n\n- Direct eval may have access to additional contextual expressions. For example, in a function's body, one can use [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target):\n\n  ```js\n  function Ctor() {\n    eval(\"console.log(new.target)\");\n  }\n  new Ctor(); // [Function: Ctor]\n  ```\n\n### Never use eval()!\n\nUsing direct `eval()` suffers from multiple problems:\n\n- `eval()` executes the code it's passed with the privileges of the caller. If you run `eval()` with a string that could be affected by a malicious party, you may end up running malicious code on the user's machine with the permissions of your webpage / extension. More importantly, allowing third-party code to access the scope in which `eval()` was invoked (if it's a direct eval) can lead to possible attacks that reads or changes local variables.\n- `eval()` is slower than the alternatives, since it has to invoke the JavaScript interpreter, while many other constructs are optimized by modern JS engines.\n- Modern JavaScript interpreters convert JavaScript to machine code. This means that any concept of variable naming gets obliterated. Thus, any use of `eval()` will force the browser to do long expensive variable name lookups to figure out where the variable exists in the machine code and set its value. Additionally, new things can be introduced to that variable through `eval()`, such as changing the type of that variable, forcing the browser to re-evaluate all of the generated machine code to compensate.\n- Minifiers give up on any minification if the scope is transitively depended on by `eval()`, because otherwise `eval()` cannot read the correct variable at runtime.\n\nThere are many cases where the use of `eval()` or related methods can be optimized or avoided altogether.\n\n#### Using indirect eval()\n\nConsider this code:\n\n```js\nfunction looseJsonParse(obj) {\n  return eval(`(${obj})`);\n}\nconsole.log(looseJsonParse(\"{ a: 4 - 1, b: function () {}, c: new Date() }\"));\n```\n\nSimply using indirect eval and forcing strict mode can make the code much better:\n\n```js\nfunction looseJsonParse(obj) {\n  return eval?.(`\"use strict\";(${obj})`);\n}\nconsole.log(looseJsonParse(\"{ a: 4 - 1, b: function () {}, c: new Date() }\"));\n```\n\nThe two code snippets above may seem to work the same way, but they do not; the first one using direct eval suffers from multiple problems.\n\n- It is a great deal slower, due to more scope inspections. Notice `c: new Date()` in the evaluated string. In the indirect eval version, the object is being evaluated in the global scope, so it is safe for the interpreter to assume that `Date` refers to the global `Date()` constructor instead of a local variable called `Date`. However, in the code using direct eval, the interpreter cannot assume this. For example, in the following code, `Date` in the evaluated string doesn't refer to `window.Date()`.\n\n  ```js\n  function looseJsonParse(obj) {\n    function Date() {}\n    return eval(`(${obj})`);\n  }\n  console.log(looseJsonParse(`{ a: 4 - 1, b: function () {}, c: new Date() }`));\n  ```\n\n  Thus, in the `eval()` version of the code, the browser is forced to make the expensive lookup call to check to see if there are any local variables called `Date()`.\n\n- If not using strict mode, `var` declarations within the `eval()` source becomes variables in the surrounding scope. This leads to hard-to-debug issues if the string is acquired from external input, especially if there's an existing variable with the same name.\n- Direct eval can read and mutate bindings in the surrounding scope, which may lead to external input corrupting local data.\n- When using direct `eval`, especially when the eval source cannot be proven to be in strict mode, the engine — and build tools — have to disable all optimizations related to inlining, because the `eval()` source can depend on any variable name in its surrounding scope.\n\nHowever, using indirect `eval()` does not allow passing extra bindings other than existing global variables for the evaluated source to read. If you need to specify additional variables that the evaluated source should have access to, consider using the `Function()` constructor.\n\n#### Using the Function() constructor\n\nThe [`Function()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) constructor is very similar to the indirect eval example above: it also evaluates the JavaScript source passed to it in the global scope without reading or mutating any local bindings, and therefore allows engines to do more optimizations than direct `eval()`.\n\nThe difference between `eval()` and `Function()` is that the source string passed to `Function()` is parsed as a function body, not as a script. There are a few nuances — for example, you can use `return` statements at the top level of a function body, but not in a script.\n\nThe `Function()` constructor is useful if you wish to create local bindings within your eval source, by passing the variables as parameter bindings.\n\n```js\nfunction Date(n) {\n  return [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n  ][n % 7 || 0];\n}\nfunction runCodeWithDateFunction(obj) {\n  return Function(\"Date\", `\"use strict\";return (${obj});`)(Date);\n}\nconsole.log(runCodeWithDateFunction(\"Date(5)\")); // Saturday\n```\n\nBoth `eval()` and `Function()` implicitly evaluate arbitrary code, and are forbidden in strict [CSP](/en-US/docs/Web/HTTP/CSP) settings. There are also additional safer (and faster!) alternatives to `eval()` or `Function()` for common use-cases.\n\n#### Using bracket accessors\n\nYou should not use `eval()` to access properties dynamically. Consider the following example where the property of the object to be accessed is not known until the code is executed. This can be done with `eval()`:\n\n```js\nconst obj = { a: 20, b: 30 };\nconst propName = getPropName(); // returns \"a\" or \"b\"\n\nconst result = eval(`obj.${propName}`);\n```\n\nHowever, `eval()` is not necessary here — in fact, it's more error-prone, because if `propName` is not a valid identifier, it leads to a syntax error. Moreover, if `getPropName` is not a function you control, this may lead to execution of arbitrary code. Instead, use the [property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors), which are much faster and safer:\n\n```js\nconst obj = { a: 20, b: 30 };\nconst propName = getPropName(); // returns \"a\" or \"b\"\nconst result = obj[propName]; // obj[\"a\"] is the same as obj.a\n```\n\nYou can even use this method to access descendant properties. Using `eval()`, this would look like:\n\n```js\nconst obj = { a: { b: { c: 0 } } };\nconst propPath = getPropPath(); // suppose it returns \"a.b.c\"\n\nconst result = eval(`obj.${propPath}`); // 0\n```\n\nAvoiding `eval()` here could be done by splitting the property path and looping through the different properties:\n\n```js\nfunction getDescendantProp(obj, desc) {\n  const arr = desc.split(\".\");\n  while (arr.length) {\n    obj = obj[arr.shift()];\n  }\n  return obj;\n}\n\nconst obj = { a: { b: { c: 0 } } };\nconst propPath = getPropPath(); // suppose it returns \"a.b.c\"\nconst result = getDescendantProp(obj, propPath); // 0\n```\n\nSetting a property that way works similarly:\n\n```js\nfunction setDescendantProp(obj, desc, value) {\n  const arr = desc.split(\".\");\n  while (arr.length > 1) {\n    obj = obj[arr.shift()];\n  }\n  return (obj[arr[0]] = value);\n}\n\nconst obj = { a: { b: { c: 0 } } };\nconst propPath = getPropPath(); // suppose it returns \"a.b.c\"\nconst result = setDescendantProp(obj, propPath, 1); // obj.a.b.c is now 1\n```\n\nHowever, beware that using bracket accessors with unconstrained input is not safe either — it may lead to [object injection attacks](https://github.com/nodesecurity/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md).\n\n#### Using callbacks\n\nJavaScript has [first-class functions](/en-US/docs/Glossary/First-class_Function), which means you can pass functions as arguments to other APIs, store them in variables and objects' properties, and so on. Many DOM APIs are designed with this in mind, so you can (and should) write:\n\n```js\n// Instead of setTimeout(\"…\", 1000) use:\nsetTimeout(() => {\n  // …\n}, 1000);\n\n// Instead of elt.setAttribute(\"onclick\", \"…\") use:\nelt.addEventListener(\"click\", () => {\n  // …\n});\n```\n\n[Closures](/en-US/docs/Web/JavaScript/Closures) are also helpful as a way to create parameterized functions without concatenating strings.\n\n#### Using JSON\n\nIf the string you're calling `eval()` on contains data (for example, an array: `\"[1, 2, 3]\"`), as opposed to code, you should consider switching to {{Glossary(\"JSON\")}}, which allows the string to use a subset of JavaScript syntax to represent data.\n\nNote that since JSON syntax is limited compared to JavaScript syntax, many valid JavaScript literals will not parse as JSON. For example, trailing commas are not allowed in JSON, and property names (keys) in object literals must be enclosed in quotes. Be sure to use a JSON serializer to generate strings that will be later parsed as JSON.\n\nPassing carefully constrained data instead of arbitrary code is a good idea in general. For example, an extension designed to scrape contents of web-pages could have the scraping rules defined in [XPath](/en-US/docs/Web/XPath) instead of JavaScript code.\n\n## Examples\n\n### Using eval()\n\nIn the following code, both of the statements containing `eval()` return 42.\nThe first evaluates the string `\"x + y + 1\"`; the second evaluates the string\n`\"42\"`.\n\n```js\nconst x = 2;\nconst y = 39;\nconst z = \"42\";\neval(\"x + y + 1\"); // 42\neval(z); // 42\n```\n\n### eval() returns the completion value of statements\n\n`eval()` returns the completion value of statements. For `if`, it would be the last expression or statement evaluated.\n\n```js\nconst str = \"if (a) { 1 + 1 } else { 1 + 2 }\";\nlet a = true;\nlet b = eval(str);\n\nconsole.log(`b is: ${b}`); // b is: 2\n\na = false;\nb = eval(str);\n\nconsole.log(`b is: ${b}`); // b is: 3\n```\n\nThe following example uses `eval()` to evaluate the string `str`. This string consists of JavaScript statements that assign `z` a value of 42 if `x` is five, and assign 0 to `z` otherwise. When the second statement is executed, `eval()` will cause these statements to be performed, and it will also evaluate the set of statements and return the value that is assigned to `z`, because the completion value of an assignment is the assigned value.\n\n```js\nconst x = 5;\nconst str = `if (x === 5) {\n  console.log(\"z is 42\");\n  z = 42;\n} else {\n  z = 0;\n}`;\n\nconsole.log(\"z is \", eval(str)); // z is 42  z is 42\n```\n\nIf you assign multiple values then the last value is returned.\n\n```js\nlet x = 5;\nconst str = `if (x === 5) {\n  console.log(\"z is 42\");\n  z = 42;\n  x = 420;\n} else {\n  z = 0;\n}`;\n\nconsole.log(\"x is\", eval(str)); // z is 42  x is 420\n```\n\n### eval() as a string defining function requires \"(\" and \")\" as prefix and suffix\n\n```js\n// This is a function declaration\nconst fctStr1 = \"function a() {}\";\n// This is a function expression\nconst fctStr2 = \"(function b() {})\";\nconst fct1 = eval(fctStr1); // return undefined, but `a` is available as a global function now\nconst fct2 = eval(fctStr2); // return the function `b`\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors)\n- [WebExtensions: Using eval in content scripts](/en-US/docs/Mozilla/Add-ons/WebExtensions/Content_scripts#using_eval_in_content_scripts)\n"
  },
  "evalerror": {
    "evalerror": {
      "index.md": "---\ntitle: EvalError() constructor\nslug: Web/JavaScript/Reference/Global_Objects/EvalError/EvalError\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.EvalError.EvalError\n---\n\n{{JSRef}}\n\nThe **`EvalError()`** constructor creates {{jsxref(\"EvalError\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew EvalError()\nnew EvalError(message)\nnew EvalError(message, options)\nnew EvalError(message, fileName)\nnew EvalError(message, fileName, lineNumber)\n\nEvalError()\nEvalError(message)\nEvalError(message, options)\nEvalError(message, fileName)\nEvalError(message, fileName, lineNumber)\n```\n\n> **Note:** `EvalError()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `EvalError` instance.\n\n### Parameters\n\n- `message` {{optional_inline}}\n  - : Human-readable description of the error.\n- `options` {{optional_inline}}\n  - : An object that has the following properties:\n    - `cause` {{optional_inline}}\n      - : A property indicating the specific cause of the error.\n        When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n- `fileName` {{optional_inline}} {{non-standard_inline}}\n  - : The name of the file containing the code that caused the exception\n- `lineNumber` {{optional_inline}} {{non-standard_inline}}\n  - : The line number of the code that caused the exception\n\n## Examples\n\n`EvalError` is not used in the current ECMAScript specification and will\nthus not be thrown by the runtime. However, the object itself remains for backwards\ncompatibility with earlier versions of the specification.\n\n### Creating an EvalError\n\n```js\ntry {\n  throw new EvalError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof EvalError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"EvalError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n- {{jsxref(\"Global_Objects/eval\", \"eval()\")}}\n"
    },
    "index.md": "---\ntitle: EvalError\nslug: Web/JavaScript/Reference/Global_Objects/EvalError\npage-type: javascript-class\nbrowser-compat: javascript.builtins.EvalError\n---\n\n{{JSRef}}\n\nThe **`EvalError`** object indicates an error regarding the global {{jsxref(\"Global_Objects/eval\", \"eval()\")}} function. This exception is not thrown by JavaScript anymore, however the `EvalError` object remains for compatibility.\n\n`EvalError` is a {{Glossary(\"serializable object\")}}, so it can be cloned with {{domxref(\"structuredClone()\")}} or copied between [Workers](/en-US/docs/Web/API/Worker) using {{domxref(\"Worker/postMessage()\", \"postMessage()\")}}.\n\n`EvalError` is a subclass of {{jsxref(\"Error\")}}.\n\n## Constructor\n\n- {{jsxref(\"EvalError/EvalError\", \"EvalError()\")}}\n  - : Creates a new `EvalError` object.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"Error\")}}_.\n\nThese properties are defined on `EvalError.prototype` and shared by all `EvalError` instances.\n\n- {{jsxref(\"Object/constructor\", \"EvalError.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `EvalError` instances, the initial value is the {{jsxref(\"EvalError/EvalError\", \"EvalError\")}} constructor.\n- {{jsxref(\"Error/name\", \"EvalError.prototype.name\")}}\n  - : Represents the name for the type of error. For `EvalError.prototype.name`, the initial value is `\"EvalError\"`.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"Error\")}}_.\n\n## Examples\n\n### Creating an EvalError\n\n```js\ntry {\n  throw new EvalError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof EvalError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"EvalError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n- {{jsxref(\"Global_Objects/eval\", \"eval()\")}}\n"
  },
  "finalizationregistry": {
    "finalizationregistry": {
      "index.md": "---\ntitle: FinalizationRegistry() constructor\nslug: Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/FinalizationRegistry\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.FinalizationRegistry.FinalizationRegistry\n---\n\n{{JSRef}}\n\nThe **`FinalizationRegistry()`** constructor creates {{jsxref(\"FinalizationRegistry\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew FinalizationRegistry(callbackFn)\n```\n\n> **Note:** `FinalizationRegistry()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `callback`\n  - : A function to be invoked each time a registered target value is garbage collected. Its return value is ignored. The function is called with the following arguments:\n    - `heldValue`\n      - : The value that was passed to the second parameter of the {{jsxref(\"FinalizationRegistry/register\", \"register()\")}} method when the `target` object was registered.\n\n## Examples\n\n### Creating a new registry\n\nYou create the registry passing in the callback:\n\n```js\nconst registry = new FinalizationRegistry((heldValue) => {\n  // …\n});\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"FinalizationRegistry\")}}\n"
    },
    "index.md": "---\ntitle: FinalizationRegistry\nslug: Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\npage-type: javascript-class\nbrowser-compat: javascript.builtins.FinalizationRegistry\n---\n\n{{JSRef}}\n\nA **`FinalizationRegistry`** object lets you request a callback when a value is garbage-collected.\n\n## Description\n\n`FinalizationRegistry` provides a way to request that a _cleanup callback_ get called at some point when a value registered with the registry has been _reclaimed_ (garbage-collected). (Cleanup callbacks are sometimes called _finalizers_.)\n\n> **Note:** Cleanup callbacks should not be used for essential program logic. See [Notes on cleanup callbacks](#notes_on_cleanup_callbacks) for details.\n\nYou create the registry passing in the callback:\n\n```js\nconst registry = new FinalizationRegistry((heldValue) => {\n  // …\n});\n```\n\nThen you register any value you want a cleanup callback for by calling the `register` method, passing in the value and a _held value_ for it:\n\n```js\nregistry.register(target, \"some value\");\n```\n\nThe registry does not keep a strong reference to the value, as that would defeat the purpose (if the registry held it strongly, the value would never be reclaimed). In JavaScript, objects and [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) are garbage collectable, so they can be registered in a `FinalizationRegistry` object as the target or the token.\n\nIf `target` is reclaimed, your cleanup callback may be called at some point with the _held value_ you provided for it (`\"some value\"` in the above). The held value can be any value you like: a primitive or an object, even `undefined`. If the held value is an object, the registry keeps a _strong_ reference to it (so it can pass it to your cleanup callback later).\n\nIf you might want to unregister a registered target value later, you pass a third value, which is the _unregistration token_ you'll use later when calling the registry's `unregister` function to unregister the value. The registry only keeps a weak reference to the unregister token.\n\nIt's common to use the target value itself as the unregister token, which is just fine:\n\n```js\nregistry.register(target, \"some value\", target);\n// …\n\n// some time later, if you don't care about `target` anymore, unregister it\nregistry.unregister(target);\n```\n\nIt doesn't have to be the same value, though; it can be a different one:\n\n```js\nregistry.register(target, \"some value\", token);\n// …\n\n// some time later\nregistry.unregister(token);\n```\n\n### Avoid where possible\n\nCorrect use of `FinalizationRegistry` takes careful thought, and it's best avoided if possible. It's also important to avoid relying on any specific behaviors not guaranteed by the specification. When, how, and whether garbage collection occurs is down to the implementation of any given JavaScript engine. Any behavior you observe in one engine may be different in another engine, in another version of the same engine, or even in a slightly different situation with the same version of the same engine. Garbage collection is a hard problem that JavaScript engine implementers are constantly refining and improving their solutions to.\n\nHere are some specific points included by the authors in the [proposal](https://github.com/tc39/proposal-weakrefs) that introduced `FinalizationRegistry`:\n\n> [Garbage collectors](<https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)>) are complicated. If an application or library depends on GC cleaning up a WeakRef or calling a finalizer \\[cleanup callback] in a timely, predictable manner, it's likely to be disappointed: the cleanup may happen much later than expected, or not at all. Sources of variability include:\n>\n> - One object might be garbage-collected much sooner than another object, even if they become unreachable at the same time, e.g., due to generational collection.\n> - Garbage collection work can be split up over time using incremental and concurrent techniques.\n> - Various runtime heuristics can be used to balance memory usage, responsiveness.\n> - The JavaScript engine may hold references to things which look like they are unreachable (e.g., in closures, or inline caches).\n> - Different JavaScript engines may do these things differently, or the same engine may change its algorithms across versions.\n> - Complex factors may lead to objects being held alive for unexpected amounts of time, such as use with certain APIs.\n\n### Notes on cleanup callbacks\n\n- Developers shouldn't rely on cleanup callbacks for essential program logic. Cleanup callbacks may be useful for reducing memory usage across the course of a program, but are unlikely to be useful otherwise.\n- If your code has just registered a value to the registry, that target will not be reclaimed until the end of the current JavaScript [job](https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#job). See [notes on WeakRefs](/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#notes_on_weakrefs) for details.\n- A conforming JavaScript implementation, even one that does garbage collection, is not required to call cleanup callbacks. When and whether it does so is entirely down to the implementation of the JavaScript engine. When a registered object is reclaimed, any cleanup callbacks for it may be called then, or some time later, or not at all.\n- It's likely that major implementations will call cleanup callbacks at some point during execution, but those calls may be substantially after the related object was reclaimed. Furthermore, if there is an object registered in two registries, there is no guarantee that the two callbacks are called next to each other — one may be called and the other never called, or the other may be called much later.\n- There are also situations where even implementations that normally call cleanup callbacks are unlikely to call them:\n  - When the JavaScript program shuts down entirely (for instance, closing a tab in a browser).\n  - When the `FinalizationRegistry` instance itself is no longer reachable by JavaScript code.\n- If the target of a `WeakRef` is also in a `FinalizationRegistry`, the `WeakRef`'s target is cleared at the same time or before any cleanup callback associated with the registry is called; if your cleanup callback calls `deref` on a `WeakRef` for the object, it will receive `undefined`.\n\n## Constructor\n\n- {{jsxref(\"FinalizationRegistry/FinalizationRegistry\", \"FinalizationRegistry()\")}}\n  - : Creates a new `FinalizationRegistry` object.\n\n## Instance properties\n\nThese properties are defined on `FinalizationRegistry.prototype` and shared by all `FinalizationRegistry` instances.\n\n- {{jsxref(\"Object/constructor\", \"FinalizationRegistry.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `FinalizationRegistry` instances, the initial value is the {{jsxref(\"FinalizationRegistry/FinalizationRegistry\", \"FinalizationRegistry\")}} constructor.\n- `FinalizationRegistry.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"FinalizationRegistry\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"FinalizationRegistry.prototype.register()\")}}\n  - : Registers an object with the registry in order to get a cleanup callback when/if the object is garbage-collected.\n- {{jsxref(\"FinalizationRegistry.prototype.unregister()\")}}\n  - : Unregisters an object from the registry.\n\n## Examples\n\n### Creating a new registry\n\nYou create the registry passing in the callback:\n\n```js\nconst registry = new FinalizationRegistry((heldValue) => {\n  // …\n});\n```\n\n### Registering objects for cleanup\n\nThen you register any objects you want a cleanup callback for by calling the `register` method, passing in the object and a _held value_ for it:\n\n```js\nregistry.register(theObject, \"some value\");\n```\n\n### Callbacks never called synchronously\n\nNo matter how much pressure you put on the garbage collector, the cleanup callback will never be called synchronously. The object may be reclaimed synchronously, but the callback will always be called sometime after the current job finishes:\n\n```js\nlet counter = 0;\nconst registry = new FinalizationRegistry(() => {\n  console.log(`Array gets garbage collected at ${counter}`);\n});\n\nregistry.register([\"foo\"]);\n\n(function allocateMemory() {\n  // Allocate 50000 functions — a lot of memory!\n  Array.from({ length: 50000 }, () => () => {});\n  if (counter > 5000) return;\n  counter++;\n  allocateMemory();\n})();\n\nconsole.log(\"Main job ends\");\n// Logs:\n// Main job ends\n// Array gets garbage collected at 5001\n```\n\nHowever, if you allow a little break between each allocation, the callback may be called sooner:\n\n```js\nlet arrayCollected = false;\nlet counter = 0;\nconst registry = new FinalizationRegistry(() => {\n  console.log(`Array gets garbage collected at ${counter}`);\n  arrayCollected = true;\n});\n\nregistry.register([\"foo\"]);\n\n(function allocateMemory() {\n  // Allocate 50000 functions — a lot of memory!\n  Array.from({ length: 50000 }, () => () => {});\n  if (counter > 5000 || arrayCollected) return;\n  counter++;\n  // Use setTimeout to make each allocateMemory a different job\n  setTimeout(allocateMemory);\n})();\n\nconsole.log(\"Main job ends\");\n```\n\nThere's no guarantee that the callback will be called sooner or if it will be called at all, but there's a possibility that the logged message has a counter value smaller than 5000.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"WeakRef\")}}\n- {{jsxref(\"WeakSet\")}}\n- {{jsxref(\"WeakMap\")}}\n",
    "register": {
      "index.md": "---\ntitle: FinalizationRegistry.prototype.register()\nslug: Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.FinalizationRegistry.register\n---\n\n{{JSRef}}\n\nThe **`register()`** method of {{jsxref(\"FinalizationRegistry\")}} instances registers an value with this `FinalizationRegistry` so that if the value is garbage-collected, the registry's callback may get called.\n\n## Syntax\n\n```js-nolint\nregister(target, heldValue)\nregister(target, heldValue, unregisterToken)\n```\n\n### Parameters\n\n- `target`\n  - : The target value to register.\n- `heldValue`\n  - : The value to pass to the finalizer for this `target`. This cannot be the `target` itself but can be anything else, including functions and primitives.\n- `unregisterToken` {{optional_inline}}\n  - : A token that may be used with the `unregister` method later to unregister the target value. If provided (and not `undefined`), this must be an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). If not provided, the target cannot be unregistered.\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown in one of the following cases:\n    - `target` is not an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) (object as opposed to primitives; functions are objects as well)\n    - `target` is the same as `heldvalue` (`target === heldValue`)\n    - `unregisterToken` is not an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry)\n\n## Description\n\nSee the [Avoid where possible](/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry#avoid_where_possible)\nand [Notes on cleanup callbacks](/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry#notes_on_cleanup_callbacks)\nsections of the {{jsxref(\"FinalizationRegistry\")}} page for important caveats.\n\n## Examples\n\n### Using register\n\nThe following registers the value referenced by `target`,\npassing in the held value `\"some value\"` and passing the target itself\nas the unregistration token:\n\n```js\nregistry.register(target, \"some value\", target);\n```\n\nThe following registers the value referenced by `target`,\npassing in another object as the held value, and not passing in any unregistration token\n(which means `target` can't be unregistered):\n\n```js\nregistry.register(target, { useful: \"info about target\" });\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"FinalizationRegistry\")}}\n"
    },
    "unregister": {
      "index.md": "---\ntitle: FinalizationRegistry.prototype.unregister()\nslug: Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/unregister\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.FinalizationRegistry.unregister\n---\n\n{{JSRef}}\n\nThe **`unregister()`** method of {{jsxref(\"FinalizationRegistry\")}} instances unregisters a target value from this `FinalizationRegistry`.\n\n## Syntax\n\n```js-nolint\nunregister(unregisterToken)\n```\n\n### Parameters\n\n- `unregisterToken`\n  - : The token used with the {{jsxref(\"FinalizationRegistry/register\", \"register()\")}} method when registering the target value. Multiple cells registered with the same `unregisterToken` will be unregistered together.\n\n### Return value\n\nA boolean value that is `true` if at least one cell was unregistered and `false` if no cell was unregistered.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `unregisterToken` is not an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## Description\n\nWhen a target value has been reclaimed, it is no longer registered in the registry.\nThere is no need to call `unregister` in your cleanup callback. Only call\n`unregister` if you haven't received a cleanup callback and no longer need\nto receive one.\n\n## Examples\n\n### Using unregister\n\nThis example shows registering a target object using that same object as the unregister\ntoken, then later unregistering it via `unregister`:\n\n```js\nclass Thingy {\n  static #cleanup = (label) => {\n    //               ^^^^^−−−−− held value\n    console.error(\n      `The \"release\" method was never called for the object with the label \"${label}\"`,\n    );\n  };\n  #registry = new FinalizationRegistry(Thingy.#cleanup);\n\n  /**\n   * Constructs a `Thingy` instance.\n   * Be sure to call `release` when you're done with it.\n   *\n   * @param label A label for the `Thingy`.\n   */\n  constructor(label) {\n    //                            vvvvv−−−−− held value\n    this.#registry.register(this, label, this);\n    //          target −−−−−^^^^         ^^^^−−−−− unregister token\n  }\n\n  /**\n   * Releases resources held by this `Thingy` instance.\n   */\n  release() {\n    this.#registry.unregister(this);\n    //                        ^^^^−−−−− unregister token\n  }\n}\n```\n\nThis example shows registering a target object using a different object as its\nunregister token:\n\n```js\nclass Thingy {\n  static #cleanup = (file) => {\n    //               ^^^^−−−−− held value\n    console.error(\n      `The \"release\" method was never called for the \"Thingy\" for the file \"${file.name}\"`,\n    );\n  };\n  #registry = new FinalizationRegistry(Thingy.#cleanup);\n  #file;\n\n  /**\n   * Constructs a `Thingy` instance for the given file.\n   * Be sure to call `release` when you're done with it.\n   *\n   * @param filename The name of the file.\n   */\n  constructor(filename) {\n    this.#file = File.open(filename);\n    //                            vvvvv−−−−− held value\n    this.#registry.register(this, label, this.#file);\n    //          target −−−−−^^^^         ^^^^^^^^^^−−−−− unregister token\n  }\n\n  /**\n   * Releases resources held by this `Thingy` instance.\n   */\n  release() {\n    if (this.#file) {\n      this.#registry.unregister(this.#file);\n      //                        ^^^^^^^^^^−−−−− unregister token\n      File.close(this.#file);\n      this.#file = null;\n    }\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"FinalizationRegistry\")}}\n"
    }
  },
  "float32array": {
    "float32array": {
      "index.md": "---\ntitle: Float32Array() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Float32Array/Float32Array\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Float32Array.Float32Array\n---\n\n{{JSRef}}\n\nThe **`Float32Array()`** constructor creates {{jsxref(\"Float32Array\")}} objects. The contents are initialized to `0`.\n\n## Syntax\n\n```js-nolint\nnew Float32Array()\nnew Float32Array(length)\nnew Float32Array(typedArray)\nnew Float32Array(object)\n\nnew Float32Array(buffer)\nnew Float32Array(buffer, byteOffset)\nnew Float32Array(buffer, byteOffset, length)\n```\n\n> **Note:** `Float32Array()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#parameters).\n\n### Exceptions\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#exceptions).\n\n## Examples\n\n### Different ways to create a Float32Array\n\n```js\n// From a length\nconst float32 = new Float32Array(2);\nfloat32[0] = 42;\nconsole.log(float32[0]); // 42\nconsole.log(float32.length); // 2\nconsole.log(float32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Float32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Float32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Float32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst float32FromIterable = new Float32Array(iterable);\nconsole.log(float32FromIterable);\n// Float32Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Float32Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
    },
    "index.md": "---\ntitle: Float32Array\nslug: Web/JavaScript/Reference/Global_Objects/Float32Array\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Float32Array\n---\n\n{{JSRef}}\n\nThe **`Float32Array`** typed array represents an array of 32-bit floating point numbers in the platform byte order. If control over byte order is needed, use {{jsxref(\"DataView\")}} instead. The contents are initialized to `0`. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Float32Array` is a subclass of the hidden {{jsxref(\"TypedArray\")}} class.\n\n## Constructor\n\n- {{jsxref(\"Float32Array/Float32Array\", \"Float32Array()\")}}\n  - : Creates a new `Float32Array` object.\n\n## Static properties\n\n_Also inherits static properties from its parent {{jsxref(\"TypedArray\")}}_.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Float32Array.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `4` in the case of `Float32Array`.\n\n## Static methods\n\n_Inherits static methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"TypedArray\")}}_.\n\nThese properties are defined on `Float32Array.prototype` and shared by all `Float32Array` instances.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Float32Array.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `4` in the case of a `Float32Array`.\n- {{jsxref(\"Object/constructor\", \"Float32Array.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Float32Array` instances, the initial value is the {{jsxref(\"Float32Array/Float32Array\", \"Float32Array\")}} constructor.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Examples\n\n### Different ways to create a Float32Array\n\n```js\n// From a length\nconst float32 = new Float32Array(2);\nfloat32[0] = 42;\nconsole.log(float32[0]); // 42\nconsole.log(float32.length); // 2\nconsole.log(float32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Float32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Float32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Float32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst float32FromIterable = new Float32Array(iterable);\nconsole.log(float32FromIterable);\n// Float32Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Float32Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
  },
  "float64array": {
    "float64array": {
      "index.md": "---\ntitle: Float64Array() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Float64Array/Float64Array\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Float64Array.Float64Array\n---\n\n{{JSRef}}\n\nThe **`Float64Array()`** constructor creates {{jsxref(\"Float64Array\")}} objects. The contents are initialized to `0`.\n\n## Syntax\n\n```js-nolint\nnew Float64Array()\nnew Float64Array(length)\nnew Float64Array(typedArray)\nnew Float64Array(object)\n\nnew Float64Array(buffer)\nnew Float64Array(buffer, byteOffset)\nnew Float64Array(buffer, byteOffset, length)\n```\n\n> **Note:** `Float64Array()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#parameters).\n\n### Exceptions\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#exceptions).\n\n## Examples\n\n### Different ways to create a Float64Array\n\n```js\n// From a length\nconst float64 = new Float64Array(2);\nfloat64[0] = 42;\nconsole.log(float64[0]); // 42\nconsole.log(float64.length); // 2\nconsole.log(float64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new Float64Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Float64Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new Float64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst float64FromIterable = new Float64Array(iterable);\nconsole.log(float64FromIterable);\n// Float64Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Float64Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
    },
    "index.md": "---\ntitle: Float64Array\nslug: Web/JavaScript/Reference/Global_Objects/Float64Array\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Float64Array\n---\n\n{{JSRef}}\n\nThe **`Float64Array`** typed array represents an array of 64-bit floating point numbers in the platform byte order. If control over byte order is needed, use {{jsxref(\"DataView\")}} instead. The contents are initialized to `0`. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Float64Array` is a subclass of the hidden {{jsxref(\"TypedArray\")}} class.\n\n## Constructor\n\n- {{jsxref(\"Float64Array/Float64Array\", \"Float64Array()\")}}\n  - : Creates a new `Float64Array` object.\n\n## Static properties\n\n_Also inherits static properties from its parent {{jsxref(\"TypedArray\")}}_.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Float64Array.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `8` in the case of `Float64Array`.\n\n## Static methods\n\n_Inherits static methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"TypedArray\")}}_.\n\nThese properties are defined on `Float64Array.prototype` and shared by all `Float64Array` instances.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Float64Array.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `8` in the case of a `Float64Array`.\n- {{jsxref(\"Object/constructor\", \"Float64Array.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Float64Array` instances, the initial value is the {{jsxref(\"Float64Array/Float64Array\", \"Float64Array\")}} constructor.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Examples\n\n### Different ways to create a Float64Array\n\n```js\n// From a length\nconst float64 = new Float64Array(2);\nfloat64[0] = 42;\nconsole.log(float64[0]); // 42\nconsole.log(float64.length); // 2\nconsole.log(float64.BYTES_PER_ELEMENT); // 8\n\n// From an array\nconst x = new Float64Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Float64Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(64);\nconst z = new Float64Array(buffer, 8, 4);\nconsole.log(z.byteOffset); // 8\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst float64FromIterable = new Float64Array(iterable);\nconsole.log(float64FromIterable);\n// Float64Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Float64Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
  },
  "function": {
    "@@hasinstance": {
      "index.md": "---\ntitle: Function.prototype[@@hasInstance]()\nslug: Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Function.@@hasInstance\n---\n\n{{JSRef}}\n\nThe **`[@@hasInstance]()`** method of {{jsxref(\"Function\")}} instances specifies the default procedure for determining if a constructor function recognizes an object as one of the constructor's instances. It is called by the [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator.\n\n## Syntax\n\n```js-nolint\nfunc[Symbol.hasInstance](value)\n```\n\n### Parameters\n\n- `value`\n  - : The object to test. Primitive values always return `false`.\n\n### Return value\n\n`true` if `func.prototype` is in the prototype chain of `value`; otherwise, `false`. Always returns `false` if `value` is not an object or `this` is not a function. If `this` is a [bound function](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind), returns the result of a `instanceof` test on `value` and the underlying target function.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `this` is not a bound function and `this.prototype` is not an object.\n\n## Description\n\nThe [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator calls the [`[@@hasInstance]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance) method of the right-hand side whenever such a method exists. Because all functions inherit from `Function.prototype` by default, they would all have the `[@@hasInstance]()` method, so most of the time, the `Function.prototype[@@hasInstance]` method specifies the behavior of `instanceof` when the right-hand side is a function. This method implements the default behavior of the `instanceof` operator (the same algorithm when `constructor` has no `@@hasInstance` method).\n\nUnlike most methods, the `Function.prototype[@@hasInstance]()` property is non-configurable and non-writable. This is a security feature to prevent the underlying target function of a bound function from being obtainable. See [this StackOverflow answer](https://stackoverflow.com/questions/38215027/trying-to-understand-the-official-es6-spec-regarding-symbol-hasinstance/38215392#38215392) for an example.\n\n## Examples\n\n### Reverting to default instanceof behavior\n\nYou would rarely need to call this method directly. Instead, this method is called by the `instanceof` operator. You should expect the two results to usually be equivalent.\n\n```js\nclass Foo {}\nconst foo = new Foo();\nconsole.log(foo instanceof Foo === Foo[Symbol.hasInstance](foo)); // true\n```\n\nYou may want to use this method if you want to invoke the default `instanceof` behavior, but you don't know if a constructor has a overridden `[@@hasInstance]()` method.\n\n```js\nclass Foo {\n  static [Symbol.hasInstance](value) {\n    // A custom implementation\n    return false;\n  }\n}\n\nconst foo = new Foo();\nconsole.log(foo instanceof Foo); // false\nconsole.log(Function.prototype[Symbol.hasInstance].call(Foo, foo)); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof)\n- {{jsxref(\"Symbol.hasInstance\")}}\n"
    },
    "apply": {
      "index.md": "---\ntitle: Function.prototype.apply()\nslug: Web/JavaScript/Reference/Global_Objects/Function/apply\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Function.apply\n---\n\n{{JSRef}}\n\nThe **`apply()`** method of {{jsxref(\"Function\")}} instances calls this function with a given `this` value, and `arguments` provided as an array (or an [array-like object](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects)).\n\n{{EmbedInteractiveExample(\"pages/js/function-apply.html\")}}\n\n## Syntax\n\n```js-nolint\napply(thisArg)\napply(thisArg, argsArray)\n```\n\n### Parameters\n\n- `thisArg`\n  - : The value of `this` provided for the call to `func`. If the function is not in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode), [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) will be replaced with the global object, and primitive values will be converted to objects.\n- `argsArray` {{optional_inline}}\n  - : An array-like object, specifying the arguments with which `func` should be called, or [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) or [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) if no arguments should be provided to the function.\n\n### Return value\n\nThe result of calling the function with the specified `this` value and arguments.\n\n## Description\n\n> **Note:** This function is almost identical to {{jsxref(\"Function/call\", \"call()\")}}, except that the function arguments are passed to `call()` individually as a list, while for `apply()` they are combined in one object, typically an array — for example, `func.call(this, \"eat\", \"bananas\")` vs. `func.apply(this, [\"eat\", \"bananas\"])`.\n\nNormally, when calling a function, the value of [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this) inside the function is the object that the function was accessed on. With `apply()`, you can assign an arbitrary value as `this` when calling an existing function, without first attaching the function to the object as a property. This allows you to use methods of one object as generic utility functions.\n\nYou can also use any kind of object which is array-like as the second parameter. In practice, this means that it needs to have a `length` property, and integer (\"index\") properties in the range `(0..length - 1)`. For example, you could use a {{domxref(\"NodeList\")}}, or a custom object like `{ 'length': 2, '0': 'eat', '1': 'bananas' }`. You can also use {{jsxref(\"Functions/arguments\", \"arguments\")}}, for example:\n\n```js\nfunction wrapper() {\n  return anotherFn.apply(null, arguments);\n}\n```\n\nWith the [rest parameters](/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) and parameter [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), this can be rewritten as:\n\n```js\nfunction wrapper(...args) {\n  return anotherFn(...args);\n}\n```\n\nIn general, `fn.apply(null, args)` is equivalent to `fn(...args)` with the parameter spread syntax, except `args` is expected to be an array-like object in the former case with `apply()`, and an [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) object in the latter case with spread syntax.\n\n> **Warning:** Do not use `apply()` to chain constructors (for example, to implement inheritance). This invokes the constructor function as a plain function, which means [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target) is `undefined`, and classes throw an error because they can't be called without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Use {{jsxref(\"Reflect.construct()\")}} or [`extends`](/en-US/docs/Web/JavaScript/Reference/Classes/extends) instead.\n\n## Examples\n\n### Using apply() to append an array to another\n\nYou can use {{jsxref(\"Array.prototype.push()\")}} to append an element to an array. Because `push()` accepts a variable number of arguments, you can also push multiple elements at once. But if you pass an array to `push()`, it will actually add that array as a single element, instead of adding the elements individually, ending up with an array inside an array. On the other hand, {{jsxref(\"Array.prototype.concat()\")}} does have the desired behavior in this case, but it does not append to the _existing_ array — it creates and returns a new array.\n\nIn this case, you can use `apply` to implicitly \"spread\" an array as a series of arguments.\n\n```js\nconst array = [\"a\", \"b\"];\nconst elements = [0, 1, 2];\narray.push.apply(array, elements);\nconsole.info(array); // [\"a\", \"b\", 0, 1, 2]\n```\n\nThe same effect can be achieved with the spread syntax.\n\n```js\nconst array = [\"a\", \"b\"];\nconst elements = [0, 1, 2];\narray.push(...elements);\nconsole.info(array); // [\"a\", \"b\", 0, 1, 2]\n```\n\n### Using apply() and built-in functions\n\nClever usage of `apply()` allows you to use built-in functions for some tasks that would probably otherwise require manually looping over a collection (or using the spread syntax).\n\nFor example, we can use {{jsxref(\"Math.max()\")}} and {{jsxref(\"Math.min()\")}} to find out the maximum and minimum value in an array.\n\n```js\n// min/max number in an array\nconst numbers = [5, 6, 2, 3, 7];\n\n// using Math.min/Math.max apply\nlet max = Math.max.apply(null, numbers);\n// This about equal to Math.max(numbers[0], …)\n// or Math.max(5, 6, …)\n\nlet min = Math.min.apply(null, numbers);\n\n// vs. simple loop based algorithm\nmax = -Infinity;\nmin = +Infinity;\n\nfor (let i = 0; i < numbers.length; i++) {\n  if (numbers[i] > max) {\n    max = numbers[i];\n  }\n  if (numbers[i] < min) {\n    min = numbers[i];\n  }\n}\n```\n\nBut beware: by using `apply()` (or the spread syntax) with an arbitrarily long arguments list, you run the risk of exceeding the JavaScript engine's argument length limit.\n\nThe consequences of calling a function with too many arguments (that is, more than tens of thousands of arguments) is unspecified and varies across engines. (The JavaScriptCore engine has a hard-coded [argument limit of 65536](https://webkit.org/b/80797).) Most engines throw an exception; but there's no normative specification preventing other behaviors, such as arbitrarily limiting the number of arguments actually passed to the applied function. To illustrate this latter case: if such an engine had a limit of four arguments (actual limits are of course significantly higher), it would be as if the arguments `5, 6, 2, 3` had been passed to `apply` in the examples above, rather than the full array.\n\nIf your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:\n\n```js\nfunction minOfArray(arr) {\n  let min = Infinity;\n  const QUANTUM = 32768;\n\n  for (let i = 0; i < arr.length; i += QUANTUM) {\n    const submin = Math.min.apply(\n      null,\n      arr.slice(i, Math.min(i + QUANTUM, arr.length)),\n    );\n    min = Math.min(submin, min);\n  }\n\n  return min;\n}\n\nconst min = minOfArray([5, 6, 2, 3, 7]);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Functions/arguments\", \"arguments\")}}\n- {{jsxref(\"Function.prototype.bind()\")}}\n- {{jsxref(\"Function.prototype.call()\")}}\n- {{jsxref(\"Reflect.apply()\")}}\n- [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n- [Spread syntax (`...`)](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)\n"
    },
    "arguments": {
      "index.md": "---\ntitle: Function.prototype.arguments\nslug: Web/JavaScript/Reference/Global_Objects/Function/arguments\npage-type: javascript-instance-accessor-property\nstatus:\n  - deprecated\n  - non-standard\nbrowser-compat: javascript.builtins.Function.arguments\n---\n\n{{JSRef}}{{Deprecated_Header}}{{Non-standard_Header}}\n\n> **Note:** The `arguments` property of {{jsxref(\"Function\")}} objects is deprecated. The recommended way to access the `arguments` object is to refer to the variable {{jsxref(\"Functions/arguments\", \"arguments\")}} available within functions.\n\nThe **`arguments`** accessor property of {{jsxref(\"Function\")}} instances returns the arguments passed to this function. For [strict](/en-US/docs/Web/JavaScript/Reference/Strict_mode), arrow, async, and generator functions, accessing the `arguments` property throws a {{jsxref(\"TypeError\")}}.\n\n## Description\n\nThe value of `arguments` is an array-like object corresponding to the arguments passed to a function.\n\nIn the case of recursion, i.e. if function `f` appears several times on the call stack, the value of `f.arguments` represents the arguments corresponding to the most recent invocation of the function.\n\nThe value of the `arguments` property is normally {{jsxref(\"Operators/null\", \"null\")}} if there is no outstanding invocation of the function in progress (that is, the function has been called but has not yet returned).\n\nNote that the only behavior specified by the ECMAScript specification is that `Function.prototype` has an initial `arguments` accessor that unconditionally throws a {{jsxref(\"TypeError\")}} for any `get` or `set` request (known as a \"poison pill accessor\"), and that implementations are not allowed to change this semantic for any function except non-strict plain functions. The actual behavior of the `arguments` property, if it's anything other than throwing an error, is implementation-defined. For example, Chrome defines it as an own data property, while Firefox and Safari extend the initial poison-pill `Function.prototype.arguments` accessor to specially handle `this` values that are non-strict functions.\n\n```js\n(function f() {\n  if (Object.hasOwn(f, \"arguments\")) {\n    console.log(\n      \"arguments is an own property with descriptor\",\n      Object.getOwnPropertyDescriptor(f, \"arguments\"),\n    );\n  } else {\n    console.log(\n      \"f doesn't have an own property named arguments. Trying to get f.[[Prototype]].arguments\",\n    );\n    console.log(\n      Object.getOwnPropertyDescriptor(\n        Object.getPrototypeOf(f),\n        \"arguments\",\n      ).get.call(f),\n    );\n  }\n})();\n\n// In Chrome:\n// arguments is an own property with descriptor {value: Arguments(0), writable: false, enumerable: false, configurable: false}\n\n// In Firefox:\n// f doesn't have an own property named arguments. Trying to get f.[[Prototype]].arguments\n// Arguments { … }\n```\n\n## Examples\n\n### Using the arguments property\n\n```js\nfunction f(n) {\n  g(n - 1);\n}\n\nfunction g(n) {\n  console.log(`before: ${g.arguments[0]}`);\n  if (n > 0) {\n    f(n);\n  }\n  console.log(`after: ${g.arguments[0]}`);\n}\n\nf(2);\n\nconsole.log(`returned: ${g.arguments}`);\n\n// Logs:\n// before: 1\n// before: 0\n// after: 0\n// after: 1\n// returned: null\n```\n\n## Specifications\n\nNot part of any standard.\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Functions/arguments\", \"arguments\")}}\n- [Functions](/en-US/docs/Web/JavaScript/Reference/Functions)\n"
    },
    "bind": {
      "index.md": "---\ntitle: Function.prototype.bind()\nslug: Web/JavaScript/Reference/Global_Objects/Function/bind\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Function.bind\n---\n\n{{JSRef}}\n\nThe **`bind()`** method of {{jsxref(\"Function\")}} instances creates a new function that, when called, calls this function with its `this` keyword set to the provided value, and a given sequence of arguments preceding any provided when the new function is called.\n\n{{EmbedInteractiveExample(\"pages/js/function-bind.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nbind(thisArg)\nbind(thisArg, arg1)\nbind(thisArg, arg1, arg2)\nbind(thisArg, arg1, arg2, /* …, */ argN)\n```\n\n### Parameters\n\n- `thisArg`\n  - : The value to be passed as the `this` parameter to the target function `func` when the bound function is called. If the function is not in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode), [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) will be replaced with the global object, and primitive values will be converted to objects. The value is ignored if the bound function is constructed using the {{jsxref(\"Operators/new\", \"new\")}} operator.\n- `arg1`, …, `argN` {{optional_inline}}\n  - : Arguments to prepend to arguments provided to the bound function when invoking `func`.\n\n### Return value\n\nA copy of the given function with the specified `this` value, and initial arguments (if provided).\n\n## Description\n\nThe `bind()` function creates a new _bound function_. Calling the bound function generally results in the execution of the function it wraps, which is also called the _target function_. The bound function will store the parameters passed — which include the value of `this` and the first few arguments — as its internal state. These values are stored in advance, instead of being passed at call time. You can generally see `const boundFn = fn.bind(thisArg, arg1, arg2)` as being equivalent to `const boundFn = (...restArgs) => fn.call(thisArg, arg1, arg2, ...restArgs)` for the effect when it's called (but not when `boundFn` is constructed).\n\nA bound function can be further bound by calling `boundFn.bind(thisArg, /* more args */)`, which creates another bound function `boundFn2`. The newly bound `thisArg` value is ignored, because the target function of `boundFn2`, which is `boundFn`, already has a bound `this`. When `boundFn2` is called, it would call `boundFn`, which in turn calls `fn`. The arguments that `fn` ultimately receives are, in order: the arguments bound by `boundFn`, arguments bound by `boundFn2`, and the arguments received by `boundFn2`.\n\n```js\n\"use strict\"; // prevent `this` from being boxed into the wrapper object\n\nfunction log(...args) {\n  console.log(this, ...args);\n}\nconst boundLog = log.bind(\"this value\", 1, 2);\nconst boundLog2 = boundLog.bind(\"new this value\", 3, 4);\nboundLog2(5, 6); // \"this value\", 1, 2, 3, 4, 5, 6\n```\n\nA bound function may also be constructed using the {{jsxref(\"Operators/new\", \"new\")}} operator if its target function is constructable. Doing so acts as though the target function had instead been constructed. The prepended arguments are provided to the target function as usual, while the provided `this` value is ignored (because construction prepares its own `this`, as seen by the parameters of {{jsxref(\"Reflect.construct\")}}). If the bound function is directly constructed, [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target) will be the target function instead. (That is, the bound function is transparent to `new.target`.)\n\n```js\nclass Base {\n  constructor(...args) {\n    console.log(new.target === Base);\n    console.log(args);\n  }\n}\n\nconst BoundBase = Base.bind(null, 1, 2);\n\nnew BoundBase(3, 4); // true, [1, 2, 3, 4]\n```\n\nHowever, because a bound function does not have the [`prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property, it cannot be used as a base class for [`extends`](/en-US/docs/Web/JavaScript/Reference/Classes/extends).\n\n```js example-bad\nclass Derived extends class {}.bind(null) {}\n// TypeError: Class extends value does not have valid prototype property undefined\n```\n\nWhen using a bound function as the right-hand side of [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), `instanceof` would reach for the target function (which is stored internally in the bound function) and read its `prototype` instead.\n\n```js\nclass Base {}\nconst BoundBase = Base.bind(null, 1, 2);\nconsole.log(new Base() instanceof BoundBase); // true\n```\n\nThe bound function has the following properties:\n\n- [`length`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length)\n  - : The `length` of the target function minus the number of arguments being bound (not counting the `thisArg` parameter), with 0 being the minimum value.\n- [`name`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name)\n  - : The `name` of the target function plus a `\"bound \"` prefix.\n\nThe bound function also inherits the [prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) of the target function. However, it doesn't have other own properties of the target function (such as [static properties](/en-US/docs/Web/JavaScript/Reference/Classes/static) if the target function is a class).\n\n## Examples\n\n### Creating a bound function\n\nThe simplest use of `bind()` is to make a function that, no matter how it is called, is called with a particular `this` value.\n\nA common mistake for new JavaScript programmers is to extract a method from an object, then to later call that function and expect it to use the original object as its `this` (e.g., by using the method in callback-based code).\n\nWithout special care, however, the original object is usually lost. Creating a bound function from the function, using the original object, neatly solves this problem:\n\n```js\n// Top-level 'this' is bound to 'globalThis' in scripts.\nthis.x = 9;\nconst module = {\n  x: 81,\n  getX() {\n    return this.x;\n  },\n};\n\n// The 'this' parameter of 'getX' is bound to 'module'.\nconsole.log(module.getX()); // 81\n\nconst retrieveX = module.getX;\n// The 'this' parameter of 'retrieveX' is bound to 'globalThis' in non-strict mode.\nconsole.log(retrieveX()); // 9\n\n// Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\nconst boundGetX = retrieveX.bind(module);\nconsole.log(boundGetX()); // 81\n```\n\n> **Note:** If you run this example in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode), the `this` parameter of `retrieveX` will be bound to `undefined` instead of `globalThis`, causing the `retrieveX()` call to fail.\n>\n> If you run this example in an ECMAScript module, top-level `this` will be bound to `undefined` instead of `globalThis`, causing the `this.x = 9` assignment to fail.\n>\n> If you run this example in a Node CommonJS module, top-level `this` will be bound to `module.exports` instead of `globalThis`. However, the `this` parameter of `retrieveX` will still be bound to `globalThis` in non-strict mode and to `undefined` in strict mode. Therefore, in non-strict mode (the default), the `retrieveX()` call will return `undefined` because `this.x = 9` is writing to a different object (`module.exports`) from what `getX` is reading from (`globalThis`).\n\nIn fact, some built-in \"methods\" are also getters that return bound functions — one notable example being [`Intl.NumberFormat.prototype.format()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format#using_format_with_map), which, when accessed, returns a bound function that you can directly pass as a callback.\n\n### Partially applied functions\n\nThe next simplest use of `bind()` is to make a function with pre-specified initial arguments.\n\nThese arguments (if any) follow the provided `this` value and are then inserted at the start of the arguments passed to the target function, followed by whatever arguments are passed to the bound function at the time it is called.\n\n```js\nfunction list(...args) {\n  return args;\n}\n\nfunction addArguments(arg1, arg2) {\n  return arg1 + arg2;\n}\n\nconsole.log(list(1, 2, 3)); // [1, 2, 3]\n\nconsole.log(addArguments(1, 2)); // 3\n\n// Create a function with a preset leading argument\nconst leadingThirtySevenList = list.bind(null, 37);\n\n// Create a function with a preset first argument.\nconst addThirtySeven = addArguments.bind(null, 37);\n\nconsole.log(leadingThirtySevenList()); // [37]\nconsole.log(leadingThirtySevenList(1, 2, 3)); // [37, 1, 2, 3]\nconsole.log(addThirtySeven(5)); // 42\nconsole.log(addThirtySeven(5, 10)); // 42\n// (the last argument 10 is ignored)\n```\n\n### With setTimeout()\n\nBy default, within {{domxref(\"setTimeout()\")}}, the `this` keyword will be set to [`globalThis`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis), which is {{domxref(\"window\")}} in browsers. When working with class methods that require `this` to refer to class instances, you may explicitly bind `this` to the callback function, in order to maintain the instance.\n\n```js\nclass LateBloomer {\n  constructor() {\n    this.petalCount = Math.floor(Math.random() * 12) + 1;\n  }\n  bloom() {\n    // Declare bloom after a delay of 1 second\n    setTimeout(this.declare.bind(this), 1000);\n  }\n  declare() {\n    console.log(`I am a beautiful flower with ${this.petalCount} petals!`);\n  }\n}\n\nconst flower = new LateBloomer();\nflower.bloom();\n// After 1 second, calls 'flower.declare()'\n```\n\nYou can also use [arrow functions](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) for this purpose.\n\n```js\nclass LateBloomer {\n  bloom() {\n    // Declare bloom after a delay of 1 second\n    setTimeout(() => this.declare(), 1000);\n  }\n}\n```\n\n### Bound functions used as constructors\n\nBound functions are automatically suitable for use with the {{jsxref(\"Operators/new\", \"new\")}} operator to construct new instances created by the target function. When a bound function is used to construct a value, the provided `this` is ignored. However, provided arguments are still prepended to the constructor call.\n\n```js\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return `${this.x},${this.y}`;\n};\n\nconst p = new Point(1, 2);\np.toString();\n// '1,2'\n\n// The thisArg's value doesn't matter because it's ignored\nconst YAxisPoint = Point.bind(null, 0 /*x*/);\n\nconst axisPoint = new YAxisPoint(5);\naxisPoint.toString(); // '0,5'\n\naxisPoint instanceof Point; // true\naxisPoint instanceof YAxisPoint; // true\nnew YAxisPoint(17, 42) instanceof Point; // true\n```\n\nNote that you need not do anything special to create a bound function for use with {{jsxref(\"Operators/new\", \"new\")}}. [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target), [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this) etc. all work as expected, as if the constructor was never bound. The only difference is that it can no longer be used for [`extends`](/en-US/docs/Web/JavaScript/Reference/Classes/extends).\n\nThe corollary is that you need not do anything special to create a bound function to be called plainly, even if you would rather require the bound function to only be called using {{jsxref(\"Operators/new\", \"new\")}}. If you call it without `new`, the bound `this` is suddenly not ignored.\n\n```js\nconst emptyObj = {};\nconst YAxisPoint = Point.bind(emptyObj, 0 /*x*/);\n\n// Can still be called as a normal function\n// (although usually this is undesirable)\nYAxisPoint(13);\n\n// The modifications to `this` is now observable from the outside\nconsole.log(emptyObj); // { x: 0, y: 13 }\n```\n\nIf you wish to restrict a bound function to only be callable with {{jsxref(\"Operators/new\", \"new\")}}, or only be callable without `new`, the target function must enforce that restriction, such as by checking `new.target !== undefined` or using a [class](/en-US/docs/Web/JavaScript/Reference/Classes) instead.\n\n### Binding classes\n\nUsing `bind()` on classes preserves most of the class's semantics, except that all static own properties of the current class are lost. However, because the prototype chain is preserved, you can still access static properties inherited from the parent class.\n\n```js\nclass Base {\n  static baseProp = \"base\";\n}\n\nclass Derived extends Base {\n  static derivedProp = \"derived\";\n}\n\nconst BoundDerived = Derived.bind(null);\nconsole.log(BoundDerived.baseProp); // \"base\"\nconsole.log(BoundDerived.derivedProp); // undefined\nconsole.log(new BoundDerived() instanceof Derived); // true\n```\n\n### Transforming methods to utility functions\n\n`bind()` is also helpful in cases where you want to transform a method which requires a specific `this` value to a plain utility function that accepts the previous `this` parameter as a normal parameter. This is similar to how general-purpose utility functions work: instead of calling `array.map(callback)`, you use `map(array, callback)`, which avoids mutating `Array.prototype`, and allows you to use `map` with array-like objects that are not arrays (for example, [`arguments`](/en-US/docs/Web/JavaScript/Reference/Functions/arguments)).\n\nTake {{jsxref(\"Array.prototype.slice()\")}}, for example, which you want to use for converting an array-like object to a real array. You could create a shortcut like this:\n\n```js\nconst slice = Array.prototype.slice;\n\n// ...\n\nslice.call(arguments);\n```\n\nNote that you can't save `slice.call` and call it as a plain function, because the `call()` method also reads its `this` value, which is the function it should call. In this case, you can use `bind()` to bind the value of `this` for `call()`. In the following piece of code, `slice()` is a bound version of {{jsxref(\"Function.prototype.call()\")}}, with the `this` value bound to {{jsxref(\"Array.prototype.slice()\")}}. This means that additional `call()` calls can be eliminated:\n\n```js\n// Same as \"slice\" in the previous example\nconst unboundSlice = Array.prototype.slice;\nconst slice = Function.prototype.call.bind(unboundSlice);\n\n// ...\n\nslice(arguments);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Function.prototype.bind` in `core-js`](https://github.com/zloirock/core-js#ecmascript-function)\n- {{jsxref(\"Function.prototype.apply()\")}}\n- {{jsxref(\"Function.prototype.call()\")}}\n- {{jsxref(\"Functions\", \"Functions\", \"\", 1)}}\n"
    },
    "call": {
      "index.md": "---\ntitle: Function.prototype.call()\nslug: Web/JavaScript/Reference/Global_Objects/Function/call\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Function.call\n---\n\n{{JSRef}}\n\nThe **`call()`** method of {{jsxref(\"Function\")}} instances calls this function with a given `this` value and arguments provided individually.\n\n{{EmbedInteractiveExample(\"pages/js/function-call.html\")}}\n\n## Syntax\n\n```js-nolint\ncall(thisArg)\ncall(thisArg, arg1)\ncall(thisArg, arg1, arg2)\ncall(thisArg, arg1, arg2, /* …, */ argN)\n```\n\n### Parameters\n\n- `thisArg`\n  - : The value to use as `this` when calling `func`. If the function is not in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode), [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) and [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) will be replaced with the global object, and primitive values will be converted to objects.\n- `arg1`, …, `argN` {{optional_inline}}\n  - : Arguments for the function.\n\n### Return value\n\nThe result of calling the function with the specified `this` value and arguments.\n\n## Description\n\n> **Note:** This function is almost identical to {{jsxref(\"Function/apply\", \"apply()\")}}, except that the function arguments are passed to `call()` individually as a list, while for `apply()` they are combined in one object, typically an array — for example, `func.call(this, \"eat\", \"bananas\")` vs. `func.apply(this, [\"eat\", \"bananas\"])`.\n\nNormally, when calling a function, the value of [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this) inside the function is the object that the function was accessed on. With `call()`, you can assign an arbitrary value as `this` when calling an existing function, without first attaching the function to the object as a property. This allows you to use methods of one object as generic utility functions.\n\n> **Warning:** Do not use `call()` to chain constructors (for example, to implement inheritance). This invokes the constructor function as a plain function, which means [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target) is `undefined`, and classes throw an error because they can't be called without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Use {{jsxref(\"Reflect.construct()\")}} or [`extends`](/en-US/docs/Web/JavaScript/Reference/Classes/extends) instead.\n\n## Examples\n\n### Using call() to invoke a function and specifying the this value\n\nIn the example below, when we call `greet`, the value of `this` will be bound to object `obj`, even when `greet` is not a method of `obj`.\n\n```js\nfunction greet() {\n  console.log(this.animal, \"typically sleep between\", this.sleepDuration);\n}\n\nconst obj = {\n  animal: \"cats\",\n  sleepDuration: \"12 and 16 hours\",\n};\n\ngreet.call(obj); // cats typically sleep between 12 and 16 hours\n```\n\n### Using call() to invoke a function without specifying the first argument\n\nIf the first `thisArg` parameter is omitted, it defaults to `undefined`. In non-strict mode, the `this` value is then substituted with {{jsxref(\"globalThis\")}} (which is akin to the global object).\n\n```js\nglobalThis.globProp = \"Wisen\";\n\nfunction display() {\n  console.log(`globProp value is ${this.globProp}`);\n}\n\ndisplay.call(); // Logs \"globProp value is Wisen\"\n```\n\nIn strict mode, the value of `this` is not substituted, so it stays as `undefined`.\n\n```js\n\"use strict\";\n\nglobalThis.globProp = \"Wisen\";\n\nfunction display() {\n  console.log(`globProp value is ${this.globProp}`);\n}\n\ndisplay.call(); // throws TypeError: Cannot read the property of 'globProp' of undefined\n```\n\n### Transforming methods to utility functions\n\n`call()` is almost equivalent to a normal function call, except that `this` is passed as a normal parameter instead of as the value that the function was accessed on. This is similar to how general-purpose utility functions work: instead of calling `array.map(callback)`, you use `map(array, callback)`, which avoids mutating `Array.prototype`, and allows you to use `map` with array-like objects that are not arrays (for example, [`arguments`](/en-US/docs/Web/JavaScript/Reference/Functions/arguments)).\n\nTake {{jsxref(\"Array.prototype.slice()\")}}, for example, which you want to use for converting an array-like object to a real array. You could create a shortcut like this:\n\n```js\nconst slice = Array.prototype.slice;\n\n// ...\n\nslice.call(arguments);\n```\n\nNote that you can't save `slice.call` and call it as a plain function, because the `call()` method also reads its `this` value, which is the function it should call. In this case, you can use {{jsxref(\"Function/bind\", \"bind()\")}} to bind the value of `this` for `call()`. In the following piece of code, `slice()` is a bound version of {{jsxref(\"Function.prototype.call()\")}}, with the `this` value bound to {{jsxref(\"Array.prototype.slice()\")}}. This means that additional `call()` calls can be eliminated:\n\n```js\n// Same as \"slice\" in the previous example\nconst unboundSlice = Array.prototype.slice;\nconst slice = Function.prototype.call.bind(unboundSlice);\n\n// ...\n\nslice(arguments);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Function.prototype.bind()\")}}\n- {{jsxref(\"Function.prototype.apply()\")}}\n- {{jsxref(\"Reflect.apply()\")}}\n- [Spread syntax (`...`)](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax)\n- [Introduction to Object-Oriented JavaScript](/en-US/docs/Learn/JavaScript/Objects)\n"
    },
    "caller": {
      "index.md": "---\ntitle: Function.prototype.caller\nslug: Web/JavaScript/Reference/Global_Objects/Function/caller\npage-type: javascript-instance-accessor-property\nstatus:\n  - deprecated\n  - non-standard\nbrowser-compat: javascript.builtins.Function.caller\n---\n\n{{JSRef}}{{Non-standard_Header}}{{Deprecated_Header}}\n\n> **Note:** In [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode), accessing `caller` of a function throws an error — the API is removed with no replacement. This is to prevent code from being able to \"walk the stack\", which both poses security risks and severely limits the possibility of optimizations like inlining and tail-call optimization. For more explanation, you can read [the rationale for the deprecation of `arguments.callee`](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee#description).\n\nThe **`caller`** accessor property of {{jsxref(\"Function\")}} instances returns the function that invoked this function. For [strict](/en-US/docs/Web/JavaScript/Reference/Strict_mode), arrow, async, and generator functions, accessing the `caller` property throws a {{jsxref(\"TypeError\")}}.\n\n## Description\n\nIf the function `f` was invoked by the top-level code, the value of `f.caller` is {{jsxref(\"Operators/null\", \"null\")}}; otherwise it's the function that called `f`. If the function that called `f` is a strict mode function, the value of `f.caller` is also `null`.\n\nNote that the only behavior specified by the ECMAScript specification is that `Function.prototype` has an initial `caller` accessor that unconditionally throws a {{jsxref(\"TypeError\")}} for any `get` or `set` request (known as a \"poison pill accessor\"), and that implementations are not allowed to change this semantic for any function except non-strict plain functions, in which case it must not have the value of a strict mode function. The actual behavior of the `caller` property, if it's anything other than throwing an error, is implementation-defined. For example, Chrome defines it as an own data property, while Firefox and Safari extend the initial poison-pill `Function.prototype.caller` accessor to specially handle `this` values that are non-strict functions.\n\n```js\n(function f() {\n  if (Object.hasOwn(f, \"caller\")) {\n    console.log(\n      \"caller is an own property with descriptor\",\n      Object.getOwnPropertyDescriptor(f, \"caller\"),\n    );\n  } else {\n    console.log(\n      \"f doesn't have an own property named caller. Trying to get f.[[Prototype]].caller\",\n    );\n    console.log(\n      Object.getOwnPropertyDescriptor(\n        Object.getPrototypeOf(f),\n        \"caller\",\n      ).get.call(f),\n    );\n  }\n})();\n\n// In Chrome:\n// caller is an own property with descriptor {value: null, writable: false, enumerable: false, configurable: false}\n\n// In Firefox:\n// f doesn't have an own property named caller. Trying to get f.[[Prototype]].caller\n// null\n```\n\nThis property replaces the obsolete `arguments.caller` property of the {{jsxref(\"Functions/arguments\", \"arguments\")}} object.\n\nThe special property `__caller__`, which returned the activation object of the caller thus allowing to reconstruct the stack, was removed for security reasons.\n\n## Examples\n\n### Checking the value of a function's caller property\n\nThe following code checks the value a function's `caller` property.\n\n```js\nfunction myFunc() {\n  if (myFunc.caller === null) {\n    return \"The function was called from the top!\";\n  } else {\n    return `This function's caller was ${myFunc.caller}`;\n  }\n}\n```\n\n### Reconstructing the stack and recursion\n\nNote that in case of recursion, you can't reconstruct the call stack using this property. Consider:\n\n```js\nfunction f(n) {\n  g(n - 1);\n}\nfunction g(n) {\n  if (n > 0) {\n    f(n);\n  } else {\n    stop();\n  }\n}\nf(2);\n```\n\nAt the moment `stop()` is called the call stack will be:\n\n```plain\nf(2) -> g(1) -> f(1) -> g(0) -> stop()\n```\n\nThe following is true:\n\n```js\nstop.caller === g && f.caller === g && g.caller === f;\n```\n\nso if you tried to get the stack trace in the `stop()` function like this:\n\n```js\nlet f = stop;\nlet stack = \"Stack trace:\";\nwhile (f) {\n  stack += `\\n${f.name}`;\n  f = f.caller;\n}\n```\n\nthe loop would never stop.\n\n### Strict mode caller\n\nIf the caller is a strict mode function, the value of `caller` is `null`.\n\n```js\nfunction callerFunc() {\n  calleeFunc();\n}\n\nfunction strictCallerFunc() {\n  \"use strict\";\n  calleeFunc();\n}\n\nfunction calleeFunc() {\n  console.log(calleeFunc.caller);\n}\n\n(function () {\n  callerFunc();\n})();\n// Logs [Function: callerFunc]\n\n(function () {\n  strictCallerFunc();\n})();\n// Logs null\n```\n\n## Specifications\n\nNot part of any standard.\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Function.prototype.name\")}}\n- {{jsxref(\"Functions/arguments\", \"arguments\")}}\n"
    },
    "displayname": {
      "index.md": "---\ntitle: \"Function: displayName\"\nslug: Web/JavaScript/Reference/Global_Objects/Function/displayName\npage-type: javascript-instance-data-property\nstatus:\n  - non-standard\nbrowser-compat: javascript.builtins.Function.displayName\n---\n\n{{JSRef}} {{Non-standard_Header}}\n\nThe optional **`displayName`** property of a {{jsxref(\"Function\")}} instance specifies the display name of the function.\n\n## Value\n\nThe `displayName` property is not initially present on any function — it's added by the code authors. For the purpose of display, it should be a string.\n\n## Description\n\nThe `displayName` property, if present, may be preferred by consoles and profilers over the {{jsxref(\"Function/name\", \"name\")}} property to be displayed as the name of a function.\n\nAmong browsers, only the Firefox console utilizes this property. React devtools also use the [`displayName`](https://reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging) property when displaying the component tree.\n\nFirefox does some basic attempts to decode the `displayName` that's possibly generated by the [anonymous JavaScript functions naming convention](https://johnjbarton.github.io/nonymous/index.html) algorithm. The following patterns are detected:\n\n- If `displayName` ends with a sequence of alphanumeric characters, `_`, and `$`, the longest such suffix is displayed.\n- If `displayName` ends with a sequence of `[]`-enclosed characters, that sequence is displayed without the square brackets.\n- If `displayName` ends with a sequence of alphanumeric characters and `_` followed by some `/`, `.`, or `<`, the sequence is returned without the trailing `/`, `.`, or `<` characters.\n- If `displayName` ends with a sequence of alphanumeric characters and `_` followed by `(^)`, the sequence is displayed without the `(^)`.\n\nIf none of the above patterns match, the entire `displayName` is displayed.\n\n## Examples\n\n### Setting a displayName\n\nBy entering the following in a Firefox console, it should display as something like `function MyFunction()`:\n\n```js\nconst a = function () {};\na.displayName = \"MyFunction\";\n\na; // function MyFunction()\n```\n\n### Changing displayName dynamically\n\nYou can dynamically change the `displayName` of a function:\n\n```js\nconst object = {\n  // anonymous\n  someMethod: function someMethod(value) {\n    someMethod.displayName = `someMethod (${value})`;\n  },\n};\n\nconsole.log(object.someMethod.displayName); // undefined\n\nobject.someMethod(\"123\");\nconsole.log(object.someMethod.displayName); // \"someMethod (123)\"\n```\n\n### Cleaning of displayName\n\nFirefox devtools would clean up a few common patterns in the `displayName` property before displaying it.\n\n```js\nfunction foo() {}\n\nfunction testName(name) {\n  foo.displayName = name;\n  console.log(foo);\n}\n\ntestName(\"$foo$\"); // function $foo$()\ntestName(\"foo bar\"); // function bar()\ntestName(\"Foo.prototype.add\"); // function add()\ntestName(\"foo .\"); // function foo .()\ntestName(\"foo <\"); // function foo <()\ntestName(\"foo?\"); // function foo?()\ntestName(\"foo()\"); // function foo()()\n\ntestName(\"[...]\"); // function ...()\ntestName(\"foo<\"); // function foo()\ntestName(\"foo...\"); // function foo()\ntestName(\"foo(^)\"); // function foo()\n```\n\n## Specifications\n\nNot part of any standard.\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Function.prototype.name\")}}\n"
    },
    "function": {
      "index.md": "---\ntitle: Function() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Function/Function\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Function.Function\n---\n\n{{JSRef}}\n\nThe **`Function()`** constructor creates {{jsxref(\"Function\")}} objects. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues as {{jsxref(\"Global_Objects/eval\", \"eval()\")}}. However, unlike `eval` (which may have access to the local scope), the `Function` constructor creates functions which execute in the global scope only.\n\n{{EmbedInteractiveExample(\"pages/js/function-constructor.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nnew Function(functionBody)\nnew Function(arg1, functionBody)\nnew Function(arg1, arg2, functionBody)\nnew Function(arg1, arg2, /* …, */ argN, functionBody)\n\nFunction(functionBody)\nFunction(arg1, functionBody)\nFunction(arg1, arg2, functionBody)\nFunction(arg1, arg2, /* …, */ argN, functionBody)\n```\n\n> **Note:** `Function()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Function` instance.\n\n### Parameters\n\n- `arg1`, …, `argN` {{optional_inline}}\n\n  - : Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript parameter (any of plain [identifier](/en-US/docs/Glossary/Identifier), [rest parameter](/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), or [destructured](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) parameter, optionally with a [default](/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters)), or a list of such strings separated with commas.\n\n    As the parameters are parsed in the same way as function expressions, whitespace and comments are accepted. For example: `\"x\", \"theValue = 42\", \"[a, b] /* numbers */\"` — or `\"x, theValue = 42, [a, b] /* numbers */\"`. (`\"x, theValue = 42\", \"[a, b]\"` is also correct, though very confusing to read.)\n\n- `functionBody`\n  - : A string containing the JavaScript statements comprising the function definition.\n\n## Description\n\n`Function` objects created with the `Function` constructor are parsed when the function is created. This is less efficient than creating a function with a [function expression](/en-US/docs/Web/JavaScript/Reference/Operators/function) or [function declaration](/en-US/docs/Web/JavaScript/Reference/Statements/function) and calling it within your code, because such functions are parsed with the rest of the code.\n\nAll arguments passed to the function, except the last, are treated as the names of the identifiers of the parameters in the function to be created, in the order in which they are passed. The function will be dynamically compiled as a function expression, with the source assembled in the following fashion:\n\n```js\n`function anonymous(${args.join(\",\")}\n) {\n${functionBody}\n}`;\n```\n\nThis is observable by calling the function's [`toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString) method.\n\nHowever, unlike normal [function expressions](/en-US/docs/Web/JavaScript/Reference/Operators/function), the name `anonymous` is not added to the `functionBody`'s scope, since `functionBody` only has access the global scope. If `functionBody` is not in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode) (the body itself needs to have the `\"use strict\"` directive since it doesn't inherit the strictness from the context), you may use [`arguments.callee`](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee) to refer to the function itself. Alternatively, you can define the recursive part as an inner function:\n\n```js\nconst recursiveFn = new Function(\n  \"count\",\n  `\n(function recursiveFn(count) {\n  if (count < 0) {\n    return;\n  }\n  console.log(count);\n  recursiveFn(count - 1);\n})(count);\n`,\n);\n```\n\nNote that the two dynamic parts of the assembled source — the parameters list `args.join(\",\")` and `functionBody` — will first be parsed separately to ensure they are each syntactically valid. This prevents injection-like attempts.\n\n```js\nnew Function(\"/*\", \"*/) {\");\n// SyntaxError: Unexpected end of arg string\n// Doesn't become \"function anonymous(/*) {*/) {}\"\n```\n\n## Examples\n\n### Specifying arguments with the Function constructor\n\nThe following code creates a `Function` object that takes two arguments.\n\n```js\n// Example can be run directly in your JavaScript console\n\n// Create a function that takes two arguments, and returns the sum of those arguments\nconst adder = new Function(\"a\", \"b\", \"return a + b\");\n\n// Call the function\nadder(2, 6);\n// 8\n```\n\nThe arguments `a` and `b` are formal argument names that are used in the function body, `return a + b`.\n\n### Creating a function object from a function declaration or function expression\n\n```js\n// The function constructor can take in multiple statements separated by a semicolon. Function expressions require a return statement with the function's name\n\n// Observe that new Function is called. This is so we can call the function we created directly afterwards\nconst sumOfArray = new Function(\n  \"const sumArray = (arr) => arr.reduce((previousValue, currentValue) => previousValue + currentValue); return sumArray\",\n)();\n\n// call the function\nsumOfArray([1, 2, 3, 4]);\n// 10\n\n// If you don't call new Function at the point of creation, you can use the Function.call() method to call it\nconst findLargestNumber = new Function(\n  \"function findLargestNumber (arr) { return Math.max(...arr) }; return findLargestNumber\",\n);\n\n// call the function\nfindLargestNumber.call({}).call({}, [2, 4, 1, 8, 5]);\n// 8\n\n// Function declarations do not require a return statement\nconst sayHello = new Function(\n  \"return function (name) { return `Hello, ${name}` }\",\n)();\n\n// call the function\nsayHello(\"world\");\n// Hello, world\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`function`](/en-US/docs/Web/JavaScript/Reference/Statements/function)\n- [`function` expression](/en-US/docs/Web/JavaScript/Reference/Operators/function)\n- {{jsxref(\"Functions\", \"Functions\", \"\", 1)}}\n"
    },
    "index.md": "---\ntitle: Function\nslug: Web/JavaScript/Reference/Global_Objects/Function\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Function\n---\n\n{{JSRef}}\n\nThe **`Function`** object provides methods for [functions](/en-US/docs/Web/JavaScript/Reference/Functions). In JavaScript, every function is actually a `Function` object.\n\n## Constructor\n\n- {{jsxref(\"Function/Function\", \"Function()\")}}\n  - : Creates a new `Function` object. Calling the constructor directly can create functions dynamically but suffers from security and similar (but far less significant) performance issues to {{jsxref(\"Global_Objects/eval\", \"eval()\")}}. However, unlike `eval()`, the `Function` constructor creates functions that execute in the global scope only.\n\n## Instance properties\n\nThese properties are defined on `Function.prototype` and shared by all `Function` instances.\n\n- {{jsxref(\"Function.prototype.arguments\")}} {{deprecated_inline}} {{non-standard_inline}}\n  - : Represents the arguments passed to this function. For [strict](/en-US/docs/Web/JavaScript/Reference/Strict_mode), arrow, async, and generator functions, accessing the `arguments` property throws a {{jsxref(\"TypeError\")}}. Use the {{jsxref(\"Functions/arguments\", \"arguments\")}} object inside function closures instead.\n- {{jsxref(\"Function.prototype.caller\")}} {{deprecated_inline}} {{non-standard_inline}}\n  - : Represents the function that invoked this function. For [strict](/en-US/docs/Web/JavaScript/Reference/Strict_mode), arrow, async, and generator functions, accessing the `caller` property throws a {{jsxref(\"TypeError\")}}.\n- {{jsxref(\"Object/constructor\", \"Function.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Function` instances, the initial value is the {{jsxref(\"Function/Function\", \"Function\")}} constructor.\n\nThese properties are own properties of each `Function` instance.\n\n- {{jsxref(\"Function/displayName\", \"displayName\")}} {{non-standard_inline}} {{optional_inline}}\n  - : The display name of the function.\n- {{jsxref(\"Function/length\", \"length\")}}\n  - : Specifies the number of arguments expected by the function.\n- {{jsxref(\"Function/name\", \"name\")}}\n  - : The name of the function.\n- {{jsxref(\"Function/prototype\", \"prototype\")}}\n  - : Used when the function is used as a constructor with the [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. It will become the new object's prototype.\n\n## Instance methods\n\n- {{jsxref(\"Function.prototype.apply()\")}}\n  - : Calls a function with a given `this` value and optional arguments provided as an array (or an [array-like object](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects)).\n- {{jsxref(\"Function.prototype.bind()\")}}\n  - : Creates a new function that, when called, has its `this` keyword set to a provided value, optionally with a given sequence of arguments preceding any provided when the new function is called.\n- {{jsxref(\"Function.prototype.call()\")}}\n  - : Calls a function with a given `this` value and optional arguments.\n- {{jsxref(\"Function.prototype.toString()\")}}\n  - : Returns a string representing the source code of the function.\n    Overrides the {{jsxref(\"Object.prototype.toString\")}} method.\n- [`Function.prototype[@@hasInstance]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance)\n  - : Specifies the default procedure for determining if a constructor function recognizes an object as one of the constructor's instances. Called by the [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator.\n\n## Examples\n\n### Difference between Function constructor and function declaration\n\nFunctions created with the `Function` constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the `Function` constructor was created. This is different from using {{jsxref(\"Global_Objects/eval\", \"eval()\")}} with code for a function expression.\n\n```js\n// Create a global property with `var`\nvar x = 10;\n\nfunction createFunction1() {\n  const x = 20;\n  return new Function(\"return x;\"); // this `x` refers to global `x`\n}\n\nfunction createFunction2() {\n  const x = 20;\n  function f() {\n    return x; // this `x` refers to the local `x` above\n  }\n  return f;\n}\n\nconst f1 = createFunction1();\nconsole.log(f1()); // 10\nconst f2 = createFunction2();\nconsole.log(f2()); // 20\n```\n\nWhile this code works in web browsers, `f1()` will produce a `ReferenceError` in Node.js, as `x` will not be found. This is because the top-level scope in Node is not the global scope, and `x` will be local to the module.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`function`](/en-US/docs/Web/JavaScript/Reference/Statements/function)\n- [`function` expression](/en-US/docs/Web/JavaScript/Reference/Operators/function)\n- {{jsxref(\"AsyncFunction\")}}\n- {{jsxref(\"AsyncGeneratorFunction\")}}\n- {{jsxref(\"GeneratorFunction\")}}\n- {{jsxref(\"Functions\", \"Functions\", \"\", 1)}}\n",
    "length": {
      "index.md": "---\ntitle: \"Function: length\"\nslug: Web/JavaScript/Reference/Global_Objects/Function/length\npage-type: javascript-instance-data-property\nbrowser-compat: javascript.builtins.Function.length\n---\n\n{{JSRef}}\n\nThe **`length`** data property of a {{jsxref(\"Function\")}} instance indicates the number of parameters expected by the function.\n\n{{EmbedInteractiveExample(\"pages/js/function-length.html\")}}\n\n## Value\n\nA number.\n\n{{js_property_attributes(0, 0, 1)}}\n\n## Description\n\nA {{jsxref(\"Function\")}} object's `length` property indicates how many arguments the function expects, i.e. the number of formal parameters. This number excludes the {{jsxref(\"Functions/rest_parameters\", \"rest parameter\", \"\", 1)}} and only includes parameters before the first one with a default value. By contrast, {{jsxref(\"Functions/arguments/length\", \"arguments.length\")}} is local to a function and provides the number of arguments actually passed to the function.\n\nThe {{jsxref(\"Function\")}} constructor is itself a `Function` object. Its `length` data property has a value of `1`.\n\nDue to historical reasons, `Function.prototype` is a callable itself. The `length` property of `Function.prototype` has a value of `0`.\n\n## Examples\n\n### Using function length\n\n```js\nconsole.log(Function.length); // 1\n\nconsole.log((() => {}).length); // 0\nconsole.log(((a) => {}).length); // 1\nconsole.log(((a, b) => {}).length); // 2 etc.\n\nconsole.log(((...args) => {}).length);\n// 0, rest parameter is not counted\n\nconsole.log(((a, b = 1, c) => {}).length);\n// 1, only parameters before the first one with\n// a default value are counted\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Function\")}}\n"
    },
    "name": {
      "index.md": "---\ntitle: \"Function: name\"\nslug: Web/JavaScript/Reference/Global_Objects/Function/name\npage-type: javascript-instance-data-property\nbrowser-compat: javascript.builtins.Function.name\n---\n\n{{JSRef}}\n\nThe **`name`** data property of a {{jsxref(\"Function\")}} instance indicates the function's name as specified when it was created, or it may be either `anonymous` or `''` (an empty string) for functions created anonymously.\n\n{{EmbedInteractiveExample(\"pages/js/function-name.html\")}}\n\n## Value\n\nA string.\n\n{{js_property_attributes(0, 0, 1)}}\n\n> **Note:** In non-standard, pre-ES2015 implementations the `configurable` attribute was `false` as well.\n\n## Description\n\nThe function's `name` property can be used to identify the function in debugging tools or error messages. It has no semantic significance to the language itself.\n\nThe `name` property is read-only and cannot be changed by the assignment operator:\n\n```js\nfunction someFunction() {}\n\nsomeFunction.name = \"otherFunction\";\nconsole.log(someFunction.name); // someFunction\n```\n\nTo change it, use {{jsxref(\"Object.defineProperty()\")}}.\n\nThe `name` property is typically inferred from how the function is defined. In the following sections, we will describe the various ways in which it can be inferred.\n\n### Function declaration\n\nThe `name` property returns the name of a function declaration.\n\n```js\nfunction doSomething() {}\ndoSomething.name; // \"doSomething\"\n```\n\n### Default-exported function declaration\n\nAn [`export default`](/en-US/docs/Web/JavaScript/Reference/Statements/export) declaration exports the function as a declaration instead of an expression. If the declaration is anonymous, the name is `\"default\"`.\n\n```js\n// -- someModule.js --\nexport default function () {}\n\n// -- main.js --\nimport someModule from \"./someModule.js\";\n\nsomeModule.name; // \"default\"\n```\n\n### Function constructor\n\nFunctions created with the [`Function()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function) constructor have name \"anonymous\".\n\n```js\nnew Function().name; // \"anonymous\"\n```\n\n### Function expression\n\nIf the function expression is named, that name is used as the `name` property.\n\n```js\nconst someFunction = function someFunctionName() {};\nsomeFunction.name; // \"someFunctionName\"\n```\n\nAnonymous function expressions created using the keyword `function` or arrow functions would have `\"\"` (an empty string) as their name.\n\n```js\n(function () {}).name; // \"\"\n(() => {}).name; // \"\"\n```\n\nHowever, such cases are rare — usually, in order to refer to the expression elsewhere, the function expression is attached to an identifier when it's created (such as in a variable declaration). In such cases, the name can be inferred, as the following few subsections demonstrate.\n\nOne practical case where the name cannot be inferred is a function returned from another function:\n\n```js\nfunction getFoo() {\n  return () => {};\n}\ngetFoo().name; // \"\"\n```\n\n### Variable declaration and method\n\nVariables and methods can infer the name of an anonymous function from its syntactic position.\n\n```js\nconst f = function () {};\nconst object = {\n  someMethod: function () {},\n};\n\nconsole.log(f.name); // \"f\"\nconsole.log(object.someMethod.name); // \"someMethod\"\n```\n\nThe same applies to assignment:\n\n```js\nlet f;\nf = () => {};\nf.name; // \"f\"\n```\n\n### Initializer and default value\n\nFunctions in initializers (default values) of [destructuring](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value), [default parameters](/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), [class fields](/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields), etc., will inherit the name of the bound identifier as their `name`.\n\n```js\nconst [f = () => {}] = [];\nf.name; // \"f\"\n\nconst { someMethod: m = () => {} } = {};\nm.name; // \"m\"\n\nfunction foo(f = () => {}) {\n  console.log(f.name);\n}\nfoo(); // \"f\"\n\nclass Foo {\n  static someMethod = () => {};\n}\nFoo.someMethod.name; // someMethod\n```\n\n### Shorthand method\n\n```js\nconst o = {\n  foo() {},\n};\no.foo.name; // \"foo\";\n```\n\n### Bound function\n\n{{jsxref(\"Function.prototype.bind()\")}} produces a function whose name is \"bound \" plus the function name.\n\n```js\nfunction foo() {}\nfoo.bind({}).name; // \"bound foo\"\n```\n\n### Getter and setter\n\nWhen using [`get`](/en-US/docs/Web/JavaScript/Reference/Functions/get) and [`set`](/en-US/docs/Web/JavaScript/Reference/Functions/set) accessor properties, \"get\" or \"set\" will appear in the function name.\n\n```js\nconst o = {\n  get foo() {},\n  set foo(x) {},\n};\n\nconst descriptor = Object.getOwnPropertyDescriptor(o, \"foo\");\ndescriptor.get.name; // \"get foo\"\ndescriptor.set.name; // \"set foo\";\n```\n\n### Class\n\nA class's name follows the same algorithm as function declarations and expressions.\n\n```js\nclass Foo {}\nFoo.name; // \"Foo\"\n```\n\n> **Warning:** JavaScript will set the function's `name` property only if a function does not have an own property called `name`. However, classes' [static members](/en-US/docs/Web/JavaScript/Reference/Classes/static) will be set as own properties of the class constructor function, and thus prevent the built-in `name` from being applied. See [an example](#telling_the_constructor_name_of_an_object) below.\n\n### Symbol as function name\n\nIf a {{jsxref(\"Symbol\")}} is used a function name and the symbol has a description, the method's name is the description in square brackets.\n\n```js\nconst sym1 = Symbol(\"foo\");\nconst sym2 = Symbol();\n\nconst o = {\n  [sym1]() {},\n  [sym2]() {},\n};\n\no[sym1].name; // \"[foo]\"\no[sym2].name; // \"[]\"\n```\n\n### Private property\n\nPrivate fields and private methods have the hash (`#`) as part of their names.\n\n```js\nclass Foo {\n  #field = () => {};\n  #method() {}\n  getNames() {\n    console.log(this.#field.name);\n    console.log(this.#method.name);\n  }\n}\n\nnew Foo().getNames();\n// \"#field\"\n// \"#method\"\n```\n\n## Examples\n\n### Telling the constructor name of an object\n\nYou can use `obj.constructor.name` to check the \"class\" of an object.\n\n```js\nfunction Foo() {} // Or: class Foo {}\n\nconst fooInstance = new Foo();\nconsole.log(fooInstance.constructor.name); // \"Foo\"\n```\n\nHowever, because static members will become own properties of the class, we can't obtain the class name for virtually any class with a static method property `name()`:\n\n```js\nclass Foo {\n  constructor() {}\n  static name() {}\n}\n```\n\nWith a `static name()` method `Foo.name` no longer holds the actual class name but a reference to the `name()` function object. Trying to obtain the class of `fooInstance` via `fooInstance.constructor.name` won't give us the class name at all, but instead a reference to the static class method. Example:\n\n```js\nconst fooInstance = new Foo();\nconsole.log(fooInstance.constructor.name); // ƒ name() {}\n```\n\nDue to the existence of static fields, `name` may not be a function either.\n\n```js\nclass Foo {\n  static name = 123;\n}\nconsole.log(new Foo().constructor.name); // 123\n```\n\nIf a class has a static property called `name`, it will also become _writable_. The built-in definition in the absence of a custom static definition is _read-only_:\n\n```js\nFoo.name = \"Hello\";\nconsole.log(Foo.name); // \"Hello\" if class Foo has a static \"name\" property, but \"Foo\" if not.\n```\n\nTherefore you may not rely on the built-in `name` property to always hold a class's name.\n\n### JavaScript compressors and minifiers\n\n> **Warning:** Be careful when using the `name` property with source-code transformations, such as those carried out by JavaScript compressors (minifiers) or obfuscators. These tools are often used as part of a JavaScript build pipeline to reduce the size of a program prior to deploying it to production. Such transformations often change a function's name at build time.\n\nSource code such as:\n\n```js\nfunction Foo() {}\nconst foo = new Foo();\n\nif (foo.constructor.name === \"Foo\") {\n  console.log(\"'foo' is an instance of 'Foo'\");\n} else {\n  console.log(\"Oops!\");\n}\n```\n\nmay be compressed to:\n\n```js\nfunction a() {}\nconst b = new a();\nif (b.constructor.name === \"Foo\") {\n  console.log(\"'foo' is an instance of 'Foo'\");\n} else {\n  console.log(\"Oops!\");\n}\n```\n\nIn the uncompressed version, the program runs into the truthy branch and logs \"'foo' is an instance of 'Foo'\" — whereas, in the compressed version it behaves differently, and runs into the else branch. If you rely on the `name` property, like in the example above, make sure your build pipeline doesn't change function names, or don't assume a function has a particular name.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill for `Function: name` in `core-js`](https://github.com/zloirock/core-js#ecmascript-function)\n- {{jsxref(\"Function\")}}\n"
    },
    "prototype": {
      "index.md": "---\ntitle: \"Function: prototype\"\nslug: Web/JavaScript/Reference/Global_Objects/Function/prototype\npage-type: javascript-instance-data-property\nspec-urls: https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function-instances-prototype\n---\n\n{{JSRef}}\n\nThe **`prototype`** data property of a {{jsxref(\"Function\")}} instance is used when the function is used as a constructor with the [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. It will become the new object's prototype.\n\n> **Note:** Not all {{jsxref(\"Function\")}} objects have the `prototype` property — see [description](#description).\n\n## Value\n\nAn object.\n\n{{js_property_attributes(1, 0, 0)}}\n\n> **Note:** The `prototype` property of [classes](/en-US/docs/Web/JavaScript/Reference/Classes) is not writable.\n\n## Description\n\nWhen a function is called with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new), the constructor's `prototype` property will become the resulting object's prototype.\n\n```js\nfunction Ctor() {}\nconst inst = new Ctor();\nconsole.log(Object.getPrototypeOf(inst) === Ctor.prototype); // true\n```\n\nYou can read [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#constructors) for more information about the interactions between a constructor function's `prototype` property and the resulting object's prototype.\n\nA function having a `prototype` property is not sufficient for it to be eligible as a constructor. [Generator functions](/en-US/docs/Web/JavaScript/Reference/Statements/function*) have a `prototype` property, but cannot be called with `new`:\n\n```js\nasync function* asyncGeneratorFunction() {}\nfunction* generatorFunction() {}\n```\n\nInstead, generator functions' `prototype` property is used when they are called _without_ `new`. The `prototype` property will become the returned [`Generator`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator) object's prototype.\n\nIn addition, some functions may have a `prototype` but throw unconditionally when called with `new`. For example, the [`Symbol()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol) and [`BigInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) functions throw when called with `new`, because `Symbol.prototype` and `BigInt.prototype` are only intended to provide methods for the primitive values, but the wrapper objects should not be directly constructed.\n\nThe following functions do not have `prototype`, and are therefore ineligible as constructors, even if a `prototype` property is later manually assigned:\n\n```js\nconst method = { foo() {} }.foo;\nconst arrowFunction = () => {};\nasync function asyncFunction() {}\n```\n\nThe following are valid constructors that have `prototype`:\n\n```js\nclass Class {}\nfunction fn() {}\n```\n\nA [bound function](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) does not have a `prototype` property, but may be constructable. When it's constructed, the target function is constructed instead, and if the target function is constructable, it would return a normal instance.\n\n```js\nconst boundFunction = function () {}.bind(null);\n```\n\nA function's `prototype` property, by default, is a plain object with one property: [`constructor`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor), which is a reference to the function itself. The `constructor` property is writable, non-enumerable, and configurable.\n\nIf the `prototype` of a function is reassigned with something other than an {{jsxref(\"Object\")}}, when the function is called with `new`, the returned object's prototype would be `Object.prototype` instead. (In other words, `new` ignores the `prototype` property and constructs a plain object.)\n\n```js\nfunction Ctor() {}\nCtor.prototype = 3;\nconsole.log(Object.getPrototypeOf(new Ctor()) === Object.prototype); // true\n```\n\n## Examples\n\n### Changing the prototype of all instances by mutating the prototype property\n\n```js\nfunction Ctor() {}\nconst p1 = new Ctor();\nconst p2 = new Ctor();\nCtor.prototype.prop = 1;\nconsole.log(p1.prop); // 1\nconsole.log(p2.prop); // 1\n```\n\n### Adding a non-method property to a class's prototype property\n\n[Class fields](/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) add properties to each instance. Class methods declare _function_ properties on the prototype. However, there's no way to add a non-function property to the prototype. In case you want to share static data between all instances (for example, [`Error.prototype.name`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name) is the same between all error instances), you can manually assign it on the `prototype` of a class.\n\n```js\nclass Dog {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nDog.prototype.species = \"dog\";\n\nconsole.log(new Dog(\"Jack\").species); // \"dog\"\n```\n\nThis can be made more ergonomic using [static initialization blocks](/en-US/docs/Web/JavaScript/Reference/Classes/Static_initialization_blocks), which are called when the class is initialized.\n\n```js\nclass Dog {\n  static {\n    Dog.prototype.species = \"dog\";\n  }\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nconsole.log(new Dog(\"Jack\").species); // \"dog\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## See also\n\n- {{jsxref(\"Function\")}}\n- [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#constructors)\n"
    },
    "tostring": {
      "index.md": "---\ntitle: Function.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/Function/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Function.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"Function\")}} instances returns a string representing the source code of this function.\n\n{{EmbedInteractiveExample(\"pages/js/function-tostring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the source code of the function.\n\n## Description\n\nThe {{jsxref(\"Function\")}} object overrides the `toString()` method\ninherited from {{jsxref(\"Object\")}}; it does not inherit\n{{jsxref(\"Object.prototype.toString\")}}. For user-defined `Function`\nobjects, the `toString` method returns a string containing the source text\nsegment which was used to define the function.\n\nJavaScript calls the `toString` method automatically when a\n`Function` is to be represented as a text value, e.g. when a function is\nconcatenated with a string.\n\nThe `toString()` method will throw a {{jsxref(\"TypeError\")}} exception\n(\"Function.prototype.toString called on incompatible object\"), if its\n`this` value object is not a `Function` object.\n\n```js example-bad\nFunction.prototype.toString.call(\"foo\"); // throws TypeError\n```\n\nIf the `toString()` method is called on built-in function objects, a\nfunction created by {{jsxref(\"Function.prototype.bind()\")}}, or\nother non-JavaScript functions, then `toString()` returns a\n_native function string_ which looks like\n\n```plain\nfunction someName() { [native code] }\n```\n\nFor intrinsic object methods and functions, `someName` is the initial name of the function; otherwise its content may be implementation-defined, but will always be in property name syntax, like `[1 + 1]`, `someName`, or `1`.\n\n> **Note:** This means using [`eval()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) on native function strings is a guaranteed syntax error.\n\nIf the `toString()` method is called on a function created by the `Function` constructor, `toString()` returns the source code of a synthesized function declaration named \"anonymous\" using the provided parameters and function body. For example, `Function(\"a\", \"b\", \"return a + b\").toString()` will return:\n\n```plain\nfunction anonymous(a,b\n) {\nreturn a + b\n}\n```\n\nSince ES2018, the spec requires the return value of `toString()` to be the exact same source code as it was declared, including any whitespace and/or comments — or, if the host doesn't have the source code available for some reason, requires returning a native function string. Support for this revised behavior can be found in the [compatibility table](#browser_compatibility).\n\n## Examples\n\n### Comparing actual source code and toString results\n\n```js\nfunction test(fn) {\n  console.log(fn.toString());\n}\n\nfunction f() {}\nclass A {\n  a() {}\n}\nfunction* g() {}\n\ntest(f); // \"function f() {}\"\ntest(A); // \"class A { a() {} }\"\ntest(g); // \"function* g() {}\"\ntest((a) => a); // \"(a) => a\"\ntest({ a() {} }.a); // \"a() {}\"\ntest({ *a() {} }.a); // \"*a() {}\"\ntest({ [0]() {} }[0]); // \"[0]() {}\"\ntest(Object.getOwnPropertyDescriptor({ get a() {} }, \"a\").get); // \"get a() {}\"\ntest(Object.getOwnPropertyDescriptor({ set a(x) {} }, \"a\").set); // \"set a(x) {}\"\ntest(Function.prototype.toString); // \"function toString() { [native code] }\"\ntest(function f() {}.bind(0)); // \"function () { [native code] }\"\ntest(Function(\"a\", \"b\")); // function anonymous(a\\n) {\\nb\\n}\n```\n\nNote that after the `Function.prototype.toString()` revision, when `toString()` is called, implementations are never allowed to synthesize a function's source that is not a native function string. The method always returns the exact source code used to create the function — including the [getter](/en-US/docs/Web/JavaScript/Reference/Functions/get) and [setter](/en-US/docs/Web/JavaScript/Reference/Functions/set) examples above. The [`Function`](/en-US/docs/Web/JavaScript/Reference/Functions) constructor itself has the capability of synthesizing the source code for the function (and is therefore a form of implicit [`eval()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval)).\n\n### Getting source text of a function\n\nIt is possible to get the source text of a function by coercing it to a string — for example, by wrapping it in a template literal:\n\n```js\nfunction foo() {\n  return \"bar\";\n}\nconsole.log(`${foo}`);\n// function foo() {\n//   return \"bar\";\n// }\n```\n\nThis source text is _exact_, including any interspersed comments (which won't be stored by the engine's internal representation otherwise).\n\n```js\nfunction foo /* a comment */() {\n  return \"bar\";\n}\nconsole.log(foo.toString());\n// function foo /* a comment */() {\n//   return \"bar\";\n// }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.toString()\")}}\n"
    }
  },
  "generator": {
    "index.md": "---\ntitle: Generator\nslug: Web/JavaScript/Reference/Global_Objects/Generator\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Generator\n---\n\n{{JSRef}}\n\nThe **`Generator`** object is returned by a {{jsxref(\"Statements/function*\", \"generator function\", \"\", 1)}} and it conforms to both the [iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) and the [iterator protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol).\n\n`Generator` is a subclass of the hidden {{jsxref(\"Iterator\")}} class.\n\n{{EmbedInteractiveExample(\"pages/js/expressions-functionasteriskexpression.html\", \"taller\")}}\n\n## Constructor\n\nThe `Generator` constructor is not available globally. Instances of `Generator` must be returned from [generator functions](/en-US/docs/Web/JavaScript/Reference/Statements/function*):\n\n```js\nfunction* generator() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst gen = generator(); // \"Generator { }\"\n\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\nconsole.log(gen.next().value); // 3\n```\n\nIn fact, there's no JavaScript entity that corresponds to the `Generator` constructor. There's only a hidden object which is the prototype object shared by all objects created by generator functions. This object is often stylized as `Generator.prototype` to make it look like a class, but it should be more appropriately called [`GeneratorFunction.prototype.prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction), because `GeneratorFunction` is an actual JavaScript entity.\n\n## Instance properties\n\nThese properties are defined on `Generator.prototype` and shared by all `Generator` instances.\n\n- {{jsxref(\"Object/constructor\", \"Generator.prototype.constructor\")}}\n\n  - : The constructor function that created the instance object. For `Generator` instances, the initial value is [`GeneratorFunction.prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction).\n\n    > **Note:** `Generator` objects do not store a reference to the generator function that created them.\n\n- `Generator.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Generator\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n_Also inherits instance methods from its parent {{jsxref(\"Iterator\")}}_.\n\n- {{jsxref(\"Generator.prototype.next()\")}}\n  - : Returns a value yielded by the {{jsxref(\"Operators/yield\", \"yield\")}} expression.\n- {{jsxref(\"Generator.prototype.return()\")}}\n  - : Acts as if a `return` statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a [`try...finally`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) block.\n- {{jsxref(\"Generator.prototype.throw()\")}}\n  - : Acts as if a `throw` statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.\n\n## Examples\n\n### An infinite iterator\n\nWith a generator function, values are not evaluated until they are needed. Therefore a generator allows us to define a potentially infinite data structure.\n\n```js\nfunction* infinite() {\n  let index = 0;\n\n  while (true) {\n    yield index++;\n  }\n}\n\nconst generator = infinite(); // \"Generator { }\"\n\nconsole.log(generator.next().value); // 0\nconsole.log(generator.next().value); // 1\nconsole.log(generator.next().value); // 2\n// …\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Statements/function*\", \"function*\")}}\n- [`function*` expression](/en-US/docs/Web/JavaScript/Reference/Operators/function*)\n- {{jsxref(\"GeneratorFunction\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n",
    "next": {
      "index.md": "---\ntitle: Generator.prototype.next()\nslug: Web/JavaScript/Reference/Global_Objects/Generator/next\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Generator.next\n---\n\n{{JSRef}}\n\nThe **`next()`** method of {{jsxref(\"Generator\")}} instances returns an\nobject with two properties `done` and `value`. You can also\nprovide a parameter to the `next` method to send a value to the\ngenerator.\n\n## Syntax\n\n```js-nolint\nnext()\nnext(value)\n```\n\n### Parameters\n\n- `value` {{optional_inline}}\n\n  - : The value to send to the generator.\n\n    The value will be assigned as a result of a `yield` expression. For\n    example, in `variable = yield expression`, the value\n    passed to the `.next()` function will be assigned to\n    `variable`.\n\n### Return value\n\nAn {{jsxref(\"Object\")}} with two properties:\n\n- `done`\n  - : A boolean value:\n    - `true` if the generator is past the end of its control flow. In this case `value` specifies the _return value_ of the generator (which may be undefined).\n    - `false` if the generator is able to produce more values.\n- `value`\n  - : Any JavaScript value yielded or returned by the generator.\n\n## Examples\n\n### Using next()\n\nThe following example shows a simple generator and the object that the\n`next` method returns:\n\n```js\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst g = gen(); // Generator { }\ng.next(); // { value: 1, done: false }\ng.next(); // { value: 2, done: false }\ng.next(); // { value: 3, done: false }\ng.next(); // { value: undefined, done: true }\n```\n\n### Using next() with a list\n\nIn this example, `getPage` takes a list and \"paginates\" it into chunks of size `pageSize`. Each call to `next` will yield one such chunk.\n\n```js\nfunction* getPage(list, pageSize = 1) {\n  for (let index = 0; index < list.length; index += pageSize) {\n    yield list.slice(index, index + pageSize);\n  }\n}\n\nconst list = [1, 2, 3, 4, 5, 6, 7, 8];\nconst page = getPage(list, 3); // Generator { }\n\npage.next(); // { value: [1, 2, 3], done: false }\npage.next(); // { value: [4, 5, 6], done: false }\npage.next(); // { value: [7, 8], done: false }\npage.next(); // { value: undefined, done: true }\n```\n\n### Sending values to the generator\n\nIn this example, `next` is called with a value.\n\n> **Note:** The first call does not log anything, because the generator was not yielding anything initially.\n\n```js\nfunction* gen() {\n  while (true) {\n    const value = yield;\n    console.log(value);\n  }\n}\n\nconst g = gen();\ng.next(1); // Returns { value: undefined, done: false }\n// No log at this step: the first value sent through `next` is lost\ng.next(2); // Returns { value: undefined, done: false }\n// Logs 2\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Statements/function*\", \"function*\")}}\n- [Iterators and generators](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) guide\n"
    },
    "return": {
      "index.md": "---\ntitle: Generator.prototype.return()\nslug: Web/JavaScript/Reference/Global_Objects/Generator/return\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Generator.return\n---\n\n{{JSRef}}\n\nThe **`return()`** method of {{jsxref(\"Generator\")}} instances acts as if a `return` statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a [`try...finally`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) block.\n\n## Syntax\n\n<!-- We don't usually add the \"generatorInstance\" subject for methods. However, it is necessary here, because \"return\" is a keyword, so otherwise it's invalid syntax. -->\n\n```js-nolint\ngeneratorInstance.return()\ngeneratorInstance.return(value)\n```\n\n### Parameters\n\n- `value` {{optional_inline}}\n  - : The value to return.\n\n### Return value\n\nAn {{jsxref(\"Object\")}} with two properties:\n\n- `done`\n  - : A boolean value:\n    - `true` if the generator function's control flow has reached the end.\n    - `false` if the generator function's control flow hasn't reached the end and can produce more values. This can only happen if the `return` is captured in a [`try...finally`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block) and there are more `yield` expressions in the `finally` block.\n- `value`\n  - : The value that is given as an argument, or, if the `yield` expression is wrapped in a [`try...finally`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#the_finally_block), the value yielded/returned from the `finally` block.\n\n## Description\n\nThe `return()` method, when called, can be seen as if a `return value;` statement is inserted in the generator's body at the current suspended position, where `value` is the value passed to the `return()` method. Therefore, in a typical flow, calling `return(value)` will return `{ done: true, value: value }`. However, if the `yield` expression is wrapped in a `try...finally` block, the control flow doesn't exit the function body, but proceeds to the `finally` block instead. In this case, the value returned may be different, and `done` may even be `false`, if there are more `yield` expressions within the `finally` block.\n\n## Examples\n\n### Using return()\n\nThe following example shows a simple generator and the `return` method.\n\n```js\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst g = gen();\n\ng.next(); // { value: 1, done: false }\ng.return(\"foo\"); // { value: \"foo\", done: true }\ng.next(); // { value: undefined, done: true }\n```\n\nIf `return(value)` is called on a generator that is already in \"completed\" state, the generator will remain in \"completed\" state.\n\nIf no argument is provided, the `value` property of the returned object will be `undefined`. If an argument is provided, it will become the value of the `value` property of the returned object, unless the `yield` expression is wrapped in a `try...finally`.\n\n```js\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst g = gen();\ng.next(); // { value: 1, done: false }\ng.next(); // { value: 2, done: false }\ng.next(); // { value: 3, done: false }\ng.next(); // { value: undefined, done: true }\ng.return(); // { value: undefined, done: true }\ng.return(1); // { value: 1, done: true }\n```\n\n### Using return() with try...finally\n\nThe fact that the `return` method has been called can only be made known to the generator itself if the `yield` expression is wrapped in a `try...finally` block.\n\nWhen the `return` method is called on a generator that is suspended within a `try` block, execution in the generator proceeds to the `finally` block — since the `finally` block of `try...finally` statements always executes.\n\n```js\nfunction* gen() {\n  yield 1;\n  try {\n    yield 2;\n    yield 3;\n  } finally {\n    yield \"cleanup\";\n  }\n}\n\nconst g1 = gen();\ng1.next(); // { value: 1, done: false }\n\n// Execution is suspended before the try...finally.\ng1.return(\"early return\"); // { value: 'early return', done: true }\n\nconst g2 = gen();\ng2.next(); // { value: 1, done: false }\ng2.next(); // { value: 2, done: false }\n\n// Execution is suspended within the try...finally.\ng2.return(\"early return\"); // { value: 'cleanup', done: false }\n\n// The completion value is preserved\ng2.next(); // { value: 'early return', done: true }\n\n// Generator is in the completed state\ng2.return(\"not so early return\"); // { value: 'not so early return', done: true }\n```\n\nThe return value of the finally block can also become the `value` of the result returned from the `return` call.\n\n```js\nfunction* gen() {\n  try {\n    yield 1;\n  } finally {\n    return \"cleanup\";\n  }\n}\n\nconst g1 = gen();\ng1.next(); // { value: 1, done: false }\ng1.return(\"early return\"); // { value: 'cleanup', done: true }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Statements/function*\", \"function*\")}}\n"
    },
    "throw": {
      "index.md": "---\ntitle: Generator.prototype.throw()\nslug: Web/JavaScript/Reference/Global_Objects/Generator/throw\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Generator.throw\n---\n\n{{JSRef}}\n\nThe **`throw()`** method of {{jsxref(\"Generator\")}} instances acts as if a `throw` statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.\n\n## Syntax\n\n<!-- We don't usually add the \"generatorInstance\" subject for methods. However, it is necessary here, because \"throw\" is a keyword, so otherwise it's invalid syntax. -->\n\n```js-nolint\ngeneratorInstance.throw(exception)\n```\n\n### Parameters\n\n- `exception`\n  - : The exception to throw. For debugging purposes, it is useful to make it an `instanceof` {{jsxref(\"Error\")}}.\n\n### Return value\n\nIf the thrown exception is caught by a [`try...catch`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) and the generator resumes to yield more values, it will return an {{jsxref(\"Object\")}} with two properties:\n\n- `done`\n  - : A boolean value:\n    - `true` if the generator function's control flow has reached the end.\n    - `false` if the generator function is able to produce more values.\n- `value`\n  - : The value yielded from the next `yield` expression.\n\n### Exceptions\n\nIf the thrown exception is not caught by a `try...catch`, the `exception` passed to `throw()` will be thrown out from the generator function.\n\n## Description\n\nThe `throw()` method, when called, can be seen as if a `throw exception;` statement is inserted in the generator's body at the current suspended position, where `exception` is the exception passed to the `throw()` method. Therefore, in a typical flow, calling `throw(exception)` will cause the generator to throw. However, if the `yield` expression is wrapped in a `try...catch` block, the error may be caught and control flow can either resume after error handling, or exit gracefully.\n\n## Examples\n\n### Using throw()\n\nThe following example shows a simple generator and an error that is thrown using the `throw` method. An error can be caught by a {{jsxref(\"Statements/try...catch\", \"try...catch\")}} block as usual.\n\n```js\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log(\"Error caught!\");\n    }\n  }\n}\n\nconst g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error(\"Something went wrong\"));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Statements/function*\", \"function*\")}}\n"
    }
  },
  "generatorfunction": {
    "generatorfunction": {
      "index.md": "---\ntitle: GeneratorFunction() constructor\nslug: Web/JavaScript/Reference/Global_Objects/GeneratorFunction/GeneratorFunction\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.GeneratorFunction.GeneratorFunction\n---\n\n{{JSRef}}\n\nThe **`GeneratorFunction()`** constructor creates {{jsxref(\"GeneratorFunction\")}} objects.\n\nNote that `GeneratorFunction` is _not_ a global object. It can be obtained with the following code:\n\n```js\nconst GeneratorFunction = function* () {}.constructor;\n```\n\nThe `GeneratorFunction()` constructor is not intended to be used directly, and all caveats mentioned in the {{jsxref(\"Function/Function\", \"Function()\")}} description apply to `GeneratorFunction()`.\n\n## Syntax\n\n```js-nolint\nnew GeneratorFunction(functionBody)\nnew GeneratorFunction(arg1, functionBody)\nnew GeneratorFunction(arg1, arg2, functionBody)\nnew GeneratorFunction(arg1, arg2, /* …, */ argN, functionBody)\n\nGeneratorFunction(functionBody)\nGeneratorFunction(arg1, functionBody)\nGeneratorFunction(arg1, arg2, functionBody)\nGeneratorFunction(arg1, arg2, /* …, */ argN, functionBody)\n```\n\n> **Note:** `GeneratorFunction()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `GeneratorFunction` instance.\n\n### Parameters\n\nSee {{jsxref(\"Function/Function\", \"Function()\")}}.\n\n## Examples\n\n### Creating and using a GeneratorFunction() constructor\n\n```js\nconst GeneratorFunction = function* () {}.constructor;\nconst g = new GeneratorFunction(\"a\", \"yield a * 2\");\nconst iterator = g(10);\nconsole.log(iterator.next().value); // 20\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`function*`](/en-US/docs/Web/JavaScript/Reference/Statements/function*)\n- [`function*` expression](/en-US/docs/Web/JavaScript/Reference/Operators/function*)\n- [`Function()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function)\n- [Iterators and generators](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators) guide\n- {{jsxref(\"Functions\", \"Functions\", \"\", 1)}}\n"
    },
    "index.md": "---\ntitle: GeneratorFunction\nslug: Web/JavaScript/Reference/Global_Objects/GeneratorFunction\npage-type: javascript-class\nbrowser-compat: javascript.builtins.GeneratorFunction\n---\n\n{{JSRef}}\n\nThe **`GeneratorFunction`** object provides methods for [generator functions](/en-US/docs/Web/JavaScript/Reference/Statements/function*). In JavaScript, every generator function is actually a `GeneratorFunction` object.\n\nNote that `GeneratorFunction` is _not_ a global object. It can be obtained with the following code:\n\n```js\nconst GeneratorFunction = function* () {}.constructor;\n```\n\n`GeneratorFunction` is a subclass of {{jsxref(\"Function\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/functionasterisk-function.html\", \"taller\")}}\n\n## Constructor\n\n- {{jsxref(\"GeneratorFunction/GeneratorFunction\", \"GeneratorFunction()\")}}\n  - : Creates a new `GeneratorFunction` object.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"Function\")}}_.\n\nThese properties are defined on `GeneratorFunction.prototype` and shared by all `GeneratorFunction` instances.\n\n- {{jsxref(\"Object/constructor\", \"GeneratorFunction.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `GeneratorFunction` instances, the initial value is the {{jsxref(\"GeneratorFunction/GeneratorFunction\", \"GeneratorFunction\")}} constructor.\n- `GeneratorFunction.prototype.prototype`\n  - : All generator functions share the same [`prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property, which is [`Generator.prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator). Each generator function instance also has its own `prototype` property. When the generator function is called, the returned generator object inherits from the generator function's `prototype` property, which in turn inherits from `GeneratorFunction.prototype.prototype`.\n- `GeneratorFunction.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"GeneratorFunction\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"Function\")}}_.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`function*`](/en-US/docs/Web/JavaScript/Reference/Statements/function*)\n- [`function*` expression](/en-US/docs/Web/JavaScript/Reference/Operators/function*)\n- {{jsxref(\"Function\")}}\n- {{jsxref(\"AsyncFunction\")}}\n- {{jsxref(\"AsyncGeneratorFunction\")}}\n- {{jsxref(\"Functions\", \"Functions\", \"\", 1)}}\n"
  },
  "globalthis": {
    "index.md": "---\ntitle: globalThis\nslug: Web/JavaScript/Reference/Global_Objects/globalThis\npage-type: javascript-global-property\nbrowser-compat: javascript.builtins.globalThis\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`globalThis`** global property contains the [global `this`](/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context) value, which is usually akin to the [global object](/en-US/docs/Glossary/Global_object).\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-globalthis.html\", \"shorter\")}}\n\n## Value\n\nThe global `this` object.\n\n{{js_property_attributes(1, 0, 1)}}\n\n> **Note:** The `globalThis` property is configurable and writable so that code authors can hide it when executing untrusted code and prevent exposing the global object.\n\n## Description\n\nHistorically, accessing the global object has required different syntax in different JavaScript environments. On the web you can use {{domxref(\"Window/window\", \"window\")}}, {{domxref(\"Window/self\", \"self\")}}, or {{domxref(\"Window/frames\", \"frames\")}} - but in [Web Workers](/en-US/docs/Web/API/Worker) only `self` will work. In Node.js none of these work, and you must instead use `global`. The `this` keyword could be used inside functions running in non–strict mode, but `this` will be `undefined` in modules and inside functions running in strict mode. You can also use `Function('return this')()`, but environments that disable {{jsxref(\"Global_Objects/eval\", \"eval()\")}}, like {{Glossary(\"CSP\")}} in browsers, prevent use of {{jsxref(\"Function\")}} in this way.\n\nThe `globalThis` property provides a standard way of accessing the global `this` value (and hence the global object itself) across environments. Unlike similar properties such as `window` and `self`, it's guaranteed to work in window and non-window contexts. In this way, you can access the global object in a consistent manner without having to know which environment the code is being run in. To help you remember the name, just remember that in global scope the `this` value is `globalThis`.\n\n> **Note:** `globalThis` is generally the same concept as the global object (i.e. adding properties to `globalThis` makes them global variables) — this is the case for browsers and Node — but hosts are allowed to provide a different value for `globalThis` that's unrelated to the global object.\n\n### HTML and the WindowProxy\n\nIn many engines `globalThis` will be a reference to the actual global object, but in web browsers, due to iframe and cross-window security considerations, it references a {{jsxref(\"Proxy\")}} around the actual global object (which you can't directly access). This distinction is rarely relevant in common usage, but important to be aware of.\n\n### Naming\n\nSeveral other popular name choices such as `self` and `global` were removed from consideration because of their potential to break compatibility with existing code. See the [language proposal's \"naming\" document](https://github.com/tc39/proposal-global/blob/master/NAMING.md) for more details.\n\n`globalThis` is, quite literally, the global `this` value. It's the same value as the `this` value in a non-strict function called without an object. It's also the value of `this` in the global scope of a script.\n\n## Examples\n\n### Search for the global across environments\n\nUsually, the global object does not need to be explicitly specified — its properties are automatically accessible as global variables.\n\n```js\nconsole.log(window.Math === Math); // true\n```\n\nHowever, one case where one needs to explicitly access the global object is when _writing_ to it, usually for the purpose of [polyfills](/en-US/docs/Glossary/Polyfill).\n\nPrior to `globalThis`, the only reliable cross-platform way to get the global object for an environment was `Function('return this')()`. However, this causes [CSP](/en-US/docs/Web/HTTP/CSP) violations in some settings, so authors would use a piecewise definition like this (slightly adapted from the [original core-js source](https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/global.js)):\n\n```js\nfunction check(it) {\n  // Math is known to exist as a global in every environment.\n  return it && it.Math === Math && it;\n}\n\nconst globalObject =\n  check(typeof window === \"object\" && window) ||\n  check(typeof self === \"object\" && self) ||\n  check(typeof global === \"object\" && global) ||\n  // This returns undefined when running in strict mode\n  (function () {\n    return this;\n  })() ||\n  Function(\"return this\")();\n```\n\nAfter obtaining the global object, we can define new globals on it. For example, adding an implementation for [`Intl`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl):\n\n```js\nif (typeof globalObject.Intl === \"undefined\") {\n  // No Intl in this environment; define our own on the global scope\n  Object.defineProperty(globalObject, \"Intl\", {\n    value: {\n      // Our Intl implementation\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true,\n  });\n}\n```\n\nWith `globalThis` available, the additional search for the global across environments is not necessary anymore:\n\n```js\nif (typeof globalThis.Intl === \"undefined\") {\n  Object.defineProperty(globalThis, \"Intl\", {\n    value: {\n      // Our Intl implementation\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true,\n  });\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `globalThis` in `core-js`](https://github.com/zloirock/core-js#ecmascript-globalthis)\n- {{jsxref(\"Operators/this\", \"this\")}}\n"
  },
  "index.md": "---\ntitle: Standard built-in objects\nslug: Web/JavaScript/Reference/Global_Objects\npage-type: landing-page\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThis chapter documents all of JavaScript's standard, built-in objects, including their methods and properties.\n\nThe term \"global objects\" (or standard built-in objects) here is not to be confused with **the global object**. Here, \"global objects\" refer to **objects in the global scope**.\n\nThe **global object** itself can be accessed using the {{jsxref(\"Operators/this\", \"this\")}} operator in the global scope. In fact, the global scope **consists of** the properties of the global object, including inherited properties, if any.\n\nOther objects in the global scope are either [created by the user script](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#creating_new_objects) or provided by the host application. The host objects available in browser contexts are documented in the [API reference](/en-US/docs/Web/API).\n\nFor more information about the distinction between the [DOM](/en-US/docs/Web/API/Document_Object_Model) and core [JavaScript](/en-US/docs/Web/JavaScript), see [JavaScript technologies overview](/en-US/docs/Web/JavaScript/JavaScript_technologies_overview).\n\n## Standard objects by category\n\n### Value properties\n\nThese global properties return a simple value. They have no properties or methods.\n\n- {{jsxref(\"globalThis\")}}\n- {{jsxref(\"Infinity\")}}\n- {{jsxref(\"NaN\")}}\n- {{jsxref(\"undefined\")}}\n\n### Function properties\n\nThese global functions—functions which are called globally, rather than on an object—directly return their results to the caller.\n\n- {{jsxref(\"Global_Objects/eval\", \"eval()\")}}\n- {{jsxref(\"isFinite()\")}}\n- {{jsxref(\"isNaN()\")}}\n- {{jsxref(\"parseFloat()\")}}\n- {{jsxref(\"parseInt()\")}}\n- {{jsxref(\"decodeURI()\")}}\n- {{jsxref(\"decodeURIComponent()\")}}\n- {{jsxref(\"encodeURI()\")}}\n- {{jsxref(\"encodeURIComponent()\")}}\n- {{jsxref(\"escape()\")}} {{deprecated_inline}}\n- {{jsxref(\"unescape()\")}} {{deprecated_inline}}\n\n### Fundamental objects\n\nThese objects represent fundamental language constructs.\n\n- {{jsxref(\"Object\")}}\n- {{jsxref(\"Function\")}}\n- {{jsxref(\"Boolean\")}}\n- {{jsxref(\"Symbol\")}}\n\n### Error objects\n\nError objects are a special type of fundamental object. They include the basic {{jsxref(\"Error\")}} type, as well as several specialized error types.\n\n- {{jsxref(\"Error\")}}\n- {{jsxref(\"AggregateError\")}}\n- {{jsxref(\"EvalError\")}}\n- {{jsxref(\"RangeError\")}}\n- {{jsxref(\"ReferenceError\")}}\n- {{jsxref(\"SyntaxError\")}}\n- {{jsxref(\"TypeError\")}}\n- {{jsxref(\"URIError\")}}\n- {{jsxref(\"InternalError\")}} {{non-standard_inline}}\n\n### Numbers and dates\n\nThese are the base objects representing numbers, dates, and mathematical calculations.\n\n- {{jsxref(\"Number\")}}\n- {{jsxref(\"BigInt\")}}\n- {{jsxref(\"Math\")}}\n- {{jsxref(\"Date\")}}\n\n### Text processing\n\nThese objects represent strings and support manipulating them.\n\n- {{jsxref(\"String\")}}\n- {{jsxref(\"RegExp\")}}\n\n### Indexed collections\n\nThese objects represent collections of data which are ordered by an index value. This includes (typed) arrays and array-like constructs.\n\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Int8Array\")}}\n- {{jsxref(\"Uint8Array\")}}\n- {{jsxref(\"Uint8ClampedArray\")}}\n- {{jsxref(\"Int16Array\")}}\n- {{jsxref(\"Uint16Array\")}}\n- {{jsxref(\"Int32Array\")}}\n- {{jsxref(\"Uint32Array\")}}\n- {{jsxref(\"BigInt64Array\")}}\n- {{jsxref(\"BigUint64Array\")}}\n- {{jsxref(\"Float32Array\")}}\n- {{jsxref(\"Float64Array\")}}\n\n### Keyed collections\n\nThese objects represent collections which use keys. The iterable collections ({{jsxref(\"Map\")}} and {{jsxref(\"Set\")}}) contain elements which are easily iterated in the order of insertion.\n\n- {{jsxref(\"Map\")}}\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"WeakMap\")}}\n- {{jsxref(\"WeakSet\")}}\n\n### Structured data\n\nThese objects represent and interact with structured data buffers and data coded using JavaScript Object Notation (JSON).\n\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"SharedArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"JSON\")}}\n\n### Managing memory\n\nThese objects interact with the garbage collection mechanism.\n\n- {{jsxref(\"WeakRef\")}}\n- {{jsxref(\"FinalizationRegistry\")}}\n\n### Control abstraction objects\n\nControl abstractions can help to structure code, especially async code (without using deeply nested callbacks, for example).\n\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"AsyncIterator\")}}\n- {{jsxref(\"Promise\")}}\n- {{jsxref(\"GeneratorFunction\")}}\n- {{jsxref(\"AsyncGeneratorFunction\")}}\n- {{jsxref(\"Generator\")}}\n- {{jsxref(\"AsyncGenerator\")}}\n- {{jsxref(\"AsyncFunction\")}}\n\n### Reflection\n\n- {{jsxref(\"Reflect\")}}\n- {{jsxref(\"Proxy\")}}\n\n### Internationalization\n\nAdditions to the ECMAScript core for language-sensitive functionalities.\n\n- {{jsxref(\"Intl\")}}\n- {{jsxref(\"Intl.Collator\")}}\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n- {{jsxref(\"Intl.DisplayNames\")}}\n- {{jsxref(\"Intl.DurationFormat\")}}\n- {{jsxref(\"Intl.ListFormat\")}}\n- {{jsxref(\"Intl.Locale\")}}\n- {{jsxref(\"Intl.NumberFormat\")}}\n- {{jsxref(\"Intl.PluralRules\")}}\n- {{jsxref(\"Intl.RelativeTimeFormat\")}}\n- {{jsxref(\"Intl.Segmenter\")}}\n",
  "infinity": {
    "index.md": "---\ntitle: Infinity\nslug: Web/JavaScript/Reference/Global_Objects/Infinity\npage-type: javascript-global-property\nbrowser-compat: javascript.builtins.Infinity\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`Infinity`** global property is a numeric value representing infinity.\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-infinity.html\")}}\n\n## Value\n\nThe same number value as {{jsxref(\"Number.POSITIVE_INFINITY\")}}.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\n`Infinity` is a property of the _global object_. In other words, it is a variable in global scope.\n\nThe value `Infinity` (positive infinity) is greater than any other number.\n\nThis value behaves slightly differently than mathematical infinity; see {{jsxref(\"Number.POSITIVE_INFINITY\")}} for details.\n\n## Examples\n\n### Using Infinity\n\n```js\nconsole.log(Infinity); /* Infinity */\nconsole.log(Infinity + 1); /* Infinity */\nconsole.log(Math.pow(10, 1000)); /* Infinity */\nconsole.log(Math.log(0)); /* -Infinity */\nconsole.log(1 / Infinity); /* 0 */\nconsole.log(1 / 0); /* Infinity */\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number.NEGATIVE_INFINITY\")}}\n- {{jsxref(\"Number.POSITIVE_INFINITY\")}}\n- {{jsxref(\"Number.isFinite\")}}\n"
  },
  "int16array": {
    "index.md": "---\ntitle: Int16Array\nslug: Web/JavaScript/Reference/Global_Objects/Int16Array\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Int16Array\n---\n\n{{JSRef}}\n\nThe **`Int16Array`** typed array represents an array of 16-bit signed integers in the platform byte order. If control over byte order is needed, use {{jsxref(\"DataView\")}} instead. The contents are initialized to `0`. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Int16Array` is a subclass of the hidden {{jsxref(\"TypedArray\")}} class.\n\n## Constructor\n\n- {{jsxref(\"Int16Array/Int16Array\", \"Int16Array()\")}}\n  - : Creates a new `Int16Array` object.\n\n## Static properties\n\n_Also inherits static properties from its parent {{jsxref(\"TypedArray\")}}_.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Int16Array.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `2` in the case of `Int16Array`.\n\n## Static methods\n\n_Inherits static methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"TypedArray\")}}_.\n\nThese properties are defined on `Int16Array.prototype` and shared by all `Int16Array` instances.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Int16Array.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `2` in the case of a `Int16Array`.\n- {{jsxref(\"Object/constructor\", \"Int16Array.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Int16Array` instances, the initial value is the {{jsxref(\"Int16Array/Int16Array\", \"Int16Array\")}} constructor.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Examples\n\n### Different ways to create an Int16Array\n\n```js\n// From a length\nconst int16 = new Int16Array(2);\nint16[0] = 42;\nconsole.log(int16[0]); // 42\nconsole.log(int16.length); // 2\nconsole.log(int16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nconst x = new Int16Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(16);\nconst z = new Int16Array(buffer, 2, 4);\nconsole.log(z.byteOffset); // 2\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int16FromIterable = new Int16Array(iterable);\nconsole.log(int16FromIterable);\n// Int16Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Int16Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n",
    "int16array": {
      "index.md": "---\ntitle: Int16Array() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Int16Array/Int16Array\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Int16Array.Int16Array\n---\n\n{{JSRef}}\n\nThe **`Int16Array()`** constructor creates {{jsxref(\"Int16Array\")}} objects. The contents are initialized to `0`.\n\n## Syntax\n\n```js-nolint\nnew Int16Array()\nnew Int16Array(length)\nnew Int16Array(typedArray)\nnew Int16Array(object)\n\nnew Int16Array(buffer)\nnew Int16Array(buffer, byteOffset)\nnew Int16Array(buffer, byteOffset, length)\n```\n\n> **Note:** `Int16Array()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#parameters).\n\n### Exceptions\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#exceptions).\n\n## Examples\n\n### Different ways to create an Int16Array\n\n```js\n// From a length\nconst int16 = new Int16Array(2);\nint16[0] = 42;\nconsole.log(int16[0]); // 42\nconsole.log(int16.length); // 2\nconsole.log(int16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nconst x = new Int16Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(16);\nconst z = new Int16Array(buffer, 2, 4);\nconsole.log(z.byteOffset); // 2\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int16FromIterable = new Int16Array(iterable);\nconsole.log(int16FromIterable);\n// Int16Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Int16Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
    }
  },
  "int32array": {
    "index.md": "---\ntitle: Int32Array\nslug: Web/JavaScript/Reference/Global_Objects/Int32Array\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Int32Array\n---\n\n{{JSRef}}\n\nThe **`Int32Array`** typed array represents an array of 32-bit signed integers in the platform byte order. If control over byte order is needed, use {{jsxref(\"DataView\")}} instead. The contents are initialized to `0`. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Int32Array` is a subclass of the hidden {{jsxref(\"TypedArray\")}} class.\n\n## Constructor\n\n- {{jsxref(\"Int32Array/Int32Array\", \"Int32Array()\")}}\n  - : Creates a new `Int32Array` object.\n\n## Static properties\n\n_Also inherits static properties from its parent {{jsxref(\"TypedArray\")}}_.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Int32Array.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `4` in the case of `Int32Array`.\n\n## Static methods\n\n_Inherits static methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"TypedArray\")}}_.\n\nThese properties are defined on `Int32Array.prototype` and shared by all `Int32Array` instances.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Int32Array.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `4` in the case of a `Int32Array`.\n- {{jsxref(\"Object/constructor\", \"Int32Array.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Int32Array` instances, the initial value is the {{jsxref(\"Int32Array/Int32Array\", \"Int32Array\")}} constructor.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Examples\n\n### Different ways to create an Int32Array\n\n```js\n// From a length\nconst int32 = new Int32Array(2);\nint32[0] = 42;\nconsole.log(int32[0]); // 42\nconsole.log(int32.length); // 2\nconsole.log(int32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Int32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Int32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int32FromIterable = new Int32Array(iterable);\nconsole.log(int32FromIterable);\n// Int32Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Int32Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n",
    "int32array": {
      "index.md": "---\ntitle: Int32Array() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Int32Array.Int32Array\n---\n\n{{JSRef}}\n\nThe **`Int32Array()`** constructor creates {{jsxref(\"Int32Array\")}} objects. The contents are initialized to `0`.\n\n## Syntax\n\n```js-nolint\nnew Int32Array()\nnew Int32Array(length)\nnew Int32Array(typedArray)\nnew Int32Array(object)\n\nnew Int32Array(buffer)\nnew Int32Array(buffer, byteOffset)\nnew Int32Array(buffer, byteOffset, length)\n```\n\n> **Note:** `Int32Array()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#parameters).\n\n### Exceptions\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#exceptions).\n\n## Examples\n\n### Different ways to create an Int32Array\n\n```js\n// From a length\nconst int32 = new Int32Array(2);\nint32[0] = 42;\nconsole.log(int32[0]); // 42\nconsole.log(int32.length); // 2\nconsole.log(int32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Int32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Int32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int32FromIterable = new Int32Array(iterable);\nconsole.log(int32FromIterable);\n// Int32Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Int32Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
    }
  },
  "int8array": {
    "index.md": "---\ntitle: Int8Array\nslug: Web/JavaScript/Reference/Global_Objects/Int8Array\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Int8Array\n---\n\n{{JSRef}}\n\nThe **`Int8Array`** typed array represents an array of 8-bit signed integers. The contents are initialized to `0`. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Int8Array` is a subclass of the hidden {{jsxref(\"TypedArray\")}} class.\n\n## Constructor\n\n- {{jsxref(\"Int8Array/Int8Array\", \"Int8Array()\")}}\n  - : Creates a new `Int8Array` object.\n\n## Static properties\n\n_Also inherits static properties from its parent {{jsxref(\"TypedArray\")}}_.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Int8Array.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `1` in the case of `Int8Array`.\n\n## Static methods\n\n_Inherits static methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"TypedArray\")}}_.\n\nThese properties are defined on `Int8Array.prototype` and shared by all `Int8Array` instances.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Int8Array.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `1` in the case of a `Int8Array`.\n- {{jsxref(\"Object/constructor\", \"Int8Array.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Int8Array` instances, the initial value is the {{jsxref(\"Int8Array/Int8Array\", \"Int8Array\")}} constructor.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Examples\n\n### Different ways to create an Int8Array\n\n```js\n// From a length\nconst int8 = new Int8Array(2);\nint8[0] = 42;\nconsole.log(int8[0]); // 42\nconsole.log(int8.length); // 2\nconsole.log(int8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Int8Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Int8Array(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int8FromIterable = new Int8Array(iterable);\nconsole.log(int8FromIterable);\n// Int8Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Int8Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n",
    "int8array": {
      "index.md": "---\ntitle: Int8Array() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Int8Array.Int8Array\n---\n\n{{JSRef}}\n\nThe **`Int8Array()`** constructor creates {{jsxref(\"Int8Array\")}} objects. The contents are initialized to `0`.\n\n## Syntax\n\n```js-nolint\nnew Int8Array()\nnew Int8Array(length)\nnew Int8Array(typedArray)\nnew Int8Array(object)\n\nnew Int8Array(buffer)\nnew Int8Array(buffer, byteOffset)\nnew Int8Array(buffer, byteOffset, length)\n```\n\n> **Note:** `Int8Array()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#parameters).\n\n### Exceptions\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#exceptions).\n\n## Examples\n\n### Different ways to create an Int8Array\n\n```js\n// From a length\nconst int8 = new Int8Array(2);\nint8[0] = 42;\nconsole.log(int8[0]); // 42\nconsole.log(int8.length); // 2\nconsole.log(int8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Int8Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Int8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Int8Array(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst int8FromIterable = new Int8Array(iterable);\nconsole.log(int8FromIterable);\n// Int8Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Int8Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
    }
  },
  "internalerror": {
    "index.md": "---\ntitle: InternalError\nslug: Web/JavaScript/Reference/Global_Objects/InternalError\npage-type: javascript-class\nstatus:\n  - non-standard\nbrowser-compat: javascript.builtins.InternalError\n---\n\n{{JSRef}}{{Non-standard_Header}}\n\nThe **`InternalError`** object indicates an error that occurred internally in the JavaScript engine.\n\nExample cases are mostly when something is too large, e.g.:\n\n- \"too many switch cases\",\n- \"too many parentheses in regular expression\",\n- \"array initializer too large\",\n- \"too much recursion\".\n\n`InternalError` is a subclass of {{jsxref(\"Error\")}}.\n\n## Constructor\n\n- {{jsxref(\"InternalError/InternalError\", \"InternalError()\")}} {{non-standard_inline}}\n  - : Creates a new `InternalError` object.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"Error\")}}_.\n\nThese properties are defined on `InternalError.prototype` and shared by all `InternalError` instances.\n\n- {{jsxref(\"Object/constructor\", \"InternalError.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `InternalError` instances, the initial value is the {{jsxref(\"InternalError/InternalError\", \"InternalError\")}} constructor.\n- {{jsxref(\"Error/name\", \"InternalError.prototype.name\")}}\n  - : Represents the name for the type of error. For `InternalError.prototype.name`, the initial value is `\"InternalError\"`.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"Error\")}}_.\n\n## Examples\n\n### Too much recursion\n\nThis recursive function runs 10 times, as per the exit condition.\n\n```js\nfunction loop(x) {\n  // \"x >= 10\" is the exit condition\n  if (x >= 10) return;\n\n  // do stuff\n  loop(x + 1); // the recursive call\n}\nloop(0);\n```\n\nSetting this condition to an extremely high value, may not work:\n\n```js example-bad\nfunction loop(x) {\n  if (x >= 1000000000000) return;\n\n  // do stuff\n  loop(x + 1);\n}\nloop(0);\n\n// InternalError: too much recursion\n```\n\nFor more information, see [InternalError: too much recursion.](/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion)\n\n## Specifications\n\nNot part of any standard.\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n- [InternalError: too much recursion](/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion)\n",
    "internalerror": {
      "index.md": "---\ntitle: InternalError() constructor\nslug: Web/JavaScript/Reference/Global_Objects/InternalError/InternalError\npage-type: javascript-constructor\nstatus:\n  - non-standard\nbrowser-compat: javascript.builtins.InternalError.InternalError\n---\n\n{{JSRef}}{{Non-standard_Header}}\n\nThe **`InternalError()`** constructor creates {{jsxref(\"InternalError\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew InternalError()\nnew InternalError(message)\nnew InternalError(message, options)\nnew InternalError(message, fileName)\nnew InternalError(message, fileName, lineNumber)\n\nInternalError()\nInternalError(message)\nInternalError(message, options)\nInternalError(message, fileName)\nInternalError(message, fileName, lineNumber)\n```\n\n> **Note:** `InternalError()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `InternalError` instance.\n\n### Parameters\n\n- `message` {{optional_inline}}\n  - : Human-readable description of the error.\n- `options` {{optional_inline}}\n  - : An object that has the following properties:\n    - `cause` {{optional_inline}}\n      - : A property indicating the specific cause of the error.\n        When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n- `fileName` {{optional_inline}} {{non-standard_inline}}\n  - : The name of the file containing the code that caused the exception\n- `lineNumber` {{optional_inline}} {{non-standard_inline}}\n  - : The line number of the code that caused the exception\n\n## Examples\n\n### Creating a new InternalError\n\n```js\nnew InternalError(\"Engine failure\");\n```\n\n## Specifications\n\nNot part of any standard.\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n"
    }
  },
  "intl": {
    "collator": {
      "collator": {
        "index.md": "---\ntitle: Intl.Collator() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Intl.Collator.Collator\n---\n\n{{JSRef}}\n\nThe **`Intl.Collator()`** constructor creates {{jsxref(\"Intl.Collator\")}} objects.\n\n{{EmbedInteractiveExample(\"pages/js/intl-collator.html\")}}\n\n## Syntax\n\n```js-nolint\nnew Intl.Collator()\nnew Intl.Collator(locales)\nnew Intl.Collator(locales, options)\n\nIntl.Collator()\nIntl.Collator(locales)\nIntl.Collator(locales, options)\n```\n\n> **Note:** `Intl.Collator()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Intl.Collator` instance.\n\n### Parameters\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag or an {{jsxref(\"Intl.Locale\")}} instance, or an array of such locale identifiers. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n    The following Unicode extension keys are allowed:\n\n    - `co`\n      - : See [`collation`](#collation).\n    - `kn`\n      - : See [`numeric`](#numeric).\n    - `kf`\n      - : See [`caseFirst`](#casefirst).\n\n    These keys can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n- `options` {{optional_inline}}\n\n  - : An object containing the following properties, in the order they are retrieved (all of them are optional):\n\n    - `usage`\n      - : Whether the comparison is for sorting a list of strings or fuzzy (for the Latin script diacritic-insensitive and case-insensitive) filtering a list of strings by key. Possible values are:\n        - `\"sort\"` (default)\n          - : For sorting a list of strings.\n        - `\"search\"`\n          - : For filtering a list of strings by testing each list item for a full-string match against a key. With `\"search\"`, the caller should only pay attention to whether `compare()` returns zero or non-zero and should not distinguish the non-zero return values from each other. That is, it is inappropriate to use `\"search\"` for sorting/ordering.\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n    - `collation`\n      - : Variant collations for certain locales, such as `\"emoji\"`, `\"pinyin\"`, `\"stroke\"`, and so on. For a list of supported collation types, see [`Intl.Locale.prototype.getCollations()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations#supported_collation_types); the default is `\"default\"`. This option can also be set through the `co` Unicode extension key; if both are provided, this `options` property takes precedence.\n    - `numeric`\n      - : Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". Possible values are `true` and `false`; the default is `false`. This option can also be set through the `kn` Unicode extension key; if both are provided, this `options` property takes precedence.\n    - `caseFirst`\n      - : Whether upper case or lower case should sort first. Possible values are `\"upper\"`, `\"lower\"`, and `\"false\"` (use the locale's default); the default is `\"false\"`. This option can also be set through the `kf` Unicode extension key; if both are provided, this `options` property takes precedence.\n    - `sensitivity`\n\n      - : Which differences in the strings should lead to non-zero result values. Possible values are:\n\n        - `\"base\"`\n          - : Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A.\n        - `\"accent\"`\n          - : Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a ≠ b, a ≠ á, a = A.\n        - `\"case\"`\n          - : Only strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A.\n        - `\"variant\"`\n          - : Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A.\n\n        The default is `\"variant\"` for usage `\"sort\"`; it's locale dependent for usage `\"search\"` per spec, but the core functionality of `\"search\"` is accent-insensitive and case-insensitive filtering, so `\"base\"` makes the most sense (and perhaps `\"case\"`).\n\n    - `ignorePunctuation`\n      - : Whether punctuation should be ignored. Possible values are `true` and `false`; the default is `false`.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `locales` or `options` contain invalid values.\n\n## Examples\n\n### Using Collator\n\nThe following example demonstrates the different potential results for a string\noccurring before, after, or at the same level as another:\n\n```js\nconsole.log(new Intl.Collator().compare(\"a\", \"c\")); // -1, or some other negative value\nconsole.log(new Intl.Collator().compare(\"c\", \"a\")); // 1, or some other positive value\nconsole.log(new Intl.Collator().compare(\"a\", \"a\")); // 0\n```\n\nNote that the results shown in the code above can vary between browsers and browser\nversions. This is because the values are implementation-specific. That is, the\nspecification requires only that the before and after values are negative and\npositive.\n\nWhen usage is `\"search\"`, the caller should only pay attention to whether the return value of `compare()` is zero or non-zero. It is inappropriate to use a `Collator` with usage `\"search\"` for sorting.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Collator\")}}\n- {{jsxref(\"Intl\")}}\n"
      },
      "compare": {
        "index.md": "---\ntitle: Intl.Collator.prototype.compare()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Collator.compare\n---\n\n{{JSRef}}\n\nThe **`compare()`** method of {{jsxref(\"Intl.Collator\")}} instances compares two\nstrings according to the sort order of this collator object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-collator-prototype-compare.html\")}}\n\n## Syntax\n\n```js-nolint\ncompare(string1, string2)\n```\n\n### Parameters\n\n- `string1`, `string2`\n  - : The strings to compare against each other.\n\n### Return value\n\nA number indicating how `string1` and `string2` compare to each other according to the sort order of this {{jsxref(\"Intl.Collator\")}} object:\n\n- A negative value if `string1` comes before `string2`;\n- A positive value if `string1` comes after `string2`;\n- 0 if they are considered equal.\n\n## Examples\n\n### Using compare for array sort\n\nUse the `compare` function for sorting arrays. Note that the function\nis bound to the collator from which it was obtained, so it can be passed directly to\n{{jsxref(\"Array.prototype.sort()\")}}.\n\n```js\nconst a = [\"Offenbach\", \"Österreich\", \"Odenwald\"];\nconst collator = new Intl.Collator(\"de-u-co-phonebk\");\na.sort(collator.compare);\nconsole.log(a.join(\", \")); // \"Odenwald, Österreich, Offenbach\"\n```\n\n### Using compare for array search\n\nUse the `compare` function for finding matching strings in arrays:\n\n```js\nconst a = [\"Congrès\", \"congres\", \"Assemblée\", \"poisson\"];\nconst collator = new Intl.Collator(\"fr\", {\n  usage: \"search\",\n  sensitivity: \"base\",\n});\nconst s = \"congres\";\nconst matches = a.filter((v) => collator.compare(v, s) === 0);\nconsole.log(matches.join(\", \")); // \"Congrès, congres\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Collator\")}}\n- {{jsxref(\"String.prototype.localeCompare()\")}}\n"
      },
      "index.md": "---\ntitle: Intl.Collator\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Collator\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Intl.Collator\n---\n\n{{JSRef}}\n\nThe **`Intl.Collator`** object enables language-sensitive string comparison.\n\n{{EmbedInteractiveExample(\"pages/js/intl-collator.html\")}}\n\n## Constructor\n\n- {{jsxref(\"Intl/Collator/Collator\", \"Intl.Collator()\")}}\n  - : Creates a new `Collator` object.\n\n## Static methods\n\n- {{jsxref(\"Intl/Collator/supportedLocalesOf\", \"Intl.Collator.supportedLocalesOf()\")}}\n  - : Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## Instance properties\n\nThese properties are defined on `Intl.Collator.prototype` and shared by all `Intl.Collator` instances.\n\n- {{jsxref(\"Object/constructor\", \"Intl.Collator.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Intl.Collator` instances, the initial value is the {{jsxref(\"Intl/Collator/Collator\", \"Intl.Collator\")}} constructor.\n- `Intl.Collator.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.Collator\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Intl/Collator/compare\", \"Intl.Collator.prototype.compare()\")}}\n  - : Getter function that compares two strings according to the sort order of this {{jsxref(\"Intl.Collator\")}} object.\n- {{jsxref(\"Intl/Collator/resolvedOptions\", \"Intl.Collator.prototype.resolvedOptions()\")}}\n  - : Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.\n\n## Examples\n\n### Using Collator\n\nThe following example demonstrates the different potential results for a string occurring before, after, or at the same level as another:\n\n```js\nconsole.log(new Intl.Collator().compare(\"a\", \"c\")); // -1, or some other negative value\nconsole.log(new Intl.Collator().compare(\"c\", \"a\")); // 1, or some other positive value\nconsole.log(new Intl.Collator().compare(\"a\", \"a\")); // 0\n```\n\nNote that the results shown in the code above can vary between browsers and browser versions. This is because the values are implementation-specific. That is, the specification requires only that the before and after values are negative and positive.\n\n### Using locales\n\nThe results provided by [`Intl.Collator.prototype.compare()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare) vary between languages. In order to get the sort order of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```js\n// in German, ä sorts with a\nconsole.log(new Intl.Collator(\"de\").compare(\"ä\", \"z\"));\n// -1, or some other negative value\n\n// in Swedish, ä sorts after z\nconsole.log(new Intl.Collator(\"sv\").compare(\"ä\", \"z\"));\n// 1, or some other positive value\n```\n\n### Using options\n\nThe results provided by [`Intl.Collator.prototype.compare()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/compare) can be customized using the `options` argument:\n\n```js\n// in German, ä has a as the base letter\nconsole.log(new Intl.Collator(\"de\", { sensitivity: \"base\" }).compare(\"ä\", \"a\"));\n// 0\n\n// in Swedish, ä and a are separate base letters\nconsole.log(new Intl.Collator(\"sv\", { sensitivity: \"base\" }).compare(\"ä\", \"a\"));\n// 1, or some other positive value\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl\")}}\n",
      "resolvedoptions": {
        "index.md": "---\ntitle: Intl.Collator.prototype.resolvedOptions()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Collator/resolvedOptions\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Collator.resolvedOptions\n---\n\n{{JSRef}}\n\nThe **`resolvedOptions()`** method of {{jsxref(\"Intl.Collator\")}} instances returns a new object with properties reflecting the locale and collation options\ncomputed during initialization of this collator object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-collator-prototype-resolvedoptions.html\")}}\n\n## Syntax\n\n```js-nolint\nresolvedOptions()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new object with properties reflecting the locale and collation options computed\nduring the initialization of the given {{jsxref(\"Intl.Collator\")}} object.\n\n## Description\n\nThe resulting object has the following properties:\n\n- `locale`\n  - : The BCP 47 language tag for the locale actually used. If any Unicode extension\n    values were requested in the input BCP 47 language tag that led to this locale,\n    the key-value pairs that were requested and are supported for this locale are\n    included in `locale`.\n- `usage`, `sensitivity`, `ignorePunctuation`\n  - : The values provided for these properties in the `options` argument or\n    filled in as defaults.\n- `collation`\n  - : The value requested using the Unicode extension key `\"co\"`, if it is\n    supported for `locale`, or `\"default\"`.\n- `numeric`, `caseFirst`\n  - : The values requested for these properties in the `options` argument or\n    using the Unicode extension keys `\"kn\"` and `\"kf\"` or filled\n    in as defaults. If the implementation does not support these properties, they are\n    omitted.\n\n## Examples\n\n### Using the resolvedOptions method\n\n```js\nconst de = new Intl.Collator(\"de\", { sensitivity: \"base\" });\nconst usedOptions = de.resolvedOptions();\n\nusedOptions.locale; // \"de\"\nusedOptions.usage; // \"sort\"\nusedOptions.sensitivity; // \"base\"\nusedOptions.ignorePunctuation; // false\nusedOptions.collation; // \"default\"\nusedOptions.numeric; // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Collator\")}}\n"
      },
      "supportedlocalesof": {
        "index.md": "---\ntitle: Intl.Collator.supportedLocalesOf()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Collator/supportedLocalesOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Intl.Collator.supportedLocalesOf\n---\n\n{{JSRef}}\n\nThe **`Intl.Collator.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.\n\n{{EmbedInteractiveExample(\"pages/js/intl-collator-supportedlocalesof.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nIntl.Collator.supportedLocalesOf(locales)\nIntl.Collator.supportedLocalesOf(locales, options)\n```\n\n### Parameters\n\n- `locales`\n  - : A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object that may have the following property:\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the {{jsxref(\"Intl\", \"Intl\", \"#locale_identification_and_negotiation\", 1)}} page.\n\n### Return value\n\nAn array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.\n\n## Examples\n\n### Using supportedLocalesOf()\n\nAssuming a runtime that supports Indonesian and German but not Balinese in collation, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is not used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```js\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.Collator.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Collator\")}}\n"
      }
    },
    "datetimeformat": {
      "datetimeformat": {
        "index.md": "---\ntitle: Intl.DateTimeFormat() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Intl.DateTimeFormat.DateTimeFormat\n---\n\n{{JSRef}}\n\nThe **`Intl.DateTimeFormat()`** constructor creates {{jsxref(\"Intl.DateTimeFormat\")}} objects.\n\n{{EmbedInteractiveExample(\"pages/js/intl-datetimeformat.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Intl.DateTimeFormat()\nnew Intl.DateTimeFormat(locales)\nnew Intl.DateTimeFormat(locales, options)\n\nIntl.DateTimeFormat()\nIntl.DateTimeFormat(locales)\nIntl.DateTimeFormat(locales, options)\n```\n\n> **Note:** `Intl.DateTimeFormat()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Intl.DateTimeFormat` instance. However, there's a special behavior when it's called without `new` and the `this` value is another `Intl.DateTimeFormat` instance; see [Return value](#return_value).\n\n### Parameters\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag or an {{jsxref(\"Intl.Locale\")}} instance, or an array of such locale identifiers. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n    The following Unicode extension key is allowed:\n\n    - `nu`\n      - : See [`numberingSystem`](#numberingsystem).\n    - `ca`\n      - : See [`calendar`](#calendar).\n    - `hc`\n      - : See [`hourCycle`](#hourcycle).\n\n    These keys can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n- `options` {{optional_inline}}\n\n  - : An object. For ease of reading, the property list is broken into sections based on their purposes, including [locale options](#locale_options), [date-time component options](#date-time_component_options), and [style shortcuts](#style_shortcuts).\n\n#### Locale options\n\n- `localeMatcher`\n  - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n- `calendar`\n  - : The calendar to use, such as `\"chinese\"`, `\"gregory\"`, `\"persian\"`, and so on. For a list of supported calendar types, see [`Intl.Locale.prototype.getCalendars()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars#supported_calendar_types). This option can also be set through the `ca` Unicode extension key; if both are provided, this `options` property takes precedence.\n- `numberingSystem`\n  - : The numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n- `hour12`\n  - : Whether to use 12-hour time (as opposed to 24-hour time). Possible values are `true` and `false`; the default is locale dependent. This option overrides the `hc` locale extension tag and/or the `hourCycle` option in case both are present. It sets `hourCycle` to `\"h11\"` or `\"h12\"` when `true`, and `\"h23\"` or `\"h24\"` when `false`, the exact choice depending on the locale — for example, if the locale most prefers `\"h23\"` but `hour12` is `true`, then the final hour cycle is `\"h11\"`.\n- `hourCycle`\n  - : The hour cycle to use. Possible values are `\"h11\"`, `\"h12\"`, `\"h23\"`, and `\"h24\"`. This option can also be set through the `hc` Unicode extension key; if both are provided, this `options` property takes precedence.\n- `timeZone`\n  - : The time zone to use. The only value implementations must recognize is `\"UTC\"`; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the [IANA time zone database](https://www.iana.org/time-zones), such as `\"Asia/Shanghai\"`, `\"Asia/Kolkata\"`, `\"America/New_York\"`.\n\n#### Date-time component options\n\n- `weekday`\n  - : The representation of the weekday. Possible values are:\n    - `\"long\"`\n      - : E.g., `Thursday`\n    - `\"short\"`\n      - : E.g., `Thu`\n    - `\"narrow\"`\n      - : E.g., `T`. Two weekdays may have the same narrow style for some locales (e.g. `Tuesday`'s narrow style is also `T`).\n- `era`\n  - : The representation of the era. Possible values are:\n    - `\"long\"`\n      - : E.g., `Anno Domini`\n    - `\"short\"`\n      - : E.g., `AD`\n    - `\"narrow\"`\n      - : E.g., `A`\n- `year`\n  - : The representation of the year. Possible values are `\"numeric\"` and `\"2-digit\"`.\n- `month`\n  - : The representation of the month. Possible values are:\n    - `\"numeric\"`\n      - : E.g., `3`\n    - `\"2-digit\"`\n      - : E.g., `03`\n    - `\"long\"`\n      - : E.g., `March`\n    - `\"short\"`\n      - : E.g., `Mar`\n    - `\"narrow\"`\n      - : E.g., `M`). Two months may have the same narrow style for some locales (e.g. `May`'s narrow style is also `M`).\n- `day`\n  - : The representation of the day. Possible values are `\"numeric\"` and `\"2-digit\"`.\n- `dayPeriod`\n\n  - : The formatting style used for day periods like \"in the morning\", \"am\", \"noon\", \"n\" etc. Possible values are\n    `\"narrow\"`, `\"short\"`, and `\"long\"`.\n\n    > **Note:** This option only has an effect if a 12-hour clock (`hourCycle: \"h12\"` or `hourCycle: \"h11\"`) is used. Many locales use the same string irrespective of the width specified.\n\n- `hour`\n  - : The representation of the hour. Possible values are `\"numeric\"` and `\"2-digit\"`.\n- `minute`\n  - : The representation of the minute. Possible values are `\"numeric\"` and `\"2-digit\"`.\n- `second`\n  - : The representation of the second. Possible values are `\"numeric\"` and `\"2-digit\"`.\n- `fractionalSecondDigits`\n  - : The number of digits used to represent fractions of a second (any additional digits are truncated). Possible values are from `1` to `3`.\n- `timeZoneName`\n\n  - : The localized representation of the time zone name. Possible values are:\n\n    - `\"long\"`\n      - : Long localized form (e.g., `Pacific Standard Time`, `Nordamerikanische Westküsten-Normalzeit`)\n    - `\"short\"`\n      - : Short localized form (e.g.: `PST`, `GMT-8`)\n    - `\"shortOffset\"`\n      - : Short localized GMT format (e.g., `GMT-8`)\n    - `\"longOffset\"`\n      - : Long localized GMT format (e.g., `GMT-08:00`)\n    - `\"shortGeneric\"`\n      - : Short generic non-location format (e.g.: `PT`, `Los Angeles Zeit`).\n    - `\"longGeneric\"`\n      - : Long generic non-location format (e.g.: `Pacific Time`, `Nordamerikanische Westküstenzeit`)\n\n    > **Note:** Timezone display may fall back to another format if a required string is unavailable. For example, the non-location formats should display the timezone without a specific country/city location like \"Pacific Time\", but may fall back to a timezone like \"Los Angeles Time\".\n\nThe default value for each date-time component option is {{jsxref(\"undefined\")}}, but if all component properties are {{jsxref(\"undefined\")}}, then `year`, `month`, and `day` default to `\"numeric\"`. If any of the date-time component options is specified, then `dateStyle` and `timeStyle` must be `undefined`.\n\n- `formatMatcher`\n\n  - : The format matching algorithm to use. Possible values are `\"basic\"` and `\"best fit\"`; the default is `\"best fit\"`. Implementations are required to support displaying at least the following subsets of date-time components:\n\n    - `weekday`, `year`, `month`, `day`, `hour`, `minute`, `second`\n    - `weekday`, `year`, `month`, `day`\n    - `year`, `month`, `day`\n    - `year`, `month`\n    - `month`, `day`\n    - `hour`, `minute`, `second`\n    - `hour`, `minute`\n\n    Implementations may support other subsets, and requests will be negotiated against all available subset-representation combinations to find the best match. The algorithm for `\"best fit\"` is implementation-defined, and `\"basic\"` is [defined by the spec](https://tc39.es/ecma402/#sec-basicformatmatcher). This option is only used when both `dateStyle` and `timeStyle` are `undefined` (so that each date-time component's format is individually customizable).\n\n#### Style shortcuts\n\n- `dateStyle`\n  - : The date formatting style to use when calling `format()`. Possible values are `\"full\"`, `\"long\"`, `\"medium\"`, and `\"short\"`.\n- `timeStyle`\n  - : The time formatting style to use when calling `format()`. Possible values are `\"full\"`, `\"long\"`, `\"medium\"`, and `\"short\"`.\n\n> **Note:** `dateStyle` and `timeStyle` can be used with each other, but not with other date-time component options (e.g. `weekday`, `hour`, `month`, etc.).\n\n### Return value\n\nA new `Intl.DateTimeFormat` object.\n\n> **Note:** The text below describes behavior that is marked by the specification as \"optional\". It may not work in all environments. Check the [browser compatibility table](#browser_compatibility).\n\nNormally, `Intl.DateTimeFormat()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new), and a new `Intl.DateTimeFormat` instance is returned in both cases. However, if the [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this) value is an object that is [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) `Intl.DateTimeFormat` (doesn't necessarily mean it's created via `new Intl.DateTimeFormat`; just that it has `Intl.DateTimeFormat.prototype` in its prototype chain), then the value of `this` is returned instead, with the newly created `Intl.DateTimeFormat` object hidden in a `[Symbol(IntlLegacyConstructedSymbol)]` property (a unique symbol that's reused between instances).\n\n```js\nconst formatter = Intl.DateTimeFormat.call(\n  { __proto__: Intl.DateTimeFormat.prototype },\n  \"en-US\",\n  { dateStyle: \"full\" },\n);\nconsole.log(Object.getOwnPropertyDescriptors(formatter));\n// {\n//   [Symbol(IntlLegacyConstructedSymbol)]: {\n//     value: DateTimeFormat [Intl.DateTimeFormat] {},\n//     writable: false,\n//     enumerable: false,\n//     configurable: false\n//   }\n// }\n```\n\nNote that there's only one actual `Intl.DateTimeFormat` instance here: the one hidden in `[Symbol(IntlLegacyConstructedSymbol)]`. Calling the [`format()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format) and [`resolvedOptions()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions) methods on `formatter` would correctly use the options stored in that instance, but calling all other methods (e.g. [`formatRange()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange)) would fail: \"TypeError: formatRange method called on incompatible Object\", because those methods don't consult the hidden instance's options.\n\nThis behavior, called `ChainDateTimeFormat`, does not happen when `Intl.DateTimeFormat()` is called without `new` but with `this` set to anything else that's not an `instanceof Intl.DateTimeFormat`. If you call it directly as `Intl.DateTimeFormat()`, the `this` value is [`Intl`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl), and a new `Intl.DateTimeFormat` instance is created normally.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `locales` or `options` contain invalid values.\n\n## Examples\n\n### Using DateTimeFormat\n\nIn basic use without specifying a locale, `DateTimeFormat` uses the default\nlocale and default options.\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// toLocaleString without arguments depends on the implementation,\n// the default locale, and the default time zone\nconsole.log(new Intl.DateTimeFormat().format(date));\n// \"12/19/2012\" if run with en-US locale (language) and time zone America/Los_Angeles (UTC-0800)\n```\n\n### Using timeStyle and dateStyle\n\n```js\nconst shortTime = new Intl.DateTimeFormat(\"en\", {\n  timeStyle: \"short\",\n});\nconsole.log(shortTime.format(Date.now())); // \"1:31 PM\"\n\nconst shortDate = new Intl.DateTimeFormat(\"en\", {\n  dateStyle: \"short\",\n});\nconsole.log(shortDate.format(Date.now())); // \"07/07/20\"\n\nconst mediumTime = new Intl.DateTimeFormat(\"en\", {\n  timeStyle: \"medium\",\n  dateStyle: \"short\",\n});\nconsole.log(mediumTime.format(Date.now())); // \"07/07/20, 1:31:55 PM\"\n```\n\n### Using dayPeriod\n\nUse the `dayPeriod` option to output a string for the times of day (\"in the morning\", \"at night\", \"noon\", etc.). Note, that this only works when formatting for a 12 hour clock (`hourCycle: 'h12'` or `hourCycle: 'h11'`) and that for many locales the strings are the same irrespective of the value passed for the `dayPeriod`.\n\n```js\nconst date = Date.UTC(2012, 11, 17, 4, 0, 42);\n\nconsole.log(\n  new Intl.DateTimeFormat(\"en-GB\", {\n    hour: \"numeric\",\n    hourCycle: \"h12\",\n    dayPeriod: \"short\",\n    timeZone: \"UTC\",\n  }).format(date),\n);\n// 4 at night\"  (same formatting in en-GB for all dayPeriod values)\n\nconsole.log(\n  new Intl.DateTimeFormat(\"fr\", {\n    hour: \"numeric\",\n    hourCycle: \"h12\",\n    dayPeriod: \"narrow\",\n    timeZone: \"UTC\",\n  }).format(date),\n);\n// \"4 mat.\"  (same output in French for both narrow/short dayPeriod)\n\nconsole.log(\n  new Intl.DateTimeFormat(\"fr\", {\n    hour: \"numeric\",\n    hourCycle: \"h12\",\n    dayPeriod: \"long\",\n    timeZone: \"UTC\",\n  }).format(date),\n);\n// \"4 du matin\"\n```\n\n### Using timeZoneName\n\nUse the `timeZoneName` option to output a string for the timezone (\"GMT\", \"Pacific Time\", etc.).\n\n```js\nconst date = Date.UTC(2021, 11, 17, 3, 0, 42);\nconst timezoneNames = [\n  \"short\",\n  \"long\",\n  \"shortOffset\",\n  \"longOffset\",\n  \"shortGeneric\",\n  \"longGeneric\",\n];\n\nfor (const zoneName of timezoneNames) {\n  // Do something with currentValue\n  const formatter = new Intl.DateTimeFormat(\"en-US\", {\n    timeZone: \"America/Los_Angeles\",\n    timeZoneName: zoneName,\n  });\n  console.log(`${zoneName}: ${formatter.format(date)}`);\n}\n\n// Logs:\n// short: 12/16/2021, PST\n// long: 12/16/2021, Pacific Standard Time\n// shortOffset: 12/16/2021, GMT-8\n// longOffset: 12/16/2021, GMT-08:00\n// shortGeneric: 12/16/2021, PT\n// longGeneric: 12/16/2021, Pacific Time\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n- {{jsxref(\"Intl.supportedValuesOf()\")}}\n- {{jsxref(\"Intl\")}}\n"
      },
      "format": {
        "index.md": "---\ntitle: Intl.DateTimeFormat.prototype.format()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.DateTimeFormat.format\n---\n\n{{JSRef}}\n\nThe **`format()`** method of {{jsxref(\"Intl.DateTimeFormat\")}} instances formats a date according to the locale and formatting options of this `Intl.DateTimeFormat` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-datetimeformat-prototype-format.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nformat(date)\n```\n\n### Parameters\n\n- `date`\n  - : The date to format.\n\n### Return value\n\nA string representing the given `date` formatted according to the locale and formatting options of this {{jsxref(\"Intl.DateTimeFormat\")}} object.\n\n## Examples\n\n### Using format\n\nUse the `format` getter function for formatting a single date, here for\nSerbia:\n\n```js\nconst options = {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n};\nconst dateTimeFormat = new Intl.DateTimeFormat(\"sr-RS\", options);\nconsole.log(dateTimeFormat.format(new Date()));\n// \"недеља, 7. април 2013.\"\n```\n\n### Using format with map\n\nUse the `format` getter function for formatting all dates in an array. Note\nthat the function is bound to the {{jsxref(\"Intl.DateTimeFormat\")}}\nfrom which it was obtained, so it can be passed directly to\n{{jsxref(\"Array.prototype.map()\")}}.\n\n```js\nconst a = [new Date(2012, 8), new Date(2012, 11), new Date(2012, 3)];\nconst options = { year: \"numeric\", month: \"long\" };\nconst dateTimeFormat = new Intl.DateTimeFormat(\"pt-BR\", options);\nconst formatted = a.map(dateTimeFormat.format);\nconsole.log(formatted.join(\"; \"));\n// \"setembro de 2012; dezembro de 2012; abril de 2012\"\n```\n\n### Avoid comparing formatted date values to static values\n\nMost of the time, the formatting returned by `format()` is consistent.\nHowever, this might change in the future and isn't guaranteed for all the languages —\noutput variations are by design and allowed by the specification. Most notably, the IE\nand Edge browsers insert bidirectional control characters around dates, so the output\ntext will flow properly when concatenated with other text.\n\nFor this reason you cannot expect to be able to compare the results of\n`format()` to a static value:\n\n```js example-bad\nlet d = new Date(\"2019-01-01T00:00:00.000000Z\");\nlet formattedDate = Intl.DateTimeFormat(undefined, {\n  year: \"numeric\",\n  month: \"numeric\",\n  day: \"numeric\",\n  hour: \"numeric\",\n  minute: \"numeric\",\n  second: \"numeric\",\n}).format(d);\n\n\"1.1.2019, 01:00:00\" === formattedDate;\n// true in Firefox and others\n// false in IE and Edge\n```\n\n> **Note:** See also this [StackOverflow thread](https://stackoverflow.com/questions/25574963/ies-tolocalestring-has-strange-characters-in-results)\n> for more details and examples.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n- {{jsxref(\"Date.prototype.toLocaleString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleDateString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleTimeString()\")}}\n"
      },
      "formatrange": {
        "index.md": "---\ntitle: Intl.DateTimeFormat.prototype.formatRange()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRange\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.DateTimeFormat.formatRange\n---\n\n{{JSRef}}\n\nThe **`formatRange()`** method of {{jsxref(\"Intl.DateTimeFormat\")}} instances formats a\ndate range in the most concise way based on the locales and\noptions provided when instantiating this\n`Intl.DateTimeFormat` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-datetimeformat-prototype-formatrange.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nformatRange(startDate, endDate)\n```\n\n### Parameters\n\n- `startDate`\n  - : A {{jsxref(\"Date\")}} object representing the start of the date range.\n- `endDate`\n  - : A {{jsxref(\"Date\")}} object representing the end of the date range.\n\n### Return value\n\nA string representing the given date range formatted according to the locale and formatting options of this {{jsxref(\"Intl.DateTimeFormat\")}} object.\n\n## Examples\n\n### Basic formatRange usage\n\nThis method receives two {{jsxref(\"Date\")}}s and formats the date range in the most\nconcise way based on the `locale` and `options` provided when\ninstantiating {{jsxref(\"Intl.DateTimeFormat\")}}.\n\n```js\nconst date1 = new Date(Date.UTC(1906, 0, 10, 10, 0, 0)); // Wed, 10 Jan 1906 10:00:00 GMT\nconst date2 = new Date(Date.UTC(1906, 0, 10, 11, 0, 0)); // Wed, 10 Jan 1906 11:00:00 GMT\nconst date3 = new Date(Date.UTC(1906, 0, 20, 10, 0, 0)); // Sat, 20 Jan 1906 10:00:00 GMT\n\nconst fmt1 = new Intl.DateTimeFormat(\"en\", {\n  year: \"2-digit\",\n  month: \"numeric\",\n  day: \"numeric\",\n  hour: \"numeric\",\n  minute: \"numeric\",\n});\nconsole.log(fmt1.format(date1)); // '1/10/06, 10:00 AM'\nconsole.log(fmt1.formatRange(date1, date2)); // '1/10/06, 10:00 – 11:00 AM'\nconsole.log(fmt1.formatRange(date1, date3)); // '1/10/06, 10:00 AM – 1/20/07, 10:00 AM'\n\nconst fmt2 = new Intl.DateTimeFormat(\"en\", {\n  year: \"numeric\",\n  month: \"short\",\n  day: \"numeric\",\n});\nconsole.log(fmt2.format(date1)); // 'Jan 10, 1906'\nconsole.log(fmt2.formatRange(date1, date2)); // 'Jan 10, 1906'\nconsole.log(fmt2.formatRange(date1, date3)); // 'Jan 10 – 20, 1906'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n"
      },
      "formatrangetoparts": {
        "index.md": "---\ntitle: Intl.DateTimeFormat.prototype.formatRangeToParts()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatRangeToParts\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.DateTimeFormat.formatRangeToParts\n---\n\n{{JSRef}}\n\nThe **`formatRangeToParts()`** method of {{jsxref(\"Intl.DateTimeFormat\")}} instances returns an array of locale-specific tokens representing each part of the formatted date\nrange produced by this `Intl.DateTimeFormat` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-datetimeformat-prototype-formatrangetoparts.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nformatRangeToParts(startDate, endDate)\n```\n\n## Examples\n\n### Basic formatRangeToParts usage\n\nThis method receives two {{jsxref(\"Date\")}}s and returns an {{jsxref(\"Array\")}} of\nobjects containing the _locale-specific_ tokens representing each part of the formatted date range.\n\n> **Note:** The return values shown in your locale may differ from those listed below.\n\n```js\nconst date1 = new Date(Date.UTC(1906, 0, 10, 10, 0, 0)); // Wed, 10 Jan 1906 10:00:00 GMT\nconst date2 = new Date(Date.UTC(1906, 0, 10, 11, 0, 0)); // Wed, 10 Jan 1906 11:00:00 GMT\n\nconst fmt = new Intl.DateTimeFormat(\"en\", {\n  hour: \"numeric\",\n  minute: \"numeric\",\n});\n\nconsole.log(fmt.formatRange(date1, date2)); // '10:00 – 11:00 AM'\n\nfmt.formatRangeToParts(date1, date2);\n// [\n//   { type: 'hour',      value: '10',  source: \"startRange\" },\n//   { type: 'literal',   value: ':',   source: \"startRange\" },\n//   { type: 'minute',    value: '00',  source: \"startRange\" },\n//   { type: 'literal',   value: ' – ', source: \"shared\"     },\n//   { type: 'hour',      value: '11',  source: \"endRange\"   },\n//   { type: 'literal',   value: ':',   source: \"endRange\"   },\n//   { type: 'minute',    value: '00',  source: \"endRange\"   },\n//   { type: 'literal',   value: ' ',   source: \"shared\"     },\n//   { type: 'dayPeriod', value: 'AM',  source: \"shared\"     }\n// ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl/DateTimeFormat/formatRange\", \"Intl.DateTimeFormat.prototype.formatRange()\")}}\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n"
      },
      "formattoparts": {
        "index.md": "---\ntitle: Intl.DateTimeFormat.prototype.formatToParts()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.DateTimeFormat.formatToParts\n---\n\n{{JSRef}}\n\nThe **`formatToParts()`** method of {{jsxref(\"Intl.DateTimeFormat\")}} instances allows locale-aware formatting of strings produced by this `Intl.DateTimeFormat` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-datetimeformat-prototype-formattoparts.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nformatToParts(date)\n```\n\n### Parameters\n\n- `date` {{optional_inline}}\n  - : The date to format.\n\n### Return value\n\nAn {{jsxref(\"Array\")}} of objects containing the formatted date in parts.\n\n## Description\n\nThe `formatToParts()` method is useful for custom formatting of date\nstrings. It returns an {{jsxref(\"Array\")}} of objects containing the locale-specific\ntokens from which it possible to build custom strings while preserving the\nlocale-specific parts. The structure the `formatToParts()` method returns,\nlooks like this:\n\n```js\n[\n  { type: \"day\", value: \"17\" },\n  { type: \"weekday\", value: \"Monday\" },\n];\n```\n\nPossible types are the following:\n\n- `day`\n  - : The string used for the day, for example `\"17\"`.\n- `dayPeriod`\n  - : The string used for the day period, for example, `\"AM\"`,\n    `\"PM\"`, `\"in the morning\"`, or `\"noon\"`\n- `era`\n  - : The string used for the era, for example `\"BC\"` or `\"AD\"`.\n- `fractionalSecond`\n  - : The string used for the fractional seconds, for example `\"0\"` or `\"00\"` or `\"000\"`.\n- `hour`\n  - : The string used for the hour, for example `\"3\"` or `\"03\"`.\n- `literal`\n  - : The string used for separating date and time values, for example `\"/\"`,\n    `\",\"`, `\"o'clock\"`, `\"de\"`, etc.\n- `minute`\n  - : The string used for the minute, for example `\"00\"`.\n- `month`\n  - : The string used for the month, for example `\"12\"`.\n- `relatedYear`\n  - : The string used for the related 4-digit Gregorian year, in the event that the\n    calendar's representation would be a yearName instead of a year, for example `\"2019\"`.\n- `second`\n  - : The string used for the second, for example `\"07\"` or `\"42\"`.\n- `timeZone`\n  - : The string used for the name of the time zone, for example `\"UTC\"`. Default is the timezone of the current environment.\n- `weekday`\n  - : The string used for the weekday, for example `\"M\"`, `\"Monday\"`, or `\"Montag\"`.\n- `year`\n  - : The string used for the year, for example `\"2012\"` or `\"96\"`.\n- `yearName`\n  - : The string used for the yearName in relevant contexts, for example `\"geng-zi\"`\n\n## Examples\n\n`DateTimeFormat` outputs localized, opaque strings that cannot be\nmanipulated directly:\n\n```js\nconst date = Date.UTC(2012, 11, 17, 3, 0, 42);\n\nconst formatter = new Intl.DateTimeFormat(\"en-us\", {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"numeric\",\n  day: \"numeric\",\n  hour: \"numeric\",\n  minute: \"numeric\",\n  second: \"numeric\",\n  fractionalSecondDigits: 3,\n  hour12: true,\n  timeZone: \"UTC\",\n});\n\nformatter.format(date);\n// \"Monday, 12/17/2012, 3:00:42.000 AM\"\n```\n\nHowever, in many User Interfaces there is a desire to customize the formatting of this\nstring. The `formatToParts` method enables locale-aware formatting of strings\nproduced by `DateTimeFormat` formatters by providing you the string in parts:\n\n```js\nformatter.formatToParts(date);\n\n// return value:\n[\n  { type: \"weekday\", value: \"Monday\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"month\", value: \"12\" },\n  { type: \"literal\", value: \"/\" },\n  { type: \"day\", value: \"17\" },\n  { type: \"literal\", value: \"/\" },\n  { type: \"year\", value: \"2012\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"hour\", value: \"3\" },\n  { type: \"literal\", value: \":\" },\n  { type: \"minute\", value: \"00\" },\n  { type: \"literal\", value: \":\" },\n  { type: \"second\", value: \"42\" },\n  { type: \"fractionalSecond\", value: \"000\" },\n  { type: \"literal\", value: \" \" },\n  { type: \"dayPeriod\", value: \"AM\" },\n];\n```\n\nNow the information is available separately and it can be formatted and concatenated\nagain in a customized way. For example by using {{jsxref(\"Array.prototype.map()\")}},\n[arrow functions](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions),\na [switch statement](/en-US/docs/Web/JavaScript/Reference/Statements/switch),\n[template literals](/en-US/docs/Web/JavaScript/Reference/Template_literals),\nand {{jsxref(\"Array.prototype.join()\")}}.\n\n```js\nconst dateString = formatter\n  .formatToParts(date)\n  .map(({ type, value }) => {\n    switch (type) {\n      case \"dayPeriod\":\n        return `<em>${value}</em>`;\n      default:\n        return value;\n    }\n  })\n  .join(\"\");\n```\n\nThis will emphasize the day period when using the `formatToParts()` method.\n\n```js\nconsole.log(formatter.format(date));\n// \"Monday, 12/17/2012, 3:00:42.000 AM\"\n\nconsole.log(dateString);\n// \"Monday, 12/17/2012, 3:00:42.000 <em>AM</em>\"\n```\n\n### Named Years and Mixed calendars\n\nIn some cases, calendars use named years. Chinese and Tibetan calendars, for example,\nuse a 60-year [sexagenary cycle](https://en.wikipedia.org/wiki/Sexagenary_cycle) of named years.\nThese years are disambiguated by relationship to\ncorresponding years on the Gregorian calendar. When this is the case, the result of\n`formatToParts()` will contain an entry for `relatedYear` when a\nyear would normally be present, containing the 4-digit Gregorian year, instead of an\nentry for `year`. Setting an entry in the bag for `year` (with any\nvalue) will yield both the and the `yearName` Gregorian\n`relatedYear`:\n\n```js\nconst opts = { year: \"numeric\", month: \"numeric\", day: \"numeric\" };\nconst df = new Intl.DateTimeFormat(\"zh-u-ca-chinese\", opts);\ndf.formatToParts(Date.UTC(2012, 11, 17, 3, 0, 42));\n\n// return value\n[\n  { type: \"relatedYear\", value: \"2012\" },\n  { type: \"literal\", value: \"年\" },\n  { type: \"month\", value: \"十一月\" },\n  { type: \"day\", value: \"4\" },\n];\n```\n\nIf the `year` option is not set in the bag (to any value), the result will\ninclude only the `relatedYear`:\n\n```js\nconst df = new Intl.DateTimeFormat(\"zh-u-ca-chinese\");\ndf.formatToParts(Date.UTC(2012, 11, 17, 3, 0, 42));\n\n// return value\n[\n  { type: \"relatedYear\", value: \"2012\" },\n  { type: \"literal\", value: \"年\" },\n  { type: \"month\", value: \"十一月\" },\n  { type: \"day\", value: \"4\" },\n];\n```\n\nIn cases where the `year` would be output, `.format()` may\ncommonly present these side-by-side:\n\n```js\nconst df = new Intl.DateTimeFormat(\"zh-u-ca-chinese\", { year: \"numeric\" });\ndf.format(Date.UTC(2012, 11, 17, 3, 0, 42)); // 2012壬辰年\n```\n\nThis also makes it possible to mix locale and calendar in both `format`:\n\n```js\nconst df = new Intl.DateTimeFormat(\"en-u-ca-chinese\", { year: \"numeric\" });\nconst date = Date.UTC(2012, 11, 17, 3, 0, 42);\ndf.format(date); // 2012(ren-chen)\n```\n\nAnd `formatToParts`:\n\n```js\nconst opts = { month: \"numeric\", day: \"numeric\", year: \"numeric\" };\nconst df = new Intl.DateTimeFormat(\"en-u-ca-chinese\", opts);\nconst date = Date.UTC(2012, 11, 17, 3);\ndf.formatToParts(date);\n// [\n//   { type: 'month', value: '11' },\n//   { type: 'literal', value: '/' },\n//   { type: 'day', value: '4' },\n//   { type: 'literal', value: '/' },\n//   { type: 'relatedYear', value: '2012' }\n// ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n- {{jsxref(\"Intl/DateTimeFormat/format\", \"Intl.DateTimeFormat.prototype.format()\")}}\n- {{jsxref(\"Date.prototype.toLocaleString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleDateString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleTimeString()\")}}\n"
      },
      "index.md": "---\ntitle: Intl.DateTimeFormat\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Intl.DateTimeFormat\n---\n\n{{JSRef}}\n\nThe **`Intl.DateTimeFormat`** object enables language-sensitive date and time formatting.\n\n{{EmbedInteractiveExample(\"pages/js/intl-datetimeformat.html\", \"taller\")}}\n\n## Constructor\n\n- {{jsxref(\"Intl/DateTimeFormat/DateTimeFormat\", \"Intl.DateTimeFormat()\")}}\n  - : Creates a new `Intl.DateTimeFormat` object.\n\n## Static methods\n\n- {{jsxref(\"Intl/DateTimeFormat/supportedLocalesOf\", \"Intl.DateTimeFormat.supportedLocalesOf()\")}}\n  - : Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## Instance properties\n\nThese properties are defined on `Intl.DateTimeFormat.prototype` and shared by all `Intl.DateTimeFormat` instances.\n\n- {{jsxref(\"Object/constructor\", \"Intl.DateTimeFormat.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Intl.DateTimeFormat` instances, the initial value is the {{jsxref(\"Intl/DateTimeFormat/DateTimeFormat\", \"Intl.DateTimeFormat\")}} constructor.\n- `Intl.DateTimeFormat.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.DateTimeFormat\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Intl/DateTimeFormat/format\", \"Intl.DateTimeFormat.prototype.format()\")}}\n  - : Getter function that formats a date according to the locale and formatting options of this `DateTimeFormat` object.\n- {{jsxref(\"Intl/DateTimeFormat/formatRange\", \"Intl.DateTimeFormat.prototype.formatRange()\")}}\n  - : This method receives two [Dates](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) and formats the date range in the most concise way based on the locale and options provided when instantiating `DateTimeFormat`.\n- {{jsxref(\"Intl/DateTimeFormat/formatRangeToParts\", \"Intl.DateTimeFormat.prototype.formatRangeToParts()\")}}\n  - : This method receives two [Dates](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) and returns an Array of objects containing the locale-specific tokens representing each part of the formatted date range.\n- {{jsxref(\"Intl/DateTimeFormat/formatToParts\", \"Intl.DateTimeFormat.prototype.formatToParts()\")}}\n  - : Returns an {{jsxref(\"Array\")}} of objects representing the date string in parts that can be used for custom locale-aware formatting.\n- {{jsxref(\"Intl/DateTimeFormat/resolvedOptions\", \"Intl.DateTimeFormat.prototype.resolvedOptions()\")}}\n  - : Returns a new object with properties reflecting the locale and formatting options computed during initialization of the object.\n\n## Examples\n\n### Using DateTimeFormat\n\nIn basic use without specifying a locale, `DateTimeFormat` uses the default locale and default options.\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// toLocaleString without arguments depends on the implementation,\n// the default locale, and the default time zone\nconsole.log(new Intl.DateTimeFormat().format(date));\n// \"12/19/2012\" if run with en-US locale (language) and time zone America/Los_Angeles (UTC-0800)\n```\n\n### Using locales\n\nThis example shows some of the variations in localized date and time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n\n// Results below use the time zone of America/Los_Angeles (UTC-0800, Pacific Standard Time)\n\n// US English uses month-day-year order\nconsole.log(new Intl.DateTimeFormat(\"en-US\").format(date));\n// \"12/19/2012\"\n\n// British English uses day-month-year order\nconsole.log(new Intl.DateTimeFormat(\"en-GB\").format(date));\n// \"19/12/2012\"\n\n// Korean uses year-month-day order\nconsole.log(new Intl.DateTimeFormat(\"ko-KR\").format(date));\n// \"2012. 12. 19.\"\n\n// Arabic in most Arabic speaking countries uses real Arabic digits\nconsole.log(new Intl.DateTimeFormat(\"ar-EG\").format(date));\n// \"١٩‏/١٢‏/٢٠١٢\"\n\n// for Japanese, applications may want to use the Japanese calendar,\n// where 2012 was the year 24 of the Heisei era\nconsole.log(new Intl.DateTimeFormat(\"ja-JP-u-ca-japanese\").format(date));\n// \"24/12/19\"\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(new Intl.DateTimeFormat([\"ban\", \"id\"]).format(date));\n// \"19/12/2012\"\n```\n\n### Using options\n\nThe date and time formats can be customized using the `options` argument:\n\n```js\nconst date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0, 200));\n\n// request a weekday along with a long date\nlet options = {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\",\n};\nconsole.log(new Intl.DateTimeFormat(\"de-DE\", options).format(date));\n// \"Donnerstag, 20. Dezember 2012\"\n\n// an application may want to use UTC and make that visible\noptions.timeZone = \"UTC\";\noptions.timeZoneName = \"short\";\nconsole.log(new Intl.DateTimeFormat(\"en-US\", options).format(date));\n// \"Thursday, December 20, 2012, GMT\"\n\n// sometimes you want to be more precise\noptions = {\n  hour: \"numeric\",\n  minute: \"numeric\",\n  second: \"numeric\",\n  timeZone: \"Australia/Sydney\",\n  timeZoneName: \"short\",\n};\nconsole.log(new Intl.DateTimeFormat(\"en-AU\", options).format(date));\n// \"2:00:00 pm AEDT\"\n\n// sometimes you want to be very precise\noptions.fractionalSecondDigits = 3; //number digits for fraction-of-seconds\nconsole.log(new Intl.DateTimeFormat(\"en-AU\", options).format(date));\n// \"2:00:00.200 pm AEDT\"\n\n// sometimes even the US needs 24-hour time\noptions = {\n  year: \"numeric\",\n  month: \"numeric\",\n  day: \"numeric\",\n  hour: \"numeric\",\n  minute: \"numeric\",\n  second: \"numeric\",\n  hour12: false,\n  timeZone: \"America/Los_Angeles\",\n};\nconsole.log(new Intl.DateTimeFormat(\"en-US\", options).format(date));\n// \"12/19/2012, 19:00:00\"\n\n// to specify options but use the browser's default locale, use undefined\nconsole.log(new Intl.DateTimeFormat(undefined, options).format(date));\n// \"12/19/2012, 19:00:00\"\n\n// sometimes it's helpful to include the period of the day\noptions = { hour: \"numeric\", dayPeriod: \"short\" };\nconsole.log(new Intl.DateTimeFormat(\"en-US\", options).format(date));\n// 10 at night\n```\n\nThe used calendar and numbering formats can also be set independently via `options` arguments:\n\n```js\nconst options = { calendar: \"chinese\", numberingSystem: \"arab\" };\nconst dateFormat = new Intl.DateTimeFormat(undefined, options);\nconst usedOptions = dateFormat.resolvedOptions();\n\nconsole.log(usedOptions.calendar);\n// \"chinese\"\n\nconsole.log(usedOptions.numberingSystem);\n// \"arab\"\n\nconsole.log(usedOptions.timeZone);\n// \"America/New_York\" (the users default timezone)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Intl.DateTimeFormat` in FormatJS](https://formatjs.io/docs/polyfills/intl-datetimeformat/)\n- {{jsxref(\"Intl\")}}\n",
      "resolvedoptions": {
        "index.md": "---\ntitle: Intl.DateTimeFormat.prototype.resolvedOptions()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.DateTimeFormat.resolvedOptions\n---\n\n{{JSRef}}\n\nThe **`resolvedOptions()`** method of {{jsxref(\"Intl.DateTimeFormat\")}} instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this `Intl.DateTimeFormat` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-datetimeformat-prototype-resolvedoptions.html\")}}\n\n## Syntax\n\n```js-nolint\nresolvedOptions()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new object with properties reflecting the locale and date and time formatting options\ncomputed during the initialization of the given {{jsxref(\"Intl.DateTimeFormat\")}} object.\n\n## Description\n\nThe resulting object has the following properties:\n\n- `locale`\n  - : The BCP 47 language tag for the locale actually used. If any Unicode extension\n    values were requested in the input BCP 47 language tag that led to this locale,\n    the key-value pairs that were requested and are supported for this locale are\n    included in `locale`.\n- `calendar`\n  - : E.g. \"gregory\"\n- `numberingSystem`\n  - : The values requested using the Unicode extension keys `\"ca\"` and\n    `\"nu\"` or filled in as default values.\n- `timeZone`\n  - : The value provided for this property in the `options` argument;\n    defaults to the runtime's default time zone. Should never be `undefined`.\n- `hour12`\n  - : The value provided for this property in the `options` argument or\n    filled in as a default.\n- `weekday`, `era`, `year`, `month`, `day`, `hour`, `minute`, `second`, `timeZoneName`\n  - : The values resulting from format matching between the corresponding properties in\n    the `options` argument and the available combinations and\n    representations for date-time formatting in the selected locale. Some of these\n    properties may not be present, indicating that the corresponding components will\n    not be represented in formatted output.\n\n## Examples\n\n### Using the resolvedOptions method\n\n```js\nconst germanFakeRegion = new Intl.DateTimeFormat(\"de-XX\", { timeZone: \"UTC\" });\nconst usedOptions = germanFakeRegion.resolvedOptions();\n\nusedOptions.locale; // \"de\"\nusedOptions.calendar; // \"gregory\"\nusedOptions.numberingSystem; // \"latn\"\nusedOptions.timeZone; // \"UTC\"\nusedOptions.month; // \"numeric\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n"
      },
      "supportedlocalesof": {
        "index.md": "---\ntitle: Intl.DateTimeFormat.supportedLocalesOf()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/supportedLocalesOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Intl.DateTimeFormat.supportedLocalesOf\n---\n\n{{JSRef}}\n\nThe **`Intl.DateTimeFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.\n\n{{EmbedInteractiveExample(\"pages/js/intl-datetimeformat-supportedlocalesof.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nIntl.DateTimeFormat.supportedLocalesOf(locales)\nIntl.DateTimeFormat.supportedLocalesOf(locales, options)\n```\n\n### Parameters\n\n- `locales`\n  - : A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object that may have the following property:\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the {{jsxref(\"Intl\", \"Intl\", \"#locale_identification_and_negotiation\", 1)}} page.\n\n### Return value\n\nAn array of strings representing a subset of the given locale tags that are supported in date and time formatting without having to fall back to the runtime's default locale.\n\n## Examples\n\n### Using supportedLocalesOf()\n\nAssuming a runtime that supports Indonesian and German but not Balinese in date and time formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to date and time formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```js\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.DateTimeFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n"
      }
    },
    "displaynames": {
      "displaynames": {
        "index.md": "---\ntitle: Intl.DisplayNames() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/DisplayNames\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Intl.DisplayNames.DisplayNames\n---\n\n{{JSRef}}\n\nThe **`Intl.DisplayNames()`** constructor creates {{jsxref(\"Intl.DisplayNames\")}} objects.\n\n{{EmbedInteractiveExample(\"pages/js/intl-displaynames.html\")}}\n\n## Syntax\n\n```js-nolint\nnew Intl.DisplayNames(locales, options)\n```\n\n> **Note:** `Intl.DisplayNames()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `locales`\n  - : A string with a BCP 47 language tag or an {{jsxref(\"Intl.Locale\")}} instance, or an array of such locale identifiers. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options`\n  - : An object containing the following properties, in the order they are retrieved:\n    - `localeMatcher` {{optional_inline}}\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n    - `style` {{optional_inline}}\n      - : The formatting style to use. Possible values are `\"narrow\"`, `\"short\"`, and `\"long\"`; the default is `\"long\"`.\n    - `type`\n      - : The type of display names to return from [`of()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of). Possible values are `\"language\"`, `\"region\"`, `\"script\"`, `\"currency\"`, `\"calendar\"`, and `\"dateTimeField\"`.\n    - `fallback` {{optional_inline}}\n      - : What to return from `of()` if the input is structurally valid but there's no matching display name. Possible values are:\n        - `\"code\"` (default)\n          - : Return the input code itself.\n        - `\"none\"`\n          - : Return `undefined`.\n    - `languageDisplay` {{optional_inline}}\n      - : How language names should be displayed. Only usable along with `type: \"language\"`. Possible values are:\n        - `\"dialect\"` (default)\n          - : Display special regional dialects using their own name. E.g. `\"nl-BE\"` will be displayed as `\"Flemish\"`.\n        - `\"standard\"`\n          - : Display all languages using standard format. E.g. `\"nl-BE\"` will be displayed as `\"Dutch (Belgium)\"`.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `options.type` is not provided.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `locales` or `options` contain invalid values.\n\n## Examples\n\n### Basic usage\n\nIn basic use without specifying a locale, a formatted string in the default locale and\nwith default options is returned.\n\n```js\nconsole.log(new Intl.DisplayNames([], { type: \"language\" }).of(\"US\"));\n// 'us'\n```\n\n### Using type `dateTimeField`\n\nExample using `dateTimeField` as a type option, will return the localized date time names strings.\n\n```js\nconst dn = new Intl.DisplayNames(\"pt\", { type: \"dateTimeField\" });\nconsole.log(dn.of(\"era\")); // 'era'\nconsole.log(dn.of(\"year\")); // 'ano'\nconsole.log(dn.of(\"month\")); // 'mês'\nconsole.log(dn.of(\"quarter\")); // 'trimestre'\nconsole.log(dn.of(\"weekOfYear\")); // 'semana'\nconsole.log(dn.of(\"weekday\")); // 'dia da semana'\nconsole.log(dn.of(\"dayPeriod\")); // 'AM/PM'\nconsole.log(dn.of(\"day\")); // 'dia'\nconsole.log(dn.of(\"hour\")); // 'hora'\nconsole.log(dn.of(\"minute\")); // 'minuto'\nconsole.log(dn.of(\"second\")); // 'segundo'\n```\n\n### Using type `calendar`\n\nExample using `calendar` as a type option, will return the localized calendar names strings.\n\n```js\nconst dn = new Intl.DisplayNames(\"en\", { type: \"calendar\" });\nconsole.log(dn.of(\"roc\")); // 'Minguo Calendar'\nconsole.log(dn.of(\"gregory\")); // 'Gregorian Calendar'\nconsole.log(dn.of(\"chinese\")); // 'Chinese Calendar'\n```\n\n### Using type `language` with `languageDisplay`\n\nExample using `language` as a type with `languageDisplay` options.\n\n```js\n// Using `dialect` option\nconst dnDialect = new Intl.DisplayNames(\"en\", {\n  type: \"language\",\n  languageDisplay: \"dialect\",\n});\nconsole.log(dnDialect.of(\"en-GB\")); // 'British English'\n\n// Using `standard` option\nconst dnStd = new Intl.DisplayNames(\"en\", {\n  type: \"language\",\n  languageDisplay: \"standard\",\n});\nconsole.log(dnStd.of(\"en-GB\")); // 'English (United Kingdom)'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DisplayNames\")}}\n- {{jsxref(\"Intl.supportedValuesOf()\")}}\n- {{jsxref(\"Intl\")}}\n"
      },
      "index.md": "---\ntitle: Intl.DisplayNames\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Intl.DisplayNames\n---\n\n{{JSRef}}\n\nThe **`Intl.DisplayNames`** object enables the consistent translation of language, region and script display names.\n\n{{EmbedInteractiveExample(\"pages/js/intl-displaynames.html\")}}\n\n## Constructor\n\n- {{jsxref(\"Intl/DisplayNames/DisplayNames\", \"Intl.DisplayNames()\")}}\n  - : Creates a new `Intl.DisplayNames` object.\n\n## Static methods\n\n- {{jsxref(\"Intl/DisplayNames/supportedLocalesOf\", \"Intl.DisplayNames.supportedLocalesOf()\")}}\n  - : Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## Instance properties\n\nThese properties are defined on `Intl.DisplayNames.prototype` and shared by all `Intl.DisplayNames` instances.\n\n- {{jsxref(\"Object/constructor\", \"Intl.DisplayNames.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Intl.DisplayNames` instances, the initial value is the {{jsxref(\"Intl/DisplayNames/DisplayNames\", \"Intl.DisplayNames\")}} constructor.\n- `Intl.DisplayNames.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.DisplayNames\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Intl/DisplayNames/of\", \"Intl.DisplayNames.prototype.of()\")}}\n  - : This method receives a `code` and returns a string based on the locale and options provided when instantiating `Intl.DisplayNames`.\n- {{jsxref(\"Intl/DisplayNames/resolvedOptions\", \"Intl.DisplayNames.prototype.resolvedOptions()\")}}\n  - : Returns a new object with properties reflecting the locale and formatting options computed during initialization of the object.\n\n## Examples\n\n### Region Code Display Names\n\nTo create an `Intl.DisplayNames` for a locale and get the display name for a region code.\n\n```js\n// Get display names of region in English\nlet regionNames = new Intl.DisplayNames([\"en\"], { type: \"region\" });\nregionNames.of(\"419\"); // \"Latin America\"\nregionNames.of(\"BZ\"); // \"Belize\"\nregionNames.of(\"US\"); // \"United States\"\nregionNames.of(\"BA\"); // \"Bosnia & Herzegovina\"\nregionNames.of(\"MM\"); // \"Myanmar (Burma)\"\n\n// Get display names of region in Traditional Chinese\nregionNames = new Intl.DisplayNames([\"zh-Hant\"], { type: \"region\" });\nregionNames.of(\"419\"); // \"拉丁美洲\"\nregionNames.of(\"BZ\"); // \"貝里斯\"\nregionNames.of(\"US\"); // \"美國\"\nregionNames.of(\"BA\"); // \"波士尼亞與赫塞哥維納\"\nregionNames.of(\"MM\"); // \"緬甸\"\n```\n\n### Language Display Names\n\nTo create an `Intl.DisplayNames` for a locale and get the display name for a language-script-region sequence.\n\n```js\n// Get display names of language in English\nlet languageNames = new Intl.DisplayNames([\"en\"], { type: \"language\" });\nlanguageNames.of(\"fr\"); // \"French\"\nlanguageNames.of(\"de\"); // \"German\"\nlanguageNames.of(\"fr-CA\"); // \"Canadian French\"\nlanguageNames.of(\"zh-Hant\"); // \"Traditional Chinese\"\nlanguageNames.of(\"en-US\"); // \"American English\"\nlanguageNames.of(\"zh-TW\"); // \"Chinese (Taiwan)\"]\n\n// Get display names of language in Traditional Chinese\nlanguageNames = new Intl.DisplayNames([\"zh-Hant\"], { type: \"language\" });\nlanguageNames.of(\"fr\"); // \"法文\"\nlanguageNames.of(\"zh\"); // \"中文\"\nlanguageNames.of(\"de\"); // \"德文\"\n```\n\n### Script Code Display Names\n\nTo create an `Intl.DisplayNames` for a locale and get the display name for a script code.\n\n```js\n// Get display names of script in English\nlet scriptNames = new Intl.DisplayNames([\"en\"], { type: \"script\" });\n// Get script names\nscriptNames.of(\"Latn\"); // \"Latin\"\nscriptNames.of(\"Arab\"); // \"Arabic\"\nscriptNames.of(\"Kana\"); // \"Katakana\"\n\n// Get display names of script in Traditional Chinese\nscriptNames = new Intl.DisplayNames([\"zh-Hant\"], { type: \"script\" });\nscriptNames.of(\"Latn\"); // \"拉丁文\"\nscriptNames.of(\"Arab\"); // \"阿拉伯文\"\nscriptNames.of(\"Kana\"); // \"片假名\"\n```\n\n### Currency Code Display Names\n\nTo create an `Intl.DisplayNames` for a locale and get the display name for currency code.\n\n```js\n// Get display names of currency code in English\nlet currencyNames = new Intl.DisplayNames([\"en\"], { type: \"currency\" });\n// Get currency names\ncurrencyNames.of(\"USD\"); // \"US Dollar\"\ncurrencyNames.of(\"EUR\"); // \"Euro\"\ncurrencyNames.of(\"TWD\"); // \"New Taiwan Dollar\"\ncurrencyNames.of(\"CNY\"); // \"Chinese Yuan\"\n\n// Get display names of currency code in Traditional Chinese\ncurrencyNames = new Intl.DisplayNames([\"zh-Hant\"], { type: \"currency\" });\ncurrencyNames.of(\"USD\"); // \"美元\"\ncurrencyNames.of(\"EUR\"); // \"歐元\"\ncurrencyNames.of(\"TWD\"); // \"新台幣\"\ncurrencyNames.of(\"CNY\"); // \"人民幣\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl\")}}\n",
      "of": {
        "index.md": "---\ntitle: Intl.DisplayNames.prototype.of()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.DisplayNames.of\n---\n\n{{JSRef}}\n\nThe **`of()`** method of {{jsxref(\"Intl.DisplayNames\")}} instances receives a code and returns a string based on the locale and options provided when instantiating this `Intl.DisplayNames` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-displaynames.html\")}}\n\n## Syntax\n\n```js-nolint\nof(code)\n```\n\n### Parameters\n\n- `code`\n\n  - : The `code` to provide depends on the `type`:\n\n    - If the type is \"region\", `code` should be either an [two-letter ISO 3166 region code](https://www.iso.org/iso-3166-country-codes.html), or a [three-digit UN M49 geographic region](https://unstats.un.org/unsd/methodology/m49/). It is required to follow the [`unicode_region_subtag`](https://unicode.org/reports/tr35/#unicode_region_subtag) grammar.\n    - If the type is \"script\", `code` should be an [four-letter ISO 15924 script code](https://unicode.org/iso15924/iso15924-codes.html). It is required to follow the [`unicode_script_subtag`](https://unicode.org/reports/tr35/#unicode_script_subtag) grammar.\n    - If the type is \"language\", `code` should be a _languageCode_ \\[\"-\" _scriptCode_] \\[\"-\" _regionCode_ ] \\*(\"-\" _variant_ ) subsequence of the [`unicode_language_id`](https://unicode.org/reports/tr35/#Unicode_language_identifier) grammar. _languageCode_ is either a two-letter ISO 639-1 language code or a three-letter ISO 639-2 language code.\n    - If the type is \"currency\", `code` should be a [three-letter ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html). It is required to have exactly three alphabetic characters.\n    - If the type is \"dateTimeField\", `code` should be one of: `\"era\"`, `\"year\"`, `\"quarter\"`, `\"month\"`, `\"weekOfYear\"`, `\"weekday\"`, `\"day\"`, `\"dayPeriod\"`, `\"hour\"`, `\"minute\"`, `\"second\"`, `\"timeZoneName\"`.\n    - If the type is \"calendar\", `code` should be a [calendar key](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar). It is required to follow the `type` grammar of a [Unicode locale identifier](https://unicode.org/reports/tr35/#32-unicode-locale-identifier).\n\n### Return value\n\nA language-specific formatted string, or `undefined` if there's no data for the input and `fallback` is `\"none\"`.\n\n> **Note:** `fallback` is only used if `code` is structurally valid. See [using fallback](#using_fallback).\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `code` is not structurally valid for the given `type`.\n\n## Examples\n\n### Using the of method\n\n```js\nconst regionNames = new Intl.DisplayNames(\"en\", { type: \"region\" });\nregionNames.of(\"419\"); // \"Latin America\"\n\nconst languageNames = new Intl.DisplayNames(\"en\", { type: \"language\" });\nlanguageNames.of(\"fr\"); // \"French\"\n\nconst currencyNames = new Intl.DisplayNames(\"en\", { type: \"currency\" });\ncurrencyNames.of(\"EUR\"); // \"Euro\"\n```\n\n### Using fallback\n\nWhen the `Intl.DisplayNames` is constructed with `fallback: \"code\"`, the `of()` method will return the `code` if the input looks structurally valid but there's no data for the input. If `fallback` is `\"none\"`, `undefined` is returned.\n\n```js\nconsole.log(\n  new Intl.DisplayNames(\"en\", { type: \"region\", fallback: \"code\" }).of(\"ZL\"),\n); // \"ZL\"\n\nconsole.log(\n  new Intl.DisplayNames(\"en\", { type: \"region\", fallback: \"none\" }).of(\"ZL\"),\n); // undefined\n```\n\nHowever, this only applies if the `code` is structurally valid. For example, if `type` is `\"region\"` but `code` does not follow the `unicode_region_subtag` grammar (2 alphabetic characters or 3 numeric characters), a {{jsxref(\"RangeError\")}} is directly thrown instead of using the fallback.\n\n```js\nconsole.log(\n  new Intl.DisplayNames(\"en\", { type: \"region\", fallback: \"code\" }).of(\"ZLC\"),\n); // throws RangeError: invalid value \"ZLC\" for option region\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DisplayNames\")}}\n"
      },
      "resolvedoptions": {
        "index.md": "---\ntitle: Intl.DisplayNames.prototype.resolvedOptions()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/resolvedOptions\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.DisplayNames.resolvedOptions\n---\n\n{{JSRef}}\n\nThe **`resolvedOptions()`** method of {{jsxref(\"Intl.DisplayNames\")}} instances\nreturns a new object with properties reflecting the locale and style formatting\noptions computed during the construction of this `Intl.DisplayNames`\nobject.\n\n## Syntax\n\n```js-nolint\nresolvedOptions()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn object with properties reflecting the locale and formatting options computed during\nthe construction of the given {{jsxref(\"Intl.DisplayNames\")}} object.\n\n## Description\n\nThe object returned by `resolvedOptions()` has the following properties:\n\n- `locale`\n  - : The BCP 47 language tag for the locale actually used. If any Unicode extension\n    values were requested in the input BCP 47 language tag that led to this locale,\n    the key-value pairs that were requested and are supported for this locale are\n    included in `locale`.\n- `style`\n  - : The value provided for this property in the `options` argument of the\n    constructor or the default value (`\"long\"`). Its value is either\n    `\"long\"`, `\"short\"`, or `\"narrow\"`.\n- `type`\n  - : The value provided for this property in the `options` argument of the\n    constructor or the default value (`\"language\"`). Its value is either\n    `\"language\"`, `\"region\"`, `\"script\"`, or\n    `\"currency\"`.\n- `fallback`\n  - : The value provided for this property in the options argument of the constructor or\n    the default value (`\"code\"`). Its value is either `\"code\"`\n    or `\"none\"`.\n\n## Examples\n\n### Using resolvedOptions\n\n```js\nconst displayNames = new Intl.DisplayNames([\"de-DE\"], { type: \"region\" });\n\nconst usedOptions = displayNames.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.style); // \"long\"\nconsole.log(usedOptions.type); // \"region\"\nconsole.log(usedOptions.fallback); // \"code\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DisplayNames\")}}\n"
      },
      "supportedlocalesof": {
        "index.md": "---\ntitle: Intl.DisplayNames.supportedLocalesOf()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/supportedLocalesOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Intl.DisplayNames.supportedLocalesOf\n---\n\n{{JSRef}}\n\nThe **`Intl.DisplayNames.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in display names without having to fall back to the runtime's default locale.\n\n## Syntax\n\n```js-nolint\nIntl.DisplayNames.supportedLocalesOf(locales)\nIntl.DisplayNames.supportedLocalesOf(locales, options)\n```\n\n### Parameters\n\n- `locales`\n  - : A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object that may have the following property:\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the {{jsxref(\"Intl\", \"Intl\", \"#locale_identification_and_negotiation\", 1)}} page.\n\n### Return value\n\nAn array of strings representing a subset of the given locale tags that are supported in display names without having to fall back to the runtime's default locale.\n\n## Examples\n\n### Using supportedLocalesOf()\n\nAssuming a runtime that supports Indonesian and German but not Balinese in display names, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to display names nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```js\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.DisplayNames.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DisplayNames\")}}\n"
      }
    },
    "durationformat": {
      "durationformat": {
        "index.md": "---\ntitle: Intl.DurationFormat() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/DurationFormat\npage-type: javascript-constructor\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Intl.DurationFormat.DurationFormat\n---\n\n{{JSRef}} {{SeeCompatTable}}\n\nThe **`Intl.DurationFormat()`** constructor creates {{jsxref(\"Intl.DurationFormat\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew Intl.DurationFormat()\nnew Intl.DurationFormat(locales)\nnew Intl.DurationFormat(locales, options)\n```\n\n> **Note:** `Intl.DurationFormat()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag or an {{jsxref(\"Intl.Locale\")}} instance, or an array of such locale identifiers. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n    The following Unicode extension key is allowed:\n\n    - `nu`\n      - : See [`numberingSystem`](#numberingsystem).\n\n    This key can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n- `options` {{optional_inline}}\n\n  - : An object containing the following properties, in the order they are retrieved (all of them are optional):\n\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n    - `numberingSystem`\n      - : The numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n    - `style`\n      - : The style of the formatted duration. Possible values are:\n        - `\"long\"`\n          - : E.g., 1 hour and 50 minutes\n        - `\"short\"` (default)\n          - : E.g., 1 hr, 50 min\n        - `\"narrow\"`\n          - : E.g., 1h 50m\n        - `\"digital\"`\n          - : E.g., 1:50:00\n    - `years`\n      - : The style of the formatted years. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n    - `yearsDisplay`\n      - : Whether to always display years, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `years` is unspecified, and `\"always\"` otherwise.\n    - `months`\n      - : The style of the formatted months. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n    - `monthsDisplay`\n      - : Whether to always display months, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `months` is unspecified, and `\"always\"` otherwise.\n    - `weeks`\n      - : The style of the formatted weeks. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n    - `weeksDisplay`\n      - : Whether to always display weeks, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `weeks` is unspecified, and `\"always\"` otherwise.\n    - `days`\n      - : The style of the formatted days. Possible values are `\"long\"`, `\"short\"`, and `\"narrow\"`; the default is `options.style` if it's not `\"digital\"`, and `\"short\"` otherwise.\n    - `daysDisplay`\n      - : Whether to always display days, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `days` is unspecified, and `\"always\"` otherwise.\n    - `hours`\n      - : The style of the formatted hours. Possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, `\"numeric\"`, and `\"2-digit\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n    - `hoursDisplay`\n      - : Whether to always display hours, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `hours` is unspecified and `options.style` is not `\"digital\"`, and `\"always\"` otherwise.\n    - `minutes`\n      - : The style of the formatted minutes.\n        - If `hours` is `\"numeric\"` or `\"2-digit\"`, possible values are `\"numeric\"` and `\"2-digit\"`, and `\"numeric\"` is normalized to `\"2-digit\"`; the default is `\"numeric\"`.\n        - Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, `\"numeric\"`, and `\"2-digit\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n    - `minutesDisplay`\n      - : Whether to always display minutes, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `minutes` is unspecified and `options.style` is not `\"digital\"`, and `\"always\"` otherwise.\n    - `seconds`\n      - : The style of the formatted seconds.\n        - If `minutes` is `\"numeric\"` or `\"2-digit\"`, possible values are `\"numeric\"` and `\"2-digit\"`, and `\"numeric\"` is normalized to `\"2-digit\"`; the default is `\"numeric\"`.\n        - Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, `\"numeric\"`, and `\"2-digit\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n    - `secondsDisplay`\n      - : Whether to always display seconds, or only if nonzero. Possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `seconds` is unspecified and `options.style` is not `\"digital\"`, and `\"always\"` otherwise.\n    - `milliseconds`\n      - : The style of the formatted milliseconds.\n        - If `seconds` is `\"numeric\"` or `\"2-digit\"`, the only possible value is `\"numeric\"`; the default is `\"numeric\"`.\n        - Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, and `\"numeric\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n    - `millisecondsDisplay`\n      - : Whether to always display milliseconds, or only if nonzero.\n        - If `seconds` is `\"numeric\"` or `\"2-digit\"`, the only possible value is `\"auto\"`; the default is only `\"auto\"` when `milliseconds` is unspecified.\n        - Otherwise, possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `milliseconds` is unspecified, and `\"always\"` otherwise.\n    - `microseconds`\n      - : The style of the formatted microseconds.\n        - If `milliseconds` is `\"numeric\"`, the only possible value is `\"numeric\"`; the default is `\"numeric\"`.\n        - Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, and `\"numeric\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n    - `microsecondsDisplay`\n      - : Whether to always display microseconds, or only if nonzero.\n        - If `milliseconds` is `\"numeric\"`, the only possible value is `\"auto\"`; the default is only `\"auto\"` when `microseconds` is unspecified.\n        - Otherwise, possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `microseconds` is unspecified, and `\"always\"` otherwise.\n    - `nanoseconds`\n      - : The style of the formatted nanoseconds.\n        - If `microseconds` is `\"numeric\"`, the only possible value is `\"numeric\"`; the default is `\"numeric\"`.\n        - Otherwise, possible values are `\"long\"`, `\"short\"`, `\"narrow\"`, and `\"numeric\"`; the default is `options.style` if it's not `\"digital\"`, and `\"numeric\"` otherwise.\n    - `nanosecondsDisplay`\n      - : Whether to always display nanoseconds, or only if nonzero.\n        - If `microseconds` is `\"numeric\"`, the only possible value is `\"auto\"`; the default is only `\"auto\"` when `nanoseconds` is unspecified.\n        - Otherwise, possible values are `\"always\"` and `\"auto\"`; the default is `\"auto\"` if `nanoseconds` is unspecified, and `\"always\"` otherwise.\n    - `fractionalDigits`\n      - : Number of how many fractional second digits to display in the output. Possible values are from `0` to `9`; the default is `undefined` (include as many fractional digits as necessary).\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `locales` or `options` contain invalid values.\n\n## Description\n\nFor each time segment, an {{jsxref(\"Intl.NumberFormat\")}} object is constructed under the hood. It uses the following options (see {{jsxref(\"Intl/NumberFormat/NumberFormat\", \"Intl.NumberFormat()\")}} for details):\n\n- `numberingSystem`: the value of `options.numberingSystem`\n\nWhen `milliseconds`, `microseconds`, or `nanoseconds` uses the `\"numeric\"` style, the following options are also used:\n\n- `minimumFractionDigits`: `0` when `options.fractionalDigits` is `undefined`, `options.fractionalDigits` otherwise\n- `maximumFractionDigits`: `9` when `options.fractionalDigits` is `undefined`, `options.fractionalDigits` otherwise\n- `roundingMode`: `\"trunc\"`\n\nWhen the time segment uses the `\"2-digit\"` style, the following options are also used:\n\n- `minimumIntegerDigits`: `2`\n\nWhen the time segment uses the `\"long\"`, `\"short\"`, or `\"narrow\"` style, the following options are also used:\n\n- `style`: `\"unit\"` when `\"long\"`, `\"short\"`, or `\"narrow\"` is specified, `undefined` otherwise\n- `unit`: the currently formatted unit (`\"years\"`, `\"days\"`, `\"nanoseconds\"`, etc.)\n- `unitDisplay`: the value of the time segment style (`\"long\"`, `\"short\"`, or `\"narrow\"`)\n\n## Examples\n\n### Using the Intl.DurationFormat() constructor\n\n```js\nconst duration = {\n  hours: 2,\n  minutes: 20,\n  seconds: 35,\n};\n\nconsole.log(new Intl.DurationFormat(\"pt\", { style: \"long\" }).format(duration));\n// \"2 horas, 20 minutos e 35 segundos\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DurationFormat\")}}\n- {{jsxref(\"Intl.supportedValuesOf()\")}}\n- {{jsxref(\"Intl\")}}\n"
      },
      "format": {
        "index.md": "---\ntitle: Intl.DurationFormat.prototype.format()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/format\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Intl.DurationFormat.format\n---\n\n{{JSRef}} {{SeeCompatTable}}\n\nThe **`format()`** method of {{jsxref(\"Intl.DurationFormat\")}} instances formats a duration according to the locale and formatting options of this {{jsxref(\"Intl.DurationFormat\")}} object.\n\n## Syntax\n\n```js-nolint\nformat(duration)\n```\n\n### Parameters\n\n- `duration`\n  - : The duration object to be formatted. It should include some or all of the following properties: `months`, `weeks`, `days`, `hours`, `minutes`, `seconds`, `milliseconds`, `microseconds`, `nanoseconds`.\n\n### Return value\n\nA string representing the given `duration` formatted according to the locale and formatting options of this {{jsxref(\"Intl.DurationFormat\")}} object.\n\n## Examples\n\n### Using format()\n\nThe following example shows how to create a Duration formatter using the English language.\n\n```js\nconst duration = {\n  years: 1,\n  months: 2,\n  weeks: 3,\n  days: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7,\n  microseconds: 8,\n  nanoseconds: 9,\n};\n\n// Without options, style defaults to \"short\"\nnew Intl.DurationFormat(\"en\").format(duration);\n// \"1 yr, 2 mths, 3 wks, 3 days, 4 hr, 5 min, 6 sec, 7 ms, 8 μs, 9 ns\"\n\n// With style set to \"long\"\nnew Intl.DurationFormat(\"en\", { style: \"long\" }).format(duration);\n// \"1 year, 2 months, 3 weeks, 3 days, 4 hours, 5 minutes, 6 seconds, 7 milliseconds, 8 microseconds, 9 nanoseconds\"\n\n// With style set to \"narrow\"\nnew Intl.DurationFormat(\"en\", { style: \"narrow\" }).format(duration);\n// \"1y 2mo 3w 3d 4h 5m 6s 7ms 8μs 9ns\"\n```\n\n### Using format() with different locales and styles\n\n```js\nconst duration = {\n  hours: 1,\n  minutes: 46,\n  seconds: 40,\n};\n\n// With style set to \"long\" and locale \"fr-FR\"\nnew Intl.DurationFormat(\"fr-FR\", { style: \"long\" }).format(duration);\n// \"1 heure, 46 minutes et 40 secondes\"\n\n// With style set to \"short\" and locale set to \"en\"\nnew Intl.DurationFormat(\"en\", { style: \"short\" }).format(duration);\n// \"1 hr, 46 min and 40 sec\"\n\n// With style set to \"short\" and locale set to \"pt\"\nnew Intl.DurationFormat(\"pt\", { style: \"narrow\" }).format(duration);\n// \"1h 46min 40s\"\n\n// With style set to \"digital\" and locale set to \"en\"\nnew Intl.DurationFormat(\"en\", { style: \"digital\" }).format(duration);\n// \"1:46:40\"\n\n// With style set to \"digital\", locale set to \"en\", and hours set to \"long\"\nnew Intl.DurationFormat(\"en\", { style: \"digital\", hours: \"long\" }).format(\n  duration,\n);\n// \"1 hour, 46:40\"\n```\n\n### Using format() with the fractionalDigits option\n\n```js\nconst duration = {\n  hours: 11,\n  minutes: 30,\n  seconds: 12,\n  milliseconds: 345,\n  microseconds: 600,\n};\n\nnew Intl.DurationFormat(\"en\", { style: \"digital\" }).format(duration);\n// \"11:30:12.3456\"\n\nnew Intl.DurationFormat(\"en\", { style: \"digital\", fractionalDigits: 5 }).format(\n  duration,\n);\n// \"11:30:12.34560\"\n\nnew Intl.DurationFormat(\"en\", { style: \"digital\", fractionalDigits: 3 }).format(\n  duration,\n);\n// \"11:30:12.346\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DurationFormat\")}}\n- {{jsxref(\"Intl.supportedValuesOf()\")}}\n- {{jsxref(\"Intl\")}}\n"
      },
      "formattoparts": {
        "index.md": "---\ntitle: Intl.DurationFormat.prototype.formatToParts()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/formatToParts\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Intl.DurationFormat.formatToParts\n---\n\n{{JSRef}} {{SeeCompatTable}}\n\nThe **`formatToParts()`** method of {{jsxref(\"Intl.DurationFormat\")}} instances allows locale-aware formatting of strings produced by {{jsxref(\"Intl.DurationFormat\")}} formatters.\n\n## Syntax\n\n```js-nolint\nformatToParts(duration)\n```\n\n### Parameters\n\n- `duration` {{optional_inline}}\n  - : The duration object to be formatted. It should include some or all of the following properties: `\"months\"`, `\"weeks\"`, `\"days\"`, `\"hours\"`, `\"minutes\"`, `\"seconds\"`, `\"milliseconds\"`, `\"microseconds\"`, `\"nanoseconds\"`.\n\n### Return value\n\nAn {{jsxref(\"Array\")}} of objects containing the formatted duration in parts.\n\n## Description\n\nThe `formatToParts()` method is useful for custom formatting of duration objects. It returns an {{jsxref(\"Array\")}} of objects containing the locale-specific tokens from which it possible to build custom strings while preserving the locale-specific parts. The structure the `formatToParts()` method returns, looks like this:\n\n```js\n[\n  { type: \"integer\", value: \"7\", unit: \"hour\" },\n  { type: \"literal\", value: \" \", unit: \"hour\" },\n  { type: \"unit\", value: \"hr\", unit: \"hour\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"8\", unit: \"minute\" },\n  { type: \"literal\", value: \" \", unit: \"minute\" },\n  { type: \"unit\", value: \"min\", unit: \"minute\" },\n];\n```\n\n## Examples\n\nThe `formatToParts` method enables locale-aware formatting of strings produced by `DurationFormat` formatters by providing you the string in parts:\n\n```js\nconst duration = {\n  hours: 7,\n  minutes: 8,\n  seconds: 9,\n  milliseconds: 123,\n  microseconds: 456,\n  nanoseconds: 789,\n};\n\nnew Intl.DurationFormat(\"en\", { style: \"long\" }).formatToParts(duration);\n\n// Returned value:\n[\n  { type: \"integer\", value: \"7\", unit: \"hour\" },\n  { type: \"literal\", value: \" \", unit: \"hour\" },\n  { type: \"unit\", value: \"hours\", unit: \"hour\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"8\", unit: \"minute\" },\n  { type: \"literal\", value: \" \", unit: \"minute\" },\n  { type: \"unit\", value: \"minutes\", unit: \"minute\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"9\", unit: \"second\" },\n  { type: \"literal\", value: \" \", unit: \"second\" },\n  { type: \"unit\", value: \"seconds\", unit: \"second\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"123\", unit: \"millisecond\" },\n  { type: \"literal\", value: \" \", unit: \"millisecond\" },\n  { type: \"unit\", value: \"milliseconds\", unit: \"millisecond\" },\n  { type: \"literal\", value: \", \" },\n  { type: \"integer\", value: \"456\", unit: \"microsecond\" },\n  { type: \"literal\", value: \" \", unit: \"microsecond\" },\n  { type: \"unit\", value: \"microseconds\", unit: \"microsecond\" },\n  { type: \"literal\", value: \" and \" },\n  { type: \"integer\", value: \"789\", unit: \"nanosecond\" },\n  { type: \"literal\", value: \" \", unit: \"nanosecond\" },\n  { type: \"unit\", value: \"nanoseconds\", unit: \"nanosecond\" },\n];\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DurationFormat\")}}\n- {{jsxref(\"Intl.supportedValuesOf()\")}}\n- {{jsxref(\"Intl\")}}\n"
      },
      "index.md": "---\ntitle: Intl.DurationFormat\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat\npage-type: javascript-class\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Intl.DurationFormat\n---\n\n{{JSRef}} {{SeeCompatTable}}\n\nThe **`Intl.DurationFormat`** object enables language-sensitive duration formatting.\n\n## Constructor\n\n- {{jsxref(\"Intl/DurationFormat/DurationFormat\", \"Intl.DurationFormat()\")}} {{experimental_inline}}\n  - : Creates a new `Intl.DurationFormat` object.\n\n## Static methods\n\n- {{jsxref(\"Intl/DurationFormat/supportedLocalesOf\", \"Intl.DurationFormat.supportedLocalesOf()\")}} {{experimental_inline}}\n  - : Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## Instance properties\n\nThese properties are defined on `Intl.DurationFormat.prototype` and shared by all `Intl.DurationFormat` instances.\n\n- {{jsxref(\"Object/constructor\", \"Intl.DurationFormat.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Intl.DurationFormat` instances, the initial value is the {{jsxref(\"Intl/DurationFormat/DurationFormat\", \"Intl.DurationFormat\")}} constructor.\n- `Intl.DurationFormat.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.DurationFormat\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Intl/DurationFormat/format\", \"Intl.DurationFormat.prototype.format()\")}} {{experimental_inline}}\n  - : Getter function that formats a duration according to the locale and formatting options of this `DurationFormat` object.\n- {{jsxref(\"Intl/DurationFormat/formatToParts\", \"Intl.DurationFormat.prototype.formatToParts()\")}} {{experimental_inline}}\n  - : Returns an {{jsxref(\"Array\")}} of objects representing the formatted duration in parts.\n- {{jsxref(\"Intl/DurationFormat/resolvedOptions\", \"Intl.DurationFormat.prototype.resolvedOptions()\")}} {{experimental_inline}}\n  - : Returns a new object with properties reflecting the locale and formatting options computed during initialization of the object.\n\n## Examples\n\n### Using Intl.DurationFormat\n\nThe examples below show how to use the `Intl.DurationFormat` object to format a duration object with various locales and styles.\n\n```js\nconst duration = {\n  hours: 1,\n  minutes: 46,\n  seconds: 40,\n};\n\n// With style set to \"long\" and locale \"fr-FR\"\nnew Intl.DurationFormat(\"fr-FR\", { style: \"long\" }).format(duration);\n// \"1 heure, 46 minutes et 40 secondes\"\n\n// With style set to \"short\" and locale \"en\"\nnew Intl.DurationFormat(\"en\", { style: \"short\" }).format(duration);\n// \"1 hr, 46 min and 40 sec\"\n\n// With style set to \"short\" and locale \"pt\"\nnew Intl.DurationFormat(\"pt\", { style: \"narrow\" }).format(duration);\n// \"1h 46min 40s\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl\")}}\n",
      "resolvedoptions": {
        "index.md": "---\ntitle: Intl.DurationFormat.prototype.resolvedOptions()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/resolvedOptions\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Intl.DurationFormat.resolvedOptions\n---\n\n{{JSRef}} {{SeeCompatTable}}\n\nThe **`resolvedOptions()`** method of {{jsxref(\"Intl.DurationFormat\")}} instances returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this {{jsxref(\"Intl.DurationFormat\")}} object.\n\n## Syntax\n\n```js-nolint\nresolvedOptions()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new object with properties reflecting the locale and date and time formatting options computed during the initialization of the given {{jsxref(\"Intl.DateTimeFormat\")}} object.\n\n## Description\n\nThe resulting object has the following properties:\n\n- `locale`\n  - : The [BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646) for the locale used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n- `style`\n  - : One of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"digital\"` identifying the duration formatting style used.\n- `years`\n  - : One of the strings `\"long\"`, `\"short\"`, or `\"narrow\"` identifying the formatting style used for the `years` field.\n- `yearsDisplay`\n  - : One of the strings `\"auto\"` or `\"always\"` identifying when to display the `years` field.\n- `months`\n  - : One of the strings `\"long\"`, `\"short\"`, `and \"narrow\"` identifying the formatting style used for the `months` field.\n- `monthsDisplay`\n  - : One of the strings `\"auto\"` or `\"always\"` identifying when to display the `months` field.\n- `weeks`\n  - : One of the strings `\"long\"`, `\"short\"`, `and \"narrow\"` identifying the formatting style used for the `weeks` field.\n- `weeksDisplay`\n  - : One of the strings `\"auto\"` or `\"always\"` identifying when to display the `weeks` field.\n- `days`\n  - : One of the strings `\"long\"`, `\"short\"`, and `\"narrow\"` identifying the formatting style used for the `days` field.\n- `daysDisplay`\n  - : One of the strings `\"auto\"` or `\"always\"` identifying when to display the `days` field.\n- `hours`\n  - : One of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, `\"2-digit\"`, or `\"numeric\"` identifying the formatting style used for the `hours` field.\n- `hoursDisplay`\n  - : One of the strings `\"auto\"` or `\"always\"` identifying when to display the `hours` field.\n- `minutes`\n  - : One of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, `\"2-digit\"`, or `\"numeric\"` identifying the formatting style used for the `minutes` field.\n- `minutesDisplay`\n  - : One of the strings `\"auto\"` or `\"always\"` identifying when to display the `minutes` field.\n- `seconds`\n  - : One of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, `\"2-digit\"`, or `\"numeric\"` identifying the formatting style used for the `seconds` field.\n- `secondsDisplay`\n  - : One of the strings `\"auto\"` or `\"always\"` identifying when to display the `seconds` field.\n- `milliseconds`\n  - : One of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"numeric\"` identifying the formatting style used for the `milliseconds` field.\n- `millisecondsDisplay`\n  - : One of the strings `\"auto\"` or `\"always\"` identifying when to display the `millisecondsDisplay` field.\n- `microseconds`\n  - : One of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"numeric\"` identifying the formatting style used for the `microseconds` field.\n- `microsecondsDisplay`\n  - : One of the strings `\"auto\"` or `\"always\"` identifying when to display the `microsecondsDisplay` field.\n- `nanoseconds`\n  - : One of the strings `\"long\"`, `\"short\"`, `\"narrow\"`, or `\"numeric\"` identifying the formatting style used for the `nanoseconds` field.\n- `nanosecondsDisplay`\n  - : One of the strings `\"auto\"` or `\"always\"` identifying when to display the `nanosecondsDisplay` field.\n- `fractionalDigits`\n  - : A number, identifying the number of fractional digits used with numeric styles.\n- `numberingSystem`\n  - : The value provided for this property in the options argument, if present, or the value requested using the Unicode extension key `nu` or filled in as a default.\n\n## Examples\n\n### Using the resolvedOptions method\n\n```js\nconst duration = new Intl.DurationFormat(\"en\");\nconst usedOptions = duration.resolvedOptions();\n\nusedOptions.locale; // \"en\"\nusedOptions.numberingSystem; // \"latn\"\nusedOptions.years; // \"long\"\nusedOptions.yearsDisplay; // \"auto\"\nusedOptions.style; // \"long\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DurationFormat\")}}\n- {{jsxref(\"Intl.supportedValuesOf()\")}}\n- {{jsxref(\"Intl\")}}\n"
      },
      "supportedlocalesof": {
        "index.md": "---\ntitle: Intl.DurationFormat.supportedLocalesOf()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/DurationFormat/supportedLocalesOf\npage-type: javascript-static-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Intl.DurationFormat.supportedLocalesOf\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`Intl.DurationFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in duration formatting without having to fall back to the runtime's default locale.\n\n## Syntax\n\n```js-nolint\nIntl.DurationFormat.supportedLocalesOf(locales)\nIntl.DurationFormat.supportedLocalesOf(locales, options)\n```\n\n### Parameters\n\n- `locales`\n  - : A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object that may have the following property:\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the {{jsxref(\"Intl\", \"Intl\", \"#locale_identification_and_negotiation\", 1)}} page.\n\n### Return value\n\nAn array of strings representing a subset of the given locale tags that are supported in duration formatting without having to fall back to the runtime's default locale.\n\n## Examples\n\n### Using supportedLocalesOf()\n\nAssuming a runtime that supports Indonesian and German but not Balinese in duration formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to duration formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```js\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.DurationFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.DurationFormat\")}}\n"
      }
    },
    "getcanonicallocales": {
      "index.md": "---\ntitle: Intl.getCanonicalLocales()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/getCanonicalLocales\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Intl.getCanonicalLocales\n---\n\n{{JSRef}}\n\nThe **`Intl.getCanonicalLocales()`** static method returns an array\ncontaining the canonical locale names. Duplicates will be omitted and elements will be\nvalidated as structurally valid language tags.\n\n{{EmbedInteractiveExample(\"pages/js/intl-getcanonicallocales.html\")}}\n\n## Syntax\n\n```js-nolint\nIntl.getCanonicalLocales(locales)\n```\n\n### Parameters\n\n- `locales`\n  - : A list of {{jsxref(\"String\")}} values for which to get the canonical locale names.\n\n### Return value\n\nAn array containing the canonical locale names.\n\n## Examples\n\n### Using getCanonicalLocales\n\n```js\nIntl.getCanonicalLocales(\"EN-US\"); // [\"en-US\"]\nIntl.getCanonicalLocales([\"EN-US\", \"Fr\"]); // [\"en-US\", \"fr\"]\n\nIntl.getCanonicalLocales(\"EN_US\");\n// RangeError:'EN_US' is not a structurally valid language tag\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Intl.getCanonicalLocales` in FormatJS](https://formatjs.io/docs/polyfills/intl-getcanonicallocales/)\n- {{jsxref(\"Intl/NumberFormat/supportedLocalesOf\", \"Intl.NumberFormat.supportedLocalesOf()\")}}\n- {{jsxref(\"Intl/DateTimeFormat/supportedLocalesOf\", \"Intl.DateTimeFormat.supportedLocalesOf()\")}}\n- {{jsxref(\"Intl/Collator/supportedLocalesOf\", \"Intl.Collator.supportedLocalesOf()\")}}\n"
    },
    "index.md": "---\ntitle: Intl\nslug: Web/JavaScript/Reference/Global_Objects/Intl\npage-type: javascript-namespace\nbrowser-compat: javascript.builtins.Intl\n---\n\n{{JSRef}}\n\nThe **`Intl`** namespace object contains several constructors as well as functionality common to the internationalization constructors and other language sensitive functions. Collectively, they comprise the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, date and time formatting, and more.\n\n## Description\n\nUnlike most global objects, `Intl` is not a constructor. You cannot use it with the [`new` operator](/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `Intl` object as a function. All properties and methods of `Intl` are static (just like the {{jsxref(\"Math\")}} object).\n\nThe internationalization constructors as well as several language sensitive methods of other constructors (listed under [See also](#see_also)) use a common pattern for identifying locales and determining the one they will actually use: they all accept `locales` and `options` arguments, and negotiate the requested locale(s) against the locales they support using an algorithm specified in the `options.localeMatcher` property.\n\n### locales argument\n\nThe `locales` argument is used to determine the locale used in a given operation. The JavaScript implementation examines `locales`, and then computes a locale it understands that comes closest to satisfying the expressed preference. `locales` may be:\n\n- `undefined` (or omitted): The implementation's default locale will be used.\n- A locale: A locale identifier or an [`Intl.Locale`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object that wraps a locale identifier.\n- A list of locales: Any other value, that will be converted into an object and then treated as an array of locales.\n\nIn the latter two cases, the actual locale used is the best-supported locale determined by [locale negotiation](#locale_identification_and_negotiation). If a locale identifier is not a string or an object, a {{jsxref(\"TypeError\")}} is thrown. If a locale identifier is a string that's syntactically invalid, a {{jsxref(\"RangeError\")}} is thrown. If a locale identifier is well-formed but the implementation doesn't recognize it, it is ignored and the next locale in the list is considered, eventually falling back to the system's locale. However, you shouldn't rely on a particular locale name being ignored, because the implementation may add data for any locale in the future. For example, `new Intl.DateTimeFormat(\"default\")` uses the implementation's default locale only because `\"default\"` is syntactically valid but not recognized as any locale.\n\nA locale identifier is a string that consists of:\n\n1. A language subtag with 2–3 or 5–8 letters\n2. A script subtag with 4 letters {{optional_inline}}\n3. A region subtag with either 2 letters or 3 digits {{optional_inline}}\n4. One or more variant subtags (all of which must be unique), each with either 5–8 alphanumerals or a digit followed by 3 alphanumerals {{optional_inline}}\n5. One or more BCP 47 extension sequences {{optional_inline}}\n6. A private-use extension sequence {{optional_inline}}\n\nEach subtag and sequence are separated by hyphens. Locale identifiers are case-insensitive {{Glossary(\"ASCII\")}}. However, it's conventional to use title case (the first letter is capitalized, successive letters are lower case) for script subtags, upper case for region subtags, and lower case for everything else. For example:\n\n- `\"hi\"`: Hindi (language)\n- `\"de-AT\"`: German (language) as used in Austria (region)\n- `\"zh-Hans-CN\"`: Chinese (language) written in simplified characters (script) as used in China (region)\n- `\"en-emodeng\"`: English (language) in the \"Early modern English\" dialect (variant)\n\nSubtags identifying languages, scripts, regions (including countries), and (rarely used) variants are registered in the [IANA Language Subtag Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry). This registry is periodically updated over time, and implementations may not always be up to date, so don't rely too much on subtags being universally supported.\n\nBCP 47 extension sequences consist of a single digit or letter (other than `\"x\"`) and one or more two- to eight-letter or digit subtags separated by hyphens. Only one sequence is permitted for each digit or letter: `\"de-a-foo-a-foo\"` is invalid. BCP 47 extension subtags are defined in the [Unicode CLDR Project](https://github.com/unicode-org/cldr/tree/main/common/bcp47). Currently only two extensions have defined semantics:\n\n- The `\"u\"` (Unicode) extension can be used to request additional customization of `Intl` API objects. Examples:\n\n  - `\"de-DE-u-co-phonebk\"`: Use the phonebook variant of the German sort order, which interprets umlauted vowels as corresponding character pairs: ä → ae, ö → oe, ü → ue.\n  - `\"th-TH-u-nu-thai\"`: Use Thai digits (๐, ๑, ๒, ๓, ๔, ๕, ๖, ๗, ๘, ๙) in number formatting.\n  - `\"ja-JP-u-ca-japanese\"`: Use the Japanese calendar in date and time formatting, so that 2013 is expressed as the year 25 of the Heisei period, or 平成 25.\n  - `\"en-GB-u-ca-islamic\"`: use British English with the Islamic (Hijri) calendar, where the Gregorian date 14 October, 2017 is the Hijri date 24 Muharram, 1439.\n\n- The `\"t\"` (transformed) extension indicates transformed content: for example, text that was translated from another locale. No `Intl` functionality currently considers the `\"t\"` extension. However, this extension sometimes contains a nested locale (with no extensions): for example, the transformed extension in `\"de-t-en\"` contains the locale identifier for English. If a nested locale is present, it must be a valid locale identifier. For example, because `\"en-emodeng-emodeng\"` is invalid (because it contains a duplicate `emodeng` variant subtag), `\"de-t-en-emodeng-emodeng\"` is also invalid.\n\nFinally, a private-use extension sequence using the letter `\"x\"` may appear, followed by one or more one- to eight-letter or digit subtags separated by hyphens. This allows applications to encode information for their own private use, that will be ignored by all `Intl` operations.\n\n### options argument\n\nThe `options` argument must be an object with properties that vary between constructors and functions. If the `options` argument is not provided or is undefined, default values are used for all properties.\n\nOne property is supported by all language sensitive constructors and functions: The `localeMatcher` property, whose value must be a string `\"lookup\"` or `\"best fit\"` and which selects one of the locale matching algorithms described below.\n\n### Locale identification and negotiation\n\nThe list of locales specified by the `locales` argument, after Unicode extensions have been removed from them, is interpreted as a prioritized request from the application. The runtime compares it against the locales it has available and picks the best one available. Two matching algorithms exist: the `\"lookup\"` matcher follows the Lookup algorithm specified in [BCP 47](https://datatracker.ietf.org/doc/html/rfc4647#section-3.4); the `\"best fit\"` matcher lets the runtime provide a locale that's at least, but possibly more, suited for the request than the result of the Lookup algorithm. If the application doesn't provide a `locales` argument, or the runtime doesn't have a locale that matches the request, then the runtime's default locale is used. The matcher can be selected using a property of the `options` argument (see below).\n\nIf the selected locale identifier had a Unicode extension sequence, that extension is now used to customize the constructed object or the behavior of the function. Each constructor or function supports only a subset of the keys defined for the Unicode extension, and the supported values often depend on the locale identifier. For example, the `\"co\"` key (collation) is only supported by {{jsxref(\"Intl.Collator\")}}, and its `\"phonebk\"` value is only supported for German.\n\n## Static properties\n\n- {{jsxref(\"Intl.Collator\")}}\n  - : Constructor for collators, which are objects that enable language-sensitive string comparison.\n- {{jsxref(\"Intl.DateTimeFormat\")}}\n  - : Constructor for objects that enable language-sensitive date and time formatting.\n- {{jsxref(\"Intl.DisplayNames\")}}\n  - : Constructor for objects that enable the consistent translation of language, region and script display names.\n- {{jsxref(\"Intl.DurationFormat\")}} {{experimental_inline}}\n  - : Constructor for objects that enable locale-sensitive duration formatting.\n- {{jsxref(\"Intl.ListFormat\")}}\n  - : Constructor for objects that enable language-sensitive list formatting.\n- {{jsxref(\"Intl.Locale\")}}\n  - : Constructor for objects that represents a Unicode locale identifier.\n- {{jsxref(\"Intl.NumberFormat\")}}\n  - : Constructor for objects that enable language-sensitive number formatting.\n- {{jsxref(\"Intl.PluralRules\")}}\n  - : Constructor for objects that enable plural-sensitive formatting and language-specific rules for plurals.\n- {{jsxref(\"Intl.RelativeTimeFormat\")}}\n  - : Constructor for objects that enable language-sensitive relative time formatting.\n- {{jsxref(\"Intl.Segmenter\")}}\n  - : Constructor for objects that enable locale-sensitive text segmentation.\n- `Intl[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Static methods\n\n- {{jsxref(\"Intl.getCanonicalLocales()\")}}\n  - : Returns canonical locale names.\n- {{jsxref(\"Intl.supportedValuesOf()\")}}\n  - : Returns a sorted array containing the supported unique calendar, collation, currency, numbering systems, or unit values supported by the implementation.\n\n## Examples\n\n### Formatting dates and numbers\n\nYou can use `Intl` to format dates and numbers in a form that's conventional for a specific language and region:\n\n```js\nconst count = 26254.39;\nconst date = new Date(\"2012-05-24\");\n\nfunction log(locale) {\n  console.log(\n    `${new Intl.DateTimeFormat(locale).format(date)} ${new Intl.NumberFormat(\n      locale,\n    ).format(count)}`,\n  );\n}\n\nlog(\"en-US\"); // 5/24/2012 26,254.39\n\nlog(\"de-DE\"); // 24.5.2012 26.254,39\n```\n\n### Using the browser's preferred language\n\nInstead of passing a hardcoded locale name to the `Intl` methods, you can use the user's preferred language provided by {{domxref(\"navigator.language\")}}:\n\n```js\nconst date = new Date(\"2012-05-24\");\n\nconst formattedDate = new Intl.DateTimeFormat(navigator.language).format(date);\n```\n\nAlternatively, the {{domxref(\"navigator.languages\")}} property provides a sorted list of the user's preferred languages. This list can be passed directly to the `Intl` constructors to implement preference-based fallback selection of locales. The [locale negotiation](#locale_identification_and_negotiation) process is used to pick the most appropriate locale available:\n\n```js\nconst count = 26254.39;\n\nconst formattedCount = new Intl.NumberFormat(navigator.languages).format(count);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.localeCompare()\")}}\n- {{jsxref(\"Number.prototype.toLocaleString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleDateString()\")}}\n- {{jsxref(\"Date.prototype.toLocaleTimeString()\")}}\n- {{domxref(\"navigator.language\")}}\n- {{domxref(\"navigator.languages\")}}\n- [The ECMAScript Internationalization API](https://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html) by Norbert Lindenberg (2012)\n",
    "listformat": {
      "format": {
        "index.md": "---\ntitle: Intl.ListFormat.prototype.format()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/format\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.ListFormat.format\n---\n\n{{JSRef}}\n\nThe **`format()`** method of {{jsxref(\"Intl.ListFormat\")}} instances returns a string with a\nlanguage-specific representation of the list.\n\n{{EmbedInteractiveExample(\"pages/js/intl-listformat.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nformat()\nformat(list)\n```\n\n### Parameters\n\n- `list`\n  - : An iterable object, such as an Array.\n\n### Return value\n\nA language-specific formatted string representing the elements of the list\n\n## Description\n\nThe **`format()`** method returns a string that has been\nformatted based on parameters provided in the `Intl.ListFormat` object. The\n`locales` and `options` parameters customize the behavior of\n`format()` and let applications specify the language conventions that\nshould be used to format the list.\n\n## Examples\n\n### Using format\n\nThe following example shows how to create a List formatter using the English language.\n\n```js\nconst list = [\"Motorcycle\", \"Bus\", \"Car\"];\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"long\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus and Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"short\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"unit\" }).format(list),\n);\n// Motorcycle Bus Car\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.ListFormat\")}}\n"
      },
      "formattoparts": {
        "index.md": "---\ntitle: Intl.ListFormat.prototype.formatToParts()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/formatToParts\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.ListFormat.formatToParts\n---\n\n{{JSRef}}\n\nThe **`formatToParts()`** method of {{jsxref(\"Intl.ListFormat\")}} instances\nreturns an {{jsxref(\"Array\")}} of objects representing the different components that\ncan be used to format a list of values in a locale-aware fashion.\n\n{{EmbedInteractiveExample(\"pages/js/intl-listformat-prototype-formattoparts.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nformatToParts(list)\n```\n\n### Parameters\n\n- `list`\n  - : An iterable object, such as an {{jsxref(\"Array\")}}, to be formatted according to a locale.\n\n### Return value\n\nAn {{jsxref(\"Array\")}} of components which contains the formatted parts from the list.\n\n## Description\n\nWhereas {{jsxref(\"Intl/ListFormat/format\", \"Intl.ListFormat.prototype.format()\")}} returns a string being the formatted version\nof the list (according to the given locale and style options),\n`formatToParts()` returns an array of the different components of the\nformatted string.\n\nEach element of the resulting array has two properties: `type` and\n`value`. The `type` property may be either\n`\"element\"`, which refers to a value from the list, or\n`\"literal\"` which refers to a linguistic construct. The `value`\nproperty gives the content, as a string, of the token.\n\nThe locale and style options used for formatting are given when constructing the\n{{jsxref(\"Intl.ListFormat\")}} instance.\n\n## Examples\n\n### Using formatToParts\n\n```js\nconst fruits = [\"Apple\", \"Orange\", \"Pineapple\"];\nconst myListFormat = new Intl.ListFormat(\"en-GB\", {\n  style: \"long\",\n  type: \"conjunction\",\n});\n\nconsole.table(myListFormat.formatToParts(fruits));\n// [\n//  { \"type\": \"element\", \"value\": \"Apple\" },\n//  { \"type\": \"literal\", \"value\": \", \" },\n//  { \"type\": \"element\", \"value\": \"Orange\" },\n//  { \"type\": \"literal\", \"value\": \", and \" },\n//  { \"type\": \"element\", \"value\": \"Pineapple\" }\n// ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.ListFormat\")}}\n- {{jsxref(\"Intl/ListFormat/format\", \"Intl.ListFormat.prototype.format()\")}}\n- {{jsxref(\"Intl/RelativeTimeFormat/formatToParts\", \"Intl.RelativeTimeFormat.prototype.formatToParts()\")}}\n- {{jsxref(\"Intl/NumberFormat/formatToParts\", \"Intl.NumberFormat.prototype.formatToParts()\")}}\n- {{jsxref(\"Intl/DateTimeFormat/formatToParts\", \"Intl.DateTimeFormat.prototype.formatToParts()\")}}\n"
      },
      "index.md": "---\ntitle: Intl.ListFormat\nslug: Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Intl.ListFormat\n---\n\n{{JSRef}}\n\nThe **`Intl.ListFormat`** object enables language-sensitive list formatting.\n\n{{EmbedInteractiveExample(\"pages/js/intl-listformat.html\", \"taller\")}}\n\n## Constructor\n\n- {{jsxref(\"Intl/ListFormat/ListFormat\", \"Intl.ListFormat()\")}}\n  - : Creates a new `Intl.ListFormat` object.\n\n## Static methods\n\n- {{jsxref(\"Intl/ListFormat/supportedLocalesOf\", \"Intl.ListFormat.supportedLocalesOf()\")}}\n  - : Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## Instance properties\n\nThese properties are defined on `Intl.ListFormat.prototype` and shared by all `Intl.ListFormat` instances.\n\n- {{jsxref(\"Object/constructor\", \"Intl.ListFormat.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Intl.ListFormat` instances, the initial value is the {{jsxref(\"Intl/ListFormat/ListFormat\", \"Intl.ListFormat\")}} constructor.\n- `Intl.ListFormat.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.ListFormat\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Intl/ListFormat/format\", \"Intl.ListFormat.prototype.format()\")}}\n  - : Returns a language-specific formatted string representing the elements of the list.\n- {{jsxref(\"Intl/ListFormat/formatToParts\", \"Intl.ListFormat.prototype.formatToParts()\")}}\n  - : Returns an array of objects representing the different components that can be used to format a list of values in a locale-aware fashion.\n- {{jsxref(\"Intl/ListFormat/resolvedOptions\", \"Intl.ListFormat.prototype.resolvedOptions()\")}}\n  - : Returns a new object with properties reflecting the locale and style formatting options computed during the construction of the current {{jsxref(\"Intl.ListFormat\")}} object.\n\n## Examples\n\n### Using format\n\nThe following example shows how to create a List formatter using the English language.\n\n```js\nconst list = [\"Motorcycle\", \"Bus\", \"Car\"];\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"long\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus and Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"short\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"unit\" }).format(list),\n);\n// Motorcycle Bus Car\n```\n\n### Using formatToParts\n\nThe following example shows how to create a List formatter returning formatted parts\n\n```js\nconst list = [\"Motorcycle\", \"Bus\", \"Car\"];\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", {\n    style: \"long\",\n    type: \"conjunction\",\n  }).formatToParts(list),\n);\n\n// [ { \"type\": \"element\", \"value\": \"Motorcycle\" },\n//   { \"type\": \"literal\", \"value\": \", \" },\n//   { \"type\": \"element\", \"value\": \"Bus\" },\n//   { \"type\": \"literal\", \"value\": \", and \" },\n//   { \"type\": \"element\", \"value\": \"Car\" } ];\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Intl.ListFormat` in FormatJS](https://formatjs.io/docs/polyfills/intl-listformat/)\n- {{jsxref(\"Intl\")}}\n",
      "listformat": {
        "index.md": "---\ntitle: Intl.ListFormat() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/ListFormat\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Intl.ListFormat.ListFormat\n---\n\n{{JSRef}}\n\nThe **`Intl.ListFormat()`** constructor creates {{jsxref(\"Intl.ListFormat\")}} objects.\n\n{{EmbedInteractiveExample(\"pages/js/intl-listformat.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Intl.ListFormat()\nnew Intl.ListFormat(locales)\nnew Intl.ListFormat(locales, options)\n```\n\n> **Note:** `Intl.ListFormat()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `locales` {{optional_inline}}\n  - : A string with a BCP 47 language tag or an {{jsxref(\"Intl.Locale\")}} instance, or an array of such locale identifiers. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object containing the following properties, in the order they are retrieved (all of them are optional):\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n    - `type`\n      - : Indicates the type of grouping. Possible values are:\n        - `\"conjunction\"` (default)\n          - : For \"and\"-based grouping of the list items: \"A, B, and C\"\n        - `\"disjunction\"`\n          - : For \"or\"-based grouping of the list items: \"A, B, or C\"\n        - `\"unit\"`\n          - : For grouping the list items as a unit (neither \"and\"-based nor \"or\"-based): \"A, B, C\"\n    - `style`\n      - : The grouping style (for example, whether list separators and conjunctions are included). Possible values are:\n        - `\"long\"` (default)\n          - : E.g. \"A, B, and C\"\n        - `\"short\"`\n          - : E.g. \"A, B, C\"\n        - `\"narrow\"`\n          - : E.g. \"A B C\"\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `locales` or `options` contain invalid values.\n\n## Examples\n\n### Using format\n\nThe following example shows how to create a List formatter using the English language.\n\n```js\nconst list = [\"Motorcycle\", \"Bus\", \"Car\"];\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"long\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus and Car\n\nconsole.log(new Intl.ListFormat(\"en-GB\", { style: \"long\" }).format(list));\n// Motorcycle, Bus and Car\n\nconsole.log(new Intl.ListFormat(\"en-US\", { style: \"long\" }).format(list));\n// Motorcycle, Bus, and Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"short\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus and Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"short\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus, & Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"conjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus, Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"long\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"short\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"disjunction\" }).format(\n    list,\n  ),\n);\n// Motorcycle, Bus or Car\n\nconsole.log(new Intl.ListFormat(\"en-US\", { style: \"narrow\" }).format(list));\n// Motorcycle, Bus, Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-GB\", { style: \"narrow\", type: \"unit\" }).format(list),\n);\n// Motorcycle Bus Car\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"long\" }).format([\n    \"30 degrees\",\n    \"15 minutes\",\n    \"50 seconds\",\n  ]),\n);\n// 30 degrees, 15 minutes, and 50 seconds\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"narrow\" }).format([\n    \"30 degrees\",\n    \"15 minutes\",\n    \"50 seconds\",\n  ]),\n);\n// 30 degrees, 15 minutes, 50 seconds\n\nconsole.log(\n  new Intl.ListFormat(\"en-US\", { style: \"narrow\", type: \"unit\" }).format([\n    \"30°\",\n    \"15′\",\n    \"50″\",\n  ]),\n);\n// 30° 15′ 50″\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.ListFormat\")}}\n- {{jsxref(\"Intl\")}}\n"
      },
      "resolvedoptions": {
        "index.md": "---\ntitle: Intl.ListFormat.prototype.resolvedOptions()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/resolvedOptions\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.ListFormat.resolvedOptions\n---\n\n{{JSRef}}\n\nThe **`resolvedOptions()`** method of {{jsxref(\"Intl.ListFormat\")}} instances\nreturns a new object with properties reflecting the locale and style formatting\noptions computed during the construction of this `Intl.ListFormat` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-listformat-prototype-resolvedoptions.html\")}}\n\n## Syntax\n\n```js-nolint\nresolvedOptions()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn object with properties reflecting the locale and formatting options computed during\nthe construction of the given {{jsxref(\"Intl.ListFormat\")}} object.\n\n## Description\n\nThe object returned by `resolvedOptions()` has the following properties:\n\n- `locale`\n  - : The BCP 47 language tag for the locale actually used. If any Unicode extension\n    values were requested in the input BCP 47 language tag that led to this locale,\n    the key-value pairs that were requested and are supported for this locale are\n    included in `locale`.\n- `style`\n  - : The value provided for this property in the `options` argument of the\n    constructor or the default value (`\"long\"`). Its value is either\n    `\"long\"`, `\"short\"`, or `\"narrow\"`.\n- `type`\n  - : The value provided for this property in the `options` argument of the\n    constructor or the default value (`\"conjunction\"`). Its value is either\n    `\"conjunction\"`, `\"disjunction\"`, or `\"unit\"`.\n\n## Examples\n\n### Using resolvedOptions\n\n```js\nconst deListFormatter = new Intl.ListFormat(\"de-DE\", { style: \"short\" });\n\nconst usedOptions = de.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.style); // \"short\"\nconsole.log(usedOptions.type); // \"conjunction\" (the default value)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.ListFormat\")}}\n- {{jsxref(\"Intl/NumberFormat/resolvedOptions\", \"Intl.NumberFormat.prototype.resolvedOptions()\")}}\n- {{jsxref(\"Intl/Collator/resolvedOptions\", \"Intl.Collator.prototype.resolvedOptions()\")}}\n- {{jsxref(\"Intl/DateTimeFormat/resolvedOptions\", \"Intl.DateTimeFormat.prototype.resolvedOptions()\")}}\n- {{jsxref(\"Intl/PluralRules/resolvedOptions\", \"Intl.PluralRules.prototype.resolvedOptions()\")}}\n"
      },
      "supportedlocalesof": {
        "index.md": "---\ntitle: Intl.ListFormat.supportedLocalesOf()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/ListFormat/supportedLocalesOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Intl.ListFormat.supportedLocalesOf\n---\n\n{{JSRef}}\n\nThe **`Intl.ListFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in list formatting without having to fall back to the runtime's default locale.\n\n## Syntax\n\n```js-nolint\nIntl.ListFormat.supportedLocalesOf(locales)\nIntl.ListFormat.supportedLocalesOf(locales, options)\n```\n\n### Parameters\n\n- `locales`\n  - : A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object that may have the following property:\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the {{jsxref(\"Intl\", \"Intl\", \"#locale_identification_and_negotiation\", 1)}} page.\n\n### Return value\n\nAn array of strings representing a subset of the given locale tags that are supported in list formatting without having to fall back to the runtime's default locale.\n\n## Examples\n\n### Using supportedLocalesOf()\n\nAssuming a runtime that supports Indonesian and German but not Balinese in list formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to list formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```js\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.ListFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.ListFormat\")}}\n"
      }
    },
    "locale": {
      "basename": {
        "index.md": "---\ntitle: Intl.Locale.prototype.baseName\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Intl.Locale.baseName\n---\n\n{{JSRef}}\n\nThe **`baseName`** accessor property of {{jsxref(\"Intl.Locale\")}} instances returns a substring of this locale's string representation, containing core information about this locale.\n\n## Description\n\nAn {{jsxref(\"Intl.Locale\")}} object represents a parsed local and options for that locale. The `baseName` property returns basic, core information about the Locale in the form of a substring of the complete data string. Specifically, the property returns the substring containing the language, and the script and region if available.\n\n`baseName` returns the `language [\"-\" script] [\"-\" region] *(\"-\" variant)` subsequence of the [unicode_language_id grammar](https://www.unicode.org/reports/tr35/#Identifiers).\n\n## Examples\n\n### Basic Example\n\n```js\nconst myLoc = new Intl.Locale(\"fr-Latn-CA\"); // Sets locale to Canadian French\nconsole.log(myLoc.toString()); // Prints out \"fr-Latn-CA-u-ca-gregory\"\nconsole.log(myLoc.baseName); // Prints out \"fr-Latn-CA\"\n```\n\n### Example with options in the input string\n\n```js\n// Sets language to Japanese, region to Japan,\n\n// calendar to Gregorian, hour cycle to 24 hours\nconst japan = new Intl.Locale(\"ja-JP-u-ca-gregory-hc-24\");\nconsole.log(japan.toString()); // Prints out \"ja-JP-u-ca-gregory-hc-h24\"\nconsole.log(japan.baseName); // Prints out \"ja-JP\"\n```\n\n### Example with options that override input string\n\n```js\n// Input string indicates language as Dutch and region as Belgium,\n\n// but options object overrides the region and sets it to the Netherlands\nconst dutch = new Intl.Locale(\"nl-Latn-BE\", { region: \"NL\" });\n\nconsole.log(dutch.baseName); // Prints out \"nl-Latn-NL\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n"
      },
      "calendar": {
        "index.md": "---\ntitle: Intl.Locale.prototype.calendar\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Intl.Locale.calendar\n---\n\n{{JSRef}}\n\nThe **`calendar`** accessor property of {{jsxref(\"Intl.Locale\")}} instances returns the calendar type for this locale.\n\n## Description\n\nWhile most of the world uses the Gregorian calendar, there are several regional calendar eras used around the world. The `calendar` property's value is set at construction time, either through the `ca` key of the locale identifier or through the `calendar` option of the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported calendar types, see [`Intl.Locale.prototype.getCalendars()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars#supported_calendar_types).\n\nThe set accessor of `calendar` is `undefined`. You cannot change this property directly.\n\n## Examples\n\nLike other locale subtags, the calendar type can be added to the {{jsxref(\"Intl.Locale\")}} object via the locale string, or a configuration object argument to the constructor.\n\n### Adding a calendar type via the locale string\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), calendar era types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the calendar era type can be added to the initial locale identifier string that is passed into the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor. To add the calendar type, first add the `-u` extension to the string. Next, add the `-ca` extension to indicate that you are adding a calendar type. Finally, add the calendar era type to the string.\n\n```js\nconst locale = new Intl.Locale(\"fr-FR-u-ca-buddhist\");\nconsole.log(locale.calendar); // Prints \"buddhist\"\n```\n\n### Adding a calendar type via the configuration object argument\n\nThe {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor has an optional configuration object argument, which can contain any of several extension types, including calendars. Set the `calendar` property of the configuration object to your desired calendar era, and then pass it into the constructor.\n\n```js\nconst locale = new Intl.Locale(\"fr-FR\", { calendar: \"buddhist\" });\nconsole.log(locale.calendar); // \"buddhist\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [`Intl.Locale.prototype.getCalendars()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars)\n- [Unicode Calendar Identifier](https://www.unicode.org/reports/tr35/#UnicodeCalendarIdentifier) in the Unicode locale data markup language spec\n"
      },
      "casefirst": {
        "index.md": "---\ntitle: Intl.Locale.prototype.caseFirst\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/caseFirst\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Intl.Locale.caseFirst\n---\n\n{{JSRef}}\n\nThe **`caseFirst`** accessor property of {{jsxref(\"Intl.Locale\")}} instances returns whether case is taken into account for this locale's collation rules.\n\n## Description\n\nA locale's collation rules are used to determine how strings are ordered in that locale. Certain locales use a character's case (UPPERCASE or lowercase) in the collation process. This additional rule can be expressed in a {{jsxref(\"Intl.Locale\")}} object's `caseFirst` property.\n\nThere are 3 values that the `caseFirst` property can have, outlined in the table below.\n\n### `caseFirst` values\n\n| Value   | Description                                |\n| ------- | ------------------------------------------ |\n| `upper` | Upper case to be sorted before lower case. |\n| `lower` | Lower case to be sorted before upper case. |\n| `false` | No special case ordering.                  |\n\n## Examples\n\n### Setting the caseFirst value via the locale string\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), the values that `caseFirst` represents correspond to the key `kf`. `kf` is treated as a locale string \"extension subtag\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension key. Thus, the `caseFirst` value can be added to the initial locale identifier string that is passed into the `Locale` constructor. To add the `caseFirst` value, first add the `-u` extension key to the string. Next, add the `-kf` extension key to indicate that you are adding a value for `caseFirst`. Finally, add the `caseFirst` value to the string.\n\n```js\nconst locale = new Intl.Locale(\"fr-Latn-FR-u-kf-upper\");\nconsole.log(locale.caseFirst); // Prints \"upper\"\n```\n\n### Setting the caseFirst value via the configuration object argument\n\nThe {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor has an optional configuration object argument, which can be used to pass extension types. Set the `caseFirst` property of the configuration object to your desired `caseFirst` value, and then pass it into the constructor.\n\n```js\nconst locale = new Intl.Locale(\"en-Latn-US\", { caseFirst: \"lower\" });\nconsole.log(locale.caseFirst); // Prints \"lower\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [Unicode case first collation spec](https://github.com/unicode-org/cldr/blob/main/common/bcp47/collation.xml#L49)\n"
      },
      "collation": {
        "index.md": "---\ntitle: Intl.Locale.prototype.collation\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Intl.Locale.collation\n---\n\n{{JSRef}}\n\nThe **`collation`** accessor property of {{jsxref(\"Intl.Locale\")}} instances returns the [collation type](https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_Collation) for this locale, which is used to order strings according to the locale's rules.\n\n## Description\n\nCollation is the process of ordering strings of characters. It is used whenever strings must be sorted and placed into a certain order, from search query results to ordering records in a database. While the idea of placing strings in order might seem trivial, the idea of order can vary from region to region and language to language. The `collation` property's value is set at construction time, either through the `co` key of the locale identifier or through the `collation` option of the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported collation types, see [`Intl.Locale.prototype.getCollations()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations#supported_collation_types).\n\nThe set accessor of `collation` is `undefined`. You cannot change this property directly.\n\n## Examples\n\nLike other locale subtags, the collation type can be added to the {{jsxref(\"Intl.Locale\")}} object via the locale string, or a configuration object argument to the constructor.\n\n### Adding a collation type via the locale string\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), collation types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the collation type can be added to the initial locale identifier string that is passed into the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor. To add the collation type, first add the `-u` extension to the string. Next, add the `-co` extension to indicate that you are adding a collation type. Finally, add the collation type to the string.\n\n```js\nconst locale = new Intl.Locale(\"zh-Hant-u-co-zhuyin\");\nconsole.log(locale.collation); // \"zhuyin\"\n```\n\n### Adding a collation type via the configuration object argument\n\nThe {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor has an optional configuration object argument, which can contain any of several extension types, including collation types. Set the `collation` property of the configuration object to your desired collation type, and then pass it into the constructor.\n\n```js\nconst locale = new Intl.Locale(\"zh-Hant\", { collation: \"zhuyin\" });\nconsole.log(locale.collation); // \"zhuyin\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [`Intl.Locale.prototype.getCollations()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations)\n"
      },
      "getcalendars": {
        "index.md": "---\ntitle: Intl.Locale.prototype.getCalendars()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Locale.getCalendars\n---\n\n{{JSRef}}\n\nThe **`getCalendars()`** method of {{jsxref(\"Intl.Locale\")}} instances returns a list of one or more unique calendar identifiers for this locale.\n\n> **Note:** In some versions of some browsers, this method was implemented as an accessor property called `calendars`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.calendars === locale.calendars` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## Syntax\n\n```js-nolint\ngetCalendars()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn array of strings representing all calendars commonly used for the `Locale`, sorted in descending preference. If the `Locale` already has a [`calendar`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar), then the returned array contains that single value.\n\nBelow is a list of the supported calendar era types.\n\n### Supported calendar types\n\n- `buddhist`\n  - : Thai Buddhist calendar\n- `chinese`\n  - : Traditional Chinese calendar\n- `coptic`\n  - : Coptic calendar\n- `dangi`\n  - : Traditional Korean calendar\n- `ethioaa`\n  - : Ethiopic calendar, Amete Alem (epoch approx. 5493 B.C.E)\n- `ethiopic`\n  - : Ethiopic calendar, Amete Mihret (epoch approx, 8 C.E.)\n- `gregory`\n  - : Gregorian calendar\n- `hebrew`\n  - : Traditional Hebrew calendar\n- `indian`\n  - : Indian calendar\n- `islamic`\n  - : Islamic calendar\n- `islamic-umalqura`\n  - : Islamic calendar, Umm al-Qura\n- `islamic-tbla`\n  - : Islamic calendar, tabular (intercalary years [2,5,7,10,13,16,18,21,24,26,29] - astronomical epoch)\n- `islamic-civil`\n  - : Islamic calendar, tabular (intercalary years [2,5,7,10,13,16,18,21,24,26,29] - civil epoch)\n- `islamic-rgsa`\n  - : Islamic calendar, Saudi Arabia sighting\n- `iso8601`\n  - : ISO calendar (Gregorian calendar using the ISO 8601 calendar week rules)\n- `japanese`\n  - : Japanese Imperial calendar\n- `persian`\n  - : Persian calendar\n- `roc`\n  - : Civil (algorithmic) Arabic calendar\n- `islamicc`\n  - : Civil (algorithmic) Arabic calendar\n    > **Warning:** The `islamicc` calendar key has been deprecated. Please use `islamic-civil`.\n\n## Examples\n\n### Obtaining supported calendars\n\nIf the `Locale` object doesn't have a `calendar` already, `getCalendars()` lists all commonly-used calendars for the given `Locale`. For examples of explicitly setting a `calendar`, see [`calendar` examples](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar#examples).\n\n```js\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getCalendars()); // [\"gregory\", \"coptic\", \"islamic\", \"islamic-civil\", \"islamic-tbla\"]\n```\n\n```js\nconst jaJP = new Intl.Locale(\"ja-JP\");\nconsole.log(jaJP.getCalendars()); // [\"gregory\", \"japanese\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [`Intl.Locale.prototype.calendar`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar)\n- [Unicode Calendar Identifier](https://www.unicode.org/reports/tr35/#UnicodeCalendarIdentifier) in the Unicode locale data markup language spec\n"
      },
      "getcollations": {
        "index.md": "---\ntitle: Intl.Locale.prototype.getCollations()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Locale.getCollations\n---\n\n{{JSRef}}\n\nThe **`getCollations()`** method of {{jsxref(\"Intl.Locale\")}} instances returns a list of one or more [collation types](https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_collation) for this locale.\n\n> **Note:** In some versions of some browsers, this method was implemented as an accessor property called `collations`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.collations === locale.collations` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## Syntax\n\n```js-nolint\ngetCollations()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn array of strings representing all collation types commonly used for the `Locale`, sorted in alphabetical order, with the `standard` and `search` values always excluded. If the `Locale` already has a [`collation`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation), then the returned array contains that single value.\n\nBelow is a list of the supported collation types, adapted from the [Unicode collation specification](https://github.com/unicode-org/cldr/blob/2dd06669d833823e26872f249aa304bc9d9d2a90/common/bcp47/collation.xml).\n\n### Supported collation types\n\n- `big5han`\n  - : Pinyin ordering for Latin, big5 charset ordering for CJK characters (for Chinese)\n    > **Warning:** The `big5han` collation type is deprecated, not available in Firefox, Chrome or Edge.\n- `compat`\n  - : A previous version of the ordering, for compatibility (for Arabic)\n- `dict`\n  - : Dictionary style ordering (for Sinhala)\n- `direct`\n  - : Binary code point order\n    > **Warning:** The `direct` collation type has been deprecated. Do not use.\n- `ducet`\n  - : The default Unicode collation element table order\n    > **Warning:** The `ducet` collation type is not available to the Web. Use the `und` locale without a collation type specifier instead. `und` is the collation that is the closest to `ducet`.\n- `emoji`\n  - : Recommended ordering for emoji characters (for the `und` locale)\n- `eor`\n  - : European ordering rules (for the `und` locale)\n- `gb2312`\n  - : Pinyin ordering for Latin, gb2312han charset ordering for CJK characters (for Chinese)\n    > **Warning:** The `gb2312` collation type is deprecated, not available in Firefox, Chrome or Edge.\n- `phonebk`\n  - : Phonebook style ordering (for German)\n- `phonetic`\n  - : Phonetic ordering (sorting based on pronunciation; for Lingala)\n- `pinyin`\n  - : Pinyin ordering for Latin and for CJK characters (for Chinese)\n- `reformed`\n  - : Reformed ordering (formerly for Swedish)\n    > **Warning:** Do not use explicitly. This is the old name for the default ordering for Swedish [whose collation naming used to differ from other languages](https://unicode-org.atlassian.net/browse/CLDR-15603). Since this was the default, request `sv` instead of requesting `sv-u-co-reformed`.\n- `search`\n  - : Special collation type for string search\n    > **Warning:** Do not use as a collation type, since in [`Intl.Collator`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator), this collation is activated via the `\"search\"` value for the `usage` option. There is currently no API for substring search, so this is currently only good for filtering a list of strings by trying a full-string match of the key against each list item.\n- `searchjl`\n  - : Special collation type for Korean initial consonant search\n    > **Warning:** This collation is not for sorting, even though it is made available through [`Intl.Collator`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) instantiated with usage `\"sort\"` as opposed to usage `\"search\"`.\n- `standard`\n  - : Default ordering for each language, except Chinese (and, previously, Swedish)\n    > **Warning:** Do not use explicitly. In general, it's unnecessary to specify this explicitly and specifying this for Swedish is problematic due to the different meaning for Swedish in the past.\n- `stroke`\n  - : Pinyin ordering for Latin, stroke order for CJK characters (for Chinese)\n- `trad`\n  - : Traditional style ordering (such as in Spanish)\n- `unihan`\n  - : Radical-stroke ordering for Han characters (for Chinese, Japanese, and Korean). Pinyin ordering for Latin in the case of Chinese.\n    > **Note:** The `unihan` collation type is not available in Chrome or Edge.\n- `zhuyin`\n  - : Pinyin ordering for Latin, zhuyin order for Bopomofo and CJK characters (for Chinese)\n\n## Examples\n\n### Obtaining supported collation types\n\nIf the `Locale` object doesn't have a `collation` already, `getCollations()` lists all commonly-used collation types for the given `Locale`. For examples of explicitly setting a `collation`, see [`collation` examples](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation#examples).\n\n```js\nconst locale = new Intl.Locale(\"zh\");\nconsole.log(locale.getCollations()); // [\"pinyin\", \"stroke\", \"zhuyin\", \"emoji\", \"eor\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [`Intl.Locale.prototype.collation`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/collation)\n"
      },
      "gethourcycles": {
        "index.md": "---\ntitle: Intl.Locale.prototype.getHourCycles()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Locale.getHourCycles\n---\n\n{{JSRef}}\n\nThe **`getHourCycles()`** method of {{jsxref(\"Intl.Locale\")}} instances returns a list of one or more unique hour cycle identifiers for this locale.\n\n> **Note:** In some versions of some browsers, this method was implemented as an accessor property called `hourCycles`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.hourCycles === locale.hourCycles` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## Syntax\n\n```js-nolint\ngetHourCycles()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn array of strings representing all hour cycle types commonly used for the `Locale`, sorted in descending preference. If the `Locale` already has an [`hourCycle`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle), then the returned array contains that single value.\n\nBelow is a list of supported hour cycle types.\n\n### Supported hour cycle types\n\n- `h12`\n  - : Hour system using 1–12; corresponds to 'h' in patterns. The 12 hour clock, with midnight starting at 12:00 am. As used, for example, in the United States.\n- `h23`\n  - : Hour system using 0–23; corresponds to 'H' in patterns. The 24 hour clock, with midnight starting at 0:00.\n- `h11`\n  - : Hour system using 0–11; corresponds to 'K' in patterns. The 12 hour clock, with midnight starting at 0:00 am. Mostly used in Japan.\n- `h24`\n  - : Hour system using 1–24; corresponds to 'k' in pattern. The 24 hour clock, with midnight starting at 24:00. Not used anywhere.\n\n## Examples\n\n### Obtaining supported hour cycles\n\nIf the `Locale` object doesn't have a `hourCycle` already, `getHourCycles()` lists all commonly-used collation types for the given `Locale`. For examples of explicitly setting a `hourCycle`, see [`hourCycle` examples](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle#examples).\n\n```js\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getHourCycles()); // [\"h12\"]\n```\n\n```js\nconst jaJP = new Intl.Locale(\"ja-JP\");\nconsole.log(jaJP.getHourCycles()); // [\"h23\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [`Intl.Locale.prototype.hourCycle`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)\n- [Unicode Hour Cycle Identifier](https://www.unicode.org/reports/tr35/#UnicodeHourCycleIdentifier) in the Unicode locale data markup language spec\n"
      },
      "getnumberingsystems": {
        "index.md": "---\ntitle: Intl.Locale.prototype.getNumberingSystems()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Locale.getNumberingSystems\n---\n\n{{JSRef}}\n\nThe **`getNumberingSystems()`** method of {{jsxref(\"Intl.Locale\")}} instances returns a list of one or more unique [numbering system](https://en.wikipedia.org/wiki/Numeral_system) identifiers for this locale.\n\n> **Note:** In some versions of some browsers, this method was implemented as an accessor property called `numberingSystems`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.numberingSystems === locale.numberingSystems` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## Syntax\n\n```js-nolint\ngetNumberingSystems()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn array of strings representing all numbering systems commonly used for the `Locale`, sorted in descending preference. If the `Locale` already has a [`numberingSystem`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem), then the returned array contains that single value.\n\nA table of the standard Unicode numeral systems can be seen below.\n\n### Supported numbering system types\n\n| Value    | Description                                                                |\n| -------- | -------------------------------------------------------------------------- |\n| adlm     | Adlam digits                                                               |\n| ahom     | Ahom digits                                                                |\n| arab     | Arabic-Indic digits                                                        |\n| arabext  | Extended Arabic-Indic digits                                               |\n| armn     | Armenian upper case numerals — algorithmic                                 |\n| armnlow  | Armenian lower case numerals — algorithmic                                 |\n| bali     | Balinese digits                                                            |\n| beng     | Bengali digits                                                             |\n| bhks     | Bhaiksuki digits                                                           |\n| brah     | Brahmi digits                                                              |\n| cakm     | Chakma digits                                                              |\n| cham     | Cham digits                                                                |\n| cyrl     | Cyrillic numerals — algorithmic                                            |\n| deva     | Devanagari digits                                                          |\n| ethi     | Ethiopic numerals — algorithmic                                            |\n| finance  | Financial numerals — may be algorithmic                                    |\n| fullwide | Full width digits                                                          |\n| geor     | Georgian numerals — algorithmic                                            |\n| gong     | Gunjala Gondi digits                                                       |\n| gonm     | Masaram Gondi digits                                                       |\n| grek     | Greek upper case numerals — algorithmic                                    |\n| greklow  | Greek lower case numerals — algorithmic                                    |\n| gujr     | Gujarati digits                                                            |\n| guru     | Gurmukhi digits                                                            |\n| hanidays | Han-character day-of-month numbering for lunar/other traditional calendars |\n| hanidec  | Positional decimal system using Chinese number ideographs as digits        |\n| hans     | Simplified Chinese numerals — algorithmic                                  |\n| hansfin  | Simplified Chinese financial numerals — algorithmic                        |\n| hant     | Traditional Chinese numerals — algorithmic                                 |\n| hantfin  | Traditional Chinese financial numerals — algorithmic                       |\n| hebr     | Hebrew numerals — algorithmic                                              |\n| hmng     | Pahawh Hmong digits                                                        |\n| hmnp     | Nyiakeng Puachue Hmong digits                                              |\n| java     | Javanese digits                                                            |\n| jpan     | Japanese numerals — algorithmic                                            |\n| jpanfin  | Japanese financial numerals — algorithmic                                  |\n| jpanyear | Japanese first-year Gannen numbering for Japanese calendar                 |\n| kali     | Kayah Li digits                                                            |\n| khmr     | Khmer digits                                                               |\n| knda     | Kannada digits                                                             |\n| lana     | Tai Tham Hora (secular) digits                                             |\n| lanatham | Tai Tham (ecclesiastical) digits                                           |\n| laoo     | Lao digits                                                                 |\n| latn     | Latin digits                                                               |\n| lepc     | Lepcha digits                                                              |\n| limb     | Limbu digits                                                               |\n| mathbold | Mathematical bold digits                                                   |\n| mathdbl  | Mathematical double-struck digits                                          |\n| mathmono | Mathematical monospace digits                                              |\n| mathsanb | Mathematical sans-serif bold digits                                        |\n| mathsans | Mathematical sans-serif digits                                             |\n| mlym     | Malayalam digits                                                           |\n| modi     | Modi digits                                                                |\n| mong     | Mongolian digits                                                           |\n| mroo     | Mro digits                                                                 |\n| mtei     | Meetei Mayek digits                                                        |\n| mymr     | Myanmar digits                                                             |\n| mymrshan | Myanmar Shan digits                                                        |\n| mymrtlng | Myanmar Tai Laing digits                                                   |\n| native   | Native digits                                                              |\n| newa     | Newa digits                                                                |\n| nkoo     | N'Ko digits                                                                |\n| olck     | Ol Chiki digits                                                            |\n| orya     | Oriya digits                                                               |\n| osma     | Osmanya digits                                                             |\n| rohg     | Hanifi Rohingya digits                                                     |\n| roman    | Roman upper case numerals — algorithmic                                    |\n| romanlow | Roman lowercase numerals — algorithmic                                     |\n| saur     | Saurashtra digits                                                          |\n| shrd     | Sharada digits                                                             |\n| sind     | Khudawadi digits                                                           |\n| sinh     | Sinhala Lith digits                                                        |\n| sora     | Sora_Sompeng digits                                                        |\n| sund     | Sundanese digits                                                           |\n| takr     | Takri digits                                                               |\n| talu     | New Tai Lue digits                                                         |\n| taml     | Tamil numerals — algorithmic                                               |\n| tamldec  | Modern Tamil decimal digits                                                |\n| telu     | Telugu digits                                                              |\n| thai     | Thai digits                                                                |\n| tirh     | Tirhuta digits                                                             |\n| tibt     | Tibetan digits                                                             |\n| traditio | Traditional numerals — may be algorithmic                                  |\n| vaii     | Vai digits                                                                 |\n| wara     | Warang Citi digits                                                         |\n| wcho     | Wancho digits                                                              |\n\n## Examples\n\n### Obtaining supported numbering systems\n\nIf the `Locale` object doesn't have a `numberingSystem` already, `getNumberingSystems()` lists all commonly-used numbering systems for the given `Locale`. For examples of explicitly setting a `numberingSystem`, see [`numberingSystem` examples](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem#examples).\n\n```js\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getNumberingSystems()); // [\"arab\"]\n```\n\n```js\nconst ja = new Intl.Locale(\"ja\");\nconsole.log(ja.getNumberingSystems()); // [\"latn\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [`Intl.Locale.prototype.numberingSystem`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem)\n- [Details on the standard Unicode numeral systems](https://github.com/unicode-org/cldr/blob/main/common/supplemental/numberingSystems.xml)\n"
      },
      "gettextinfo": {
        "index.md": "---\ntitle: Intl.Locale.prototype.getTextInfo()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTextInfo\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Locale.getTextInfo\n---\n\n{{JSRef}}\n\nThe **`getTextInfo()`** method of {{jsxref(\"Intl.Locale\")}} instances returns the ordering of characters indicated by either `ltr` (left-to-right) or by `rtl` (right-to-left) for this locale.\n\n> **Note:** In some versions of some browsers, this method was implemented as an accessor property called `textInfo`. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of `locale.textInfo === locale.textInfo` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## Syntax\n\n```js-nolint\ngetTextInfo()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn object representing text typesetting information associated with the Locale data specified in [UTS 35's Layouts Elements](https://www.unicode.org/reports/tr35/tr35-general.html#Layout_Elements). It has the following properties:\n\n- `direction`\n  - : A string indicating the direction of text for the locale. Can be either `\"ltr\"` (left-to-right) or `\"rtl\"` (right-to-left).\n\n## Examples\n\n### Obtaining text info\n\nReturn the supported text directions for a given `Locale`.\n\n```js\nconst ar = new Intl.Locale(\"ar\");\nconsole.log(ar.getTextInfo()); // { direction: \"rtl\" }\nconsole.log(ar.getTextInfo().direction); // \"rtl\"\n```\n\n```js\nconst es = new Intl.Locale(\"es\");\nconsole.log(es.getTextInfo()); // { direction: \"ltr\" }\nconsole.log(es.getTextInfo().direction); // \"ltr\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n"
      },
      "gettimezones": {
        "index.md": "---\ntitle: Intl.Locale.prototype.getTimeZones()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTimeZones\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Locale.getTimeZones\n---\n\n{{JSRef}}\n\nThe **`getTimeZones()`** method of {{jsxref(\"Intl.Locale\")}} instances returns a list of supported time zones for this locale.\n\n> **Note:** In some versions of some browsers, this method was implemented as an accessor property called `timeZones`. However, because it returns a new array on each access, it is now implemented as a method to prevent the situation of `locale.timeZones === locale.timeZones` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## Syntax\n\n```js-nolint\ngetTimeZones()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn array of strings representing supported time zones for the associated `Locale`, where each value is an [IANA time zone canonical name](https://en.wikipedia.org/wiki/Daylight_saving_time#IANA_time_zone_database), sorted in alphabetical order. If the locale identifier does not contain a region subtag, the returned value is `undefined`.\n\n## Examples\n\n### Obtaining supported time zones\n\nList supported time zones for a given `Locale`.\n\n```js\nconst arEG = new Intl.Locale(\"ar-EG\");\nconsole.log(arEG.getTimeZones()); // [\"Africa/Cairo\"]\n```\n\n```js\nconst jaJP = new Intl.Locale(\"ja-JP\");\nconsole.log(jaJP.getTimeZones()); // [\"Asia/Tokyo\"]\n```\n\n```js\nconst ar = new Intl.Locale(\"ar\");\nconsole.log(ar.getTimeZones()); // undefined\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [IANA time zone database](https://en.wikipedia.org/wiki/Daylight_saving_time#IANA_time_zone_database) on Wikipedia\n"
      },
      "getweekinfo": {
        "index.md": "---\ntitle: Intl.Locale.prototype.getWeekInfo()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/getWeekInfo\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Locale.getWeekInfo\n---\n\n{{JSRef}}\n\nThe **`getWeekInfo()`** method of {{jsxref(\"Intl.Locale\")}} instances returns a `weekInfo` object with the properties `firstDay`, `weekend` and `minimalDays` for this locale.\n\n> **Note:** In some versions of some browsers, this method was implemented as an accessor property called `weekInfo`. However, because it returns a new object on each access, it is now implemented as a method to prevent the situation of `locale.weekInfo === locale.weekInfo` returning `false`. Check the [browser compatibility table](#browser_compatibility) for details.\n\n## Syntax\n\n```js-nolint\ngetWeekInfo()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nAn object representing week information associated with the Locale data specified in [UTS 35's Week Elements](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Patterns_Week_Elements). It has the following properties:\n\n- `firstDay`\n  - : An integer indicating the first day of the week for the locale. Can be either `1` (Monday) or `7` (Sunday).\n- `weekend`\n  - : An array of integers indicating the weekend days for the locale, where `1` is Monday and `7` is Sunday.\n- `minimalDays`\n  - : An integer between 1 and 7 indicating the minimal days required in the first week of a month or year, for calendar purposes.\n\n## Examples\n\n### Obtaining the Week Information\n\nReturn the week information for a given `Locale`.\n\n```js\nconst he = new Intl.Locale(\"he\");\nconsole.log(he.getWeekInfo()); // { firstDay: 7, weekend: [5, 6], minimalDays: 1 }\n\nconst af = new Intl.Locale(\"af\");\nconsole.log(af.getWeekInfo()); // { firstDay: 7, weekend: [6, 7], minimalDays: 1 }\n\nconst enGB = new Intl.Locale(\"en-GB\");\nconsole.log(enGB.getWeekInfo()); // { firstDay: 1, weekend: [6, 7], minimalDays: 4 }\n\nconst msBN = new Intl.Locale(\"ms-BN\");\nconsole.log(msBN.getWeekInfo()); // { firstDay: 7, weekend: [5, 7], minimalDays: 1 }\n// Brunei weekend is Friday and Sunday but not Saturday\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n"
      },
      "hourcycle": {
        "index.md": "---\ntitle: Intl.Locale.prototype.hourCycle\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Intl.Locale.hourCycle\n---\n\n{{JSRef}}\n\nThe **`hourCycle`** accessor property of {{jsxref(\"Intl.Locale\")}} instances returns the hour cycle type for this locale.\n\n## Description\n\nThere are 2 main types of time keeping conventions (clocks) used around the world: the 12 hour clock and the 24 hour clock. The `hourCycle` property's value is set at construction time, either through the `hc` key of the locale identifier or through the `hourCycle` option of the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported hour cycle types, see [`Intl.Locale.prototype.getHourCycles()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles#supported_hour_cycle_types).\n\nThe set accessor of `hourCycle` is `undefined`. You cannot change this property directly.\n\n## Examples\n\nLike other locale subtags, the hour cycle type can be added to the {{jsxref(\"Intl.Locale\")}} object via the locale string, or a configuration object argument to the constructor.\n\n### Adding an hour cycle via the locale string\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), hour cycle types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the hour cycle type can be added to the initial locale identifier string that is passed into the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor. To add the hour cycle type, first add the `-u` extension key to the string. Next, add the `-hc` extension to indicate that you are adding an hour cycle. Finally, add the hour cycle type to the string.\n\n```js\nconst locale = new Intl.Locale(\"fr-FR-u-hc-h23\");\nconsole.log(locale.hourCycle); // \"h23\"\n```\n\n### Adding an hour cycle via the configuration object argument\n\nThe {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor has an optional configuration object argument, which can contain any of several extension types, including hour cycle types. Set the `hourCycle` property of the configuration object to your desired hour cycle type, and then pass it into the constructor.\n\n```js\nconst locale = new Intl.Locale(\"en-US\", { hourCycle: \"h12\" });\nconsole.log(locale.hourCycle); // \"h12\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [`Intl.Locale.prototype.getHourCycles()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles)\n- [Unicode Hour Cycle Identifier](https://www.unicode.org/reports/tr35/#UnicodeHourCycleIdentifier) in the Unicode locale data markup language spec\n"
      },
      "index.md": "---\ntitle: Intl.Locale\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Intl.Locale\n---\n\n{{JSRef}}\n\nThe **`Intl.Locale`** object is a standard built-in property of the Intl object that represents a Unicode locale identifier.\n\n{{EmbedInteractiveExample(\"pages/js/intl-locale.html\")}}\n\n## Description\n\nThe **`Intl.Locale`** object was created to allow for easier manipulation of Unicode locales. Unicode represents locales with a string, called a _locale identifier_. The locale identifier consists of a _language identifier_ and _extension tags_. Language identifiers are the core of the locale, consisting of _language_, _script_, and _region subtags_. Additional information about the locale is stored in the optional _extension tags_. Extension tags hold information about locale aspects such as calendar type, clock type, and numbering system type.\n\nTraditionally, the Intl API used strings to represent locales, just as Unicode does. This is a simple and lightweight solution that works well. Adding a Locale class, however, adds ease of parsing and manipulating the language, script, and region, as well as extension tags. The following properties of `Intl.Locale` correspond to Unicode locale identifier subtags:\n\n| Property                                                     | Corresponding subtag         |\n| ------------------------------------------------------------ | ---------------------------- |\n| {{jsxref(\"Intl/Locale/language\", \"language\")}}               | `language` (first part)      |\n| {{jsxref(\"Intl/Locale/script\", \"script\")}}                   | `script` (second part)       |\n| {{jsxref(\"Intl/Locale/region\", \"region\")}}                   | `region` (second/third part) |\n| {{jsxref(\"Intl/Locale/calendar\", \"calendar\")}}               | `ca` (extension)             |\n| {{jsxref(\"Intl/Locale/caseFirst\", \"caseFirst\")}}             | `kf` (extension)             |\n| {{jsxref(\"Intl/Locale/collation\", \"collation\")}}             | `co` (extension)             |\n| {{jsxref(\"Intl/Locale/hourCycle\", \"hourCycle\")}}             | `hc` (extension)             |\n| {{jsxref(\"Intl/Locale/numberingSystem\", \"numberingSystem\")}} | `nu` (extension)             |\n| {{jsxref(\"Intl/Locale/numeric\", \"numeric\")}}                 | `kn` (extension)             |\n\nThe information above is exactly provided as-is when the `Locale` object is constructed, without consulting any external database. The `Intl.Locale` object additionally provides some methods that return information about the locale's real-world information, such as available calendars, collations, and numbering systems.\n\n## Constructor\n\n- {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}}\n  - : Creates a new `Locale` object.\n\n## Instance properties\n\nThese properties are defined on `Intl.Locale.prototype` and shared by all `Intl.Locale` instances.\n\n- {{jsxref(\"Intl/Locale/baseName\", \"Intl.Locale.prototype.baseName\")}}\n  - : Returns basic, core information about the `Locale` in the form of a substring of the complete data string.\n- {{jsxref(\"Intl/Locale/calendar\", \"Intl.Locale.prototype.calendar\")}}\n  - : Returns the part of the `Locale` that indicates the Locale's calendar era.\n- {{jsxref(\"Intl/Locale/caseFirst\", \"Intl.Locale.prototype.caseFirst\")}}\n  - : Returns whether case is taken into account for the locale's collation rules.\n- {{jsxref(\"Intl/Locale/collation\", \"Intl.Locale.prototype.collation\")}}\n  - : Returns the collation type for the `Locale`, which is used to order strings according to the locale's rules.\n- {{jsxref(\"Object/constructor\", \"Intl.Locale.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Intl.Locale` instances, the initial value is the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale\")}} constructor.\n- {{jsxref(\"Intl/Locale/hourCycle\", \"Intl.Locale.prototype.hourCycle\")}}\n  - : Returns the time keeping format convention used by the locale.\n- {{jsxref(\"Intl/Locale/language\", \"Intl.Locale.prototype.language\")}}\n  - : Returns the language associated with the locale.\n- {{jsxref(\"Intl/Locale/numberingSystem\", \"Intl.Locale.prototype.numberingSystem\")}}\n  - : Returns the numeral system used by the locale.\n- {{jsxref(\"Intl/Locale/numeric\", \"Intl.Locale.prototype.numeric\")}}\n  - : Returns whether the locale has special collation handling for numeric characters.\n- {{jsxref(\"Intl/Locale/region\", \"Intl.Locale.prototype.region\")}}\n  - : Returns the region of the world (usually a country) associated with the locale.\n- {{jsxref(\"Intl/Locale/script\", \"Intl.Locale.prototype.script\")}}\n  - : Returns the script used for writing the particular language used in the locale.\n- `Intl.Locale.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.Locale\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Intl/Locale/getCalendars\", \"Intl.Locale.prototype.getCalendars()\")}}\n  - : Returns an {{jsxref(\"Array\")}} of available calendar identifiers, according to the locale's rules.\n- {{jsxref(\"Intl/Locale/getCollations\", \"Intl.Locale.prototype.getCollations()\")}}\n  - : Returns an {{jsxref(\"Array\")}} of the collation types for the `Locale`.\n- {{jsxref(\"Intl/Locale/getHourCycles\", \"Intl.Locale.prototype.getHourCycles()\")}}\n  - : Returns an {{jsxref(\"Array\")}} of hour cycle identifiers, indicating either the 12-hour clock (\"h12\"), the Japanese 12-hour clock (\"h11\"), the 24-hour clock (\"h23\"), or the unused format \"h24\".\n- {{jsxref(\"Intl/Locale/getNumberingSystems\", \"Intl.Locale.prototype.getNumberingSystems()\")}}\n  - : Returns an {{jsxref(\"Array\")}} of numbering system identifiers available according to the locale's rules.\n- {{jsxref(\"Intl/Locale/getTextInfo\", \"Intl.Locale.prototype.getTextInfo()\")}}\n  - : Returns the part indicating the ordering of characters `ltr` (left-to-right) or `rtl` (right-to-left).\n- {{jsxref(\"Intl/Locale/getTimeZones\", \"Intl.Locale.prototype.getTimeZones()\")}}\n  - : Returns an {{jsxref(\"Array\")}} of time zone identifiers, associated with the `Locale`.\n- {{jsxref(\"Intl/Locale/getWeekInfo\", \"Intl.Locale.prototype.getWeekInfo()\")}}\n  - : Returns [UTS 35's Week Elements](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Patterns_Week_Elements) according to the locale rules.\n- {{jsxref(\"Intl/Locale/maximize\", \"Intl.Locale.prototype.maximize()\")}}\n  - : Gets the most likely values for the language, script, and region of the locale based on existing values.\n- {{jsxref(\"Intl/Locale/minimize\", \"Intl.Locale.prototype.minimize()\")}}\n  - : Attempts to remove information about the locale that would be added by calling {{jsxref(\"Intl/Locale/maximize\", \"maximize()\")}}.\n- {{jsxref(\"Intl/Locale/toString\", \"Intl.Locale.prototype.toString()\")}}\n  - : Returns the Locale's full locale identifier string.\n\n## Examples\n\n### Basic usage\n\nAt its very simplest, the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor takes a locale identifier string as its argument:\n\n```js\nconst us = new Intl.Locale(\"en-US\");\n```\n\n### Using the Locale constructor with an options object\n\nThe constructor also takes an optional configuration object argument, which can contain any of several extension types. For example, set the {{jsxref(\"Intl/Locale/hourCycle\", \"hourCycle\")}} property of the configuration object to your desired hour cycle type, and then pass it into the constructor:\n\n```js\nconst us12hour = new Intl.Locale(\"en-US\", { hourCycle: \"h12\" });\nconsole.log(us12hour.hourCycle); // Prints \"h12\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Intl.Locale` in FormatJS](https://formatjs.io/docs/polyfills/intl-locale/)\n- {{jsxref(\"Intl\")}}\n- [Canonical Unicode Locale Identifiers](https://www.unicode.org/reports/tr35/#Canonical_Unicode_Locale_Identifiers) in the Unicode locale data markup language spec\n",
      "language": {
        "index.md": "---\ntitle: Intl.Locale.prototype.language\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/language\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Intl.Locale.language\n---\n\n{{JSRef}}\n\nThe **`language`** accessor property of {{jsxref(\"Intl.Locale\")}} instances returns the language associated with this locale.\n\n## Description\n\nLanguage is one of the core features of a locale. The Unicode specification treats the language identifier of a locale as the language and the region together (to make a distinction between dialects and variations, e.g. British English vs. American English). The `language` property of a {{jsxref(\"Intl.Locale\")}} returns strictly the locale's language subtag.\n\n## Examples\n\n### Setting the language in the locale identifier string argument\n\nIn order to be a valid Unicode locale identifier, a string must start with the language subtag. The main argument to the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor must be a valid Unicode locale identifier, so whenever the constructor is used, it must be passed an identifier with a language subtag.\n\n```js\nconst locale = new Intl.Locale(\"en-Latn-US\");\nconsole.log(locale.language); // Prints \"en\"\n```\n\n### Overriding language via the configuration object\n\nWhile the language subtag must be specified, the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor takes a configuration object, which can override the language subtag.\n\n```js\nconst locale = new Intl.Locale(\"en-Latn-US\", { language: \"es\" });\nconsole.log(locale.language); // Prints \"es\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [Unicode language subtag](https://www.unicode.org/reports/tr35/#unicode_language_subtag_validity) in the Unicode locale data markup language spec\n"
      },
      "locale": {
        "index.md": "---\ntitle: Intl.Locale() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Intl.Locale.Locale\n---\n\n{{JSRef}}\n\nThe **`Intl.Locale()`** constructor creates {{jsxref(\"Intl.Locale\")}} objects.\n\n{{EmbedInteractiveExample(\"pages/js/intl-locale.html\")}}\n\n## Syntax\n\n```js-nolint\nnew Intl.Locale(tag)\nnew Intl.Locale(tag, options)\n```\n\n> **Note:** `Intl.Locale()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `tag`\n  - : The Unicode locale identifier string. For the syntax of locale identifier strings, see the [Intl main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument). Note that the `Intl.Locale` constructor, unlike most other `Intl` constructors, does not accept an array of locales or `undefined`.\n- `options`\n  - : An object that contains configuration for the Locale. Option values here take priority over extension keys in the locale identifier. Possible properties are:\n    - `language`\n      - : The language. Any syntactically valid string following the [`unicode_language_subtag`](https://unicode.org/reports/tr35/#unicode_language_subtag) grammar (2–3 or 5–8 letters) is accepted, but the implementation only recognizes certain kinds.\n    - `script`\n      - : The script. Any syntactically valid string following the [`unicode_script_subtag`](https://unicode.org/reports/tr35/#unicode_script_subtag) grammar (4 letters) is accepted, but the implementation only recognizes certain kinds.\n    - `region`\n      - : The region. Any syntactically valid string following the [`unicode_region_subtag`](https://unicode.org/reports/tr35/#unicode_region_subtag) grammar (either 2 letters or 3 digits) is accepted, but the implementation only recognizes certain kinds.\n    - `calendar`\n      - : The calendar. Any syntactically valid string following the [`type`](https://unicode.org/reports/tr35/#Unicode_locale_identifier) grammar (one or more segments of 3–8 alphanumerals, joined by hyphens) is accepted, but the implementation only recognizes certain kinds, which are listed in [`Intl.Locale.prototype.getCalendars`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCalendars#supported_calendar_types).\n    - `collation`\n      - : The collation. Any syntactically valid string following the `type` grammar is accepted, but the implementation only recognizes certain kinds, which are listed in [`Intl.Locale.prototype.getCollations`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getCollations#supported_collation_types).\n    - `numberingSystem`\n      - : The numbering system. Any syntactically valid string following the `type` grammar is accepted, but the implementation only recognizes certain kinds, which are listed in [`Intl.Locale.prototype.getNumberingSystems`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_systems).\n    - `caseFirst`\n      - : The case-first sort option. Possible values are `\"upper\"`, `\"lower\"`, or `\"false\"`.\n    - `hourCycle`\n      - : The hour cycle. Possible values are `\"h23\"`, `\"h12\"`, `\"h11\"`, or the practically unused `\"h24\"`, which are explained in [`Intl.Locale.prototype.getHourCycles`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getHourCycles#supported_hour_cycle_types)\n    - `numeric`\n      - : The numeric sort option. A boolean.\n\n## Examples\n\n### Basic usage\n\nAt its very simplest, the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor takes\na locale identifier string as its argument:\n\n```js\nconst us = new Intl.Locale(\"en-US\");\n```\n\n### Using the Locale constructor with an options object\n\nThe constructor also takes an optional configuration object argument, which can contain\nany of several extension types. For example, set the\n[`hourCycle`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/hourCycle)\nproperty of the configuration object to your desired hour cycle type, and then pass it\ninto the constructor:\n\n```js\nconst locale = new Intl.Locale(\"en-US\", { hourCycle: \"h12\" });\nconsole.log(locale.hourCycle); // \"h12\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Intl.Locale` in FormatJS](https://formatjs.io/docs/polyfills/intl-locale/)\n- {{jsxref(\"Intl.Collator\")}}\n- [Canonical Unicode Locale Identifiers](https://www.unicode.org/reports/tr35/#Canonical_Unicode_Locale_Identifiers) in the Unicode locale data markup language spec\n"
      },
      "maximize": {
        "index.md": "---\ntitle: Intl.Locale.prototype.maximize()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Locale.maximize\n---\n\n{{JSRef}}\n\nThe **`maximize()`** method of {{jsxref(\"Intl.Locale\")}} instances gets the\nmost likely values for the language, script, and region of this locale based on\nexisting values.\n\n{{EmbedInteractiveExample(\"pages/js/intl-locale-prototype-maximize.html\")}}\n\n## Syntax\n\n```js-nolint\nmaximize()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA {{jsxref(\"Intl.Locale\")}} instance whose `baseName` property returns\nthe result of the [Add Likely Subtags](https://www.unicode.org/reports/tr35/#Likely_Subtags) algorithm executed against _{{jsxref(\"Intl/Locale/baseName\", \"locale.baseName\")}}_.\n\n## Description\n\nSometimes, it is convenient to be able to identify the most likely locale language\nidentifier subtags based on an incomplete language ID. The Add Likely Subtags\nalgorithm gives us this functionality. For instance, given the language ID \"en\", the\nalgorithm would return \"en-Latn-US\", since English can only be written in the Latin\nscript, and is most likely to be used in the United States, as it is the largest\nEnglish-speaking country in the world. This functionality is provided to JavaScript\nprogrammers via the `maximize()` method. `maximize()` only\naffects the main subtags that comprise the [language identifier](https://www.unicode.org/reports/tr35/#Language_Locale_Field_Definitions): language, script, and region subtags.\nOther subtags after the \"-u\" in the locale identifier are called extension subtags and\nare not affected by the `maximize()` method. Examples of these subtags\ninclude {{jsxref(\"Intl/Locale/hourCycle\", \"hourCycle\")}},\n{{jsxref(\"Intl/Locale/calendar\", \"calendar\")}}, and {{jsxref(\"Intl/Locale/numeric\", \"numeric\")}}.\n\n## Examples\n\n### Using maximize\n\n```js\nconst myLocale = new Intl.Locale(\"fr\", {\n  hourCycle: \"h12\",\n  calendar: \"gregory\",\n});\nconsole.log(myLocale.baseName); // Prints \"fr\"\nconsole.log(myLocale.toString()); // Prints \"fr-u-ca-gregory-hc-h12\"\nconst myLocMaximized = myLocale.maximize();\n\n// Prints \"fr-Latn-FR\". The \"Latn\" and \"FR\" tags are added,\n// since French is only written in the Latin script and is most likely to be spoken in France.\nconsole.log(myLocMaximized.baseName);\n\n// Prints \"fr-Latn-FR-u-ca-gregory-hc-h12\".\n// Note that the extension tags (after \"-u\") remain unchanged.\nconsole.log(myLocMaximized.toString());\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- {{jsxref(\"Intl/Locale/baseName\", \"baseName\")}}\n- [Likely Subtags](https://www.unicode.org/reports/tr35/#Likely_Subtags) in the Unicode locale data markup language spec\n"
      },
      "minimize": {
        "index.md": "---\ntitle: Intl.Locale.prototype.minimize()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/minimize\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Locale.minimize\n---\n\n{{JSRef}}\n\nThe **`minimize()`** method of {{jsxref(\"Intl.Locale\")}} instances attempts to\nremove information about this locale that would be added by calling\n{{jsxref(\"Intl/Locale/maximize\", \"maximize()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/intl-locale-prototype-minimize.html\")}}\n\n## Syntax\n\n```js-nolint\nminimize()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA {{jsxref(\"Intl.Locale\")}} instance whose `baseName` property returns\nthe result of the [Remove Likely Subtags](https://www.unicode.org/reports/tr35/#Likely_Subtags) algorithm\nexecuted against _{{jsxref(\"Intl/Locale/baseName\", \"locale.baseName\")}}_.\n\n## Description\n\nThis method carries out the reverse of {{jsxref(\"Intl/Locale/maximize\", \"maximize()\")}},\nremoving any language, script, or region subtags from the locale language identifier\n(essentially the contents of `baseName`). This is useful when there are\nsuperfluous subtags in the language identifier; for instance, \"en-Latn\" can be\nsimplified to \"en\", since \"Latn\" is the only script used to write English.\n`minimize()` only affects the main subtags that comprise\nthe [language identifier](https://www.unicode.org/reports/tr35/#Language_Locale_Field_Definitions):\nlanguage, script, and region subtags. Other subtags after the \"-u\"\nin the locale identifier are called extension subtags and are not affected by the\n`minimize()` method. Examples of these subtags include\n{{jsxref(\"Intl/Locale/hourCycle\", \"hourCycle\")}}, {{jsxref(\"Intl/Locale/calendar\", \"calendar\")}}, and {{jsxref(\"Intl/Locale/numeric\", \"numeric\")}}.\n\n## Examples\n\n### Using minimize\n\n```js\nconst myLocale = new Intl.Locale(\"fr-Latn-FR\", {\n  hourCycle: \"h12\",\n  calendar: \"gregory\",\n});\nconsole.log(myLocale.baseName); // Prints \"fr-Latn-FR\"\nconsole.log(myLocale.toString()); // Prints \"fr-Latn-FR-u-ca-gregory-hc-h12\"\n\nconst myLocMinimized = myLocale.minimize();\n\n// Prints \"fr\", since French is only written in the Latin script\n// and is most likely to be spoken in France.\nconsole.log(myLocMinimized.baseName);\n\n// Prints \"fr-u-ca-gregory-hc-h12\".\n// Note that the extension tags (after \"-u\") remain unchanged.\nconsole.log(myLocMinimized.toString());\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- {{jsxref(\"Intl/Locale/baseName\", \"baseName\")}}\n"
      },
      "numberingsystem": {
        "index.md": "---\ntitle: Intl.Locale.prototype.numberingSystem\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Intl.Locale.numberingSystem\n---\n\n{{JSRef}}\n\nThe **`numberingSystem`** accessor property of {{jsxref(\"Intl.Locale\")}} instances returns the [numeral system](https://en.wikipedia.org/wiki/Numeral_system) for this locale.\n\n## Description\n\nA numeral system is a system for expressing numbers. The `numberingSystem` property's value is set at construction time, either through the `nu` key of the locale identifier or through the `numberingSystem` option of the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor. The latter takes priority if they are both present; and if neither is present, the property has value `undefined`.\n\nFor a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types).\n\n## Examples\n\nLike other locale subtags, the numbering system type can be added to the {{jsxref(\"Intl.Locale\")}} object via the locale string, or a configuration object argument to the constructor.\n\n### Adding a numbering system via the locale string\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), numbering system types are locale key \"extension subtags\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension. Thus, the numbering system type can be added to the initial locale identifier string that is passed into the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor. To add the numbering system type, first add the `-u` extension key to the string. Next, add the `-nu` extension to indicate that you are adding a numbering system. Finally, add the numbering system type to the string.\n\n```js\nconst locale = new Intl.Locale(\"fr-Latn-FR-u-nu-mong\");\nconsole.log(locale.numberingSystem); // \"mong\"\n```\n\n### Adding a numbering system via the configuration object argument\n\nThe {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor has an optional configuration object argument, which can contain any of several extension types, including numbering system types. Set the `numberingSystem` property of the configuration object to your desired numbering system type, and then pass it into the constructor.\n\n```js\nconst locale = new Intl.Locale(\"en-Latn-US\", { numberingSystem: \"latn\" });\nconsole.log(locale.numberingSystem); // \"latn\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [`Intl.Locale.prototype.getNumberingSystems()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems)\n- [Details on the standard Unicode numeral systems](https://github.com/unicode-org/cldr/blob/main/common/supplemental/numberingSystems.xml)\n"
      },
      "numeric": {
        "index.md": "---\ntitle: Intl.Locale.prototype.numeric\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/numeric\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Intl.Locale.numeric\n---\n\n{{JSRef}}\n\nThe **`numeric`** accessor property of {{jsxref(\"Intl.Locale\")}} instances returns whether this locale has special collation handling for numeric characters.\n\n## Description\n\nLike {{jsxref(\"Intl/Locale/caseFirst\", \"caseFirst\")}}, `numeric` represents a modification to the collation rules utilized by the locale. `numeric` is a boolean value, which means that it can be either `true` or `false`. If `numeric` is set to `false`, there will be no special handling of numeric values in strings. If `numeric` is set to `true`, then the locale will take numeric characters into account when collating strings. This special numeric handling means that sequences of decimal digits will be compared as numbers. For example, the string \"A-21\" will be considered less than \"A-123\".\n\n## Examples\n\n### Setting the numeric value via the locale string\n\nIn the [Unicode locale string spec](https://www.unicode.org/reports/tr35/), the values that `numeric` represents correspond to the key `kn`. `kn` is considered a locale string \"extension subtag\". These subtags add additional data about the locale, and are added to locale identifiers by using the `-u` extension key. Thus, the `numeric` value can be added to the initial locale identifier string that is passed into the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor. To set the `numeric` value, first add the `-u` extension key to the string. Next, add the `-kn` extension key to indicate that you are adding a value for `numeric`. Finally, add the `numeric` value to the string. If you want to set `numeric` to `true`, adding the `kn` key will suffice. To set the value to `false`, you must specify in by adding `\"false\"` after the `kn` key.\n\n```js\nconst locale = new Intl.Locale(\"fr-Latn-FR-u-kn-false\");\nconsole.log(locale.numeric); // Prints \"false\"\n```\n\n### Setting the numeric value via the configuration object argument\n\nThe {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor has an optional configuration object argument, which can be used to pass extension types. Set the `numeric` property of the configuration object to your desired `numeric` value and pass it into the constructor.\n\n```js\nconst locale = new Intl.Locale(\"en-Latn-US\", { numeric: true });\nconsole.log(locale.numeric); // Prints \"true\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n"
      },
      "region": {
        "index.md": "---\ntitle: Intl.Locale.prototype.region\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/region\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Intl.Locale.region\n---\n\n{{JSRef}}\n\nThe **`region`** accessor property of {{jsxref(\"Intl.Locale\")}} instances returns the region of the world (usually a country) associated with this locale.\n\n## Description\n\nThe region is an essential part of the locale identifier, as it places the locale in a specific area of the world. Knowing the locale's region is vital to identifying differences between locales. For example, English is spoken in the United Kingdom and the United States of America, but there are differences in spelling and other language conventions between those two countries. Knowing the locale's region helps JavaScript programmers make sure that the content from their sites and applications is correctly displayed when viewed from different areas of the world.\n\n## Examples\n\n### Setting the region in the locale identifier string argument\n\nThe region is the third part of a valid Unicode language identifier string, and can be set by adding it to the locale identifier string that is passed into the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor. The region is a mandatory part of a\n\n```js\nconst locale = new Intl.Locale(\"en-Latn-US\");\nconsole.log(locale.region); // Prints \"US\"\n```\n\n### Setting the region via the configuration object\n\nThe {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor takes a configuration object, which can be used to set the region subtag and property.\n\n```js\nconst locale = new Intl.Locale(\"fr-Latn\", { region: \"FR\" });\nconsole.log(locale.region); // Prints \"FR\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [Unicode region chart](https://unicode-org.github.io/cldr-staging/charts/latest/supplemental/territory_containment_un_m_49.html)\n"
      },
      "script": {
        "index.md": "---\ntitle: Intl.Locale.prototype.script\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/script\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Intl.Locale.script\n---\n\n{{JSRef}}\n\nThe **`script`** accessor property of {{jsxref(\"Intl.Locale\")}} instances returns the script used for writing the particular language used in this locale.\n\n## Description\n\nA script, sometimes called writing system, is one of the core attributes of a locale. It indicates the set of symbols, or glyphs, that are used to write a particular language. For instance, the script associated with English is Latin, whereas the script typically associated with Korean is Hangul. In many cases, denoting a script is not strictly necessary, since the language (which is necessary) is only written in a single script. There are exceptions to this rule, however, and it is important to indicate the script whenever possible, in order to have a complete Unicode language identifier.\n\n## Examples\n\n### Setting the script in the locale identifier string argument\n\nThe script is the second part of a valid Unicode language identifier string, and can be set by adding it to the locale identifier string that is passed into the {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor. Note that the script is not a required part of a locale identifier.\n\n```js\nconst locale = new Intl.Locale(\"en-Latn-US\");\nconsole.log(locale.script); // Prints \"Latn\"\n```\n\n### Setting the script via the configuration object\n\nThe {{jsxref(\"Intl/Locale/Locale\", \"Intl.Locale()\")}} constructor takes a configuration object, which can be used to set the script subtag and property.\n\n```js\nconst locale = new Intl.Locale(\"fr-FR\", { script: \"Latn\" });\nconsole.log(locale.script); // Prints \"Latn\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- [Unicode script subtag](https://www.unicode.org/reports/tr35/#unicode_script_subtag_validity) in the Unicode locale data markup language spec\n"
      },
      "tostring": {
        "index.md": "---\ntitle: Intl.Locale.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Locale/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Locale.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"Intl.Locale\")}} instances returns this Locale's full [locale identifier string](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier).\n\n{{EmbedInteractiveExample(\"pages/js/intl-locale-prototype-tostring.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe _locale_'s Unicode locale identifier string.\n\n## Description\n\nThe `Locale` object is a JavaScript representation of a concept\nUnicode locale identifier. Information about a particular locale (language, script,\ncalendar type, etc.) can be encoded in a locale identifier string. To make it easier\nto work with these locale identifiers, the `Locale` object was\nintroduced to JavaScript. Calling the `toString` method on a Locale object\nwill return the identifier string for that particular Locale. The\n`toString` method allows `Locale` instances to be\nprovided as an argument to existing `Intl` constructors, serialized in\nJSON, or any other context where an exact string representation is useful.\n\n## Examples\n\n### Using toString\n\n```js\nconst myLocale = new Intl.Locale(\"fr-Latn-FR\", {\n  hourCycle: \"h12\",\n  calendar: \"gregory\",\n});\nconsole.log(myLocale.baseName); // Prints \"fr-Latn-FR\"\nconsole.log(myLocale.toString()); // Prints \"fr-Latn-FR-u-ca-gregory-hc-h12\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Locale\")}}\n- {{jsxref(\"Intl/Locale/baseName\", \"baseName\")}}\n"
      }
    },
    "numberformat": {
      "format": {
        "index.md": "---\ntitle: Intl.NumberFormat.prototype.format()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.NumberFormat.format\n---\n\n{{JSRef}}\n\nThe **`format()`** method of {{jsxref(\"Intl.NumberFormat\")}} instances formats a number according to the [locale and formatting options](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters) of this `Intl.NumberFormat` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-numberformat-prototype-format.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nformat(number)\n```\n\n### Parameters\n\n- `number`\n  - : A {{jsxref(\"Number\")}}, {{jsxref(\"BigInt\")}}, or string, to format. Strings are parsed in the same way as in [number conversion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), except that `format()` will use the exact value that the string represents, avoiding loss of precision during implicitly conversion to a number.\n\n> **Note:** Older versions of the specification parsed strings as a {{jsxref(\"Number\")}}.\n> Check the compatibility table for your browser.\n\n### Return value\n\nA string representing the given `number` formatted according to the locale and formatting options of this {{jsxref(\"Intl.NumberFormat\")}} object.\n\n## Description\n\n{{jsxref(\"Number\")}} values in JavaScript suffer from loss of precision if they are too big or too small, making the text representation inaccurate.\nIf you are performing calculations with integers larger than {{jsxref(\"Number.MAX_SAFE_INTEGER\")}} you should use a {{jsxref(\"BigInt\")}} instead, which will format correctly:\n\n```js\nnew Intl.NumberFormat(\"en-US\").format(1234567891234567891); // 1,234,567,891,234,568,000\nnew Intl.NumberFormat(\"en-US\").format(1234567891234567891n); // 1,234,567,891,234,567,891\n```\n\nYou can also pass through very large strings to be formatted as an arbitrary-precision decimal string (if you're performing calculations on the data you will still need to work with `BigInt`):\n\n```js\nnew Intl.NumberFormat(\"en-US\").format(\"1234567891234567891\"); // 1,234,567,891,234,567,891\n```\n\n## Examples\n\n### Using format\n\nUse the `format` getter function for formatting a single currency value.\nThe code below shows how to format the roubles currency for a Russian locale:\n\n```js\nconst options = { style: \"currency\", currency: \"RUB\" };\nconst numberFormat = new Intl.NumberFormat(\"ru-RU\", options);\nconsole.log(numberFormat.format(654321.987));\n// \"654 321,99 ₽\"\n```\n\n### Using format with map\n\nUse the `format` getter function for formatting all numbers in an array.\nNote that the function is bound to the {{jsxref(\"Intl.NumberFormat\")}} from which it was obtained, so it can be passed directly to {{jsxref(\"Array.prototype.map\")}}.\nThis is considered a historical artefact, as part of a convention which is no longer followed for new features, but is preserved to maintain compatibility with existing programs.\n\n```js\nconst a = [123456.789, 987654.321, 456789.123];\nconst numberFormat = new Intl.NumberFormat(\"es-ES\");\nconst formatted = a.map((n) => numberFormat.format(n));\nconsole.log(formatted.join(\"; \"));\n// \"123.456,789; 987.654,321; 456.789,123\"\n```\n\n### Using format with a string\n\nUsing a string we can specify very numbers that are larger than {{jsxref(\"Number.MAX_SAFE_INTEGER\")}} without losing precision.\n\n```js\nconst numberFormat = new Intl.NumberFormat(\"en-US\");\n\n// Here the value is converted to a Number\nconsole.log(numberFormat.format(987654321987654321));\n// 987,654,321,987,654,300\n\n// Here we use a string and don't lose precision\nconsole.log(numberFormat.format(\"987654321987654321\"));\n// 987,654,321,987,654,321\n```\n\nWe can also use the general \"E\" exponent syntax for decimal strings: `#.#E#`.\nThe code below creates a {{jsxref(\"BigInt\")}}, coerces it to a string with the suffix `E-6`, and then formats it.\n\n```js\nconst numberFormat = new Intl.NumberFormat(\"en-US\");\nconst bigNum = 1000000000000000110000n;\nconsole.log(numberFormat.format(bigNum));\n// \"1,000,000,000,000,000,110,000\"\n\n// Format as a string using the `E` syntax:\nconsole.log(numberFormat.format(`${bigNum}E-6`));\n// \"1,000,000,000,000,000.11\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.NumberFormat\")}}\n- {{jsxref(\"Number.prototype.toLocaleString()\")}}\n"
      },
      "formatrange": {
        "index.md": "---\ntitle: Intl.NumberFormat.prototype.formatRange()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRange\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.NumberFormat.formatRange\n---\n\n{{JSRef}}\n\nThe **`formatRange()`** method of {{jsxref(\"Intl.NumberFormat\")}} instances formats a range of numbers according to the locale and formatting options of this `Intl.NumberFormat` object.\n\n## Syntax\n\n```js-nolint\nformatRange(startRange, endRange)\n```\n\n### Parameters\n\n- `startRange`\n  - : A {{jsxref(\"Number\")}} or {{jsxref(\"BigInt\")}}.\n- `endRange`\n  - : A {{jsxref(\"Number\")}} or {{jsxref(\"BigInt\")}}.\n\n### Return value\n\nA string representing the given range of numbers formatted according to the locale and formatting options of this {{jsxref(\"Intl.NumberFormat\")}} object.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `startRange` is less than `endRange`, or either value is `NaN`.\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if either `startRange` or `endRange` is undefined.\n\n## Description\n\nThe `formatRange` getter function formats a range of numbers into a string according to the locale and formatting options of this {{jsxref(\"Intl.NumberFormat\")}} object from which it is called.\n\n## Examples\n\n### Using formatRange\n\nUse the `formatRange` getter function for formatting a range of currency values:\n\n```js\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 0,\n});\n\nconsole.log(nf.formatRange(3, 5)); // \"$3 – $5\"\n\n// Note: the \"approximately equals\" symbol is added if\n// startRange and endRange round to the same values.\nconsole.log(nf.formatRange(2.9, 3.1)); // \"~$3\"\n```\n\n```js\nconst nf = new Intl.NumberFormat(\"es-ES\", {\n  style: \"currency\",\n  currency: \"EUR\",\n  maximumFractionDigits: 0,\n});\n\nconsole.log(nf.formatRange(3, 5)); // \"3-5 €\"\nconsole.log(nf.formatRange(2.9, 3.1)); // \"~3 €\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.NumberFormat\")}}\n- {{jsxref(\"Number.prototype.toLocaleString()\")}}\n"
      },
      "formatrangetoparts": {
        "index.md": "---\ntitle: Intl.NumberFormat.prototype.formatRangeToParts()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRangeToParts\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.NumberFormat.formatRangeToParts\n---\n\n{{JSRef}}\n\nThe **`formatRangeToParts()`** method of {{jsxref(\"Intl.NumberFormat\")}} instances returns an {{jsxref(\"Array\")}} of objects containing the locale-specific tokens from which it is possible to build custom strings while preserving the locale-specific parts. This makes it possible to provide locale-aware custom formatting ranges of number strings.\n\n## Syntax\n\n```js-nolint\nformatRangeToParts(startRange, endRange)\n```\n\n### Parameters\n\n- `startRange`\n\n  - : A {{jsxref(\"Number\")}} or {{jsxref(\"BigInt\")}}.\n\n- `endRange`\n  - : A {{jsxref(\"Number\")}} or {{jsxref(\"BigInt\")}}.\n\n### Return value\n\nAn {{jsxref(\"Array\")}} of objects containing the formatted range of numbers in parts.\n\nThe structure of the returned looks like this:\n\n```js\n[\n  { type: \"integer\", value: \"3\", source: \"startRange\" },\n  { type: \"literal\", value: \"-\", source: \"shared\" },\n  { type: \"integer\", value: \"5\", source: \"endRange\" },\n  { type: \"literal\", value: \" \", source: \"shared\" },\n  { type: \"currency\", value: \"€\", source: \"shared\" },\n];\n```\n\nPossible values for the `type` property include:\n\n- `currency`\n  - : The currency string, such as the symbols \"$\" and \"€\" or the name \"Dollar\", \"Euro\", depending on how `currencyDisplay` is specified.\n- `decimal`\n  - : The decimal separator string (\".\").\n- `fraction`\n  - : The fraction number.\n- `group`\n  - : The group separator string (\",\").\n- `infinity`\n  - : The {{jsxref(\"Infinity\")}} string (\"∞\").\n- `integer`\n  - : The integer number.\n- `literal`\n  - : Any literal strings or whitespace in the formatted number.\n- `minusSign`\n  - : The minus sign string (\"-\").\n- `nan`\n  - : The {{jsxref(\"NaN\")}} string (\"NaN\").\n- `plusSign`\n  - : The plus sign string (\"+\").\n- `percentSign`\n  - : The percent sign string (\"%\").\n- `unit`\n  - : The unit string, such as the \"l\" or \"litres\", depending on how `unitDisplay` is specified.\n\nPossible values for the `source` property include:\n\n- `startRange`\n  - : The object is the start part of the range.\n- `endRange`\n  - : The object is the end part of the range.\n- `shared`\n  - : The object is a \"shared\" part of the range, such as a separator or currency.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `startRange` is less than `endRange`, or either value is `NaN`.\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if either `startRange` or `endRange` is undefined.\n\n## Examples\n\n### Comparing formatRange and formatRangeToParts\n\n`NumberFormat` outputs localized, opaque strings that cannot be manipulated directly:\n\n```js\nconst startRange = 3500;\nconst endRange = 9500;\n\nconst formatter = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n\nconsole.log(formatter.formatRange(startRange, endRange));\n// \"3.500,00–9.500,00 €\"\n```\n\nHowever, for many user interfaces there is a need to customize the formatting of this string.\nThe `formatRangeToParts` method enables locale-aware formatting of strings produced by `NumberFormat` formatters by providing you the string in parts:\n\n```js\nconsole.log(formatter.formatRangeToParts(startRange, endRange));\n\n// return value:\n[\n  { type: \"integer\", value: \"3\", source: \"startRange\" },\n  { type: \"group\", value: \".\", source: \"startRange\" },\n  { type: \"integer\", value: \"500\", source: \"startRange\" },\n  { type: \"decimal\", value: \",\", source: \"startRange\" },\n  { type: \"fraction\", value: \"00\", source: \"startRange\" },\n  { type: \"literal\", value: \"–\", source: \"shared\" },\n  { type: \"integer\", value: \"9\", source: \"endRange\" },\n  { type: \"group\", value: \".\", source: \"endRange\" },\n  { type: \"integer\", value: \"500\", source: \"endRange\" },\n  { type: \"decimal\", value: \",\", source: \"endRange\" },\n  { type: \"fraction\", value: \"00\", source: \"endRange\" },\n  { type: \"literal\", value: \" \", source: \"shared\" },\n  { type: \"currency\", value: \"€\", source: \"shared\" },\n];\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.NumberFormat\")}}\n- {{jsxref(\"Intl/NumberFormat/format\", \"Intl.NumberFormat.prototype.format()\")}}\n- {{jsxref(\"Intl/DateTimeFormat/formatRangeToParts\", \"Intl.DateTimeFormat.prototype.formatRangeToParts()\")}}\n"
      },
      "formattoparts": {
        "index.md": "---\ntitle: Intl.NumberFormat.prototype.formatToParts()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.NumberFormat.formatToParts\n---\n\n{{JSRef}}\n\nThe **`formatToParts()`** method of {{jsxref(\"Intl.NumberFormat\")}} instances allows locale-aware formatting of strings produced by this `Intl.NumberFormat` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-numberformat-prototype-formattoparts.html\")}}\n\n## Syntax\n\n```js-nolint\nformatToParts()\nformatToParts(number)\n```\n\n### Parameters\n\n- `number` {{optional_inline}}\n  - : A {{jsxref(\"Number\")}} or {{jsxref(\"BigInt\")}} to format.\n\n### Return value\n\nAn {{jsxref(\"Array\")}} of objects containing the formatted number in parts.\n\n## Description\n\nThe `formatToParts()` method is useful for custom formatting of number\nstrings. It returns an {{jsxref(\"Array\")}} of objects containing the locale-specific\ntokens from which it possible to build custom strings while preserving the\nlocale-specific parts. The structure the `formatToParts()` method returns,\nlooks like this:\n\n```js\n[\n  { type: \"integer\", value: \"3\" },\n  { type: \"group\", value: \".\" },\n  { type: \"integer\", value: \"500\" },\n];\n```\n\nPossible types are the following:\n\n- `compact`\n  - : The exponent in `\"long\"` or `\"short\"` form, depending on how `compactDisplay` (which defaults to `short`) is specified when `notation` is set to `compact`.\n- `currency`\n  - : The currency string, such as the symbols \"$\" and \"€\" or the name \"Dollar\", \"Euro\", depending on how `currencyDisplay` is specified.\n- `decimal`\n  - : The decimal separator string (\".\").\n- `exponentInteger`\n  - : The exponent integer value, when `notation` is set to `scientific` or `engineering`.\n- `exponentMinusSign`\n  - : The exponent minus sign string (\"-\").\n- `exponentSeparator`\n  - : The exponent separator, when `notation` is set to `scientific` or `engineering`.\n- `fraction`\n  - : The fraction number.\n- `group`\n  - : The group separator string (\",\").\n- `infinity`\n  - : The {{jsxref(\"Infinity\")}} string (\"∞\").\n- `integer`\n  - : The integer number.\n- `literal`\n  - : Any literal strings or whitespace in the formatted number.\n- `minusSign`\n  - : The minus sign string (\"-\").\n- `nan`\n  - : The {{jsxref(\"NaN\")}} string (\"NaN\").\n- `plusSign`\n  - : The plus sign string (\"+\").\n- `percentSign`\n  - : The percent sign string (\"%\").\n- `unit`\n  - : The unit string, such as the \"l\" or \"litres\", depending on how `unitDisplay` is specified.\n- `unknown`\n  - : The string for `unknown` type results.\n\n## Examples\n\n### Comparing format and formatToParts\n\n`NumberFormat` outputs localized, opaque strings that cannot be manipulated\ndirectly:\n\n```js\nconst number = 3500;\n\nconst formatter = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n\nformatter.format(number);\n// \"3.500,00 €\"\n```\n\nHowever, in many User Interfaces there is a desire to customize the formatting of this\nstring. The `formatToParts` method enables locale-aware formatting of\nstrings produced by `NumberFormat` formatters by providing you the string\nin parts:\n\n```js\nformatter.formatToParts(number);\n\n// return value:\n[\n  { type: \"integer\", value: \"3\" },\n  { type: \"group\", value: \".\" },\n  { type: \"integer\", value: \"500\" },\n  { type: \"decimal\", value: \",\" },\n  { type: \"fraction\", value: \"00\" },\n  { type: \"literal\", value: \" \" },\n  { type: \"currency\", value: \"€\" },\n];\n```\n\nNow the information is available separately and it can be formatted and concatenated\nagain in a customized way. For example by using {{jsxref(\"Array.prototype.map()\")}},\n[arrow functions](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions),\na [switch statement](/en-US/docs/Web/JavaScript/Reference/Statements/switch),\n[template literals](/en-US/docs/Web/JavaScript/Reference/Template_literals), and {{jsxref(\"Array.prototype.reduce()\")}}.\n\n```js\nconst numberString = formatter\n  .formatToParts(number)\n  .map(({ type, value }) => {\n    switch (type) {\n      case \"currency\":\n        return `<strong>${value}</strong>`;\n      default:\n        return value;\n    }\n  })\n  .reduce((string, part) => string + part);\n```\n\nThis will make the currency bold, when using the `formatToParts()` method.\n\n```js\nconsole.log(numberString);\n// \"3.500,00 <strong>€</strong>\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.NumberFormat\")}}\n- {{jsxref(\"Intl/NumberFormat/format\", \"Intl.NumberFormat.prototype.format()\")}}\n- {{jsxref(\"Intl/DateTimeFormat/formatToParts\", \"Intl.DateTimeFormat.prototype.formatToParts()\")}}\n"
      },
      "index.md": "---\ntitle: Intl.NumberFormat\nslug: Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Intl.NumberFormat\n---\n\n{{JSRef}}\n\nThe **`Intl.NumberFormat`** object enables language-sensitive number formatting.\n\n{{EmbedInteractiveExample(\"pages/js/intl-numberformat.html\")}}\n\n## Constructor\n\n- {{jsxref(\"Intl/NumberFormat/NumberFormat\", \"Intl.NumberFormat()\")}}\n  - : Creates a new `NumberFormat` object.\n\n## Static methods\n\n- {{jsxref(\"Intl/NumberFormat/supportedLocalesOf\", \"Intl.NumberFormat.supportedLocalesOf()\")}}\n  - : Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## Instance properties\n\nThese properties are defined on `Intl.NumberFormat.prototype` and shared by all `Intl.NumberFormat` instances.\n\n- {{jsxref(\"Object/constructor\", \"Intl.NumberFormat.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Intl.NumberFormat` instances, the initial value is the {{jsxref(\"Intl/NumberFormat/NumberFormat\", \"Intl.NumberFormat\")}} constructor.\n- `Intl.NumberFormat.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.NumberFormat\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Intl/NumberFormat/format\", \"Intl.NumberFormat.prototype.format()\")}}\n  - : Getter function that formats a number according to the locale and formatting options of this {{jsxref(\"Intl.NumberFormat\")}} object.\n- {{jsxref(\"Intl/NumberFormat/formatRange\", \"Intl.NumberFormat.prototype.formatRange()\")}}\n  - : Getter function that formats a range of numbers according to the locale and formatting options of the {{jsxref(\"Intl.NumberFormat\")}} object from which the method is called.\n- {{jsxref(\"Intl/NumberFormat/formatRangeToParts\", \"Intl.NumberFormat.prototype.formatRangeToParts()\")}}\n  - : Returns an {{jsxref(\"Array\")}} of objects representing the range of number strings in parts that can be used for custom locale-aware formatting.\n- {{jsxref(\"Intl/NumberFormat/formatToParts\", \"Intl.NumberFormat.prototype.formatToParts()\")}}\n  - : Returns an {{jsxref(\"Array\")}} of objects representing the number string in parts that can be used for custom locale-aware formatting.\n- {{jsxref(\"Intl/NumberFormat/resolvedOptions\", \"Intl.NumberFormat.prototype.resolvedOptions()\")}}\n  - : Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.\n\n## Examples\n\n### Basic usage\n\nIn basic use without specifying a locale, a formatted string in the default locale and with default options is returned.\n\n```js\nconst number = 3500;\n\nconsole.log(new Intl.NumberFormat().format(number));\n// '3,500' if in US English locale\n```\n\n### Using locales\n\nThis example shows some of the variations in localized number formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the `locales` argument:\n\n```js\nconst number = 123456.789;\n\n// German uses comma as decimal separator and period for thousands\nconsole.log(new Intl.NumberFormat(\"de-DE\").format(number));\n// 123.456,789\n\n// Arabic in most Arabic speaking countries uses real Arabic digits\nconsole.log(new Intl.NumberFormat(\"ar-EG\").format(number));\n// ١٢٣٤٥٦٫٧٨٩\n\n// India uses thousands/lakh/crore separators\nconsole.log(new Intl.NumberFormat(\"en-IN\").format(number));\n// 1,23,456.789\n\n// the nu extension key requests a numbering system, e.g. Chinese decimal\nconsole.log(new Intl.NumberFormat(\"zh-Hans-CN-u-nu-hanidec\").format(number));\n// 一二三,四五六.七八九\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(new Intl.NumberFormat([\"ban\", \"id\"]).format(number));\n// 123.456,789\n```\n\n### Using options\n\nThe results can be customized using the [`options`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options) argument:\n\n```js\nconst number = 123456.789;\n\n// request a currency format\nconsole.log(\n  new Intl.NumberFormat(\"de-DE\", { style: \"currency\", currency: \"EUR\" }).format(\n    number,\n  ),\n);\n// 123.456,79 €\n\n// the Japanese yen doesn't use a minor unit\nconsole.log(\n  new Intl.NumberFormat(\"ja-JP\", { style: \"currency\", currency: \"JPY\" }).format(\n    number,\n  ),\n);\n// ￥123,457\n\n// limit to three significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en-IN\", { maximumSignificantDigits: 3 }).format(\n    number,\n  ),\n);\n// 1,23,000\n\n// Formatting with units\nconsole.log(\n  new Intl.NumberFormat(\"pt-PT\", {\n    style: \"unit\",\n    unit: \"kilometer-per-hour\",\n  }).format(50),\n);\n// 50 km/h\n\nconsole.log(\n  (16).toLocaleString(\"en-GB\", {\n    style: \"unit\",\n    unit: \"liter\",\n    unitDisplay: \"long\",\n  }),\n);\n// 16 litres\n```\n\nFor an exhaustive list of options, see the [`Intl.NumberFormat()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options) page.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Intl.NumberFormat` in FormatJS](https://formatjs.io/docs/polyfills/intl-numberformat/)\n- {{jsxref(\"Intl\")}}\n",
      "numberformat": {
        "index.md": "---\ntitle: Intl.NumberFormat() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Intl.NumberFormat.NumberFormat\n---\n\n{{JSRef}}\n\nThe **`Intl.NumberFormat()`** constructor creates {{jsxref(\"Intl.NumberFormat\")}} objects.\n\n{{EmbedInteractiveExample(\"pages/js/intl-numberformat.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Intl.NumberFormat()\nnew Intl.NumberFormat(locales)\nnew Intl.NumberFormat(locales, options)\n\nIntl.NumberFormat()\nIntl.NumberFormat(locales)\nIntl.NumberFormat(locales, options)\n```\n\n> **Note:** `Intl.NumberFormat()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `Intl.NumberFormat` instance. However, there's a special behavior when it's called without `new` and the `this` value is another `Intl.NumberFormat` instance; see [Return value](#return_value).\n\n### Parameters\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag or an {{jsxref(\"Intl.Locale\")}} instance, or an array of such locale identifiers. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n    The following Unicode extension key is allowed:\n\n    - `nu`\n      - : See [`numberingSystem`](#numberingsystem).\n\n    This key can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n- `options` {{optional_inline}}\n\n  - : An object. For ease of reading, the property list is broken into sections based on their purposes, including [locale options](#locale_options), [style options](#style_options), [digit options](#digit_options), and [other options](#other_options).\n\n#### Locale options\n\n- `localeMatcher`\n  - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`.\n    For information about this option, see [Locale identification and negotiation](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n- `numberingSystem`\n  - : The numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n\n#### Style options\n\nDepending on the `style` used, some of them may be ignored, and others may be required:\n\n- `style`\n  - : The formatting style to use.\n    - `\"decimal\"` (default)\n      - : For plain number formatting.\n    - `\"currency\"`\n      - : For currency formatting.\n    - `\"percent\"`\n      - : For percent formatting.\n    - `\"unit\"`\n      - : For unit formatting.\n- `currency`\n  - : The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as `\"USD\"` for the US dollar, `\"EUR\"` for the euro, or `\"CNY\"` for the Chinese RMB — see the [Current currency & funds code list](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes). There is no default value; if the `style` is `\"currency\"`, the `currency` property must be provided.\n- `currencyDisplay`\n  - : How to display the currency in currency formatting.\n    - `\"code\"`\n      - : Use the ISO currency code.\n    - `\"symbol\"` (default)\n      - : Use a localized currency symbol such as €.\n    - `\"narrowSymbol\"`\n      - : Use a narrow format symbol (\"$100\" rather than \"US$100\").\n    - `\"name\"`\n      - : Use a localized currency name such as `\"dollar\"`.\n- `currencySign`\n  - : In many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign. Possible values are `\"standard\"` and `\"accounting\"`; the default is `\"standard\"`.\n- `unit`\n  - : The unit to use in `unit` formatting, Possible values are core unit identifiers, defined in [UTS #35, Part 2, Section 6](https://unicode.org/reports/tr35/tr35-general.html#Unit_Elements). A [subset](https://tc39.es/ecma402/#table-sanctioned-single-unit-identifiers) of units from the [full list](https://github.com/unicode-org/cldr/blob/main/common/validity/unit.xml) was selected for use in ECMAScript. Pairs of simple units can be concatenated with \"-per-\" to make a compound unit. There is no default value; if the `style` is `\"unit\"`, the `unit` property must be provided.\n- `unitDisplay`\n  - : The unit formatting style to use in `unit` formatting. Possible values are:\n    - `\"short\"` (default)\n      - : E.g., `16 l`.\n    - `\"narrow\"`\n      - : E.g., `16l`.\n    - `\"long\"`\n      - : E.g., `16 litres`.\n\n#### Digit options\n\nThe following properties are also supported by {{jsxref(\"Intl.PluralRules\")}}.\n\n- `minimumIntegerDigits`\n  - : The minimum number of integer digits to use. A value with a smaller number of integer digits than this number will be left-padded with zeros (to the specified length) when formatted. Possible values are from `1` to `21`; the default is `1`.\n- `minimumFractionDigits`\n  - : The minimum number of fraction digits to use. Possible values are from `0` to `20`; the default for plain number and percent formatting is `0`; the default for currency formatting is the number of minor unit digits provided by the [ISO 4217 currency code list](https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml) (2 if the list doesn't provide that information).\n- `maximumFractionDigits`\n  - : The maximum number of fraction digits to use. Possible values are from `0` to `20`; the default for plain number formatting is the larger of `minimumFractionDigits` and `3`; the default for currency formatting is the larger of `minimumFractionDigits` and the number of minor unit digits provided by the [ISO 4217 currency code list](https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml) (2 if the list doesn't provide that information); the default for percent formatting is the larger of `minimumFractionDigits` and 0.\n- `minimumSignificantDigits`\n  - : The minimum number of significant digits to use. Possible values are from `1` to `21`; the default is `1`.\n- `maximumSignificantDigits`\n  - : The maximum number of significant digits to use. Possible values are from `1` to `21`; the default is `21`.\n\nThe above properties fall into two groups: `minimumIntegerDigits`, `minimumFractionDigits`, and `maximumFractionDigits` in one group, `minimumSignificantDigits` and `maximumSignificantDigits` in the other. If properties from both groups are specified, conflicts in the resulting display format are resolved based on th value of the [`roundingPriority`](#roundingpriority) property.\n\n- `roundingPriority`\n\n  - : Specify how rounding conflicts will be resolved if both \"FractionDigits\" ([`minimumFractionDigits`](#minimumfractiondigits)/[`maximumFractionDigits`](#maximumfractiondigits)) and \"SignificantDigits\" ([`minimumSignificantDigits`](#minimumsignificantdigits)/[`maximumSignificantDigits`](#maximumsignificantdigits)) are specified.\n    Possible values are:\n\n    - `\"auto\"` (default)\n      - : The result from the significant digits property is used.\n    - `\"morePrecision\"`\n      - : The result from the property that results in more precision is used.\n    - `\"lessPrecision\"`\n      - : The result from the property that results in less precision is used.\n\n    Note that for values other than `auto` the result with more precision is calculated from the [`maximumSignificantDigits`](#minimumsignificantdigits) and [`maximumFractionDigits`](#maximumfractiondigits) (minimum fractional and significant digit settings are ignored).\n\n- `roundingIncrement`\n\n  - : Indicates the increment at which rounding should take place relative to the calculated rounding magnitude. Possible values are `1`, `2`, `5`, `10`, `20`, `25`, `50`, `100`, `200`, `250`, `500`, `1000`, `2000`, `2500`, and `5000`. It cannot be mixed with significant-digits rounding or any setting of `roundingPriority` other than `auto`.\n\n- `roundingMode`\n\n  - : How decimals should be rounded. Possible values are:\n\n    - `\"ceil\"`\n      - : Round toward +∞. Positive values round up. Negative values round \"more positive\".\n    - `\"floor\"`\n      - : Round toward -∞. Positive values round down. Negative values round \"more negative\".\n    - `\"expand\"`\n      - : round away from 0. The _magnitude_ of the value is always increased by rounding. Positive values round up. Negative values round \"more negative\".\n    - `\"trunc\"`\n      - : Round toward 0. This _magnitude_ of the value is always reduced by rounding. Positive values round down. Negative values round \"less negative\".\n    - `\"halfCeil\"`\n      - : ties toward +∞. Values above the half-increment round like `\"ceil\"` (towards +∞), and below like `\"floor\"` (towards -∞). On the half-increment, values round like `\"ceil\"`.\n    - `\"halfFloor\"`\n      - : Ties toward -∞. Values above the half-increment round like `\"ceil\"` (towards +∞), and below like `\"floor\"` (towards -∞). On the half-increment, values round like `\"floor\"`.\n    - `\"halfExpand\"` (default)\n      - : Ties away from 0. Values above the half-increment round like `\"expand\"` (away from zero), and below like `\"trunc\"` (towards 0). On the half-increment, values round like `\"expand\"`.\n    - `\"halfTrunc\"`\n      - : Ties toward 0. Values above the half-increment round like `\"expand\"` (away from zero), and below like `\"trunc\"` (towards 0). On the half-increment, values round like `\"trunc\"`.\n    - `\"halfEven\"`\n      - : Ties towards the nearest even integer. Values above the half-increment round like `\"expand\"` (away from zero), and below like `\"trunc\"` (towards 0). On the half-increment values round towards the nearest even digit.\n\n    These options reflect the [ICU user guide](https://unicode-org.github.io/icu/userguide/format_parse/numbers/rounding-modes.html), where \"expand\" and \"trunc\" map to ICU \"UP\" and \"DOWN\", respectively.\n    The [rounding modes](#rounding_modes) example below demonstrates how each mode works.\n\n- `trailingZeroDisplay`\n  - : The strategy for displaying trailing zeros on whole numbers. Possible values are:\n    - `\"auto\"` (default)\n      - : Keep trailing zeros according to `minimumFractionDigits` and `minimumSignificantDigits`.\n    - `\"stripIfInteger\"`\n      - : Remove the fraction digits _if_ they are all zero. This is the same as `\"auto\"` if any of the fraction digits is non-zero.\n\n#### Other options\n\n- `notation`\n  - : The formatting that should be displayed for the number. Possible values are:\n    - `\"standard\"` (default)\n      - : Plain number formatting.\n    - `\"scientific\"`\n      - : Return the order-of-magnitude for formatted number.\n    - `\"engineering\"`\n      - : Return the exponent of ten when divisible by three.\n    - `\"compact\"`\n      - : String representing exponent; defaults to using the \"short\" form.\n- `compactDisplay`\n  - : Only used when `notation` is `\"compact\"`. Possible values are `\"short\"` and `\"long\"`; the default is `\"short\"`.\n- `useGrouping`\n\n  - : Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.\n\n    - `\"always\"`\n      - : Display grouping separators even if the locale prefers otherwise.\n    - `\"auto\"`\n      - : Display grouping separators based on the locale preference, which may also be dependent on the currency.\n    - `\"min2\"`\n      - : Display grouping separators when there are at least 2 digits in a group.\n    - `true`\n      - : Same as `\"always\"`.\n    - `false`\n      - : Display no grouping separators.\n\n    The default is `\"min2\"` if `notation` is `\"compact\"`, and `\"auto\"` otherwise. The string values `\"true\"` and `\"false\"` are accepted, but are always converted to the default value.\n\n- `signDisplay`\n  - : When to display the sign for the number. Possible values are:\n    - `\"auto\"` (default)\n      - : Sign display for negative numbers only, including negative zero.\n    - `\"always\"`\n      - : Always display sign.\n    - `\"exceptZero\"`\n      - : Sign display for positive and negative numbers, but not zero.\n    - `\"negative\"`\n      - : Sign display for negative numbers only, excluding negative zero.\n    - `\"never\"`\n      - : Never display sign.\n\n### Return value\n\nA new `Intl.NumberFormat` object.\n\n> **Note:** The text below describes behavior that is marked by the specification as \"optional\". It may not work in all environments. Check the [browser compatibility table](#browser_compatibility).\n\nNormally, `Intl.NumberFormat()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new), and a new `Intl.NumberFormat` instance is returned in both cases. However, if the [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this) value is an object that is [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) `Intl.NumberFormat` (doesn't necessarily mean it's created via `new Intl.NumberFormat`; just that it has `Intl.NumberFormat.prototype` in its prototype chain), then the value of `this` is returned instead, with the newly created `Intl.NumberFormat` object hidden in a `[Symbol(IntlLegacyConstructedSymbol)]` property (a unique symbol that's reused between instances).\n\n```js\nconst formatter = Intl.NumberFormat.call(\n  { __proto__: Intl.NumberFormat.prototype },\n  \"en-US\",\n  { notation: \"scientific\" },\n);\nconsole.log(Object.getOwnPropertyDescriptors(formatter));\n// {\n//   [Symbol(IntlLegacyConstructedSymbol)]: {\n//     value: NumberFormat [Intl.NumberFormat] {},\n//     writable: false,\n//     enumerable: false,\n//     configurable: false\n//   }\n// }\n```\n\nNote that there's only one actual `Intl.NumberFormat` instance here: the one hidden in `[Symbol(IntlLegacyConstructedSymbol)]`. Calling the [`format()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/format) and [`resolvedOptions()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions) methods on `formatter` would correctly use the options stored in that instance, but calling all other methods (e.g. [`formatRange()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatRange)) would fail with \"TypeError: formatRange method called on incompatible Object\", because those methods don't consult the hidden instance's options.\n\nThis behavior, called `ChainNumberFormat`, does not happen when `Intl.NumberFormat()` is called without `new` but with `this` set to anything else that's not an `instanceof Intl.NumberFormat`. If you call it directly as `Intl.NumberFormat()`, the `this` value is [`Intl`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl), and a new `Intl.NumberFormat` instance is created normally.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown in one of the following cases:\n    - A property that takes enumerated values (such as `style`, `units`, `currency`, and so on) is set to an invalid value.\n    - Both `maximumFractionDigits` and `minimumFractionDigits` are set, and they are set to different values.\n      Note that depending on various formatting options, these properties can have default values.\n      It is therefore possible to get this error even if you only set one of the properties.\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if the `options.style` property is set to \"unit\" or \"currency\", and no value has been set for the corresponding property `options.unit` or `options.currency`.\n\n## Examples\n\n### Basic usage\n\nIn basic use without specifying a locale, a formatted string in the default locale and with default options is returned.\n\n```js\nconst amount = 3500;\n\nconsole.log(new Intl.NumberFormat().format(amount));\n// '3,500' if in US English locale\n```\n\n### Decimal and percent formatting\n\n```js\nconst amount = 3500;\n\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n}).format(amount); // '3,500'\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n}).format(amount); // '350,000%'\n```\n\n### Unit formatting\n\nIf the `style` is `'unit'`, a `unit` property must be provided.\nOptionally, `unitDisplay` controls the unit formatting.\n\n```js\nconst amount = 3500;\n\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"unit\",\n  unit: \"liter\",\n}).format(amount); // '3,500 L'\n\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"unit\",\n  unit: \"liter\",\n  unitDisplay: \"long\",\n}).format(amount); // '3,500 liters'\n```\n\n### Currency formatting\n\nIf the `style` is `'currency'`, a `currency` property\nmust be provided. Optionally, `currencyDisplay` and\n`currencySign` control the unit formatting.\n\n```js\nconst amount = -3500;\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n}).format(amount); // '-$3,500.00'\n\nnew Intl.NumberFormat(\"bn\", {\n  style: \"currency\",\n  currency: \"USD\",\n  currencyDisplay: \"name\",\n}).format(amount); // '-3,500.00 US dollars'\n\nnew Intl.NumberFormat(\"bn\", {\n  style: \"currency\",\n  currency: \"USD\",\n  currencySign: \"accounting\",\n}).format(amount); // '($3,500.00)'\n```\n\n### Scientific, engineering or compact notations\n\nScientific and compact notation are represented by the `notation` option and can be formatted like this:\n\n```js\nnew Intl.NumberFormat(\"en-US\", {\n  notation: \"scientific\",\n}).format(987654321);\n// 9.877E8\n\nnew Intl.NumberFormat(\"pt-PT\", {\n  notation: \"scientific\",\n}).format(987654321);\n// 9,877E8\n\nnew Intl.NumberFormat(\"en-GB\", {\n  notation: \"engineering\",\n}).format(987654321);\n// 987.654E6\n\nnew Intl.NumberFormat(\"de\", {\n  notation: \"engineering\",\n}).format(987654321);\n// 987,654E6\n\nnew Intl.NumberFormat(\"zh-CN\", {\n  notation: \"compact\",\n}).format(987654321);\n// 9.9亿\n\nnew Intl.NumberFormat(\"fr\", {\n  notation: \"compact\",\n  compactDisplay: \"long\",\n}).format(987654321);\n// 988 millions\n\nnew Intl.NumberFormat(\"en-GB\", {\n  notation: \"compact\",\n  compactDisplay: \"short\",\n}).format(987654321);\n// 988M\n```\n\n### Displaying signs\n\nDisplay a sign for positive and negative numbers, but not zero:\n\n```js\nnew Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  signDisplay: \"exceptZero\",\n}).format(0.55);\n// '+55%'\n```\n\nNote that when the currency sign is \"accounting\", parentheses might be used instead of a minus sign:\n\n```js\nnew Intl.NumberFormat(\"bn\", {\n  style: \"currency\",\n  currency: \"USD\",\n  currencySign: \"accounting\",\n  signDisplay: \"always\",\n}).format(-3500);\n// '($3,500.00)'\n```\n\n### FractionDigits, SignificantDigits and IntegerDigits\n\nYou can specify the minimum or maximum number of fractional, integer or significant digits to display when formatting a number.\n\n> **Note:** If both significant and fractional digit limits are specified, then the actual formatting depends on the [`roundingPriority`](#roundingpriority).\n\n#### Using FractionDigits and IntegerDigits\n\nThe integer and fraction digit properties indicate the number of digits to display before and after the decimal point, respectively.\nIf the value to display has fewer integer digits than specified, it will be left-padded with zeros to the expected number.\nIf it has fewer fractional digits, it will be right-padded with zeros.\nBoth cases are shown below:\n\n```js\n// Formatting adds zeros to display minimum integers and fractions\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumIntegerDigits: 3,\n    minimumFractionDigits: 4,\n  }).format(4.33),\n);\n// \"004.3300\"\n```\n\nIf a value has more fractional digits than the specified maximum number, it will be rounded.\nThe _way_ that it is rounded depends on the [`roundingMode`](#roundingmode) property (more details are provided in the [rounding modes](#rounding_modes) section).\nBelow the value is rounded from five fractional digits (`4.33145`) to two (`4.33`):\n\n```js\n// Display value shortened to maximum number of digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 2,\n  }).format(4.33145),\n);\n// \"4.33\"\n```\n\nThe minimum fractional digits have no effect if the value already has more than 2 fractional digits:\n\n```js\n// Minimum fractions have no effect if value is higher precision.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumFractionDigits: 2,\n  }).format(4.33145),\n);\n// \"4.331\"\n```\n\n> **Warning:** Watch out for default values as they may affect formatting even if not specified in your code.\n> The default maximum digit value is `3` for plain values, `2` for currency, and may have different values for other predefined types.\n\nThe formatted value above is rounded to 3 digits, even though we didn't specify the maximum digits!\nThis is because a default value of `maximumFractionDigits` is set when we specify `minimumFractionDigits`, and visa versa. The default values of `maximumFractionDigits` and `minimumFractionDigits` are `3` and `0`, respectively.\n\nYou can use [`resolvedOptions()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions) to inspect the formatter.\n\n```js\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumFractionDigits: 0,\n//   maximumFractionDigits: 2,\n//   …\n// }\n\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumFractionDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumFractionDigits: 2,\n//   maximumFractionDigits: 3,\n//   …\n// }\n```\n\n#### Using SignificantDigits\n\nThe number of _significant digits_ is the total number of digits including both integer and fractional parts.\nThe `maximumSignificantDigits` is used to indicate the total number of digits from the original value to display.\n\nThe examples below show how this works.\nNote in particular the last case: only the first digit is retained and the others are discarded/set to zero.\n\n```js\n// Display 5 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 5,\n  }).format(54.33145),\n);\n// \"54.331\"\n\n// Max 2 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(54.33145),\n);\n// \"54\"\n\n// Max 1 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 1,\n  }).format(54.33145),\n);\n// \"50\"\n```\n\nThe `minimumSignificantDigits` ensures that at least the specified number of digits are displayed, adding zeros to the end of the value if needed.\n\n```js\n// Minimum 10 significant digits\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    minimumSignificantDigits: 10,\n  }).format(54.33145),\n);\n// \"54.33145000\"\n```\n\n> **Warning:** Watch out for default values as they may affect formatting.\n> If only one `SignificantDigits` property is used, then its counterpart will automatically be applied with the default value.\n> The default maximum and minimum significant digit values are 20 and 1, respectively.\n\n#### Specifying significant and fractional digits at the same time\n\nThe fraction digits ([`minimumFractionDigits`](#minimumfractiondigits)/[`maximumFractionDigits`](#maximumfractiondigits)) and significant digits ([`minimumSignificantDigits`](#minimumsignificantdigits)/[`maximumSignificantDigits`](#maximumsignificantdigits)) are both ways of controlling how many fractional and leading digits should be formatted.\nIf both are used at the same time, it is possible for them to conflict.\n\nThese conflicts are resolved using the [`roundingPriority`](#roundingpriority) property.\nBy default, this has a value of `\"auto\"`, which means that if either [`minimumSignificantDigits`](#minimumsignificantdigits) or [`maximumSignificantDigits`](#minimumsignificantdigits) is specified, the fractional and integer digit properties will be ignored.\n\nFor example, the code below formats the value of `4.33145` with `maximumFractionDigits: 3`, and then `maximumSignificantDigits: 2`, and then both.\nThe value with both is the one set with `maximumSignificantDigits`.\n\n```js\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n  }).format(4.33145),\n);\n// \"4.331\"\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(4.33145),\n);\n// \"4.3\"\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n    maximumSignificantDigits: 2,\n  }).format(4.33145),\n);\n// \"4.3\"\n```\n\nUsing [`resolvedOptions()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions) to inspect the formatter, we can see that the returned object does not include `maximumFractionDigits` when `maximumSignificantDigits` or `minimumSignificantDigits` are specified.\n\n```js\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n    maximumSignificantDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumSignificantDigits: 1,\n//   maximumSignificantDigits: 2,\n//   …\n// }\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumFractionDigits: 3,\n    minimumSignificantDigits: 2,\n  }).resolvedOptions(),\n);\n// {\n//   …\n//   minimumIntegerDigits: 1,\n//   minimumSignificantDigits: 2,\n//   maximumSignificantDigits: 21,\n//   …\n// }\n```\n\nIn addition to `\"auto\"`, you can resolve conflicts by specifying [`roundingPriority`](#roundingpriority) as `\"morePrecision\"` or `\"lessPrecision\"`.\nThe formatter calculates the precision using the values of `maximumSignificantDigits` and `maximumFractionDigits`.\n\nThe code below shows the format being selected for the three different rounding priorities:\n\n```js\nconst maxFracNF = new Intl.NumberFormat(\"en\", {\n  maximumFractionDigits: 3,\n});\nconsole.log(`maximumFractionDigits:3 - ${maxFracNF.format(1.23456)}`);\n// \"maximumFractionDigits:2 - 1.235\"\n\nconst maxSigNS = new Intl.NumberFormat(\"en\", {\n  maximumSignificantDigits: 3,\n});\nconsole.log(`maximumSignificantDigits:3 - ${maxSigNS.format(1.23456)}`);\n// \"maximumSignificantDigits:3 - 1.23\"\n\nconst bothAuto = new Intl.NumberFormat(\"en\", {\n  maximumSignificantDigits: 3,\n  maximumFractionDigits: 3,\n});\nconsole.log(`auto - ${bothAuto.format(1.23456)}`);\n// \"auto - 1.23\"\n\nconst bothLess = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"lessPrecision\",\n  maximumSignificantDigits: 3,\n  maximumFractionDigits: 3,\n});\nconsole.log(`lessPrecision - ${bothLess.format(1.23456)}`);\n// \"lessPrecision - 1.23\"\n\nconst bothMore = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"morePrecision\",\n  maximumSignificantDigits: 3,\n  maximumFractionDigits: 3,\n});\nconsole.log(`morePrecision - ${bothMore.format(1.23456)}`);\n// \"morePrecision - 1.235\"\n```\n\nNote that the algorithm can behave in an unintuitive way if a minimum value is specified without a maximum value.\nThe example below formats the value `1` specifying `minimumFractionDigits: 2` (formatting to `1.00`) and `minimumSignificantDigits: 2` (formatting to `1.0`).\nSince `1.00` has more digits than `1.0`, this should be the result when prioritizing `morePrecision`, but in fact the opposite is true:\n\n```js\nconst bothLess = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"lessPrecision\",\n  minimumFractionDigits: 2,\n  minimumSignificantDigits: 2,\n});\nconsole.log(`lessPrecision - ${bothLess.format(1)}`);\n// \"lessPrecision - 1.00\"\n\nconst bothMore = new Intl.NumberFormat(\"en\", {\n  roundingPriority: \"morePrecision\",\n  minimumFractionDigits: 2,\n  minimumSignificantDigits: 2,\n});\nconsole.log(`morePrecision - ${bothMore.format(1)}`);\n// \"morePrecision - 1.0\"\n```\n\nThe reason for this is that only the \"maximum precision\" values are used for the calculation, and the default value of `maximumSignificantDigits` is much higher than `maximumFractionDigits`.\n\n> **Note:** The working group have proposed a modification of the algorithm where the formatter should evaluate the result of using the specified fractional and significant digits independently (taking account of both minimum and maximum values).\n> It will then select the option that displays more fractional digits if `morePrecision` is set, and fewer if `lessPrecision` is set.\n> This will result in more intuitive behavior for this case.\n\n### Rounding modes\n\nIf a value has more fractional digits than allowed by the constructor options, the formatted value will be _rounded_ to the specified number of fractional digits.\nThe _way_ in which the value is rounded depends on the [`roundingMode`](#roundingmode) property.\n\nNumber formatters use `halfExpand` rounding by default, which rounds values \"away from zero\" at the half-increment (in other words, the _magnitude_ of the value is rounded up).\n\nFor a positive number, if the fractional digits to be removed are closer to the next increment (or on the half way point) then the remaining fractional digits will be rounded up, otherwise they are rounded down.\nThis is shown below: 2.23 rounded to two significant digits is truncated to 2.2 because 2.23 is less than the half increment 2.25, while values of 2.25 and greater are rounded up to 2.3:\n\n```js\n// Value below half-increment: round down.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(2.23),\n);\n// \"2.2\"\n\n// Value on or above half-increment: round up.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(2.25),\n);\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(2.28),\n);\n// \"2.3\"\n// \"2.3\"\n```\n\nA negative number on or below the half-increment point is also rounded away from zero (becomes more negative):\n\n```js\n// Value below half-increment: round down.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(-2.23),\n);\n// \"-2.2\"\n\n// Value on or above half-increment: round up.\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(-2.25),\n);\nconsole.log(\n  new Intl.NumberFormat(\"en\", {\n    maximumSignificantDigits: 2,\n  }).format(-2.28),\n);\n// \"-2.3\"\n// \"-2.3\"\n```\n\nThe table below show the effect of different rounding modes for positive and negative values that are on and around the half-increment.\n\n| rounding mode | 2.23 | 2.25 | 2.28 | -2.23 | -2.25 | -2.28 |\n| ------------- | ---- | ---- | ---- | ----- | ----- | ----- |\n| `ceil`        | 2.3  | 2.3  | 2.3  | -2.2  | -2.2  | -2.2  |\n| `floor`       | 2.2  | 2.2  | 2.2  | -2.3  | -2.3  | -2.3  |\n| `expand`      | 2.3  | 2.3  | 2.3  | -2.3  | -2.3  | -2.3  |\n| `trunc`       | 2.2  | 2.2  | 2.2  | -2.2  | -2.2  | -2.2  |\n| `halfCeil`    | 2.2  | 2.3  | 2.3  | -2.2  | -2.2  | -2.3  |\n| `halfFloor`   | 2.2  | 2.2  | 2.3  | -2.2  | -2.3  | -2.3  |\n| `halfExpand`  | 2.2  | 2.3  | 2.3  | -2.2  | -2.3  | -2.3  |\n| `halfTrunc`   | 2.2  | 2.2  | 2.3  | -2.2  | -2.2  | -2.3  |\n| `halfEven`    | 2.2  | 2.2  | 2.3  | -2.2  | -2.2  | -2.3  |\n\nWhen using `halfEven`, its behavior also depends on the parity (odd or even) of the last digit of the rounded number. For example, the behavior of `halfEven` in the table above is the same as `halfTrunc`, because the magnitudes of all numbers are between a smaller \"even\" number (2.2) and a larger \"odd\" number (2.3). If the numbers are between ±2.3 and ±2.4, `halfEven` will behave like `halfExpand` instead. This behavior avoids consistently under- or over-estimating half-increments in a large data sample.\n\n### Using roundingIncrement\n\nSometimes we want to round the remaining fractional digits to some other increment than the next integer.\nFor example, currencies for which the smallest coin is 5 cents might want to round the value to increments of 5, reflecting amounts that can actually be paid in cash.\n\nThis kind of rounding can be achieved with the [`roundingIncrement`](#roundingincrement) property.\n\nFor example, if `maximumFractionDigits` is 2 and `roundingIncrement` is 5, then the number is rounded to the nearest 0.05:\n\n```js\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n});\n\nconsole.log(nf.format(11.29)); // \"$11.30\"\nconsole.log(nf.format(11.25)); // \"$11.25\"\nconsole.log(nf.format(11.22)); // \"$11.20\"\n```\n\nThis particular pattern is referred to as \"nickel rounding\", where nickel is the colloquial name for a USA 5 cent coin.\nTo round to the nearest 10 cents (\"dime rounding\"), you could change `roundingIncrement` to `10`.\n\n```js\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n});\n\nconsole.log(nf.format(11.29)); // \"$11.30\"\nconsole.log(nf.format(11.25)); // \"$11.25\"\nconsole.log(nf.format(11.22)); // \"$11.20\"\n```\n\nYou can also use [`roundingMode`](#roundingmode) to change the rounding algorithm.\nThe example below shows how `halfCeil` rounding can be used to round the value \"less positive\" below the half-rounding increment and \"more positive\" if above or on the half-increment.\nThe incremented digit is \"0.05\" so the half-increment is at .025 (below, this is shown at 11.225).\n\n```js\nconst nf = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n  roundingMode: \"halfCeil\",\n});\n\nconsole.log(nf.format(11.21)); // \"$11.20\"\nconsole.log(nf.format(11.22)); // \"$11.20\"\nconsole.log(nf.format(11.224)); // \"$11.20\"\nconsole.log(nf.format(11.225)); // \"$11.25\"\nconsole.log(nf.format(11.23)); // \"$11.25\"\n```\n\nIf you need to change the number of digits, remember that `minimumFractionDigits` and `maximumFractionDigits` must both be set to the same value, or a `RangeError` is thrown.\n\n`roundingIncrement` cannot be mixed with significant-digits rounding or any setting of `roundingPriority` other than `auto`.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.NumberFormat\")}}\n- {{jsxref(\"Intl.supportedValuesOf()\")}}\n- {{jsxref(\"Intl\")}}\n"
      },
      "resolvedoptions": {
        "index.md": "---\ntitle: Intl.NumberFormat.prototype.resolvedOptions()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/resolvedOptions\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.NumberFormat.resolvedOptions\n---\n\n{{JSRef}}\n\nThe **`resolvedOptions()`** method of {{jsxref(\"Intl.NumberFormat\")}} instances returns a new object with properties reflecting the [locale and number formatting options](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters) computed during initialization of this `Intl.NumberFormat` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-numberformat-prototype-resolvedoptions.html\")}}\n\n## Syntax\n\n```js-nolint\nresolvedOptions()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new object with properties reflecting the [locale and number formatting options](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#parameters) computed during the construction of the given {{jsxref(\"Intl.NumberFormat\")}} object.\n\nThe resulting object has the following properties:\n\n- `compactDisplay`\n  - : Whether to use short or long form when using compact notation.\n    This is the value provided in the [`options.compactDisplay`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#compactdisplay) argument of the constructor, or the default value: `\"short\"`.\n    The value is only present if `notation` is set to \"compact\", and otherwise is `undefined`.\n- `currency`\n  - : The currency to use in currency formatting.\n    The value is defined if `style` is `\"currency\"`, and is otherwise `undefined`.\n    This is the value provided in the [`options.currency`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#currency) argument of the constructor.\n- `currencyDisplay`\n  - : The display format for the currency, such as a symbol, or currency code.\n    The value is defined if `style` is `\"currency\"`, and otherwise is `undefined`.\n    This is the value provided in the [`options.currencyDisplay`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#currencydisplay) argument of the constructor, or the default value: `\"symbol\"`.\n- `currencySign`\n  - : The method used to specify the sign of the currency value: `standard` or `accounting`.\n    The value is present if `style` is `\"currency\"`, and otherwise is `undefined`.\n    This is the value provided in the [`options.currencySign`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#currencysign) argument of the constructor, or the default value: `\"standard\"`.\n- `locale`\n  - : The BCP 47 language tag for the locale that was actually used.\n    The key-value pairs that were requested in the constructor [`locale`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#local) and are supported for this locale are included.\n- `notation`\n  - : The formatting that should be applied to the number, such as `standard` or `engineering`.\n    This is the value provided in the [`options.notation`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#notation) argument of the constructor, or the default value: `\"standard\"`.\n- `numberingSystem`\n  - : The numbering system.\n    This is the value provided in the [`options.numberingSystem`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#numberingsystem) argument of the constructor, if present, or the value set using the Unicode extension key [`nu`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#nu), or filled in as a default.\n- `roundingMode`\n  - : The rounding mode.\n    This is the value provided for the [`options.roundingMode`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode) argument in the constructor, or the default value: `halfExpand`.\n- `roundingPriority`\n  - : The priority for resolving rounding conflicts if both \"FractionDigits\" and \"SignificantDigits\" are specified.\n    This is the value provided for the [`options.roundingPriority`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingpriority) argument in the constructor, or the default value: `auto`.\n- `roundingIncrement`\n  - : The rounding-increment precision (the increment used when rounding numbers).\n    This is the value specified in the [`options.roundingIncrement`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingincrement) argument in the constructor.\n- `signDisplay`\n  - : Whether or not to display the positive/negative sign.\n    This is the value specified in the [`options.signDisplay`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#signdisplay) argument in the constructor, or the default value: `\"auto\"`.\n- `unit`\n  - : The unit to use in unit formatting.\n    The value is only present if `style` is `\"unit\"`, and is otherwise `undefined`.\n    This is the value specified in the [`options.unit`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#unit) argument in the constructor.\n- `unitDisplay`\n\n  - : The display format to use for units in unit formatting, such as \"long\", \"short\" or \"narrow\".\n    The value is only present if `style` is `\"unit\"`, and is otherwise `undefined`.\n    This is the value specified in the [`options.unitDisplay`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#unitdisplay) argument in the constructor, or the default value: `short`.\n\n- `useGrouping`\n  - : Whether or not to use grouping separators to indicate \"thousands\", \"millions\" and son on.\n    This is the value specified in the [`options.useGrouping`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#usegrouping) argument in the constructor, or the default value: `\"auto\"`.\n- `trailingZeroDisplay`\n  - : The strategy for displaying trailing zeros on whole numbers.\n    This is the value specified in the [`options.trailingZeroDisplay`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#trailingzerodisplay) argument in the constructor, or the default value: `\"auto\"`.\n\nOnly one of the following two groups of properties is included:\n\n- `minimumIntegerDigits`, `minimumFractionDigits`, `maximumFractionDigits`\n  - : The values provided for these properties in the `options` argument or filled in as defaults.\n    These properties are present only if neither `minimumSignificantDigits` nor `maximumSignificantDigits` was provided in the `options` argument.\n- `minimumSignificantDigits`, `maximumSignificantDigits`\n  - : The values provided for these properties in the `options` argument or filled in as defaults.\n    These properties are present only if at least one of them was provided in the `options` argument.\n\n## Examples\n\n### Using the `resolvedOptions` method\n\n```js\n// Create a NumberFormat\nconst de = new Intl.NumberFormat(\"de-DE\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumFractionDigits: 2,\n  roundingIncrement: 5,\n  roundingMode: \"halfCeil\",\n});\n\n// Resolve the options\nconst usedOptions = de.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.numberingSystem); // \"latn\"\nconsole.log(usedOptions.compactDisplay); // undefined (\"notation\" not set to \"compact\")\nconsole.log(usedOptions.currency); // \"USD\"\nconsole.log(usedOptions.currencyDisplay); // \"symbol\"\nconsole.log(usedOptions.currencySign); // \"standard\"\nconsole.log(usedOptions.minimumIntegerDigits); // 1\nconsole.log(usedOptions.minimumFractionDigits); // 2\nconsole.log(usedOptions.maximumFractionDigits); // 2\nconsole.log(usedOptions.minimumSignificantDigits); // undefined (maximumFractionDigits is set)\nconsole.log(usedOptions.maximumSignificantDigits); // undefined (maximumFractionDigits is set)\nconsole.log(usedOptions.notation); // \"standard\"\nconsole.log(usedOptions.roundingIncrement); // 5\nconsole.log(usedOptions.roundingMode); // halfCeil\nconsole.log(usedOptions.roundingPriority); // auto\nconsole.log(usedOptions.signDisplay); // \"auto\"\nconsole.log(usedOptions.style); // \"currency\"\nconsole.log(usedOptions.trailingZeroDisplay); // auto\nconsole.log(usedOptions.useGrouping); // auto\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.NumberFormat\")}}\n"
      },
      "supportedlocalesof": {
        "index.md": "---\ntitle: Intl.NumberFormat.supportedLocalesOf()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/supportedLocalesOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Intl.NumberFormat.supportedLocalesOf\n---\n\n{{JSRef}}\n\nThe **`Intl.NumberFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.\n\n{{EmbedInteractiveExample(\"pages/js/intl-numberformat-supportedlocalesof.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nIntl.NumberFormat.supportedLocalesOf(locales)\nIntl.NumberFormat.supportedLocalesOf(locales, options)\n```\n\n### Parameters\n\n- `locales`\n  - : A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object that may have the following property:\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the {{jsxref(\"Intl\", \"Intl\", \"#locale_identification_and_negotiation\", 1)}} page.\n\n### Return value\n\nAn array of strings representing a subset of the given locale tags that are supported in number formatting without having to fall back to the runtime's default locale.\n\n## Examples\n\n### Using supportedLocalesOf()\n\nAssuming a runtime that supports Indonesian and German but not Balinese in number formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to number formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```js\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.NumberFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.NumberFormat\")}}\n"
      }
    },
    "pluralrules": {
      "index.md": "---\ntitle: Intl.PluralRules\nslug: Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Intl.PluralRules\n---\n\n{{JSRef}}\n\nThe **`Intl.PluralRules`** object enables plural-sensitive formatting and plural-related language rules.\n\n## Description\n\nLanguages use different patterns for expressing both plural numbers of items (cardinal numbers) and for expressing the order of items (ordinal numbers).\nEnglish has two forms for expressing cardinal numbers: one for the singular \"item\" (1 hour, 1 dog, 1 fish) and the other for zero or any other number of \"items\" (0 hours, 2 lemmings, 100000.5 fish), while Chinese has only one form, and Arabic has six!\nSimilarly, English has four forms for expressing ordinal numbers: \"th\", \"st\", \"nd\", \"rd\", giving the sequence: 0th, 1st, 2nd, 3rd, 4th, 5th, ..., 21st, 22nd, 23rd, 24th, 25th, and so on, while both Chinese and Arabic only have one form for ordinal numbers.\n\nGiven a particular language and set of formatting options, the methods [`Intl.PluralRules.prototype.select()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/select) and [`Intl.PluralRules.prototype.selectRange()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/selectRange) return a _tag_ that represents the plural form of a single or a range of numbers, cardinal or ordinal.\nCode can use the returned tags to represent numbers appropriately for the given language.\nThe full set of tags that might be returned are: `zero`, `one`, `two`, `few`, `many`, and `other` (the \"general\" plural form, also used if the language only has one form).\n\nAs English only has two forms for cardinal numbers, the `select()` method returns only two tags: `\"one\"` for the singular case, and `\"other\"` for all other cardinal numbers.\nThis allows construction of sentences that make sense in English for each case, such as: \"1 dog is happy; do you want to play with it?\" and \"10 dogs are happy; do you want to play with them?\".\n\nCreating appropriate sentences for each form depends on the language, and even in English may not be as simple as just adding \"s\" to a noun to make the plural form.\nUsing the example above, we see that the form may affect:\n\n- **Nouns**: 1 dogs/2 dogs (but not \"fish\" or \"sheep\", which have the same singular and plural form).\n- **Verbs**: 1 dog _is_ happy, 2 dogs _are_ happy\n- **Pronouns** (and other referents): Do you want to play with _it_ / _them_.\n\nOther languages have more forms, and choosing appropriate sentences can be even more complex.\n\n`select()` can return any of four tags for ordinal numbers in English, representing each of the allowed forms: `one` for \"st\" numbers (1, 21, 31, ...), `two` for \"nd\" numbers (2, 22, 32, ...), `few` for \"rd\" numbers (3, 33, 43, ...), and `other` for \"th\" numbers (0, 4-20, etc.).\nAgain, the returned tags allow appropriate formatting of strings describing an ordinal number.\n\nFor more information about the rules and how they are used, see [Plural Rules](https://cldr.unicode.org/index/cldr-spec/plural-rules).\nFor a list of the rules and how they apply for different languages, see the [LDML Language Plural Rules](https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html).\n\n## Constructor\n\n- {{jsxref(\"Intl/PluralRules/PluralRules\", \"Intl.PluralRules()\")}}\n  - : Creates a new `Intl.PluralRules` object.\n\n## Static methods\n\n- {{jsxref(\"Intl/PluralRules/supportedLocalesOf\", \"Intl.PluralRules.supportedLocalesOf()\")}}\n  - : Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## Instance properties\n\nThese properties are defined on `Intl.PluralRules.prototype` and shared by all `Intl.PluralRules` instances.\n\n- {{jsxref(\"Object/constructor\", \"Intl.PluralRules.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Intl.PluralRules` instances, the initial value is the {{jsxref(\"Intl/PluralRules/PluralRules\", \"Intl.PluralRules\")}} constructor.\n- `Intl.PluralRules.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.PluralRules\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Intl/PluralRules/resolvedOptions\", \"Intl.PluralRules.prototype.resolvedOptions()\")}}\n  - : Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.\n- {{jsxref(\"Intl/PluralRules/select\", \"Intl.PluralRules.prototype.select()\")}}\n  - : Returns a string indicating which plural rule to use for locale-aware formatting.\n- {{jsxref(\"Intl/PluralRules/selectRange\", \"Intl.PluralRules.prototype.selectRange()\")}}\n  - : This method receives two values and returns a string indicating which plural rule to use for locale-aware formatting.\n\n## Examples\n\n### Using locales\n\nThis example shows some of the variations in localized plural rules for cardinal numbers.\n\nIn order to get the format for the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the [constructor `locales`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules#locales) argument:\n\n```js\n// US English\nconst enCardinalRules = new Intl.PluralRules(\"en-US\");\nconsole.log(enCardinalRules.select(0)); // \"other\"\nconsole.log(enCardinalRules.select(1)); // \"one\"\nconsole.log(enCardinalRules.select(2)); // \"other\"\nconsole.log(enCardinalRules.select(3)); // \"other\"\n\n// Arabic\nconst arCardinalRules = new Intl.PluralRules(\"ar-EG\");\nconsole.log(arCardinalRules.select(0)); // \"zero\"\nconsole.log(arCardinalRules.select(1)); // \"one\"\nconsole.log(arCardinalRules.select(2)); // \"two\"\nconsole.log(arCardinalRules.select(6)); // \"few\"\nconsole.log(arCardinalRules.select(18)); // \"many\"\n```\n\n### Using options\n\nThe plural form of the specified number may also depend on [constructor `options`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules#options), such as how the number is rounded, and whether it is cardinal or ordinal.\n\nThis example shows how you can set the type of rules to \"ordinal\", and how this affects the form for some numbers in US English.\n\n```js\n// US English - ordinal\nconst enOrdinalRules = new Intl.PluralRules(\"en-US\", { type: \"ordinal\" });\nconsole.log(enOrdinalRules.select(0)); // \"other\" (0th)\nconsole.log(enOrdinalRules.select(1)); // \"one\"   (1st)\nconsole.log(enOrdinalRules.select(2)); // \"two\"   (2nd)\nconsole.log(enOrdinalRules.select(3)); // \"few\"   (3rd)\nconsole.log(enOrdinalRules.select(4)); // \"other\" (4th)\nconsole.log(enOrdinalRules.select(21)); // \"one\"  (21st)\n```\n\n### Formatting text using the returned tag\n\nThe code below extends the previous example, showing how you might use the returned tag for an ordinal number to format text in English.\n\n```js\nconst enOrdinalRules = new Intl.PluralRules(\"en-US\", { type: \"ordinal\" });\n\nconst suffixes = new Map([\n  [\"one\", \"st\"],\n  [\"two\", \"nd\"],\n  [\"few\", \"rd\"],\n  [\"other\", \"th\"],\n]);\nconst formatOrdinals = (n) => {\n  const rule = enOrdinalRules.select(n);\n  const suffix = suffixes.get(rule);\n  return `${n}${suffix}`;\n};\n\nformatOrdinals(0); // '0th'\nformatOrdinals(1); // '1st'\nformatOrdinals(2); // '2nd'\nformatOrdinals(3); // '3rd'\nformatOrdinals(4); // '4th'\nformatOrdinals(11); // '11th'\nformatOrdinals(21); // '21st'\nformatOrdinals(42); // '42nd'\nformatOrdinals(103); // '103rd'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Intl.PluralRules` in FormatJS](https://formatjs.io/docs/polyfills/intl-pluralrules/)\n- {{jsxref(\"Intl\")}}\n",
      "pluralrules": {
        "index.md": "---\ntitle: Intl.PluralRules() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Intl.PluralRules.PluralRules\n---\n\n{{JSRef}}\n\nThe **`Intl.PluralRules()`** constructor creates {{jsxref(\"Intl.PluralRules\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew Intl.PluralRules()\nnew Intl.PluralRules(locales)\nnew Intl.PluralRules(locales, options)\n```\n\n> **Note:** `Intl.PluralRules()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `locales` {{optional_inline}}\n  - : A string with a BCP 47 language tag or an {{jsxref(\"Intl.Locale\")}} instance, or an array of such locale identifiers. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n\n  - : An object containing the following properties, in the order they are retrieved (all of them are optional):\n\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n    - `type`\n      - : The type to use. Possible values are:\n        - `\"cardinal\"` (default)\n          - : For cardinal numbers (referring to the quantity of things).\n        - `\"ordinal\"`\n          - : For ordinal number (referring to the ordering or ranking of things, e.g. \"1st\", \"2nd\", \"3rd\" in English).\n\n    `Intl.PluralRules` also supports the `Intl.NumberFormat()` [digit options](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#digit_options) (see `Intl.NumberFormat()` for details):\n\n    - `minimumIntegerDigits`\n    - `minimumFractionDigits`\n    - `maximumFractionDigits`\n    - `minimumSignificantDigits`\n    - `maximumSignificantDigits`\n    - `roundingPriority`\n    - `roundingIncrement`\n    - `roundingMode`\n\n    These options are interpreted as if the `notation` option from `Intl.NumberFormat` is `\"standard\"` and `style` is `\"decimal\"`.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `locales` or `options` contain invalid values.\n\n## Examples\n\n### Basic usage\n\nIn basic use without specifying a locale, a formatted string in the default locale and with default options is returned.\nThis is useful to distinguish between singular and plural forms, e.g. \"dog\" and \"dogs\".\n\n```js\nconst pr = new Intl.PluralRules();\n\npr.select(0); // 'other' if in US English locale\n\npr.select(1); // 'one' if in US English locale\n\npr.select(2); // 'other' if in US English locale\n```\n\n### Using options\n\nThe results can be customized using the `options` argument, which has one property called `type` which you can set to `ordinal`. This is useful to figure out the ordinal indicator, e.g. \"1st\", \"2nd\", \"3rd\", \"4th\", \"42nd\",\nand so forth.\n\n```js\nconst pr = new Intl.PluralRules(\"en-US\", { type: \"ordinal\" });\n\nconst suffixes = new Map([\n  [\"one\", \"st\"],\n  [\"two\", \"nd\"],\n  [\"few\", \"rd\"],\n  [\"other\", \"th\"],\n]);\nconst formatOrdinals = (n) => {\n  const rule = pr.select(n);\n  const suffix = suffixes.get(rule);\n  return `${n}${suffix}`;\n};\n\nformatOrdinals(0); // '0th'\nformatOrdinals(1); // '1st'\nformatOrdinals(2); // '2nd'\nformatOrdinals(3); // '3rd'\nformatOrdinals(4); // '4th'\nformatOrdinals(11); // '11th'\nformatOrdinals(21); // '21st'\nformatOrdinals(42); // '42nd'\nformatOrdinals(103); // '103rd'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.PluralRules\")}}\n- {{jsxref(\"Intl\")}}\n"
      },
      "resolvedoptions": {
        "index.md": "---\ntitle: Intl.PluralRules.prototype.resolvedOptions()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/resolvedOptions\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.PluralRules.resolvedOptions\n---\n\n{{JSRef}}\n\nThe **`resolvedOptions()`** method of {{jsxref(\"Intl.PluralRules\")}} instances returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this `Intl.PluralRules` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-pluralrules-prototype-resolvedoptions.html\")}}\n\n## Syntax\n\n```js-nolint\nresolvedOptions()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new object with properties reflecting the locale and plural formatting options computed during the initialization of the given {{jsxref(\"Intl.PluralRules\")}} object.\n\nThe object has the following properties:\n\n- `locale`\n  - : The BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n- `pluralCategories`\n  - : An {{jsxref(\"Array\")}} of plural categories used by the given locale, selected from the list `\"zero\"`, `\"one\"`, `\"two\"`, `\"few\"`, `\"many\"` and `\"other\"`.\n- `type`\n\n  - : The type used (`cardinal` or `ordinal`).\n\n- `roundingMode` {{experimental_inline}}\n  - : The rounding mode.\n    This is the value provided for the [`options.roundingMode`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules#roundingmode) argument in the constructor, or the default value: `halfExpand`.\n- `roundingPriority` {{experimental_inline}}\n  - : The priority for resolving rounding conflicts if both \"FractionDigits\" and \"SignificantDigits\" are specified.\n    This is the value provided for the [`options.roundingPriority`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules#roundingpriority) argument in the constructor, or the default value: `auto`.\n- `roundingIncrement` {{experimental_inline}}\n  - : The rounding-increment precision (the increment used when rounding numbers).\n    This is the value specified in the [`options.roundingIncrement`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules#roundingincrement) argument in the constructor.\n- `trailingZeroDisplay` {{experimental_inline}}\n  - : The strategy for displaying trailing zeros on whole numbers.\n    This is the value specified in the [`options.trailingZeroDisplay`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules#trailingzerodisplay) argument in the constructor, or the default value: `\"auto\"`.\n\nOnly one of the following two groups of properties is included:\n\n- `minimumIntegerDigits`, `minimumFractionDigits`, `maximumFractionDigits`\n  - : The values provided for these properties in the `options` argument or filled in as defaults.\n    These properties are present only if neither `minimumSignificantDigits` nor `maximumSignificantDigits` was provided in the `options` argument.\n- `minimumSignificantDigits`, `maximumSignificantDigits`\n  - : The values provided for these properties in the `options` argument or filled in as defaults.\n    These properties are present only if at least one of them was provided in the `options` argument.\n\n## Examples\n\n### Using the resolvedOptions() method\n\nThe code below shows the construction of a `PluralRules` object, followed by logging of each of the resolved options.\n\n```js\n// Create a PluralRules instance\nconst de = new Intl.PluralRules(\"de-DE\", {\n  maximumSignificantDigits: 2,\n  trailingZeroDisplay: \"auto\",\n});\n\n// Resolve the options\nconst usedOptions = de.resolvedOptions();\nconsole.log(usedOptions.locale); // \"de-DE\"\nconsole.log(usedOptions.pluralCategories); // Array [\"one\", \"other\"]\nconsole.log(usedOptions.type); // \"cardinal\"\nconsole.log(usedOptions.minimumIntegerDigits); // 1\nconsole.log(usedOptions.minimumFractionDigits); // undefined (maximumSignificantDigits is set)\nconsole.log(usedOptions.maximumFractionDigits); //undefined (maximumSignificantDigits is set)\nconsole.log(usedOptions.minimumSignificantDigits); // 1\nconsole.log(usedOptions.maximumSignificantDigits); //2\nconsole.log(usedOptions.roundingIncrement); // 1\nconsole.log(usedOptions.roundingMode); // \"halfExpand\"\nconsole.log(usedOptions.roundingPriority); // \"auto\"\nconsole.log(usedOptions.trailingZeroDisplay); // \"auto\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.PluralRules\")}}\n"
      },
      "select": {
        "index.md": "---\ntitle: Intl.PluralRules.prototype.select()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/select\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.PluralRules.select\n---\n\n{{JSRef}}\n\nThe **`select()`** method of {{jsxref(\"Intl.PluralRules\")}} instances returns a string indicating which plural rule to use for locale-aware formatting of a number.\n\n{{EmbedInteractiveExample(\"pages/js/intl-pluralrules-prototype-select.html\")}}\n\n## Syntax\n\n```js-nolint\nselect(number)\n```\n\n### Parameters\n\n- `number`\n  - : The number to get a plural rule for.\n\n### Return value\n\nA string representing the pluralization category of the `number`.\nThis can be one of `zero`, `one`, `two`, `few`, `many`, or `other`.\n\n## Description\n\nThis function selects a pluralization category according to the locale and formatting options of an {{jsxref(\"Intl.PluralRules\")}} object.\nThese options are set in the [`Intl.PluralRules()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules) constructor.\n\n## Examples\n\n### Using select()\n\nFirst, create an `Intl.PluralRules` object, passing the appropriate `locales` and `options` parameters.\nHere we create a plural rules object for Arabic in the Egyptian dialect.\nBecause the `type` is not specified the rules object will provide formatting for cardinal numbers (the default).\n\n```js\nconst pr = new Intl.PluralRules(\"ar-EG\");\n```\n\nThen call `select()` on the rules object, specifying the number for which the plural form is required.\nNote that Arabic has 5 forms for cardinal numbers, as shown.\n\n```js\npr.select(0); // 'zero'\npr.select(1); // 'one'\npr.select(2); // 'two'\npr.select(6); // 'few'\npr.select(18); // 'many'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.PluralRules\")}}\n"
      },
      "selectrange": {
        "index.md": "---\ntitle: Intl.PluralRules.prototype.selectRange()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/selectRange\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.PluralRules.selectRange\n---\n\n{{JSRef}}\n\nThe **`selectRange()`** method of {{jsxref(\"Intl.PluralRules\")}} instances receives two values and returns a string indicating which plural rule to use for locale-aware formatting of the indicated range.\n\n## Syntax\n\n```js-nolint\nselectRange(startRange, endRange)\n```\n\n### Parameters\n\n- `startRange`\n  - : A number representing the start of the range.\n- `endRange`\n  - : A number representing the end of the range.\n\n### Return value\n\nA string representing the pluralization category of the specified range.\nThis can be one of `zero`, `one`, `two`, `few`, `many` or `other`, that are relevant for the locale whose localization is specified in [LDML Language Plural Rules](https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html).\n\n## Description\n\nThis function selects a pluralization category according to the locale and formatting options of an {{jsxref(\"Intl.PluralRules\")}} object.\n\nConceptually the behavior is the same as getting plural rules for a single cardinal or ordinal number.\nLanguages have one or more forms for describing ranges, and this method returns the appropriate form given the supplied locale and formatting options.\nIn English there is only one plural form, such as \"1–10 apples\", and the method will return `other`.\nOther languages can have many forms.\n\n## Examples\n\n### Using selectRange()\n\n```js\nnew Intl.PluralRules(\"sl\").selectRange(102, 201); // 'few'\n\nnew Intl.PluralRules(\"pt\").selectRange(102, 102); // 'other'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.PluralRules\")}}\n"
      },
      "supportedlocalesof": {
        "index.md": "---\ntitle: Intl.PluralRules.supportedLocalesOf()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/supportedLocalesOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Intl.PluralRules.supportedLocalesOf\n---\n\n{{JSRef}}\n\nThe **`Intl.PluralRules.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in plural rules without having to fall back to the runtime's default locale.\n\n{{EmbedInteractiveExample(\"pages/js/intl-pluralrules-supportedlocalesof.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nIntl.PluralRules.supportedLocalesOf(locales)\nIntl.PluralRules.supportedLocalesOf(locales, options)\n```\n\n### Parameters\n\n- `locales`\n  - : A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object that may have the following property:\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the {{jsxref(\"Intl\", \"Intl\", \"#locale_identification_and_negotiation\", 1)}} page.\n\n### Return value\n\nAn array of strings representing a subset of the given locale tags that are supported in plural rules without having to fall back to the runtime's default locale.\n\n## Examples\n\n### Using supportedLocalesOf()\n\nAssuming a runtime that supports Indonesian and German but not Balinese in plural rules, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to plural rules nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```js\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.PluralRules.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.PluralRules\")}}\n"
      }
    },
    "relativetimeformat": {
      "format": {
        "index.md": "---\ntitle: Intl.RelativeTimeFormat.prototype.format()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.RelativeTimeFormat.format\n---\n\n{{JSRef}}\n\nThe **`format()`** method of {{jsxref(\"Intl.RelativeTimeFormat\")}} instances formats a `value` and `unit` according to the locale and formatting options of this `Intl.RelativeTimeFormat` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-relativetimeformat-prototype-format.html\")}}\n\n## Syntax\n\n```js-nolint\nformat(value, unit)\n```\n\n### Parameters\n\n- `value`\n  - : Numeric value to use in the internationalized relative time message.\n- `unit`\n  - : Unit to use in the relative time internationalized message. Possible values are: `\"year\"`, `\"quarter\"`, `\"month\"`, `\"week\"`, `\"day\"`, `\"hour\"`, `\"minute\"`, `\"second\"`. Plural forms are also permitted.\n\n### Return value\n\nA string representing the given `value` and `unit` formatted according to the locale and formatting options of this {{jsxref(\"Intl.RelativeTimeFormat\")}} object.\n\n## Examples\n\n### Basic format usage\n\nThe following example shows how to create a relative time formatter using the English language.\n\n```js\n// Create a relative time formatter in your locale\n// with default values explicitly passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", {\n  localeMatcher: \"best fit\", // other values: \"lookup\"\n  numeric: \"always\", // other values: \"auto\"\n  style: \"long\", // other values: \"short\" or \"narrow\"\n});\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"1 day ago\"\n\n// Format relative time using positive value (1).\nrtf.format(1, \"day\"); // \"in 1 day\"\n```\n\n### Using the auto option\n\nIf `numeric:auto` option is passed, it will produce the string `yesterday`, `today`, or `tomorrow` instead of `1 day ago`, `in 0 days`, or `in 1 day`. This allows to not always have to use numeric values in the output.\n\n```js\n// Create a relative time formatter in your locale\n// with numeric: \"auto\" option value passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"yesterday\"\n\nrtf.format(0, \"day\"); // \"today\"\n\n// Format relative time using positive day unit (1).\nrtf.format(1, \"day\"); // \"tomorrow\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.RelativeTimeFormat\")}}\n"
      },
      "formattoparts": {
        "index.md": "---\ntitle: Intl.RelativeTimeFormat.prototype.formatToParts()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.RelativeTimeFormat.formatToParts\n---\n\n{{JSRef}}\n\nThe **`formatToParts()`** method of {{jsxref(\"Intl.RelativeTimeFormat\")}} instances returns an {{jsxref(\"Array\")}} of objects representing the relative time format in parts that can be used for custom locale-aware formatting.\n\n{{EmbedInteractiveExample(\"pages/js/intl-relativetimeformat-prototype-formattoparts.html\")}}\n\n## Syntax\n\n```js-nolint\nformatToParts(value, unit)\n```\n\n### Parameters\n\n- `value`\n  - : Numeric value to use in the internationalized relative time message.\n- `unit`\n  - : Unit to use in the relative time internationalized message. Possible values are: `\"year\"`, `\"quarter\"`, `\"month\"`, `\"week\"`, `\"day\"`, `\"hour\"`, `\"minute\"`, `\"second\"`. Plural forms are also permitted.\n\n### Return value\n\nAn {{jsxref(\"Array\")}} of objects containing the formatted relative time in parts.\n\n## Description\n\nThe `Intl.RelativeTimeFormat.prototype.formatToParts` method is a version of the format method which it returns an array of objects which represent \"parts\" of the object, separating the formatted number into its constituent parts and separating it from other surrounding text. These objects have two properties: type a `NumberFormat` formatToParts type, and value, which is the String which is the component of the output. If a \"part\" came from `NumberFormat`, it will have a unit property which indicates the unit being formatted; literals which are part of the larger frame will not have this property.\n\n## Examples\n\n### Using formatToParts\n\n```js\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using the day unit\nrtf.formatToParts(-1, \"day\");\n// [{ type: \"literal\", value: \"yesterday\"}]\n\nrtf.formatToParts(100, \"day\");\n// [\n//   { type: \"literal\", value: \"in \" },\n//   { type: \"integer\", value: \"100\", unit: \"day\" },\n//   { type: \"literal\", value: \" days\" }\n// ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.RelativeTimeFormat\")}}\n"
      },
      "index.md": "---\ntitle: Intl.RelativeTimeFormat\nslug: Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Intl.RelativeTimeFormat\n---\n\n{{JSRef}}\n\nThe **`Intl.RelativeTimeFormat`** object enables language-sensitive relative time formatting.\n\n{{EmbedInteractiveExample(\"pages/js/intl-relativetimeformat.html\")}}\n\n## Constructor\n\n- {{jsxref(\"Intl/RelativeTimeFormat/RelativeTimeFormat\", \"Intl.RelativeTimeFormat()\")}}\n  - : Creates a new `Intl.RelativeTimeFormat` object.\n\n## Static methods\n\n- {{jsxref(\"Intl/RelativeTimeFormat/supportedLocalesOf\", \"Intl.RelativeTimeFormat.supportedLocalesOf()\")}}\n  - : Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## Instance properties\n\nThese properties are defined on `Intl.RelativeTimeFormat.prototype` and shared by all `Intl.RelativeTimeFormat` instances.\n\n- {{jsxref(\"Object/constructor\", \"Intl.RelativeTimeFormat.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Intl.RelativeTimeFormat` instances, the initial value is the {{jsxref(\"Intl/RelativeTimeFormat/RelativeTimeFormat\", \"Intl.RelativeTimeFormat\")}} constructor.\n- `Intl.RelativeTimeFormat.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.RelativeTimeFormat\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Intl/RelativeTimeFormat/format\", \"Intl.RelativeTimeFormat.prototype.format()\")}}\n  - : Formats a `value` and a `unit` according to the locale and formatting options of the given `Intl.RelativeTimeFormat` object.\n- {{jsxref(\"Intl/RelativeTimeFormat/formatToParts\", \"Intl.RelativeTimeFormat.prototype.formatToParts()\")}}\n  - : Returns an {{jsxref(\"Array\")}} of objects representing the relative time format in parts that can be used for custom locale-aware formatting.\n- {{jsxref(\"Intl/RelativeTimeFormat/resolvedOptions\", \"Intl.RelativeTimeFormat.prototype.resolvedOptions()\")}}\n  - : Returns a new object with properties reflecting the locale and formatting options computed during initialization of the object.\n\n## Examples\n\n### Basic format usage\n\nThe following example shows how to use a relative time formatter for the English language.\n\n```js\n// Create a relative time formatter in your locale\n// with default values explicitly passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", {\n  localeMatcher: \"best fit\", // other values: \"lookup\"\n  numeric: \"always\", // other values: \"auto\"\n  style: \"long\", // other values: \"short\" or \"narrow\"\n});\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"1 day ago\"\n\n// Format relative time using positive value (1).\nrtf.format(1, \"day\"); // \"in 1 day\"\n```\n\n### Using formatToParts\n\nThe following example shows how to create a relative time formatter returning formatted parts.\n\n```js\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using the day unit.\nrtf.formatToParts(-1, \"day\");\n// [{ type: \"literal\", value: \"yesterday\"}]\n\nrtf.formatToParts(100, \"day\");\n// [\n//   { type: \"literal\", value: \"in \" },\n//   { type: \"integer\", value: \"100\", unit: \"day\" },\n//   { type: \"literal\", value: \" days\" }\n// ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Intl.RelativeTimeFormat` in FormatJS](https://formatjs.io/docs/polyfills/intl-relativetimeformat/)\n- {{jsxref(\"Intl\")}}\n- [`Intl.RelativeTimeFormat`](https://v8.dev/features/intl-relativetimeformat) on v8.dev (2018)\n",
      "relativetimeformat": {
        "index.md": "---\ntitle: Intl.RelativeTimeFormat() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Intl.RelativeTimeFormat.RelativeTimeFormat\n---\n\n{{JSRef}}\n\nThe **`Intl.RelativeTimeFormat()`** constructor creates {{jsxref(\"Intl.RelativeTimeFormat\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew Intl.RelativeTimeFormat()\nnew Intl.RelativeTimeFormat(locales)\nnew Intl.RelativeTimeFormat(locales, options)\n```\n\n> **Note:** `Intl.RelativeTimeFormat()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag or an {{jsxref(\"Intl.Locale\")}} instance, or an array of such locale identifiers. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n    The following Unicode extension key is allowed:\n\n    - `nu`\n      - : See [`numberingSystem`](#numberingsystem).\n\n    This key can also be set with `options` (as listed below). When both are set, the `options` property takes precedence.\n\n- `options` {{optional_inline}}\n\n  - : An object containing the following properties, in the order they are retrieved (all of them are optional):\n\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n    - `numberingSystem`\n      - : The numbering system to use for number formatting, such as `\"arab\"`, `\"hans\"`, `\"mathsans\"`, and so on. For a list of supported numbering system types, see [`Intl.Locale.prototype.getNumberingSystems()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getNumberingSystems#supported_numbering_system_types). This option can also be set through the `nu` Unicode extension key; if both are provided, this `options` property takes precedence.\n    - `style`\n      - : The style of the formatted relative time. Possible values are:\n        - `\"long\"` (default)\n          - : E.g., \"in 1 month\"\n        - `\"short\"`\n          - : E.g., \"in 1 mo.\"\n        - `\"narrow\"`\n          - : E.g., \"in 1 mo.\". The narrow style could be similar to the short style for some locales.\n    - `numeric`\n      - : Whether to use numeric values in the output. Possible values are `\"always\"` and `\"auto\"`; the default is `\"always\"`. When set to `\"auto\"`, the output may use more idiomatic phrasing such as `\"yesterday\"` instead of `\"1 day ago\"`.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `locales` or `options` contain invalid values.\n\n## Examples\n\n### Basic format usage\n\nThe following example shows how to create a relative time formatter using the English language.\n\n```js\n// Create a relative time formatter in your locale\n// with default values explicitly passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", {\n  localeMatcher: \"best fit\", // other values: \"lookup\"\n  numeric: \"always\", // other values: \"auto\"\n  style: \"long\", // other values: \"short\" or \"narrow\"\n});\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"1 day ago\"\n\n// Format relative time using positive value (1).\nrtf.format(1, \"day\"); // \"in 1 day\"\n```\n\n### Using the auto option\n\nIf `numeric:auto` option is passed, it will produce the string `yesterday` or `tomorrow` instead of `1 day ago` or `in 1 day`. This allows to not always have to use numeric values in the output.\n\n```js\n// Create a relative time formatter in your locale\n// with numeric: \"auto\" option value passed in.\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" });\n\n// Format relative time using negative value (-1).\nrtf.format(-1, \"day\"); // \"yesterday\"\n\n// Format relative time using positive day unit (1).\nrtf.format(1, \"day\"); // \"tomorrow\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.RelativeTimeFormat\")}}\n- {{jsxref(\"Intl\")}}\n- [`Intl.RelativeTimeFormat`](https://v8.dev/features/intl-relativetimeformat) on v8.dev (2018)\n"
      },
      "resolvedoptions": {
        "index.md": "---\ntitle: Intl.RelativeTimeFormat.prototype.resolvedOptions()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/resolvedOptions\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.RelativeTimeFormat.resolvedOptions\n---\n\n{{JSRef}}\n\nThe **`resolvedOptions()`** method of {{jsxref(\"Intl.RelativeTimeFormat\")}} instances returns a new object with properties reflecting the locale and relative time formatting options computed during initialization of this `Intl.RelativeTimeFormat` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-relativetimeformat-prototype-resolvedoptions.html\")}}\n\n## Syntax\n\n```js-nolint\nresolvedOptions()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new object with properties reflecting the locale and number formatting options computed during the initialization of the given {{jsxref(\"Intl.RelativeTimeFormat\")}} object.\n\n## Description\n\nThe resulting object has the following properties:\n\n- `locale`\n  - : The BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n- `style`\n\n  - : The length of the internationalized message. Possible values are:\n\n    - `\"long\"` (default, e.g., `in 1 month`)\n    - `\"short\"` (e.g., `in 1 mo.`),\n    - or `\"narrow\"` (e.g., `in 1 mo.`). The narrow style could be similar to the short style for some locales.\n\n- `numeric`\n\n  - : The format of output message. Possible values are:\n\n    - `\"always\"` (default, e.g., `1 day ago`),\n    - or `\"auto\"` (e.g., `yesterday`). The `\"auto\"` value allows to not always have to use numeric values in the output.\n\n- `numberingSystem`\n  - : The value requested using the Unicode extension key `\"nu\"` or filled in as a default.\n\n## Examples\n\n### Using the resolvedOptions() method\n\n```js\nconst de = new Intl.RelativeTimeFormat(\"de-DE\");\nconst usedOptions = de.resolvedOptions();\n\nusedOptions.locale; // \"de-DE\"\nusedOptions.style; // \"long\"\nusedOptions.numeric; // \"always\"\nusedOptions.numberingSystem; // \"latn\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.RelativeTimeFormat\")}}\n"
      },
      "supportedlocalesof": {
        "index.md": "---\ntitle: Intl.RelativeTimeFormat.supportedLocalesOf()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/supportedLocalesOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Intl.RelativeTimeFormat.supportedLocalesOf\n---\n\n{{JSRef}}\n\nThe **`Intl.RelativeTimeFormat.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in relative time formatting without having to fall back to the runtime's default locale.\n\n{{EmbedInteractiveExample(\"pages/js/intl-relativetimeformat-supportedlocalesof.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nIntl.RelativeTimeFormat.supportedLocalesOf(locales)\nIntl.RelativeTimeFormat.supportedLocalesOf(locales, options)\n```\n\n### Parameters\n\n- `locales`\n  - : A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object that may have the following property:\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the {{jsxref(\"Intl\", \"Intl\", \"#locale_identification_and_negotiation\", 1)}} page.\n\n### Return value\n\nAn array of strings representing a subset of the given locale tags that are supported in relative time formatting without having to fall back to the runtime's default locale.\n\n## Examples\n\n### Using supportedLocalesOf()\n\nAssuming a runtime that supports Indonesian and German but not Balinese in relative time formatting, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to relative time formatting nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```js\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.RelativeTimeFormat.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.RelativeTimeFormat\")}}\n"
      }
    },
    "segmenter": {
      "index.md": "---\ntitle: Intl.Segmenter\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Intl.Segmenter\n---\n\n{{JSRef}}\n\nThe **`Intl.Segmenter`** object enables locale-sensitive text segmentation, enabling you to get meaningful items (graphemes, words or sentences) from a string.\n\n{{EmbedInteractiveExample(\"pages/js/intl-segmenter.html\")}}\n\n## Constructor\n\n- {{jsxref(\"Intl/Segmenter/Segmenter\", \"Intl.Segmenter()\")}}\n  - : Creates a new `Intl.Segmenter` object.\n\n## Static methods\n\n- {{jsxref(\"Intl/Segmenter/supportedLocalesOf\", \"Intl.Segmenter.supportedLocalesOf()\")}}\n  - : Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## Instance properties\n\nThese properties are defined on `Intl.Segmenter.prototype` and shared by all `Intl.Segmenter` instances.\n\n- {{jsxref(\"Object/constructor\", \"Intl.Segmenter.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Intl.Segmenter` instances, the initial value is the {{jsxref(\"Intl/Segmenter/Segmenter\", \"Intl.Segmenter\")}} constructor.\n- `Intl.Segmenter.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Intl.Segmenter\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Intl/Segmenter/resolvedOptions\", \"Intl.Segmenter.prototype.resolvedOptions()\")}}\n  - : Returns a new object with properties reflecting the locale and granularity options computed during initialization of this `Intl.Segmenter` object.\n- {{jsxref(\"Intl/Segmenter/segment\", \"Intl.Segmenter.prototype.segment()\")}}\n  - : Returns a new iterable [`Segments`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) instance representing the segments of a string according to the locale and granularity of this `Intl.Segmenter` instance.\n\n## Examples\n\n### Basic usage and difference from String.prototype.split()\n\nIf we were to use [`String.prototype.split(\" \")`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) to segment a text in words, we would not get the correct result if the locale of the text does not use whitespaces between words (which is the case for Japanese, Chinese, Thai, Lao, Khmer, Myanmar, etc.).\n\n```js example-bad\nconst str = \"吾輩は猫である。名前はたぬき。\";\nconsole.table(str.split(\" \"));\n// ['吾輩は猫である。名前はたぬき。']\n// The two sentences are not correctly segmented.\n```\n\n```js example-good\nconst str = \"吾輩は猫である。名前はたぬき。\";\nconst segmenterJa = new Intl.Segmenter(\"ja-JP\", { granularity: \"word\" });\n\nconst segments = segmenterJa.segment(str);\nconsole.table(Array.from(segments));\n// [{segment: '吾輩', index: 0, input: '吾輩は猫である。名前はたぬき。', isWordLike: true},\n// etc.\n// ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n",
      "resolvedoptions": {
        "index.md": "---\ntitle: Intl.Segmenter.prototype.resolvedOptions()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/resolvedOptions\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Segmenter.resolvedOptions\n---\n\n{{JSRef}}\n\nThe **`resolvedOptions()`** method of {{jsxref(\"Intl.Segmenter\")}} instances returns a new object with properties reflecting the locale and granularity options computed during the initialization of this `Intl.Segmenter` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-segmenter-prototype-resolvedoptions.html\")}}\n\n## Syntax\n\n```js-nolint\nresolvedOptions()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new object with properties reflecting the locale and collation options computed\nduring the initialization of the given [`Intl.Segmenter`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) object.\n\n## Description\n\nThe resulting object has the following properties:\n\n- `locale`\n  - : The BCP 47 language tag for the locale actually used. If any Unicode extension\n    values were requested in the input BCP 47 language tag that led to this locale,\n    the key-value pairs that were requested and are supported for this locale are\n    included in `locale`.\n- `granularity`\n  - : The value provided for this property in the `options` argument or filled\n    in as the default.\n\n## Examples\n\n### Basic usage\n\n```js\nconst spanishSegmenter = new Intl.Segmenter(\"es\", { granularity: \"sentence\" });\nconst options = spanishSegmenter.resolvedOptions();\nconsole.log(options.locale); // \"es\"\nconsole.log(options.granularity); // \"sentence\"\n```\n\n### Default granularity\n\n```js\nconst spanishSegmenter = new Intl.Segmenter(\"es\");\nconst options = spanishSegmenter.resolvedOptions();\nconsole.log(options.locale); // \"es\"\nconsole.log(options.granularity); // \"grapheme\"\n```\n\n### Fallback locale\n\n```js\nconst banSegmenter = new Intl.Segmenter(\"ban\");\nconst options = banSegmenter.resolvedOptions();\nconsole.log(options.locale);\n// \"fr\" on a runtime where the Balinese locale\n// is not supported and French is the default locale\nconsole.log(options.granularity); // \"grapheme\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n"
      },
      "segment": {
        "index.md": "---\ntitle: Intl.Segmenter.prototype.segment()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Segmenter.segment\n---\n\n{{JSRef}}\n\nThe **`segment()`** method of {{jsxref(\"Intl.Segmenter\")}} instances segments a string according to the locale and granularity of this `Intl.Segmenter` object.\n\n{{EmbedInteractiveExample(\"pages/js/intl-segmenter-prototype-segment.html\")}}\n\n## Syntax\n\n```js-nolint\nsegment(input)\n```\n\n### Parameters\n\n- `input`\n  - : The text to be segmented as a string.\n\n### Return value\n\nA new iterable [`Segments`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) object containing the segments of the input string, using the segmenter's locale and granularity.\n\n## Examples\n\n```js\n// Create a locale-specific word segmenter\nconst segmenter = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\n\n// Use it to get an iterator over the segments of a string\nconst input = \"Moi ? N'est-ce pas ?\";\nconst segments = segmenter.segment(input);\n\n// Use that for segmentation\nfor (const { segment, index, isWordLike } of segments) {\n  console.log(\n    \"segment at code units [%d, %d]: «%s»%s\",\n    index,\n    index + segment.length,\n    segment,\n    isWordLike ? \" (word-like)\" : \"\",\n  );\n}\n// segment at code units [0, 3]: «Moi» (word-like)\n// segment at code units [3, 4]: « »\n// segment at code units [4, 5]: «?»\n// segment at code units [5, 6]: « »\n// segment at code units [6, 11]: «N'est» (word-like)\n// segment at code units [11, 12]: «-»\n// segment at code units [12, 14]: «ce» (word-like)\n// segment at code units [14, 15]: « »\n// segment at code units [15, 18]: «pas» (word-like)\n// segment at code units [18, 19]: « »\n// segment at code units [19, 20]: «?»\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n",
        "segments": {
          "@@iterator": {
            "index.md": "---\ntitle: Segments.prototype[@@iterator]()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/@@iterator\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Segments.@@iterator\n---\n\n{{JSRef}}\n\nThe **`[@@iterator]()`** method of [`Segments`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) instances implements the [iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows `Segments` objects to be consumed by most syntaxes expecting iterables, such as the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and {{jsxref(\"Statements/for...of\", \"for...of\")}} loops. It returns a [segments iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields data about each segment.\n\n{{EmbedInteractiveExample(\"pages/js/segments-prototype-@@iterator.html\")}}\n\n## Syntax\n\n```js-nolint\nsegments[Symbol.iterator]()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields data about each segment. Each yielded object has the same properties as the object returned by the [`containing()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing) method.\n\n## Examples\n\n### Iteration using for...of loop\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes `Segments` objects [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```js\nconst segmenter = new Intl.Segmenter(\"zh-CN\", { granularity: \"word\" });\nconst input = \"你好，世界！我爱编程。\";\n\nfor (const value of segmenter.segment(input)) {\n  console.log(value);\n}\n\n/*\n{segment: '你好', index: 0, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '，', index: 2, input: '你好，世界！我爱编程。', isWordLike: false}\n{segment: '世界', index: 3, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '！', index: 5, input: '你好，世界！我爱编程。', isWordLike: false}\n{segment: '我', index: 6, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '爱', index: 7, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '编', index: 8, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '程', index: 9, input: '你好，世界！我爱编程。', isWordLike: true}\n{segment: '。', index: 10, input: '你好，世界！我爱编程。', isWordLike: false}\n*/\n```\n\n### Manually hand-rolling the iterator\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```js\nconst segmenter = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\nconst input = \"Moi ? N'est-ce pas ?\";\nconst segments = segmenter.segment(input);\nconst iterator = segments[Symbol.iterator]();\n\nlet result = iterator.next();\n\nwhile (!result.done) {\n  console.log(result.value);\n  result = iterator.next();\n}\n\n/*\n{segment: 'Moi', index: 0, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: ' ', index: 3, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: '?', index: 4, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: ' ', index: 5, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: \"N'est\", index: 6, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: '-', index: 11, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: 'ce', index: 12, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: ' ', index: 14, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: 'pas', index: 15, input: \"Moi ? N'est-ce pas ?\", isWordLike: true}\n{segment: ' ', index: 18, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n{segment: '?', index: 19, input: \"Moi ? N'est-ce pas ?\", isWordLike: false}\n*/\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`Intl.Segmenter`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter)\n- [`Intl.Segmenter.prototype.segment()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment)\n- {{jsxref(\"Symbol.iterator\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
          },
          "containing": {
            "index.md": "---\ntitle: Segments.prototype.containing()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Intl.Segments.containing\n---\n\n{{JSRef}}\n\nThe **`containing()`** method of [`Segments`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) instances returns an object describing the segment in the string that includes the code unit at the specified index.\n\n{{EmbedInteractiveExample(\"pages/js/segments-prototype-containing.html\")}}\n\n## Syntax\n\n```js-nolint\ncontaining(codeUnitIndex)\n```\n\n### Parameters\n\n- `codeUnitIndex` {{optional_inline}}\n  - : A number specifying the index of the code unit in the original input string. If the value is omitted, it defaults to `0`.\n\n### Return value\n\nAn object describing the segment of the original string with the following properties, or `undefined` if the supplied index value is out of bounds.\n\n- `segment`\n  - : A string containing the segment extracted from the original input string.\n- `index`\n  - : The code unit index in the original input string at which the segment begins.\n- `input`\n  - : The complete input string that was segmented.\n- `isWordLike`\n  - : A boolean value only if `granularity` is `\"word\"`; otherwise, `undefined`. If `granularity` is `\"word\"`, then `isWordLike` is `true` when the segment is word-like (i.e., consists of letters/numbers/ideographs/etc.); otherwise, `false`.\n\n## Examples\n\n```js\n// ┃0 1 2 3 4 5┃6┃7┃8┃9  ← code unit index\n// ┃A l l o n s┃-┃y┃!┃   ← code unit\nconst input = \"Allons-y!\";\n\nconst segmenter = new Intl.Segmenter(\"fr\", { granularity: \"word\" });\nconst segments = segmenter.segment(input);\n\nlet current = segments.containing();\n// { index: 0, segment: \"Allons\", isWordLike: true }\n\ncurrent = segments.containing(4);\n// { index: 0, segment: \"Allons\", isWordLike: true }\n\ncurrent = segments.containing(6);\n// { index: 6, segment: \"-\", isWordLike: false }\n\ncurrent = segments.containing(current.index + current.segment.length);\n// { index: 7, segment: \"y\", isWordLike: true }\n\ncurrent = segments.containing(current.index + current.segment.length);\n// { index: 8, segment: \"!\", isWordLike: false }\n\ncurrent = segments.containing(current.index + current.segment.length);\n// undefined\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`Intl.Segmenter`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter)\n- [`Intl.Segmenter.prototype.segment()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment)\n"
          },
          "index.md": "---\ntitle: Segments\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Intl.Segments\n---\n\n{{JSRef}}\n\nA **`Segments`** object is an iterable collection of the segments of a text string. It is returned by a call to the [`segment()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment) method of an [`Intl.Segmenter`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) object.\n\n{{EmbedInteractiveExample(\"pages/js/segments-prototype-containing.html\")}}\n\n## Instance methods\n\n- [`Segments.prototype.containing()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/containing)\n  - : Returns an object describing the segment in the original string that includes the code unit at a specified index.\n- [`Segments.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/@@iterator)\n  - : Returns an iterator to iterate over the segments.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`Intl.Segmenter`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter)\n- [`Intl.Segmenter.prototype.segment()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment)\n"
        }
      },
      "segmenter": {
        "index.md": "---\ntitle: Intl.Segmenter() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/Segmenter\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Intl.Segmenter.Segmenter\n---\n\n{{JSRef}}\n\nThe **`Intl.Segmenter()`** constructor creates {{jsxref(\"Intl.Segmenter\")}} objects.\n\n{{EmbedInteractiveExample(\"pages/js/intl-segmenter.html\")}}\n\n## Syntax\n\n```js-nolint\nnew Intl.Segmenter()\nnew Intl.Segmenter(locales)\nnew Intl.Segmenter(locales, options)\n```\n\n> **Note:** `Intl.Segmenter()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `locales` {{optional_inline}}\n  - : A string with a BCP 47 language tag or an {{jsxref(\"Intl.Locale\")}} instance, or an array of such locale identifiers. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object containing the following properties, in the order they are retrieved (all of them are optional):\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see [Locale identification and negotiation](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation).\n    - `granularity`\n      - : How granularly should the input be split. Possible values are:\n        - `\"grapheme\"` (default)\n          - : Split the input into segments at grapheme cluster (user-perceived character) boundaries, as determined by the locale.\n        - `\"word\"`\n          - : Split the input into segments at word boundaries, as determined by the locale.\n        - `\"sentence\"`\n          - : Split the input into segments at sentence boundaries, as determined by the locale.\n\n### Return value\n\nA new [`Intl.Segmenter`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter) instance.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `locales` or `options` contain invalid values.\n\n## Examples\n\n### Basic usage\n\nThe following example shows how to count words in a string using the Japanese language (where splitting the string using `String` methods would have given an incorrect result).\n\n```js\nconst text = \"吾輩は猫である。名前はたぬき。\";\nconst japaneseSegmenter = new Intl.Segmenter(\"ja-JP\", { granularity: \"word\" });\nconsole.log(\n  [...japaneseSegmenter.segment(text)].filter((segment) => segment.isWordLike)\n    .length,\n);\n// 8, as the text is segmented as '吾輩'|'は'|'猫'|'で'|'ある'|'。'|'名前'|'は'|'たぬき'|'。'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n"
      },
      "supportedlocalesof": {
        "index.md": "---\ntitle: Intl.Segmenter.supportedLocalesOf()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/supportedLocalesOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Intl.Segmenter.supportedLocalesOf\n---\n\n{{JSRef}}\n\nThe **`Intl.Segmenter.supportedLocalesOf()`** static method returns an array containing those of the provided locales that are supported in segmentation without having to fall back to the runtime's default locale.\n\n{{EmbedInteractiveExample(\"pages/js/intl-segmenter-supportedlocalesof.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nIntl.Segmenter.supportedLocalesOf(locales)\nIntl.Segmenter.supportedLocalesOf(locales, options)\n```\n\n### Parameters\n\n- `locales`\n  - : A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object that may have the following property:\n    - `localeMatcher`\n      - : The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the {{jsxref(\"Intl\", \"Intl\", \"#locale_identification_and_negotiation\", 1)}} page.\n\n### Return value\n\nAn array of strings representing a subset of the given locale tags that are supported in segmentation without having to fall back to the runtime's default locale.\n\n## Examples\n\n### Using supportedLocalesOf()\n\nAssuming a runtime that supports Indonesian and German but not Balinese in segmentation, `supportedLocalesOf` returns the Indonesian and German language tags unchanged, even though `pinyin` collation is neither relevant to segmentation nor used with Indonesian, and a specialized German for Indonesia is unlikely to be supported. Note the specification of the `\"lookup\"` algorithm here — a `\"best fit\"` matcher might decide that Indonesian is an adequate match for Balinese since most Balinese speakers also understand Indonesian, and therefore return the Balinese language tag as well.\n\n```js\nconst locales = [\"ban\", \"id-u-co-pinyin\", \"de-ID\"];\nconst options = { localeMatcher: \"lookup\" };\nconsole.log(Intl.Segmenter.supportedLocalesOf(locales, options));\n// [\"id-u-co-pinyin\", \"de-ID\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.Segmenter\")}}\n"
      }
    },
    "supportedvaluesof": {
      "index.md": "---\ntitle: Intl.supportedValuesOf()\nslug: Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Intl.supportedValuesOf\n---\n\n{{JSRef}}\n\nThe **`Intl.supportedValuesOf()`** static method returns an array containing the supported calendar, collation, currency, numbering systems, or unit values supported by the implementation.\n\nDuplicates are omitted and the array is sorted in ascending lexicographical order (or more precisely, using {{jsxref(\"Array/sort\", \"Array.prototype.sort()\")}} with an `undefined` compare function).\n\nThe method can be used to feature-test whether values are supported in a particular implementation and download a polyfill only if necessary.\nIt can also be used to build UIs that allow users to select their preferred localized values, for example when the UI is created from WebGL or server-side.\n\n{{EmbedInteractiveExample(\"pages/js/intl-supportedvaluesof.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nIntl.supportedValuesOf(key)\n```\n\n### Parameters\n\n- `key`\n  - : A key string indicating the category of values to be returned. This is one of: `\"calendar\"`, `\"collation\"`, `\"currency\"`, `\"numberingSystem\"`, `\"timeZone\"`, `\"unit\"`.\n\n### Return value\n\nA sorted array of unique string values indicating the values supported by the implementation for the given key.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if an unsupported key was passed as a parameter.\n\n## Examples\n\n### Feature testing\n\nYou can check that the method is supported by comparing to `undefined`:\n\n```js\nif (typeof Intl.supportedValuesOf !== \"undefined\") {\n  // method is supported\n}\n```\n\n### Get all values for key\n\nTo get the supported values for calendar you call the method with the key `\"calendar\"`.\nYou can then iterate through the returned array as shown below:\n\n```js\nIntl.supportedValuesOf(\"calendar\").forEach((calendar) => {\n  // \"buddhist\", \"chinese\", \"coptic\", \"dangi\", etc.\n});\n```\n\n> **Note:** The array returned for calendar values will always include the value \"gregory\" (gregorian).\n\nThe other values are all obtained in the same way:\n\n```js\nIntl.supportedValuesOf(\"collation\").forEach((collation) => {\n  // \"compat\", \"dict\", \"emoji\", etc.\n});\n\nIntl.supportedValuesOf(\"currency\").forEach((currency) => {\n  // \"ADP\", \"AED\", \"AFA\", \"AFN\", \"ALK\", \"ALL\", \"AMD\", etc.\n});\n\nIntl.supportedValuesOf(\"numberingSystem\").forEach((numberingSystem) => {\n  // \"adlm\", \"ahom\", \"arab\", \"arabext\", \"bali\", etc.\n});\n\nIntl.supportedValuesOf(\"timeZone\").forEach((timeZone) => {\n  // \"Africa/Abidjan\", \"Africa/Accra\", \"Africa/Addis_Ababa\", \"Africa/Algiers\", etc.\n});\n\nIntl.supportedValuesOf(\"unit\").forEach((unit) => {\n  // \"acre\", \"bit\", \"byte\", \"celsius\", \"centimeter\", etc.\n});\n```\n\n### Invalid key throws RangeError\n\n```js\ntry {\n  Intl.supportedValuesOf(\"someInvalidKey\");\n} catch (err) {\n  //Error: RangeError: invalid key: \"someInvalidKey\"\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Intl.supportedValuesOf` in FormatJS](https://github.com/formatjs/formatjs/tree/main/packages/intl-enumerator)\n- {{jsxref(\"Intl\")}}\n"
    }
  },
  "isfinite": {
    "index.md": "---\ntitle: isFinite()\nslug: Web/JavaScript/Reference/Global_Objects/isFinite\npage-type: javascript-function\nbrowser-compat: javascript.builtins.isFinite\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`isFinite()`** function determines whether a value is finite, first converting the value to a number if necessary. A finite number is one that's not {{jsxref(\"NaN\")}} or ±{{jsxref(\"Infinity\")}}. Because coercion inside the `isFinite()` function can be [surprising](/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN#description), you may prefer to use {{jsxref(\"Number.isFinite()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-isfinite.html\")}}\n\n## Syntax\n\n```js-nolint\nisFinite(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value to be tested.\n\n### Return value\n\n`false` if the given value is {{jsxref(\"NaN\")}}, {{jsxref(\"Infinity\")}}, or `-Infinity` after being [converted to a number](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion); otherwise, `true`.\n\n## Description\n\n`isFinite()` is a function property of the global object.\n\nWhen the argument to the `isFinite()` function is not of type [Number](/en-US/docs/Web/JavaScript/Data_structures#number_type), the value is first coerced to a number, and the resulting value is then compared against `NaN` and ±Infinity. This is as confusing as the behavior of {{jsxref(\"isNaN\")}} — for example, `isFinite(\"1\")` is `true`.\n\n{{jsxref(\"Number.isFinite()\")}} is a more reliable way to test whether a value is a finite number value, because it returns `false` for any non-number input.\n\n## Examples\n\n### Using isFinite()\n\n```js\nisFinite(Infinity); // false\nisFinite(NaN); // false\nisFinite(-Infinity); // false\n\nisFinite(0); // true\nisFinite(2e64); // true\nisFinite(910); // true\n\n// Would've been false with the more robust Number.isFinite():\nisFinite(null); // true\nisFinite(\"0\"); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number.isFinite()\")}}\n- {{jsxref(\"Number.NaN\")}}\n- {{jsxref(\"Number.POSITIVE_INFINITY\")}}\n- {{jsxref(\"Number.NEGATIVE_INFINITY\")}}\n"
  },
  "isnan": {
    "index.md": "---\ntitle: isNaN()\nslug: Web/JavaScript/Reference/Global_Objects/isNaN\npage-type: javascript-function\nbrowser-compat: javascript.builtins.isNaN\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`isNaN()`** function determines whether a value is {{jsxref(\"NaN\")}}, first converting the value to a number if necessary. Because coercion inside the `isNaN()` function can be [surprising](#description), you may prefer to use {{jsxref(\"Number.isNaN()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-isnan.html\")}}\n\n## Syntax\n\n```js-nolint\nisNaN(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value to be tested.\n\n### Return value\n\n`true` if the given value is {{jsxref(\"NaN\")}} after being [converted to a number](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion); otherwise, `false`.\n\n## Description\n\n`isNaN()` is a function property of the global object.\n\nFor number values, `isNaN()` tests if the number is the value [`NaN`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN). When the argument to the `isNaN()` function is not of type [Number](/en-US/docs/Web/JavaScript/Data_structures#number_type), the value is first coerced to a number, and the resulting value is then compared against {{jsxref(\"NaN\")}}.\n\nThis behavior of `isNaN()` for non-numeric arguments can be confusing! For example, an empty string is coerced to 0, while a boolean is coerced to 0 or 1; both values are intuitively \"not numbers\", but they don't evaluate to `NaN`, so `isNaN()` returns `false`. Therefore, `isNaN()` answers neither the question \"is the input the floating point {{jsxref(\"NaN\")}} value\" nor the question \"is the input not a number\".\n\n{{jsxref(\"Number.isNaN()\")}} is a more reliable way to test whether a value is the number value `NaN` or not. Alternatively, the expression `x !== x` can be used, and neither of the solutions is subject to the false positives that make the global `isNaN()` unreliable. To test if a value is a number, use [`typeof x === \"number\"`](/en-US/docs/Web/JavaScript/Reference/Operators/typeof).\n\nThe `isNaN()` function answers the question \"is the input functionally equivalent to {{jsxref(\"NaN\")}} when used in a number context\". If `isNaN(x)` returns `false`, you can use `x` in an arithmetic expression as if it's a valid number that's not `NaN`. If `isNaN(x)` returns `true`, `x` will get coerced to `NaN` and make most arithmetic expressions return `NaN` (because `NaN` propagates). You can use this, for example, to test whether an argument to a function is arithmetically processable (usable \"like\" a number), and handle values that are not number-like by throwing an error, providing a default value, etc. This way, you can have a function that makes use of the full versatility JavaScript provides by implicitly converting values depending on context.\n\n> **Note:** The [`+` operator](/en-US/docs/Web/JavaScript/Reference/Operators/Addition) performs both number addition and string concatenation. Therefore, even if `isNaN()` returns `false` for both operands, the `+` operator may still return a string, because it's not used as an arithmetic operator. For example, `isNaN(\"1\")` returns `false`, but `\"1\" + 1` returns `\"11\"`. To be sure that you are working with numbers, [coerce the value to a number](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) and use {{jsxref(\"Number.isNaN()\")}} to test the result.\n\n## Examples\n\nNote how `isNaN()` returns `true` for values that are not the value `NaN` but are not numbers either:\n\n```js\nisNaN(NaN); // true\nisNaN(undefined); // true\nisNaN({}); // true\n\nisNaN(true); // false\nisNaN(null); // false\nisNaN(37); // false\n\n// Strings\nisNaN(\"37\"); // false: \"37\" is converted to the number 37 which is not NaN\nisNaN(\"37.37\"); // false: \"37.37\" is converted to the number 37.37 which is not NaN\nisNaN(\"37,5\"); // true\nisNaN(\"123ABC\"); // true: Number(\"123ABC\") is NaN\nisNaN(\"\"); // false: the empty string is converted to 0 which is not NaN\nisNaN(\" \"); // false: a string with spaces is converted to 0 which is not NaN\n\n// Dates\nisNaN(new Date()); // false; Date objects can be converted to a number (timestamp)\nisNaN(new Date().toString()); // true; the string representation of a Date object cannot be parsed as a number\n\n// Arrays\nisNaN([]); // false; the primitive representation is \"\", which coverts to the number 0\nisNaN([1]); // false; the primitive representation is \"1\"\nisNaN([1, 2]); // true; the primitive representation is \"1,2\", which cannot be parsed as number\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"NaN\")}}\n- {{jsxref(\"Number.isNaN()\")}}\n"
  },
  "iterator": {
    "@@iterator": {
      "index.md": "---\ntitle: Iterator.prototype[@@iterator]()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/@@iterator\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Iterator.@@iterator\n---\n\n{{JSRef}}\n\nThe **`[@@iterator]()`** method of {{jsxref(\"Iterator\")}} instances implements the [iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows built-in iterators to be consumed by most syntaxes expecting iterables, such as the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and {{jsxref(\"Statements/for...of\", \"for...of\")}} loops. It returns the value of [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this), which is the iterator object itself.\n\n## Syntax\n\n```js-nolint\niterator[Symbol.iterator]()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe value of [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this), which is the iterator object itself.\n\n## Examples\n\n### Iteration using for...of loop\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes built-in iterators [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```js\nconst arrIterator = [1, 2, 3].values();\nfor (const value of arrIterator) {\n  console.log(value);\n}\n// Logs: 1, 2, 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"Symbol.iterator\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "drop": {
      "index.md": "---\ntitle: Iterator.prototype.drop()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/drop\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.drop\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`drop()`** method of {{jsxref(\"Iterator\")}} instances returns a new [iterator helper](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) that skips the given number of elements at the start of this iterator.\n\n## Syntax\n\n```js-nolint\ndrop(limit)\n```\n\n### Parameters\n\n- `limit`\n  - : The number of elements to drop from the start of the iteration.\n\n### Return value\n\nA new [iterator helper](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers). The first time the returned iterator helper's `next()` method is called, the current iterator is immediately advanced by `limit` elements, and then the next element (the `limit+1`-th element) is yielded. The iterator helper then yields the remaining elements one-by-one. If the current iterator has fewer than `limit` elements, the new iterator helper will be immediately completed the first time `next()` is called.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `limit` becomes {{jsxref(\"NaN\")}} or negative when [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n## Examples\n\n### Using drop()\n\nThe following example creates an iterator that yields terms in the Fibonacci sequence, starting from the 3rd term by dropping the first two terms:\n\n```js\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst seq = fibonacci().drop(2);\nconsole.log(seq.next().value); // 2\nconsole.log(seq.next().value); // 3\n```\n\nThis is equivalent to:\n\n```js\nconst seq = fibonacci();\nseq.next();\nseq.next();\n```\n\n### Using drop() with a for...of loop\n\n`drop()` is most convenient when you are not hand-rolling the iterator. Because iterators are also iterable, you can iterate the returned helper with a {{jsxref(\"Statements/for...of\", \"for...of\")}} loop:\n\n```js\nfor (const n of fibonacci().drop(2)) {\n  console.log(n);\n  if (n > 30) {\n    break;\n  }\n}\n\n// Logs:\n// 2\n// 3\n// 5\n// 8\n// 13\n// 21\n// 34\n```\n\n### Combining drop() with take()\n\nYou can combine `drop()` with {{jsxref(\"Iterator.prototype.take()\")}} to get a slice of an iterator:\n\n```js\nfor (const n of fibonacci().drop(2).take(5)) {\n  // Drops the first two elements, then takes the next five\n  console.log(n);\n}\n// Logs:\n// 2\n// 3\n// 5\n// 8\n// 13\n\nfor (const n of fibonacci().take(5).drop(2)) {\n  // Takes the first five elements, then drops the first two\n  console.log(n);\n}\n// Logs:\n// 2\n// 3\n// 5\n```\n\n### Lower and upper bounds of drop count\n\nWhen the `limit` is negative or {{jsxref(\"NaN\")}}, a {{jsxref(\"RangeError\")}} is thrown:\n\n```js\nfibonacci().drop(-1); // RangeError: -1 must be positive\nfibonacci().drop(undefined); // RangeError: undefined must be positive\n```\n\nWhen the `limit` is larger than the total number of elements the iterator can produce (such as {{jsxref(\"Infinity\")}}), the returned iterator helper will instantly drop all elements and then be completed the first time `next()` is called. If the current iterator is infinite, the returned iterator helper will never complete.\n\n```js\nfibonacci().drop(Infinity).next(); // Never ends\nnew Set([1, 2, 3]).values().drop(Infinity).next(); // { value: undefined, done: true }\nnew Set([1, 2, 3]).values().drop(4).next(); // { value: undefined, done: true }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.prototype.drop` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"Iterator.prototype.take()\")}}\n"
    },
    "every": {
      "index.md": "---\ntitle: Iterator.prototype.every()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/every\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.every\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`every()`** method of {{jsxref(\"Iterator\")}} instances is similar to {{jsxref(\"Array.prototype.every()\")}}: it tests whether all elements produced by the iterator pass the test implemented by the provided function. It returns a boolean value.\n\n## Syntax\n\n```js-nolint\nevery(callbackFn)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element produced by the iterator. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed.\n    - `index`\n      - : The index of the current element being processed.\n\n### Return value\n\n`true` if `callbackFn` returns a {{Glossary(\"truthy\")}} value for every element. Otherwise, `false`.\n\n## Description\n\n`every()` iterates the iterator and invokes the `callbackFn` function once for each element. It returns `false` immediately if the callback function returns a falsy value. Otherwise, it iterates until the end of the iterator and returns `true`. If `every()` returns `false`, the underlying iterator is closed by calling its `return()` method.\n\nThe main advantage of iterator helpers over array methods is their ability to work with infinite iterators. With infinite iterators, `every()` returns `false` as soon as the first falsy value is found. If the `callbackFn` always returns a truthy value, the method never returns.\n\n## Examples\n\n### Using every()\n\n```js\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst isEven = (x) => x % 2 === 0;\nconsole.log(fibonacci().every(isEven)); // false\n\nconst isPositive = (x) => x > 0;\nconsole.log(fibonacci().take(10).every(isPositive)); // true\nconsole.log(fibonacci().every(isPositive)); // Never completes\n```\n\nCalling `every()` always closes the underlying iterator, even if the method early-returns. The iterator is never left in a half-way state.\n\n```js\nconst seq = fibonacci();\nconsole.log(seq.every(isEven)); // false\nconsole.log(seq.next()); // { value: undefined, done: true }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.prototype.every` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"Iterator.prototype.find()\")}}\n- {{jsxref(\"Iterator.prototype.some()\")}}\n- {{jsxref(\"Array.prototype.every()\")}}\n"
    },
    "filter": {
      "index.md": "---\ntitle: Iterator.prototype.filter()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/filter\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.filter\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`filter()`** method of {{jsxref(\"Iterator\")}} instances returns a new [iterator helper](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) that yields only those elements of the iterator for which the provided callback function returns `true`.\n\n## Syntax\n\n```js-nolint\nfilter(callbackFn)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element produced by the iterator. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to make the element yielded by the iterator helper, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed.\n    - `index`\n      - : The index of the current element being processed.\n\n### Return value\n\nA new [iterator helper](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers). Each time the iterator helper's `next()` method is called, it returns the next element in the iterator for which the callback function returns `true`. When the underlying iterator is completed, the iterator helper is also completed (the `next()` method produces `{ value: undefined, done: true }`).\n\n## Description\n\nThe main advantage of iterator helpers over array methods is their ability to work with infinite iterators. With infinite iterators, `filter()` allows you to iterate over only those elements that satisfy a given condition.\n\n## Examples\n\n### Using filter()\n\nThe following example creates an iterator that yields terms in the Fibonacci sequence, and then reads the first few terms that are even:\n\n```js\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst seq = fibonacci().filter((x) => x % 2 === 0);\nconsole.log(seq.next().value); // 2\nconsole.log(seq.next().value); // 8\nconsole.log(seq.next().value); // 34\n```\n\n### Using filter() with a for...of loop\n\n`filter()` is most convenient when you are not hand-rolling the iterator. Because iterators are also iterable, you can iterate the returned helper with a {{jsxref(\"Statements/for...of\", \"for...of\")}} loop:\n\n```js\nfor (const n of fibonacci().filter((x) => x % 2 === 0)) {\n  console.log(n);\n  if (n > 30) {\n    break;\n  }\n}\n\n// Logs:\n// 2\n// 8\n// 34\n```\n\nThis is equivalent to:\n\n```js\nfor (const n of fibonacci()) {\n  if (n % 2 !== 0) {\n    continue;\n  }\n  console.log(n);\n  if (n > 30) {\n    break;\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.prototype.filter` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"Iterator.prototype.forEach()\")}}\n- {{jsxref(\"Iterator.prototype.every()\")}}\n- {{jsxref(\"Iterator.prototype.map()\")}}\n- {{jsxref(\"Iterator.prototype.some()\")}}\n- {{jsxref(\"Iterator.prototype.reduce()\")}}\n- {{jsxref(\"Array.prototype.filter()\")}}\n"
    },
    "find": {
      "index.md": "---\ntitle: Iterator.prototype.find()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/find\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.find\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`find()`** method of {{jsxref(\"Iterator\")}} instances is similar to {{jsxref(\"Array.prototype.find()\")}}: it returns the first element produced by the iterator that satisfies the provided testing function. If no values satisfy the testing function, {{jsxref(\"undefined\")}} is returned.\n\n## Syntax\n\n```js-nolint\nfind(callbackFn)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element produced by the iterator. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed.\n    - `index`\n      - : The index of the current element being processed.\n\n### Return value\n\nThe first element produced by the iterator that satisfies the provided testing function. Otherwise, {{jsxref(\"undefined\")}} is returned.\n\n## Description\n\n`find()` iterates the iterator and invokes the `callbackFn` function once for each element. It returns the element immediately if the callback function returns a truthy value. Otherwise, it iterates until the end of the iterator and returns `undefined`. If `find()` returns an element, the underlying iterator is closed by calling its `return()` method.\n\nThe main advantage of iterator helpers over array methods is their ability to work with infinite iterators. With infinite iterators, `find()` returns the first satisfying element as soon as it is found. If the `callbackFn` always returns a falsy value, the method never returns.\n\n## Examples\n\n### Using find()\n\n```js\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst isEven = (x) => x % 2 === 0;\nconsole.log(fibonacci().find(isEven)); // 2\n\nconst isNegative = (x) => x < 0;\nconsole.log(fibonacci().take(10).find(isNegative)); // undefined\nconsole.log(fibonacci().find(isNegative)); // Never completes\n```\n\nCalling `find()` always closes the underlying iterator, even if the method early-returns. The iterator is never left in a half-way state.\n\n```js\nconst seq = fibonacci();\nconsole.log(seq.find(isEven)); // 2\nconsole.log(seq.next()); // { value: undefined, done: true }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.prototype.find` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n"
    },
    "flatmap": {
      "index.md": "---\ntitle: Iterator.prototype.flatMap()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/flatMap\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.flatMap\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`flatMap()`** method of {{jsxref(\"Iterator\")}} instances returns a new [iterator helper](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) that takes each element in the original iterator, runs it through a mapping function, and yields elements returned by the mapping function (which are contained in another iterator or iterable).\n\n## Syntax\n\n```js-nolint\nflatMap(callbackFn)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element produced by the iterator. It should return an iterator or iterable that yields elements to be yielded by `flatMap()`, or a single non-iterator/iterable value to be yielded. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the array.\n    - `index`\n      - : The index of the current element being processed in the array.\n\n### Return value\n\nA new [iterator helper](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers). The first time the iterator helper's `next()` method is called, it calls `callbackFn` on the first element produced by the underlying iterator, and the return value, which should be an iterator or iterable, is yielded one-by-one by the iterator helper (like {{jsxref(\"Operators/yield*\", \"yield*\")}}). The next element is fetched from the underlying iterator when the previous one returned by `callbackFn` is completed. When the underlying iterator is completed, the iterator helper is also completed (the `next()` method produces `{ value: undefined, done: true }`).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `callbackFn` returns a non-iterator/iterable value or a string primitive.\n\n## Description\n\n`flatMap` accepts two kinds of return values from `callbackFn`: an iterator or iterable. They are handled in the same way as {{jsxref(\"Iterator.from()\")}}: if the return value is iterable, the `@@iterator` method is called and the return value is used; otherwise, the return value is treated as an iterator and its `next()` method is called.\n\n```js\n[1, 2, 3]\n  .values()\n  .flatMap((x) => {\n    let itDone = false;\n    const it = {\n      next() {\n        if (itDone) {\n          return { value: undefined, done: true };\n        }\n        itDone = true;\n        return { value: x, done: false };\n      },\n    };\n    switch (x) {\n      case 1:\n        // An iterable that's not an iterator\n        return { [Symbol.iterator]: () => it };\n      case 2:\n        // An iterator that's not an iterable\n        return it;\n      case 3:\n        // An iterable iterator is treated as an iterable\n        return {\n          ...it,\n          [Symbol.iterator]() {\n            console.log(\"@@iterator called\");\n            return it;\n          },\n        };\n    }\n  })\n  .toArray();\n// Logs \"@@iterator called\"\n// Returns [1, 2, 3]\n```\n\n## Examples\n\n### Merging maps\n\nThe following example merges two {{jsxref(\"Map\")}} objects into one:\n\n```js\nconst map1 = new Map([\n  [\"a\", 1],\n  [\"b\", 2],\n  [\"c\", 3],\n]);\nconst map2 = new Map([\n  [\"d\", 4],\n  [\"e\", 5],\n  [\"f\", 6],\n]);\n\nconst merged = new Map([map1, map2].values().flatMap((x) => x));\nconsole.log(merged.get(\"a\")); // 1\nconsole.log(merged.get(\"e\")); // 5\n```\n\nThis avoids creating any temporary copies of the map's content. Note that the array `[map1, map2]` must first be converted to an iterator (using {{jsxref(\"Array.prototype.values()\")}}), because {{jsxref(\"Array.prototype.flatMap()\")}} only flattens arrays, not iterables.\n\n```js\nnew Map([map1, map2].flatMap((x) => x)); // Map(1) {undefined => undefined}\n```\n\n### Returning strings\n\nStrings are iterable, but `flatMap()` specifically rejects string primitives returned from `callbackFn`, this is because the behavior of iterating by code points is often not what you want.\n\n```js example-bad\n[1, 2, 3]\n  .values()\n  .flatMap((x) => String(x))\n  .toArray(); // TypeError: Iterator.prototype.flatMap called on non-object\n```\n\nYou may want to wrap it in an array instead so the entire string is yielded as one:\n\n```js\n[1, 2, 3]\n  .values()\n  .flatMap((x) => [String(x)])\n  .toArray(); // ['1', '2', '3']\n```\n\nOr, if the behavior of iterating by code points is intended, you can use {{jsxref(\"Iterator.from()\")}} to convert it to a proper iterator:\n\n```js\n[1, 2, 3]\n  .values()\n  .flatMap((x) => Iterator.from(String(x * 10)))\n  .toArray();\n// ['1', '0', '2', '0', '3', '0']\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.prototype.flatMap` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n"
    },
    "foreach": {
      "index.md": "---\ntitle: Iterator.prototype.forEach()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/forEach\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.forEach\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`forEach()`** method of {{jsxref(\"Iterator\")}} instances is similar to {{jsxref(\"Array.prototype.forEach()\")}}: it executes a provided function once for each element produced by the iterator.\n\n## Syntax\n\n```js-nolint\nforEach(callbackFn)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element produced by the iterator. Its return value is discarded. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed.\n    - `index`\n      - : The index of the current element being processed.\n\n### Return value\n\n{{jsxref(\"undefined\")}}.\n\n## Description\n\n`forEach()` iterates the iterator and invokes the `callbackFn` function once for each element. Unlike most other iterator helper methods, it does not work well with infinite iterators, because it is not lazy.\n\n## Examples\n\n### Using forEach()\n\n```js\nnew Set([1, 2, 3]).values().forEach((v) => console.log(v));\n\n// Logs:\n// 1\n// 2\n// 3\n```\n\nThis is equivalent to:\n\n```js\nfor (const v of new Set([1, 2, 3]).values()) {\n  console.log(v);\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.prototype.forEach` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"Iterator.prototype.find()\")}}\n- {{jsxref(\"Iterator.prototype.map()\")}}\n- {{jsxref(\"Iterator.prototype.filter()\")}}\n- {{jsxref(\"Iterator.prototype.every()\")}}\n- {{jsxref(\"Iterator.prototype.some()\")}}\n- {{jsxref(\"Array.prototype.forEach()\")}}\n"
    },
    "from": {
      "index.md": "---\ntitle: Iterator.from()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/from\npage-type: javascript-static-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.from\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`Iterator.from()`** static method creates a new {{jsxref(\"Iterator\")}} object from an iterator or iterable object.\n\n## Syntax\n\n```js-nolint\nfrom(object)\n```\n\n### Parameters\n\n- `object`\n  - : An object that implements the [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) protocol or the [iterator](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) protocol.\n\n### Return value\n\nIf `object` is an iterable, its `@@iterator` method is called to obtain the iterator. Otherwise, `object` is assumed to be an iterator. If the iterator is already {{jsxref(\"Operators/instanceof\", \"instanceof\")}} {{jsxref(\"Iterator\")}} (which means it has `Iterator.prototype` in its prototype chain), it is returned directly. Otherwise, a new {{jsxref(\"Iterator\")}} object is created that wraps the original iterator.\n\n## Description\n\nThis method exists to convert custom iterators, probably exported by libraries, to [proper iterators](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#proper_iterators). All iterator objects returned by `Iterator.from()` inherit from a common prototype object, which has the following methods:\n\n- `next()`\n  - : Calls the underlying iterator's `next()` method and returns the result.\n- `return()`\n  - : Calls the underlying iterator's `return()` method and returns the result, or returns `{ value: undefined, done: true }` if the underlying iterator doesn't have a `return()` method.\n\n## Examples\n\n### Converting an iterable to a proper iterator\n\nBecause `obj` is already an iterable that returns a proper iterator when its `@@iterator` method is called, `Iterator.from(obj)` returns the same iterator.\n\n```js\nconst iterator = (function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\n\nconst obj = {\n  [Symbol.iterator]() {\n    return iterator;\n  },\n};\n\nconst iterator2 = Iterator.from(obj);\nconsole.log(iterator2 === iterator); // true\n```\n\nBecause `obj2` is an iterable that returns a non-proper iterator when its `@@iterator` method is called, `Iterator.from(obj2)` returns a new iterator that wraps the original iterator.\n\n```js\nconst iterator = {\n  current: 0,\n  next() {\n    return { value: this.current++, done: false };\n  },\n};\n\nconst obj2 = {\n  [Symbol.iterator]() {\n    return iterator;\n  },\n};\n\nconst iterator2 = Iterator.from(obj2);\nconsole.log(iterator2 === iterator); // false\nconsole.log(iterator2.next()); // { value: 0, done: false }\nconsole.log(iterator.next()); // { value: 1, done: false }\n```\n\n### Converting an iterator to a proper iterator\n\nBecause `obj` is already a proper iterator, `Iterator.from(obj)` returns itself.\n\n```js\nconst obj = (function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\n\nconst iterator = Iterator.from(obj);\nconsole.log(iterator === obj); // true\n```\n\nBecause `obj2` is a non-proper iterator, `Iterator.from(obj2)` returns a new iterator that wraps the original iterator.\n\n```js\nconst obj2 = {\n  current: 0,\n  next() {\n    return { value: this.current++, done: false };\n  },\n};\n\nconst iterator = Iterator.from(obj2);\nconsole.log(iterator === obj2); // false\nconsole.log(iterator.next()); // { value: 0, done: false }\nconsole.log(obj2.next()); // { value: 1, done: false }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.from` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"Array.from()\")}}\n"
    },
    "index.md": "---\ntitle: Iterator\nslug: Web/JavaScript/Reference/Global_Objects/Iterator\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Iterator\n---\n\n{{JSRef}}\n\nAn **`Iterator`** object is an object that conforms to the [iterator protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) by providing a `next()` method that returns an iterator result object. All built-in iterators inherit from the `Iterator` class. The `Iterator` class provides a [`@@iterator`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/@@iterator) method that returns the iterator object itself, making the iterator also [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol). It also provides some helper methods for working with iterators.\n\n## Description\n\nThe following are all built-in JavaScript iterators:\n\n- The _Array Iterator_ returned by {{jsxref(\"Array.prototype.values()\")}}, {{jsxref(\"Array.prototype.keys()\")}}, {{jsxref(\"Array.prototype.entries()\")}}, [`Array.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator), {{jsxref(\"TypedArray.prototype.values()\")}}, {{jsxref(\"TypedArray.prototype.keys()\")}}, {{jsxref(\"TypedArray.prototype.entries()\")}}, [`TypedArray.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator), and [`arguments[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator).\n- The _String Iterator_ returned by [`String.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator).\n- The _Map Iterator_ returned by {{jsxref(\"Map.prototype.values()\")}}, {{jsxref(\"Map.prototype.keys()\")}}, {{jsxref(\"Map.prototype.entries()\")}}, and [`Map.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator).\n- The _Set Iterator_ returned by {{jsxref(\"Set.prototype.values()\")}}, {{jsxref(\"Set.prototype.keys()\")}}, {{jsxref(\"Set.prototype.entries()\")}}, and [`Set.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator).\n- The _RegExp String Iterator_ returned by [`RegExp.prototype[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll) and {{jsxref(\"String.prototype.matchAll()\")}}.\n- The {{jsxref(\"Generator\")}} object returned by [generator functions](/en-US/docs/Web/JavaScript/Reference/Statements/function*).\n- The _Segments Iterator_ returned by the [`[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/@@iterator) method of the [`Segments`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments) object returned by [`Intl.Segmenter.prototype.segment()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment).\n- The _Iterator Helper_ returned by iterator helper methods such as {{jsxref(\"Iterator.prototype.filter()\")}} and {{jsxref(\"Iterator.prototype.map()\")}}.\n\nEach of these iterators have a distinct prototype object, which defines the `next()` method used by the particular iterator. For example, all string iterator objects inherit from a hidden object `StringIteratorPrototype`, which has a `next()` method that iterates this string by code points. `StringIteratorPrototype` also has a [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property whose initial value is the string `\"String Iterator\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}. Similarly, other iterator prototypes also have their own `@@toStringTag` values, which are the same as the names given above.\n\nAll of these prototype objects inherit from `Iterator.prototype`, which provides a [`@@iterator`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) method that returns the iterator object itself, making the iterator also [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol).\n\n### Iterator helpers\n\n> **Note:** These methods are _iterator_ helpers, not _iterable_ helpers, because the only requirement for an object to be iterable is just the presence of a `@@iterator` method. There is no shared prototype to install these methods on.\n\nThe `Iterator` class itself provides some helper methods for working with iterators. For example, you may be tempted to do the following:\n\n```js\nconst nameToDeposit = new Map([\n  [\"Anne\", 1000],\n  [\"Bert\", 1500],\n  [\"Carl\", 2000],\n]);\n\nconst totalDeposit = [...nameToDeposit.values()].reduce((a, b) => a + b);\n```\n\nThis first converts the iterator returned by {{jsxref(\"Map.prototype.values()\")}} to an array, then uses the {{jsxref(\"Array.prototype.reduce()\")}} method to calculate the sum. However, this both creates an intermediate array and iterates the array twice. Instead, you can use the `reduce()` method of the iterator itself:\n\n```js\nconst totalDeposit = nameToDeposit.values().reduce((a, b) => a + b);\n```\n\nThis method is more efficient, because it only iterates the iterator once, without memorizing any intermediate values. Iterator helper methods are necessary to work with infinite iterators:\n\n```js\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst seq = fibonacci();\nconst firstThreeDigitTerm = seq.find((n) => n >= 100);\n```\n\nYou cannot convert `seq` to an array, because it is infinite. Instead, you can use the `find()` method of the iterator itself, which only iterates `seq` as far as necessary to find the first value that satisfies the condition.\n\nYou will find many iterator methods analogous to array methods, such as:\n\n| Iterator method                            | Array method                            |\n| ------------------------------------------ | --------------------------------------- |\n| {{jsxref(\"Iterator.prototype.every()\")}}   | {{jsxref(\"Array.prototype.every()\")}}   |\n| {{jsxref(\"Iterator.prototype.filter()\")}}  | {{jsxref(\"Array.prototype.filter()\")}}  |\n| {{jsxref(\"Iterator.prototype.find()\")}}    | {{jsxref(\"Array.prototype.find()\")}}    |\n| {{jsxref(\"Iterator.prototype.flatMap()\")}} | {{jsxref(\"Array.prototype.flatMap()\")}} |\n| {{jsxref(\"Iterator.prototype.forEach()\")}} | {{jsxref(\"Array.prototype.forEach()\")}} |\n| {{jsxref(\"Iterator.prototype.map()\")}}     | {{jsxref(\"Array.prototype.map()\")}}     |\n| {{jsxref(\"Iterator.prototype.reduce()\")}}  | {{jsxref(\"Array.prototype.reduce()\")}}  |\n| {{jsxref(\"Iterator.prototype.some()\")}}    | {{jsxref(\"Array.prototype.some()\")}}    |\n\n{{jsxref(\"Iterator.prototype.drop()\")}} and {{jsxref(\"Iterator.prototype.take()\")}} combined are somewhat analogous to {{jsxref(\"Array.prototype.slice()\")}}.\n\nAmong these methods, {{jsxref(\"Iterator/filter\", \"filter()\")}}, {{jsxref(\"Iterator/flatMap\", \"flatMap()\")}}, {{jsxref(\"Iterator/map\", \"map()\")}}, {{jsxref(\"Iterator/drop\", \"drop()\")}}, and {{jsxref(\"Iterator/take\", \"take()\")}} return a new _Iterator Helper_ object. The iterator helper is also an `Iterator` instance, making the helper methods chainable. All iterator helper objects inherit from a common prototype object, which implements the iterator protocol:\n\n- `next()`\n  - : Calls the `next()` method of the underlying iterator, applies the helper method to the result, and returns the result.\n- `return()`\n  - : Calls the `return()` method of the underlying iterator, and returns the result.\n\nThe iterator helper shares the same data source as the underlying iterator, so iterating the iterator helper causes the underlying iterator to be iterated as well. There is no way to \"fork\" an iterator to allow it to be iterated multiple times.\n\n```js\nconst it = [1, 2, 3].values();\nconst it2 = it.drop(0); // Essentially a copy\nconsole.log(it.next().value); // 1\nconsole.log(it2.next().value); // 2\nconsole.log(it.next().value); // 3\n```\n\n### Proper iterators\n\nThere are two kinds of \"iterators\": objects that conform to the [iterator protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol) (which, at its minimum, only requires the presence of a `next()` method), and objects that inherit from the `Iterator` class, which enjoy the helper methods. They do not entail each other — objects that inherit from `Iterator` do not automatically become iterators, because the `Iterator` class does not define a `next()` method. Instead, the object needs to define a `next()` method itself. A _proper iterator_ is one that both conforms to the iterator protocol and inherits from `Iterator`, and most code expect iterators to be proper iterators and iterables to return proper iterators. To create proper iterators, define a class that extends {{jsxref(\"Iterator/Iterator\", \"Iterator\")}}, or use the {{jsxref(\"Iterator.from()\")}} method.\n\n```js\nclass MyIterator extends Iterator {\n  next() {\n    // …\n  }\n}\n\nconst myIterator = Iterator.from({\n  next() {\n    // …\n  },\n});\n```\n\n## Constructor\n\n- {{jsxref(\"Iterator/Iterator\", \"Iterator()\")}} {{experimental_inline}}\n  - : Intended to be [extended](/en-US/docs/Web/JavaScript/Reference/Classes/extends) by other classes that create iterators. Throws an error when constructed by itself.\n\n## Static methods\n\n- {{jsxref(\"Iterator.from()\")}} {{experimental_inline}}\n  - : Creates a new `Iterator` object from an iterator or iterable object.\n\n## Instance properties\n\nThese properties are defined on `Iterator.prototype` and shared by all `Iterator` instances.\n\n- {{jsxref(\"Object/constructor\", \"Iterator.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Iterator` instances, the initial value is the {{jsxref(\"Iterator/Iterator\", \"Iterator\")}} constructor.\n- `Iterator.prototype[@@toStringTag]`\n\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Iterator\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n    > **Note:** Unlike the `@@toStringTag` on most built-in classes, `Iterator.prototype[@@toStringTag]` is writable for web compatibility reasons.\n\n## Instance methods\n\n- {{jsxref(\"Iterator.prototype.drop()\")}} {{experimental_inline}}\n  - : Returns a new iterator helper that skips the given number of elements at the start of this iterator.\n- {{jsxref(\"Iterator.prototype.every()\")}} {{experimental_inline}}\n  - : Tests whether all elements produced by the iterator pass the test implemented by the provided function.\n- {{jsxref(\"Iterator.prototype.filter()\")}} {{experimental_inline}}\n  - : Returns a new iterator helper that yields only those elements of the iterator for which the provided callback function returns `true`.\n- {{jsxref(\"Iterator.prototype.find()\")}} {{experimental_inline}}\n  - : Returns the first element produced by the iterator that satisfies the provided testing function. If no values satisfy the testing function, {{jsxref(\"undefined\")}} is returned.\n- {{jsxref(\"Iterator.prototype.flatMap()\")}} {{experimental_inline}}\n  - : Returns a new iterator helper that takes each element in the original iterator, runs it through a mapping function, and yields elements returned by the mapping function (which are contained in another iterator or iterable).\n- {{jsxref(\"Iterator.prototype.forEach()\")}} {{experimental_inline}}\n  - : Executes a provided function once for each element produced by the iterator.\n- {{jsxref(\"Iterator.prototype.map()\")}} {{experimental_inline}}\n  - : Returns a new iterator helper that yields elements of the iterator, each transformed by a mapping function.\n- {{jsxref(\"Iterator.prototype.reduce()\")}} {{experimental_inline}}\n  - : Executes a user-supplied \"reducer\" callback function on each element produced by the iterator, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements is a single value.\n- {{jsxref(\"Iterator.prototype.some()\")}} {{experimental_inline}}\n  - : Tests whether at least one element in the iterator passes the test implemented by the provided function. It returns a boolean value.\n- {{jsxref(\"Iterator.prototype.take()\")}} {{experimental_inline}}\n  - : Returns a new iterator helper that yields the given number of elements in this iterator and then terminates.\n- {{jsxref(\"Iterator.prototype.toArray()\")}} {{experimental_inline}}\n  - : Creates a new {{jsxref(\"Array\")}} instance populated with the elements yielded from the iterator.\n- [`Iterator.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/@@iterator)\n  - : Returns the iterator object itself. This allows iterator objects to also be iterable.\n\n## Examples\n\n### Using an iterator as an iterable\n\nAll built-in iterators are also iterable, so you can use them in a `for...of` loop:\n\n```js\nconst arrIterator = [1, 2, 3].values();\nfor (const value of arrIterator) {\n  console.log(value);\n}\n// Logs: 1, 2, 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n- {{jsxref(\"Statements/function*\", \"function*\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n",
    "iterator": {
      "index.md": "---\ntitle: Iterator() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/Iterator\npage-type: javascript-constructor\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.Iterator\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`Iterator()`** constructor is intended to be used as the [superclass](/en-US/docs/Web/JavaScript/Reference/Classes/extends) of other classes that create iterators. It throws an error when constructed by itself.\n\n## Syntax\n\n```js-nolint\nnew Iterator()\n```\n\n> **Note:** `Iterator()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}. In addition, `Iterator()` cannot actually be constructed itself — it's usually implicitly constructed through [`super()`](/en-US/docs/Web/JavaScript/Reference/Operators/super) calls inside the constructor of a subclass.\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new {{jsxref(\"Iterator\")}} object.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : When [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target) is the `Iterator` function itself, i.e. when the `Iterator` constructor itself is constructed.\n\n## Description\n\n`Iterator` represents an _abstract class_ — a class that provides common utilities for its subclasses, but is not intended to be instantiated itself. It is the superclass of all other iterator classes, and is used to create subclasses that implement specific iteration algorithms — namely, all subclasses of `Iterator` must implement a `next()` method as required by the [iterator protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol). Because `Iterator` doesn't actually provide the `next()` method, it doesn't make sense to construct an `Iterator` directly.\n\nYou can also use {{jsxref(\"Iterator.from()\")}} to create an `Iterator` instance from an existing iterable or iterator object.\n\n## Examples\n\n### Subclassing Iterator\n\nThe following example defines a custom data structure, `Range`, which allows iteration. The simplest way to make an object iterable is to provide an [`[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) method in the form of a generator function:\n\n```js\nclass Range {\n  #start;\n  #end;\n  #step;\n\n  constructor(start, end, step = 1) {\n    this.#start = start;\n    this.#end = end;\n    this.#step = step;\n  }\n\n  *[Symbol.iterator]() {\n    for (let value = this.#start; value <= this.#end; value += this.#step) {\n      yield value;\n    }\n  }\n}\n\nconst range = new Range(1, 5);\nfor (const num of range) {\n  console.log(num);\n}\n```\n\nThis works, but it isn't as nice as how built-in iterators work. There are two problems:\n\n- The returned iterator inherits from {{jsxref(\"Generator\")}}, which means modifications to `Generator.prototype` are going to affect the returned iterator, which is a leak of abstraction.\n- The returned iterator does not inherit from a custom prototype, which makes it harder if we intend to add extra methods to the iterator.\n\nWe can mimic the implementation of built-in iterators, such as [map iterators](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator), by subclassing `Iterator`. This enables us to define extra properties, such as [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag), while making the iterator helper methods available on the returned iterator.\n\n```js\nclass Range {\n  #start;\n  #end;\n  #step;\n\n  constructor(start, end, step = 1) {\n    this.#start = start;\n    this.#end = end;\n    this.#step = step;\n  }\n\n  static #RangeIterator = class extends Iterator {\n    #cur;\n    #s;\n    #e;\n    constructor(range) {\n      super();\n      this.#cur = range.#start;\n      this.#s = range.#step;\n      this.#e = range.#end;\n    }\n    static {\n      Object.defineProperty(this.prototype, Symbol.toStringTag, {\n        value: \"Range Iterator\",\n        configurable: true,\n        enumerable: false,\n        writable: false,\n      });\n\n      // Avoid #RangeIterator from being accessible outside\n      delete this.prototype.constructor;\n    }\n    next() {\n      if (this.#cur > this.#e) {\n        return { value: undefined, done: true };\n      }\n      const res = { value: this.#cur, done: false };\n      this.#cur += this.#s;\n      return res;\n    }\n  };\n\n  [Symbol.iterator]() {\n    return new Range.#RangeIterator(this);\n  }\n}\n\nconst range = new Range(1, 5);\nfor (const num of range) {\n  console.log(num);\n}\n```\n\nThe subclassing pattern is useful if you want to create many custom iterators. If you have an existing iterable or iterator object which doesn't inherit from `Iterator`, and you just want to call iterator helper methods on it, you can use {{jsxref(\"Iterator.from()\")}} to create a one-time `Iterator` instance.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"Iterator.from()\")}}\n"
    },
    "map": {
      "index.md": "---\ntitle: Iterator.prototype.map()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/map\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.map\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`map()`** method of {{jsxref(\"Iterator\")}} instances returns a new [iterator helper](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) that yields elements of the iterator, each transformed by a mapping function.\n\n## Syntax\n\n```js-nolint\nmap(callbackFn)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element produced by the iterator. Its return value is yielded by the iterator helper. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed.\n    - `index`\n      - : The index of the current element being processed.\n\n### Return value\n\nA new [iterator helper](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers). Each time the iterator helper's `next()` method is called, it gets the next element from the underlying iterator, applies `callbackFn`, and yields the return value. When the underlying iterator is completed, the iterator helper is also completed (the `next()` method produces `{ value: undefined, done: true }`).\n\n## Description\n\nThe main advantage of iterator helpers over array methods is their ability to work with infinite iterators. With infinite iterators, `map()` allows you to create a new iterator that, when iterated, produces transformed elements.\n\n## Examples\n\n### Using map()\n\nThe following example creates an iterator that yields terms in the Fibonacci sequence, transforms it into a new sequence with each term squared, and then reads the first few terms:\n\n```js\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst seq = fibonacci().map((x) => x ** 2);\nconsole.log(seq.next().value); // 1\nconsole.log(seq.next().value); // 1\nconsole.log(seq.next().value); // 4\n```\n\n### Using map() with a for...of loop\n\n`map()` is most convenient when you are not hand-rolling the iterator. Because iterators are also iterable, you can iterate the returned helper with a {{jsxref(\"Statements/for...of\", \"for...of\")}} loop:\n\n```js\nfor (const n of fibonacci().map((x) => x ** 2)) {\n  console.log(n);\n  if (n > 30) {\n    break;\n  }\n}\n\n// Logs:\n// 1\n// 1\n// 4\n// 9\n// 25\n// 64\n```\n\nThis is equivalent to:\n\n```js\nfor (const n of fibonacci()) {\n  const n2 = n ** 2;\n  console.log(n2);\n  if (n2 > 30) {\n    break;\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.prototype.map` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n"
    },
    "reduce": {
      "index.md": "---\ntitle: Iterator.prototype.reduce()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/reduce\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.reduce\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`reduce()`** method of {{jsxref(\"Iterator\")}} instances is similar to {{jsxref(\"Array.prototype.reduce\")}}: it executes a user-supplied \"reducer\" callback function on each element produced by the iterator, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements is a single value.\n\n## Syntax\n\n```js-nolint\nreduce(callbackFn)\nreduce(callbackFn, initialValue)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element produced by the iterator. Its return value becomes the value of the `accumulator` parameter on the next invocation of `callbackFn`. For the last invocation, the return value becomes the return value of `reduce()`. The function is called with the following arguments:\n    - `accumulator`\n      - : The value resulting from the previous call to `callbackFn`. On the first call, its value is `initialValue` if the latter is specified; otherwise its value is the first element of the iterator.\n    - `currentValue`\n      - : The value of the current element. On the first call, its value is the first element of the iterator if `initialValue` is specified; otherwise its value is the second element.\n    - `currentIndex`\n      - : The index position of `currentValue`. On the first call, its value is `0` if `initialValue` is specified, otherwise `1`.\n- `initialValue` {{optional_inline}}\n  - : A value to which `accumulator` is initialized the first time the callback is called. If `initialValue` is specified, `callbackFn` starts executing with the first element as `currentValue`. If `initialValue` is _not_ specified, `accumulator` is initialized to the first element, and `callbackFn` starts executing with the second element as `currentValue`. In this case, if the iterator is empty (so that there's no first value to return as `accumulator`), an error is thrown.\n\n### Return value\n\nThe value that results from running the \"reducer\" callback function to completion over the entire iterator.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if the iterator contains no elements and `initialValue` is not provided.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.reduce()\")}} for details about how `reduce()` works. Unlike most other iterator helper methods, it does not work well with infinite iterators, because it is not lazy.\n\n## Examples\n\n### Using reduce()\n\nThe following example creates an iterator that yields terms in the Fibonacci sequence, and then sums the first ten terms:\n\n```js\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconsole.log(\n  fibonacci()\n    .take(10)\n    .reduce((a, b) => a + b),\n); // 143\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.prototype.reduce` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"Iterator.prototype.map()\")}}\n- {{jsxref(\"Iterator.prototype.flatMap()\")}}\n- {{jsxref(\"Array.prototype.reduce()\")}}\n"
    },
    "some": {
      "index.md": "---\ntitle: Iterator.prototype.some()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/some\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.some\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`some()`** method of {{jsxref(\"Iterator\")}} instances is similar to {{jsxref(\"Array.prototype.some()\")}}: it tests whether at least one element produced by the iterator passes the test implemented by the provided function. It returns a boolean value.\n\n## Syntax\n\n```js-nolint\nsome(callbackFn)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element produced by the iterator. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed.\n    - `index`\n      - : The index of the current element being processed.\n\n### Return value\n\n`true` if the callback function returns a {{Glossary(\"truthy\")}} value for at least one element. Otherwise, `false`.\n\n## Description\n\n`some()` iterates the iterator and invokes the `callbackFn` function once for each element. It returns `true` immediately if the callback function returns a truthy value. Otherwise, it iterates until the end of the iterator and returns `false`. If `some()` returns `true`, the underlying iterator is closed by calling its `return()` method.\n\nThe main advantage of iterator helpers over array methods is their ability to work with infinite iterators. With infinite iterators, `some()` returns `true` as soon as the first truthy value is found. If the `callbackFn` always returns a falsy value, the method never returns.\n\n## Examples\n\n### Using some()\n\n```js\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst isEven = (x) => x % 2 === 0;\nconsole.log(fibonacci().some(isEven)); // true\n\nconst isNegative = (x) => x < 0;\nconst isPositive = (x) => x > 0;\nconsole.log(fibonacci().take(10).some(isPositive)); // false\nconsole.log(fibonacci().some(isNegative)); // Never completes\n```\n\nCalling `some()` always closes the underlying iterator, even if the method early-returns. The iterator is never left in a half-way state.\n\n```js\nconst seq = fibonacci();\nconsole.log(seq.some(isEven)); // true\nconsole.log(seq.next()); // { value: undefined, done: true }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.prototype.some` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"Iterator.prototype.every()\")}}\n- {{jsxref(\"Iterator.prototype.find()\")}}\n- {{jsxref(\"Array.prototype.some()\")}}\n"
    },
    "take": {
      "index.md": "---\ntitle: Iterator.prototype.take()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/take\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.take\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`take()`** method of {{jsxref(\"Iterator\")}} instances returns a new [iterator helper](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers) that yields the given number of elements in this iterator and then terminates.\n\n## Syntax\n\n```js-nolint\ntake(limit)\n```\n\n### Parameters\n\n- `limit`\n  - : The number of elements to take from the start of the iteration.\n\n### Return value\n\nA new [iterator helper](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator#iterator_helpers). The returned iterator helper yields the elements in the original iterator one-by-one, and then completes (the `next()` method produces `{ value: undefined, done: true }`) once `limit` elements have been yielded, or when the original iterator is exhausted, whichever comes first.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `limit` becomes {{jsxref(\"NaN\")}} or negative when [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n## Examples\n\n### Using take()\n\nThe following example creates an iterator that yields terms in the Fibonacci sequence, and then logs the first three terms:\n\n```js\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst seq = fibonacci().take(3);\nconsole.log(seq.next().value); // 1\nconsole.log(seq.next().value); // 1\nconsole.log(seq.next().value); // 2\nconsole.log(seq.next().value); // undefined\n```\n\n### Using take() with a for...of loop\n\n`take()` is most convenient when you are not hand-rolling the iterator. Because iterators are also iterable, you can iterate the returned helper with a {{jsxref(\"Statements/for...of\", \"for...of\")}} loop:\n\n```js\nfor (const n of fibonacci().take(5)) {\n  console.log(n);\n}\n\n// Logs:\n// 1\n// 1\n// 2\n// 3\n// 5\n```\n\nBecause `fibonacci()` is an infinite iterator, you can't use a `for` loop to iterate it directly.\n\n### Combining drop() with take()\n\nYou can combine `take()` with {{jsxref(\"Iterator.prototype.drop()\")}} to get a slice of an iterator:\n\n```js\nfor (const n of fibonacci().drop(2).take(5)) {\n  // Drops the first two elements, then takes the next five\n  console.log(n);\n}\n// Logs:\n// 2\n// 3\n// 5\n// 8\n// 13\n\nfor (const n of fibonacci().take(5).drop(2)) {\n  // Takes the first five elements, then drops the first two\n  console.log(n);\n}\n// Logs:\n// 2\n// 3\n// 5\n```\n\n### Lower and upper bounds of take count\n\nWhen the `limit` is negative or {{jsxref(\"NaN\")}}, a {{jsxref(\"RangeError\")}} is thrown:\n\n```js\nfibonacci().take(-1); // RangeError: -1 must be positive\nfibonacci().take(undefined); // RangeError: undefined must be positive\n```\n\nWhen the `limit` is larger than the total number of elements the iterator can produce (such as {{jsxref(\"Infinity\")}}), the returned iterator helper has essentially the same behavior as the original iterator:\n\n```js\nfor (const n of new Set([1, 2, 3]).values().take(Infinity)) {\n  console.log(n);\n}\n\n// Logs:\n// 1\n// 2\n// 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.prototype.take` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"Iterator.prototype.drop()\")}}\n"
    },
    "toarray": {
      "index.md": "---\ntitle: Iterator.prototype.toArray()\nslug: Web/JavaScript/Reference/Global_Objects/Iterator/toArray\npage-type: javascript-instance-method\nstatus:\n  - experimental\nbrowser-compat: javascript.builtins.Iterator.toArray\n---\n\n{{JSRef}}{{SeeCompatTable}}\n\nThe **`toArray()`** method of {{jsxref(\"Iterator\")}} instances creates a new {{jsxref(\"Array\")}} instance populated with the elements yielded from the iterator.\n\n## Syntax\n\n```js-nolint\ntoArray()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new {{jsxref(\"Array\")}} instance containing the elements from the iterator in the order they were produced.\n\n## Examples\n\n### Using toArray()\n\n`iterator.toArray()` is equivalent to `Array.from(iterator)` and `[...iterator]`, except that it's easier to chain when multiple iterator helper methods are involved. The following example creates an iterator that yields terms in the Fibonacci sequence, takes the first 10 terms, filters out the odd numbers, and converts the result to an array:\n\n```js\nfunction* fibonacci() {\n  let current = 1;\n  let next = 1;\n  while (true) {\n    yield current;\n    [current, next] = [next, current + next];\n  }\n}\n\nconst array = fibonacci()\n  .take(10)\n  .filter((x) => x % 2 === 0)\n  .toArray();\n\nconsole.log(array); // [2, 8, 34]\n```\n\nNote that it's a good idea to call `toArray()` as a last step of your processing. For example, `fibonacci().take(10).toArray().filter(...)` is less efficient, because iterator helpers are lazy and avoids creating a temporary array.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Iterator.prototype.toArray` in `core-js`](https://github.com/zloirock/core-js#iterator-helpers)\n- {{jsxref(\"Iterator\")}}\n- {{jsxref(\"Array.from()\")}}\n"
    }
  },
  "json": {
    "index.md": "---\ntitle: JSON\nslug: Web/JavaScript/Reference/Global_Objects/JSON\npage-type: javascript-namespace\nbrowser-compat: javascript.builtins.JSON\n---\n\n{{JSRef}}\n\nThe **`JSON`** namespace object contains static methods for parsing values from and converting values to [JavaScript Object Notation](https://json.org/) ({{Glossary(\"JSON\")}}).\n\n## Description\n\nUnlike most global objects, `JSON` is not a constructor. You cannot use it with the [`new` operator](/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `JSON` object as a function. All properties and methods of `JSON` are static (just like the {{jsxref(\"Math\")}} object).\n\n### JavaScript and JSON differences\n\nJSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null). It is based upon JavaScript syntax, but is distinct from JavaScript: most of JavaScript is _not_ JSON. For example:\n\n- Objects and Arrays\n  - : Property names must be double-quoted strings; [trailing commas](/en-US/docs/Web/JavaScript/Reference/Trailing_commas) are forbidden.\n- Numbers\n  - : Leading zeros are prohibited. A decimal point must be followed by at least one digit. `NaN` and `Infinity` are unsupported.\n\nAny JSON text is a valid JavaScript expression, but only after the [JSON superset](https://github.com/tc39/proposal-json-superset) revision. Before the revision, U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR are allowed in string literals and property keys in JSON; but the same use in JavaScript string literals is a {{jsxref(\"SyntaxError\")}}.\n\nOther differences include allowing only double-quoted strings and no support for {{jsxref(\"undefined\")}} or comments. For those who wish to use a more human-friendly configuration format based on JSON, there is [JSON5](https://json5.org/), used by the Babel compiler, and the more commonly used [YAML](https://en.wikipedia.org/wiki/YAML).\n\nThe same text may represent different values in JavaScript object literals vs. JSON as well. For more information, see [Object literal syntax vs. JSON](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#object_literal_syntax_vs._json).\n\n### Full JSON grammar\n\nValid JSON syntax is formally defined by the following grammar, expressed in [ABNF](https://en.wikipedia.org/wiki/Augmented_Backus%E2%80%93Naur_form), and copied from [IETF JSON standard (RFC)](https://datatracker.ietf.org/doc/html/rfc8259):\n\n```plain\nJSON-text = object / array\nbegin-array     = ws %x5B ws  ; [ left square bracket\nbegin-object    = ws %x7B ws  ; { left curly bracket\nend-array       = ws %x5D ws  ; ] right square bracket\nend-object      = ws %x7D ws  ; } right curly bracket\nname-separator  = ws %x3A ws  ; : colon\nvalue-separator = ws %x2C ws  ; , comma\nws = *(\n     %x20 /              ; Space\n     %x09 /              ; Horizontal tab\n     %x0A /              ; Line feed or New line\n     %x0D                ; Carriage return\n     )\nvalue = false / null / true / object / array / number / string\nfalse = %x66.61.6c.73.65   ; false\nnull  = %x6e.75.6c.6c      ; null\ntrue  = %x74.72.75.65      ; true\nobject = begin-object [ member *( value-separator member ) ]\n         end-object\nmember = string name-separator value\narray = begin-array [ value *( value-separator value ) ] end-array\nnumber = [ minus ] int [ frac ] [ exp ]\ndecimal-point = %x2E       ; .\ndigit1-9 = %x31-39         ; 1-9\ne = %x65 / %x45            ; e E\nexp = e [ minus / plus ] 1*DIGIT\nfrac = decimal-point 1*DIGIT\nint = zero / ( digit1-9 *DIGIT )\nminus = %x2D               ; -\nplus = %x2B                ; +\nzero = %x30                ; 0\nstring = quotation-mark *char quotation-mark\nchar = unescaped /\n    escape (\n        %x22 /          ; \"    quotation mark  U+0022\n        %x5C /          ; \\    reverse solidus U+005C\n        %x2F /          ; /    solidus         U+002F\n        %x62 /          ; b    backspace       U+0008\n        %x66 /          ; f    form feed       U+000C\n        %x6E /          ; n    line feed       U+000A\n        %x72 /          ; r    carriage return U+000D\n        %x74 /          ; t    tab             U+0009\n        %x75 4HEXDIG )  ; uXXXX                U+XXXX\nescape = %x5C              ; \\\nquotation-mark = %x22      ; \"\nunescaped = %x20-21 / %x23-5B / %x5D-10FFFF\nHEXDIG = DIGIT / %x41-46 / %x61-66   ; 0-9, A-F, or a-f\n       ; HEXDIG equivalent to HEXDIG rule in [RFC5234]\nDIGIT = %x30-39            ; 0-9\n      ; DIGIT equivalent to DIGIT rule in [RFC5234]\n```\n\nInsignificant {{Glossary(\"whitespace\")}} may be present anywhere except within a `JSONNumber` (numbers must contain no whitespace) or `JSONString` (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character ([U+0009](https://unicode-table.com/en/0009/)), carriage return ([U+000D](https://unicode-table.com/en/000D/)), line feed ([U+000A](https://unicode-table.com/en/000A/)), and space ([U+0020](https://unicode-table.com/en/0020/)) characters are the only valid whitespace characters.\n\n## Static properties\n\n- `JSON[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"JSON\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Static methods\n\n- {{jsxref(\"JSON.parse()\")}}\n  - : Parse a piece of string text as JSON, optionally transforming the produced value and its properties, and return the value.\n- {{jsxref(\"JSON.stringify()\")}}\n  - : Return a JSON string corresponding to the specified value, optionally including only certain properties or replacing property values in a user-defined manner.\n\n## Examples\n\n### Example JSON\n\n```json\n{\n  \"browsers\": {\n    \"firefox\": {\n      \"name\": \"Firefox\",\n      \"pref_url\": \"about:config\",\n      \"releases\": {\n        \"1\": {\n          \"release_date\": \"2004-11-09\",\n          \"status\": \"retired\",\n          \"engine\": \"Gecko\",\n          \"engine_version\": \"1.7\"\n        }\n      }\n    }\n  }\n}\n```\n\nYou can use the {{jsxref(\"JSON.parse()\")}} method to convert the above JSON string into a JavaScript object:\n\n```js\nconst jsonText = `{\n  \"browsers\": {\n    \"firefox\": {\n      \"name\": \"Firefox\",\n      \"pref_url\": \"about:config\",\n      \"releases\": {\n        \"1\": {\n          \"release_date\": \"2004-11-09\",\n          \"status\": \"retired\",\n          \"engine\": \"Gecko\",\n          \"engine_version\": \"1.7\"\n        }\n      }\n    }\n  }\n}`;\n\nconsole.log(JSON.parse(jsonText));\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Date.prototype.toJSON()\")}}\n- [JSON Diff](https://json-diff.com/)\n- [JSON Beautifier/editor](https://jsonbeautifier.org/)\n- [JSON Parser](https://jsonparser.org/)\n- [JSON Validator](https://tools.learningcontainer.com/json-validator/)\n",
    "parse": {
      "index.md": "---\ntitle: JSON.parse()\nslug: Web/JavaScript/Reference/Global_Objects/JSON/parse\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.JSON.parse\n---\n\n{{JSRef}}\n\nThe **`JSON.parse()`** static method parses a JSON string, constructing the JavaScript value or object described by the string. An optional _reviver_ function can be provided to perform a transformation on the resulting object before it is returned.\n\n{{EmbedInteractiveExample(\"pages/js/json-parse.html\")}}\n\n## Syntax\n\n```js-nolint\nJSON.parse(text)\nJSON.parse(text, reviver)\n```\n\n### Parameters\n\n- `text`\n  - : The string to parse as JSON. See the {{jsxref(\"JSON\")}} object for a description of JSON syntax.\n- `reviver` {{optional_inline}}\n  - : If a function, this prescribes how each value originally produced by parsing is transformed before being returned. Non-callable values are ignored. The function is called with the following arguments:\n    - `key`\n      - : The key associated with the value.\n    - `value`\n      - : The value produced by parsing.\n\n### Return value\n\nThe {{jsxref(\"Object\")}}, {{jsxref(\"Array\")}}, string, number, boolean, or `null` value corresponding to the given JSON `text`.\n\n### Exceptions\n\n- {{jsxref(\"SyntaxError\")}}\n  - : Thrown if the string to parse is not valid JSON.\n\n## Description\n\n`JSON.parse()` parses a JSON string according to the [JSON grammar](/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON#full_json_grammar), then evaluates the string as if it's a JavaScript expression. The only instance where a piece of JSON text represents a different value from the same JavaScript expression is when dealing with the `\"__proto__\"` key — see [Object literal syntax vs. JSON](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#object_literal_syntax_vs._json).\n\n### The reviver parameter\n\nIf a `reviver` is specified, the value computed by parsing is _transformed_ before being returned. Specifically, the computed value and all its properties (in a [depth-first](https://en.wikipedia.org/wiki/Depth-first_search) fashion, beginning with the most nested properties and proceeding to the original value itself) are individually run through the `reviver`.\n\nThe `reviver` is called with the object containing the property being processed as `this` (unless you define the `reviver` as an arrow function, in which case there's no separate `this` binding) and two arguments: `key` and `value`, representing the property name as a string (even for arrays) and the property value. If the `reviver` function returns {{jsxref(\"undefined\")}} (or returns no value — for example, if execution falls off the end of the function), the property is deleted from the object. Otherwise, the property is redefined to be the return value. If the `reviver` only transforms some values and not others, be certain to return all untransformed values as-is — otherwise, they will be deleted from the resulting object.\n\nSimilar to the `replacer` parameter of {{jsxref(\"JSON.stringify()\")}}, for arrays and objects, `reviver` will be last called on the root value with an empty string as the `key` and the root object as the `value`. For other valid JSON values, `reviver` works similarly and is called once with an empty string as the `key` and the value itself as the `value`.\n\nIf you return another value from `reviver`, that value will completely replace the originally parsed value. This even applies to the root value. For example:\n\n```js\nconst transformedObj1 = JSON.parse('[1,5,{\"s\":1}]', (key, value) => {\n  return typeof value === \"object\" ? undefined : value;\n});\n\nconsole.log(transformedObj1); // undefined\n```\n\nThere is no way to work around this generically. You cannot specially handle the case where `key` is an empty string, because JSON objects can also contain keys that are empty strings. You need to know very precisely what kind of transformation is needed for each key when implementing the reviver.\n\nNote that `reviver` is run after the value is parsed. So, for example, numbers in JSON text will have already been converted to JavaScript numbers, and may lose precision in the process. To transfer large numbers without loss of precision, serialize them as strings, and revive them to [BigInts](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), or other appropriate arbitrary precision formats.\n\n## Examples\n\n### Using JSON.parse()\n\n```js\nJSON.parse(\"{}\"); // {}\nJSON.parse(\"true\"); // true\nJSON.parse('\"foo\"'); // \"foo\"\nJSON.parse('[1, 5, \"false\"]'); // [1, 5, \"false\"]\nJSON.parse(\"null\"); // null\n```\n\n### Using the reviver parameter\n\n```js\nJSON.parse(\n  '{\"p\": 5}',\n  (key, value) =>\n    typeof value === \"number\"\n      ? value * 2 // return value * 2 for numbers\n      : value, // return everything else unchanged\n);\n// { p: 10 }\n\nJSON.parse('{\"1\": 1, \"2\": 2, \"3\": {\"4\": 4, \"5\": {\"6\": 6}}}', (key, value) => {\n  console.log(key);\n  return value;\n});\n// 1\n// 2\n// 4\n// 6\n// 5\n// 3\n// \"\"\n```\n\n### Using reviver when paired with the replacer of JSON.stringify()\n\nIn order for a value to properly round-trip (that is, it gets deserialized to the same original object), the serialization process must preserve the type information. For example, you can use the `replacer` parameter of {{jsxref(\"JSON.stringify()\")}} for this purpose:\n\n```js\n// Maps are normally serialized as objects with no properties.\n// We can use the replacer to specify the entries to be serialized.\nconst map = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [3, \"three\"],\n]);\n\nconst jsonText = JSON.stringify(map, (key, value) =>\n  value instanceof Map ? Array.from(value.entries()) : value,\n);\n\nconsole.log(jsonText);\n// [[1,\"one\"],[2,\"two\"],[3,\"three\"]]\n\nconst map2 = JSON.parse(jsonText, (key, value) =>\n  Array.isArray(value) ? new Map(value) : value,\n);\n\nconsole.log(map2);\n// Map { 1 => \"one\", 2 => \"two\", 3 => \"three\" }\n```\n\nBecause JSON has no syntax space for annotating type metadata, in order to revive values that are not plain objects, you have to consider one of the following:\n\n- Serialize the entire object to a string and prefix it with a type tag.\n- \"Guess\" based on the structure of the data (for example, an array of two-member arrays)\n- If the shape of the payload is fixed, based on the property name (for example, all properties called `registry` hold `Map` objects).\n\n### JSON.parse() does not allow trailing commas\n\n```js example-bad\n// both will throw a SyntaxError\nJSON.parse(\"[1, 2, 3, 4, ]\");\nJSON.parse('{\"foo\" : 1, }');\n```\n\n### JSON.parse() does not allow single quotes\n\n```js example-bad\n// will throw a SyntaxError\nJSON.parse(\"{'foo': 1}\");\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"JSON.stringify()\")}}\n"
    },
    "stringify": {
      "index.md": "---\ntitle: JSON.stringify()\nslug: Web/JavaScript/Reference/Global_Objects/JSON/stringify\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.JSON.stringify\n---\n\n{{JSRef}}\n\nThe **`JSON.stringify()`** static method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.\n\n{{EmbedInteractiveExample(\"pages/js/json-stringify.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nJSON.stringify(value)\nJSON.stringify(value, replacer)\nJSON.stringify(value, replacer, space)\n```\n\n### Parameters\n\n- `value`\n  - : The value to convert to a JSON string.\n- `replacer` {{optional_inline}}\n  - : A function that alters the behavior of the stringification process, or an array of strings and numbers that specifies properties of `value` to be included in the output. If `replacer` is an array, all elements in this array that are not strings or numbers (either primitives or wrapper objects), including {{jsxref(\"Symbol\")}} values, are completely ignored. If `replacer` is anything other than a function or an array (e.g. [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) or not provided), all string-keyed properties of the object are included in the resulting JSON string.\n- `space` {{optional_inline}}\n\n  - : A string or number that's used to insert white space (including indentation, line break characters, etc.) into the output JSON string for readability purposes.\n\n    If this is a number, it indicates the number of space characters to be used as indentation, clamped to 10 (that is, any number greater than `10` is treated as if it were `10`). Values less than 1 indicate that no space should be used.\n\n    If this is a string, the string (or the first 10 characters of the string, if it's longer than that) is inserted before every nested object or array.\n\n    If `space` is anything other than a string or number (can be either a primitive or a wrapper object) — for example, is [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) or not provided — no white space is used.\n\n### Return value\n\nA JSON string representing the given value, or undefined.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown in one of the following cases:\n    - `value` contains a circular reference.\n    - A {{jsxref(\"BigInt\")}} value is encountered.\n\n## Description\n\n`JSON.stringify()` converts a value to the JSON notation that the value represents. Values are stringified in the following manner:\n\n- {{jsxref(\"Boolean\")}}, {{jsxref(\"Number\")}}, {{jsxref(\"String\")}}, and {{jsxref(\"BigInt\")}} (obtainable via [`Object()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object)) objects are converted to the corresponding primitive values during stringification, in accordance with the traditional conversion semantics. {{jsxref(\"Symbol\")}} objects (obtainable via [`Object()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object)) are treated as plain objects.\n- Attempting to serialize {{jsxref(\"BigInt\")}} values will throw. However, if the BigInt has a `toJSON()` method (through monkey patching: `BigInt.prototype.toJSON = ...`), that method can provide the serialization result. This constraint ensures that a proper serialization (and, very likely, its accompanying deserialization) behavior is always explicitly provided by the user.\n- {{jsxref(\"undefined\")}}, {{jsxref(\"Function\")}}, and {{jsxref(\"Symbol\")}} values are not valid JSON values. If any such values are encountered during conversion, they are either omitted (when found in an object) or changed to [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) (when found in an array). `JSON.stringify()` can return `undefined` when passing in \"pure\" values like `JSON.stringify(() => {})` or `JSON.stringify(undefined)`.\n- The numbers {{jsxref(\"Infinity\")}} and {{jsxref(\"NaN\")}}, as well as the value [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null), are all considered `null`. (But unlike the values in the previous point, they would never be omitted.)\n- Arrays are serialized as arrays (enclosed by square brackets). Only array indices between 0 and `length - 1` (inclusive) are serialized; other properties are ignored.\n- For other objects:\n\n  - All {{jsxref(\"Symbol\")}}-keyed properties will be completely ignored, even when using the [`replacer`](#the_replacer_parameter) parameter.\n\n  - If the value has a `toJSON()` method, it's responsible to define what data will be serialized. Instead of the object being serialized, the value returned by the `toJSON()` method when called will be serialized. `JSON.stringify()` calls `toJSON` with one parameter, the `key`, which has the same semantic as the `key` parameter of the [`replacer`](#the_replacer_parameter) function:\n\n    - if this object is a property value, the property name\n    - if it is in an array, the index in the array, as a string\n    - if `JSON.stringify()` was directly called on this object, an empty string\n\n    {{jsxref(\"Date\")}} objects implement the [`toJSON()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON) method which returns a string (the same as [`date.toISOString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)). Thus, they will be stringified as strings.\n\n  - Only [enumerable own properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) are visited. This means {{jsxref(\"Map\")}}, {{jsxref(\"Set\")}}, etc. will become `\"{}\"`. You can use the [`replacer`](#the_replacer_parameter) parameter to serialize them to something more useful.\n\n    Properties are visited using the same algorithm as [`Object.keys()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys), which has a well-defined order and is stable across implementations. For example, `JSON.stringify` on the same object will always produce the same string, and `JSON.parse(JSON.stringify(obj))` would produce an object with the same key ordering as the original (assuming the object is completely JSON-serializable).\n\n### The replacer parameter\n\nThe `replacer` parameter can be either a function or an array.\n\nAs an array, its elements indicate the names of the properties in the object that should be included in the resulting JSON string. Only string and number values are taken into account; symbol keys are ignored.\n\nAs a function, it takes two parameters: the `key` and the `value` being stringified. The object in which the key was found is provided as the `replacer`'s `this` context.\n\nThe `replacer` function is called for the initial object being stringified as well, in which case the `key` is an empty string (`\"\"`). It is then called for each property on the object or array being stringified. Array indices will be provided in its string form as `key`. The current property value will be replaced with the `replacer`'s return value for stringification. This means:\n\n- If you return a number, string, boolean, or `null`, that value is directly serialized and used as the property's value. (Returning a BigInt will throw as well.)\n- If you return a {{jsxref(\"Function\")}}, {{jsxref(\"Symbol\")}}, or {{jsxref(\"undefined\")}}, the property is not included in the output.\n- If you return any other object, the object is recursively stringified, calling the `replacer` function on each property.\n\n> **Note:** When parsing JSON generated with `replacer` functions, you would likely want to use the [`reviver`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#using_the_reviver_parameter) parameter to perform the reverse operation.\n\nTypically, array elements' index would never shift (even when the element is an invalid value like a function, it will become `null` instead of omitted). Using the `replacer` function allows you to control the order of the array elements by returning a different array.\n\n### The space parameter\n\nThe `space` parameter may be used to control spacing in the final string.\n\n- If it is a number, successive levels in the stringification will each be indented by this many space characters.\n- If it is a string, successive levels will be indented by this string.\n\nEach level of indentation will never be longer than 10. Number values of `space` are clamped to 10, and string values are truncated to 10 characters.\n\n## Examples\n\n### Using JSON.stringify\n\n```js\nJSON.stringify({}); // '{}'\nJSON.stringify(true); // 'true'\nJSON.stringify(\"foo\"); // '\"foo\"'\nJSON.stringify([1, \"false\", false]); // '[1,\"false\",false]'\nJSON.stringify([NaN, null, Infinity]); // '[null,null,null]'\nJSON.stringify({ x: 5 }); // '{\"x\":5}'\n\nJSON.stringify(new Date(1906, 0, 2, 15, 4, 5));\n// '\"1906-01-02T15:04:05.000Z\"'\n\nJSON.stringify({ x: 5, y: 6 });\n// '{\"x\":5,\"y\":6}'\nJSON.stringify([new Number(3), new String(\"false\"), new Boolean(false)]);\n// '[3,\"false\",false]'\n\n// String-keyed array elements are not enumerable and make no sense in JSON\nconst a = [\"foo\", \"bar\"];\na[\"baz\"] = \"quux\"; // a: [ 0: 'foo', 1: 'bar', baz: 'quux' ]\nJSON.stringify(a);\n// '[\"foo\",\"bar\"]'\n\nJSON.stringify({ x: [10, undefined, function () {}, Symbol(\"\")] });\n// '{\"x\":[10,null,null,null]}'\n\n// Standard data structures\nJSON.stringify([\n  new Set([1]),\n  new Map([[1, 2]]),\n  new WeakSet([{ a: 1 }]),\n  new WeakMap([[{ a: 1 }, 2]]),\n]);\n// '[{},{},{},{}]'\n\n// TypedArray\nJSON.stringify([new Int8Array([1]), new Int16Array([1]), new Int32Array([1])]);\n// '[{\"0\":1},{\"0\":1},{\"0\":1}]'\nJSON.stringify([\n  new Uint8Array([1]),\n  new Uint8ClampedArray([1]),\n  new Uint16Array([1]),\n  new Uint32Array([1]),\n]);\n// '[{\"0\":1},{\"0\":1},{\"0\":1},{\"0\":1}]'\nJSON.stringify([new Float32Array([1]), new Float64Array([1])]);\n// '[{\"0\":1},{\"0\":1}]'\n\n// toJSON()\nJSON.stringify({\n  x: 5,\n  y: 6,\n  toJSON() {\n    return this.x + this.y;\n  },\n});\n// '11'\n\n// Symbols:\nJSON.stringify({ x: undefined, y: Object, z: Symbol(\"\") });\n// '{}'\nJSON.stringify({ [Symbol(\"foo\")]: \"foo\" });\n// '{}'\nJSON.stringify({ [Symbol.for(\"foo\")]: \"foo\" }, [Symbol.for(\"foo\")]);\n// '{}'\nJSON.stringify({ [Symbol.for(\"foo\")]: \"foo\" }, (k, v) => {\n  if (typeof k === \"symbol\") {\n    return \"a symbol\";\n  }\n});\n// undefined\n\n// Non-enumerable properties:\nJSON.stringify(\n  Object.create(null, {\n    x: { value: \"x\", enumerable: false },\n    y: { value: \"y\", enumerable: true },\n  }),\n);\n// '{\"y\":\"y\"}'\n\n// BigInt values throw\nJSON.stringify({ x: 2n });\n// TypeError: BigInt value can't be serialized in JSON\n```\n\n### Using a function as replacer\n\n```js\nfunction replacer(key, value) {\n  // Filtering out properties\n  if (typeof value === \"string\") {\n    return undefined;\n  }\n  return value;\n}\n\nconst foo = {\n  foundation: \"Mozilla\",\n  model: \"box\",\n  week: 45,\n  transport: \"car\",\n  month: 7,\n};\nJSON.stringify(foo, replacer);\n// '{\"week\":45,\"month\":7}'\n```\n\nIf you wish the `replacer` to distinguish an initial object from a key with an empty string property (since both would give the empty string as key and potentially an object as value), you will have to keep track of the iteration count (if it is beyond the first iteration, it is a genuine empty string key).\n\n```js\nfunction makeReplacer() {\n  let isInitial = true;\n\n  return (key, value) => {\n    if (isInitial) {\n      isInitial = false;\n      return value;\n    }\n    if (key === \"\") {\n      // Omit all properties with name \"\" (except the initial object)\n      return undefined;\n    }\n    return value;\n  };\n}\n\nconst replacer = makeReplacer();\nconsole.log(JSON.stringify({ \"\": 1, b: 2 }, replacer)); // \"{\"b\":2}\"\n```\n\n### Using an array as replacer\n\n```js\nconst foo = {\n  foundation: \"Mozilla\",\n  model: \"box\",\n  week: 45,\n  transport: \"car\",\n  month: 7,\n};\n\nJSON.stringify(foo, [\"week\", \"month\"]);\n// '{\"week\":45,\"month\":7}', only keep \"week\" and \"month\" properties\n```\n\n### Using the space parameter\n\nIndent the output with one space:\n\n```js\nconsole.log(JSON.stringify({ a: 2 }, null, \" \"));\n/*\n{\n \"a\": 2\n}\n*/\n```\n\nUsing a tab character mimics standard pretty-print appearance:\n\n<!-- markdownlint-disable MD010 -->\n\n```js\nconsole.log(JSON.stringify({ uno: 1, dos: 2 }, null, \"\\t\"));\n/*\n{\n\t\"uno\": 1,\n\t\"dos\": 2\n}\n*/\n```\n\n<!-- markdownlint-enable MD010 -->\n\n### toJSON() behavior\n\nDefining `toJSON()` for an object allows overriding its serialization behavior.\n\n```js\nconst obj = {\n  data: \"data\",\n\n  toJSON(key) {\n    return key ? `Now I am a nested object under key '${key}'` : this;\n  },\n};\n\nJSON.stringify(obj);\n// '{\"data\":\"data\"}'\n\nJSON.stringify({ obj });\n// '{\"obj\":\"Now I am a nested object under key 'obj'\"}'\n\nJSON.stringify([obj]);\n// '[\"Now I am a nested object under key '0'\"]'\n```\n\n### Issue with serializing circular references\n\nSince the [JSON format](https://www.json.org/) doesn't support object references (although an [IETF draft exists](https://datatracker.ietf.org/doc/html/draft-pbryan-zyp-json-ref-03)), a {{jsxref(\"TypeError\")}} will be thrown if one attempts to encode an object with circular references.\n\n```js example-bad\nconst circularReference = {};\ncircularReference.myself = circularReference;\n\n// Serializing circular references throws \"TypeError: cyclic object value\"\nJSON.stringify(circularReference);\n```\n\nTo serialize circular references, you can use a library that supports them (e.g. [cycle.js](https://github.com/douglascrockford/JSON-js/blob/master/cycle.js) by Douglas Crockford) or implement a solution yourself, which will require finding and replacing (or removing) the cyclic references by serializable values.\n\nIf you are using `JSON.stringify()` to deep-copy an object, you may instead want to use [`structuredClone()`](/en-US/docs/Web/API/structuredClone), which supports circular references. JavaScript engine APIs for binary serialization, such as [`v8.serialize()`](https://nodejs.org/api/v8.html#v8serializevalue), also support circular references.\n\n### Using JSON.stringify() with localStorage\n\nIn a case where you want to store an object created by your user and allow it to be restored even after the browser has been closed, the following example is a model for the applicability of `JSON.stringify()`:\n\n```js\n// Creating an example of JSON\nconst session = {\n  screens: [],\n  state: true,\n};\nsession.screens.push({ name: \"screenA\", width: 450, height: 250 });\nsession.screens.push({ name: \"screenB\", width: 650, height: 350 });\nsession.screens.push({ name: \"screenC\", width: 750, height: 120 });\nsession.screens.push({ name: \"screenD\", width: 250, height: 60 });\nsession.screens.push({ name: \"screenE\", width: 390, height: 120 });\nsession.screens.push({ name: \"screenF\", width: 1240, height: 650 });\n\n// Converting the JSON string with JSON.stringify()\n// then saving with localStorage in the name of session\nlocalStorage.setItem(\"session\", JSON.stringify(session));\n\n// Example of how to transform the String generated through\n// JSON.stringify() and saved in localStorage in JSON object again\nconst restoredSession = JSON.parse(localStorage.getItem(\"session\"));\n\n// Now restoredSession variable contains the object that was saved\n// in localStorage\nconsole.log(restoredSession);\n```\n\n### Well-formed JSON.stringify()\n\nEngines implementing the [well-formed JSON.stringify specification](https://github.com/tc39/proposal-well-formed-stringify) will stringify lone surrogates (any code point from U+D800 to U+DFFF) using Unicode escape sequences rather than literally (outputting lone surrogates). Before this change, such strings could not be encoded in valid UTF-8 or UTF-16:\n\n```js\nJSON.stringify(\"\\uD800\"); // '\"�\"'\n```\n\nBut with this change `JSON.stringify()` represents lone surrogates using JSON escape sequences that _can_ be encoded in valid UTF-8 or UTF-16:\n\n```js\nJSON.stringify(\"\\uD800\"); // '\"\\\\ud800\"'\n```\n\nThis change should be backwards-compatible as long as you pass the result of `JSON.stringify()` to APIs such as `JSON.parse()` that will accept any valid JSON text, because they will treat Unicode escapes of lone surrogates as identical to the lone surrogates themselves. _Only_ if you are directly interpreting the result of `JSON.stringify()` do you need to carefully handle `JSON.stringify()`'s two possible encodings of these code points.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of modern `JSON.stringify` behavior (symbol and well-formed unicode) in `core-js`](https://github.com/zloirock/core-js#ecmascript-json)\n- {{jsxref(\"JSON.parse()\")}}\n"
    }
  },
  "map": {
    "@@iterator": {
      "index.md": "---\ntitle: Map.prototype[@@iterator]()\nslug: Web/JavaScript/Reference/Global_Objects/Map/@@iterator\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Map.@@iterator\n---\n\n{{JSRef}}\n\nThe **`[@@iterator]()`** method of {{jsxref(\"Map\")}} instances implements the [iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows `Map` objects to be consumed by most syntaxes expecting iterables, such as the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and {{jsxref(\"Statements/for...of\", \"for...of\")}} loops. It returns a [map iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the key-value pairs of the map in insertion order.\n\nThe initial value of this property is the same function object as the initial value of the {{jsxref(\"Map.prototype.entries\")}} property.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-@@iterator.html\")}}\n\n## Syntax\n\n```js-nolint\nmap[Symbol.iterator]()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe same return value as {{jsxref(\"Map.prototype.entries()\")}}: a new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the key-value pairs of the map.\n\n## Examples\n\n### Iteration using for...of loop\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes `Map` objects [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```js\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nfor (const entry of myMap) {\n  console.log(entry);\n}\n// [\"0\", \"foo\"]\n// [1, \"bar\"]\n// [{}, \"baz\"]\n\nfor (const [key, value] of myMap) {\n  console.log(`${key}: ${value}`);\n}\n// 0: foo\n// 1: bar\n// [Object]: baz\n```\n\n### Manually hand-rolling the iterator\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```js\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nconst mapIter = myMap[Symbol.iterator]();\n\nconsole.log(mapIter.next().value); // [\"0\", \"foo\"]\nconsole.log(mapIter.next().value); // [1, \"bar\"]\nconsole.log(mapIter.next().value); // [Object, \"baz\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Map\")}}\n- {{jsxref(\"Map.prototype.entries()\")}}\n- {{jsxref(\"Map.prototype.keys()\")}}\n- {{jsxref(\"Map.prototype.values()\")}}\n- {{jsxref(\"Symbol.iterator\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "@@species": {
      "index.md": "---\ntitle: Map[@@species]\nslug: Web/JavaScript/Reference/Global_Objects/Map/@@species\npage-type: javascript-static-accessor-property\nbrowser-compat: javascript.builtins.Map.@@species\n---\n\n{{JSRef}}\n\nThe **`Map[@@species]`** static accessor property is an unused accessor property specifying how to copy `Map` objects.\n\n## Syntax\n\n```js-nolint\nMap[Symbol.species]\n```\n\n### Return value\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct copied `Map` instances.\n\n## Description\n\nThe `@@species` accessor property returns the default constructor for `Map` objects. Subclass constructors may override it to change the constructor assignment.\n\n> **Note:** This property is currently unused by all `Map` methods.\n\n## Examples\n\n### Species in ordinary objects\n\nThe `@@species` property returns the default constructor function, which is the `Map` constructor for `Map`.\n\n```js\nMap[Symbol.species]; // function Map()\n```\n\n### Species in derived objects\n\nIn an instance of a custom `Map` subclass, such as `MyMap`, the `MyMap` species is the `MyMap` constructor. However, you might want to overwrite this, in order to return parent `Map` objects in your derived class methods:\n\n```js\nclass MyMap extends Map {\n  // Overwrite MyMap species to the parent Map constructor\n  static get [Symbol.species]() {\n    return Map;\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Map\")}}\n- {{jsxref(\"Symbol.species\")}}\n"
    },
    "clear": {
      "index.md": "---\ntitle: Map.prototype.clear()\nslug: Web/JavaScript/Reference/Global_Objects/Map/clear\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Map.clear\n---\n\n{{JSRef}}\n\nThe **`clear()`** method of {{jsxref(\"Map\")}} instances removes all elements from this map.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-clear.html\")}}\n\n## Syntax\n\n```js-nolint\nclear()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n## Examples\n\n### Using clear()\n\n```js\nconst myMap = new Map();\nmyMap.set(\"bar\", \"baz\");\nmyMap.set(1, \"foo\");\n\nconsole.log(myMap.size); // 2\nconsole.log(myMap.has(\"bar\")); // true\n\nmyMap.clear();\n\nconsole.log(myMap.size); // 0\nconsole.log(myMap.has(\"bar\")); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Map\")}}\n"
    },
    "delete": {
      "index.md": "---\ntitle: Map.prototype.delete()\nslug: Web/JavaScript/Reference/Global_Objects/Map/delete\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Map.delete\n---\n\n{{JSRef}}\n\nThe **`delete()`** method of {{jsxref(\"Map\")}} instances removes the specified element from this map by\nkey.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-delete.html\")}}\n\n## Syntax\n\n```js-nolint\nmapInstance.delete(key)\n```\n\n### Parameters\n\n- `key`\n  - : The key of the element to remove from the `Map` object.\n\n### Return value\n\n`true` if an element in the `Map` object existed and has been removed, or\n`false` if the element does not exist.\n\n## Examples\n\n### Using delete()\n\n```js\nconst myMap = new Map();\nmyMap.set(\"bar\", \"foo\");\n\nconsole.log(myMap.delete(\"bar\")); // Returns true. Successfully removed.\nconsole.log(myMap.has(\"bar\")); // Returns false. The \"bar\" element is no longer present.\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Map\")}}\n"
    },
    "entries": {
      "index.md": "---\ntitle: Map.prototype.entries()\nslug: Web/JavaScript/Reference/Global_Objects/Map/entries\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Map.entries\n---\n\n{{JSRef}}\n\nThe **`entries()`** method of {{jsxref(\"Map\")}} instances returns a new _[map iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the `[key, value]` pairs for each element in this map in insertion order.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-entries.html\")}}\n\n## Syntax\n\n```js-nolint\nentries()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Examples\n\n### Using entries()\n\n```js\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nconst mapIter = myMap.entries();\n\nconsole.log(mapIter.next().value); // [\"0\", \"foo\"]\nconsole.log(mapIter.next().value); // [1, \"bar\"]\nconsole.log(mapIter.next().value); // [Object, \"baz\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Map.prototype.keys()\")}}\n- {{jsxref(\"Map.prototype.values()\")}}\n"
    },
    "foreach": {
      "index.md": "---\ntitle: Map.prototype.forEach()\nslug: Web/JavaScript/Reference/Global_Objects/Map/forEach\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Map.forEach\n---\n\n{{JSRef}}\n\nThe **`forEach()`** method of {{jsxref(\"Map\")}} instances executes a provided function once per each key/value\npair in this map, in insertion order.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-foreach.html\")}}\n\n## Syntax\n\n```js-nolint\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each entry in the map. The function is called with the following arguments:\n    - `value`\n      - : Value of each iteration.\n    - `key`\n      - : Key of each iteration.\n    - `map`\n      - : The map being iterated.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`.\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n## Description\n\nThe `forEach` method executes the provided `callback` once for each key of the\nmap which actually exist. It is not invoked for keys which have been deleted.\nHowever, it is executed for values which are present but have the value\n`undefined`.\n\n`callback` is invoked with **three arguments**:\n\n- the entry's `value`\n- the entry's `key`\n- the **`Map` object** being traversed\n\nIf a `thisArg` parameter is provided to `forEach`, it will be passed to\n`callback` when invoked, for use as its `this` value. Otherwise, the value\n`undefined` will be passed for use as its `this` value. The `this` value\nultimately observable by `callback` is determined according to\n[the usual rules for determining the `this` seen by a function](/en-US/docs/Web/JavaScript/Reference/Operators/this).\n\nEach value is visited once, except in the case when it was deleted and re-added\nbefore `forEach` has finished. `callback` is not invoked for values deleted\nbefore being visited. New values added before `forEach` has finished will be\nvisited.\n\n## Examples\n\n### Printing the contents of a Map object\n\nThe following code logs a line for each element in an `Map` object:\n\n```js\nfunction logMapElements(value, key, map) {\n  console.log(`map.get('${key}') = ${value}`);\n}\nnew Map([\n  [\"foo\", 3],\n  [\"bar\", {}],\n  [\"baz\", undefined],\n]).forEach(logMapElements);\n// Logs:\n// \"map.get('foo') = 3\"\n// \"map.get('bar') = [object Object]\"\n// \"map.get('baz') = undefined\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Array.prototype.forEach()\")}}\n- {{jsxref(\"Set.prototype.forEach()\")}}\n"
    },
    "get": {
      "index.md": "---\ntitle: Map.prototype.get()\nslug: Web/JavaScript/Reference/Global_Objects/Map/get\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Map.get\n---\n\n{{JSRef}}\n\nThe **`get()`** method of {{jsxref(\"Map\")}} instances returns a specified element from this map. If the\nvalue that is associated to the provided key is an object, then you will get a\nreference to that object and any change made to that object will effectively\nmodify it inside the `Map` object.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-get.html\")}}\n\n## Syntax\n\n```js-nolint\nget(key)\n```\n\n### Parameters\n\n- `key`\n  - : The key of the element to return from the `Map` object.\n\n### Return value\n\nThe element associated with the specified key, or\n{{jsxref(\"undefined\")}} if the key can't be found in the `Map` object.\n\n## Examples\n\n### Using get()\n\n```js\nconst myMap = new Map();\nmyMap.set(\"bar\", \"foo\");\n\nconsole.log(myMap.get(\"bar\")); // Returns \"foo\"\nconsole.log(myMap.get(\"baz\")); // Returns undefined\n```\n\n### Using get() to retrieve a reference to an object\n\n```js\nconst arr = [];\nconst myMap = new Map();\nmyMap.set(\"bar\", arr);\n\nmyMap.get(\"bar\").push(\"foo\");\n\nconsole.log(arr); // [\"foo\"]\nconsole.log(myMap.get(\"bar\")); // [\"foo\"]\n```\n\nNote that the map holding a reference to the original object effectively means the object cannot be garbage-collected, which may lead to unexpected memory issues. If you want the object stored in the map to have the same lifespan as the original one, consider using a {{jsxref(\"WeakMap\")}}.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Map\")}}\n- {{jsxref(\"Map.prototype.set()\")}}\n- {{jsxref(\"Map.prototype.has()\")}}\n"
    },
    "groupby": {
      "index.md": "---\ntitle: Map.groupBy()\nslug: Web/JavaScript/Reference/Global_Objects/Map/groupBy\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Map.groupBy\n---\n\n{{JSRef}}\n\n> **Note:** In some versions of some browsers, this method was implemented as the method `Array.prototype.groupToMap()`. Due to web compatibility issues, it is now implemented as a static method. Check the [browser compatibility table](#browser_compatibility) for details.\n\nThe **`Map.groupBy()`** static method groups the elements of a given iterable using the values returned by a provided callback function. The final returned {{jsxref(\"Map\")}} uses the unique values from the test function as keys, which can be used to get the array of elements in each group.\n\nThe method is primarily useful when grouping elements that are associated with an object, and in particular when that object might change over time. If the object is invariant, you might instead represent it using a string, and group elements with {{jsxref(\"Object.groupBy()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/map-groupby.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nMap.groupBy(items, callbackFn)\n```\n\n### Parameters\n\n- `items`\n  - : An [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an {{jsxref(\"Array\")}}) whose elements will be grouped.\n- `callbackFn`\n  - : A function to execute for each element in the iterable. It should return a value ({{Glossary(\"object\")}} or {{Glossary(\"primitive\")}}) indicating the group of the current element. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed.\n    - `index`\n      - : The index of the current element being processed.\n\n### Return value\n\nA {{jsxref(\"Map\")}} object with keys for each group, each assigned to an array containing the elements of the associated group.\n\n## Description\n\n`Map.groupBy()` calls a provided `callbackFn` function once for each element in an iterable. The callback function should return a value indicating the group of the associated element. The values returned by `callbackFn` are used as keys for the {{jsxref(\"Map\")}} returned by `Map.groupBy()`. Each key has an associated array containing all the elements for which the callback returned the same value.\n\nThe elements in the returned {{jsxref(\"Map\")}} and the original iterable are the same (not {{Glossary(\"deep copy\", \"deep copies\")}}). Changing the internal structure of the elements will be reflected in both the original iterable and the returned {{jsxref(\"Map\")}}.\n\nThis method is useful when you need to group information that is related to a particular object that might potentially change over time. This is because even if the object is modified, it will continue to work as a key to the returned `Map`. If you instead create a string representation for the object and use that as a grouping key in {{jsxref(\"Object.groupBy()\")}}, you must maintain the mapping between the original object and its representation as the object changes.\n\n> **Note:** To access the groups in the returned `Map`, you must use the same object that was originally used as a key in the `Map` (although you may modify its properties). You can't use another object that just happens to have the same name and properties.\n\n`Map.groupBy` does not read the value of `this`. It can be called on any object and a new {{jsxref(\"Map\")}} instance will be returned.\n\n## Examples\n\n### Using Map.groupBy()\n\nFirst we define an array containing objects representing an inventory of different foodstuffs. Each food has a `type` and a `quantity`.\n\n```js\nconst inventory = [\n  { name: \"asparagus\", type: \"vegetables\", quantity: 9 },\n  { name: \"bananas\", type: \"fruit\", quantity: 5 },\n  { name: \"goat\", type: \"meat\", quantity: 23 },\n  { name: \"cherries\", type: \"fruit\", quantity: 12 },\n  { name: \"fish\", type: \"meat\", quantity: 22 },\n];\n```\n\nThe code below uses `Map.groupBy()` with an arrow function that returns the object keys named `restock` or `sufficient`, depending on whether the element has `quantity < 6`. The returned `result` object is a `Map` so we need to call `get()` with the key to obtain the array.\n\n```js\nconst restock = { restock: true };\nconst sufficient = { restock: false };\nconst result = Map.groupBy(inventory, ({ quantity }) =>\n  quantity < 6 ? restock : sufficient,\n);\nconsole.log(result.get(restock));\n// [{ name: \"bananas\", type: \"fruit\", quantity: 5 }]\n```\n\nNote that the function argument `{ quantity }` is a basic example of [object destructuring syntax for function arguments](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#unpacking_properties_from_objects_passed_as_a_function_parameter). This unpacks the `quantity` property of an object passed as a parameter, and assigns it to a variable named `quantity` in the body of the function. This is a very succinct way to access the relevant values of elements within a function.\n\nThe key to a `Map` can be modified and still used. However you can't recreate the key and still use it. For this reason it is important that anything that needs to use the map keeps a reference to its keys.\n\n```js\n// The key can be modified and still used\nrestock[\"fast\"] = true;\nconsole.log(result.get(restock));\n// [{ name: \"bananas\", type: \"fruit\", quantity: 5 }]\n\n// A new key can't be used, even if it has the same structure!\nconst restock2 = { restock: true };\nconsole.log(result.get(restock2)); // undefined\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Map.groupBy` in `core-js`](https://github.com/zloirock/core-js#array-grouping)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array.prototype.reduce()\")}}\n- {{jsxref(\"Map/Map\", \"Map()\")}}\n- {{jsxref(\"Object.groupBy()\")}}\n"
    },
    "has": {
      "index.md": "---\ntitle: Map.prototype.has()\nslug: Web/JavaScript/Reference/Global_Objects/Map/has\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Map.has\n---\n\n{{JSRef}}\n\nThe **`has()`** method of {{jsxref(\"Map\")}} instances returns a boolean indicating whether an element with the\nspecified key exists in this map or not.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-has.html\")}}\n\n## Syntax\n\n```js-nolint\nhas(key)\n```\n\n### Parameters\n\n- `key`\n  - : The key of the element to test for presence in the `Map` object.\n\n### Return value\n\n`true` if an element with the specified key exists in the `Map` object;\notherwise `false`.\n\n## Examples\n\n### Using has()\n\n```js\nconst myMap = new Map();\nmyMap.set(\"bar\", \"foo\");\n\nconsole.log(myMap.has(\"bar\")); // true\nconsole.log(myMap.has(\"baz\")); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Map\")}}\n- {{jsxref(\"Map.prototype.set()\")}}\n- {{jsxref(\"Map.prototype.get()\")}}\n"
    },
    "index.md": "---\ntitle: Map\nslug: Web/JavaScript/Reference/Global_Objects/Map\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Map\n---\n\n{{JSRef}}\n\nThe **`Map`** object holds key-value pairs and remembers the original insertion order of the keys.\nAny value (both objects and {{Glossary(\"Primitive\", \"primitive values\")}}) may be used as either a key or a value.\n\n{{EmbedInteractiveExample(\"pages/js/map.html\", \"taller\")}}\n\n## Description\n\n`Map` objects are collections of key-value pairs. A key in the `Map` **may only occur once**; it is unique in the `Map`'s collection. A `Map` object is iterated by key-value pairs — a {{jsxref(\"Statements/for...of\", \"for...of\")}} loop returns a 2-member array of `[key, value]` for each iteration. Iteration happens in _insertion order_, which corresponds to the order in which each key-value pair was first inserted into the map by the [`set()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set) method (that is, there wasn't a key with the same value already in the map when `set()` was called).\n\nThe specification requires maps to be implemented \"that, on average, provide access times that are sublinear on the number of elements in the collection\". Therefore, it could be represented internally as a hash table (with O(1) lookup), a search tree (with O(log(N)) lookup), or any other data structure, as long as the complexity is better than O(N).\n\n### Key equality\n\nValue equality is based on the [SameValueZero](/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality) algorithm. (It used to use [SameValue](/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is), which treated `0` and `-0` as different. Check [browser compatibility](#browser_compatibility).) This means {{jsxref(\"NaN\")}} is considered the same as `NaN` (even though `NaN !== NaN`) and all other values are considered equal according to the semantics of the `===` operator.\n\n### Objects vs. Maps\n\n{{jsxref(\"Object\")}} is similar to `Map`—both let you set keys to\nvalues, retrieve those values, delete keys, and detect whether something is\nstored at a key. For this reason (and because there were no built-in\nalternatives), `Object` has been used as `Map` historically.\n\nHowever, there are important differences that make `Map` preferable in some\ncases:\n\n<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"row\"></th>\n      <th scope=\"col\">Map</th>\n      <th scope=\"col\">Object</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Accidental Keys</th>\n      <td>\n        A <code>Map</code> does not contain any keys by default. It only\n        contains what is explicitly put into it.\n      </td>\n      <td>\n        <p>\n          An <code>Object</code> has a prototype, so it contains default keys\n          that could collide with your own keys if you're not careful.\n        </p>\n        <div class=\"notecard note\">\n          <p>\n            <strong>Note:</strong> This can be bypassed by using\n            {{jsxref(\"Object.create\", \"Object.create(null)\")}},\n            but this is seldom done.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Security</th>\n      <td>\n        A <code>Map</code> is safe to use with user-provided keys and values.\n      </td>\n      <td>\n        <p>\n          Setting user-provided key-value pairs on an <code>Object</code> may allow\n          an attacker to override the object's prototype, which can lead to\n          <a href=\"https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/the-dangers-of-square-bracket-notation.md\">\n            object injection attacks\n          </a>. Like the accidental keys issue, this can also be mitigated by using\n          a <code>null</code>-prototype object.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Key Types</th>\n      <td>\n        A <code>Map</code>'s keys can be any value (including functions,\n        objects, or any primitive).\n      </td>\n      <td>\n        The keys of an <code>Object</code> must be either a\n        {{jsxref(\"String\")}} or a {{jsxref(\"Symbol\")}}.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Key Order</th>\n      <td>\n        <p>\n          The keys in <code>Map</code> are ordered in a simple, straightforward\n          way: A <code>Map</code> object iterates entries, keys, and values in\n          the order of entry insertion.\n        </p>\n      </td>\n      <td>\n        <p>\n          Although the keys of an ordinary <code>Object</code> are ordered now,\n          this was not always the case, and the order is complex. As a result,\n          it's best not to rely on property order.\n        </p>\n        <p>\n          The order was first defined for own properties only in ECMAScript\n          2015; ECMAScript 2020 defines order for inherited properties as well.\n          But note that no single mechanism\n          iterates\n          <strong>all</strong> of an object's properties; the various mechanisms\n          each include different subsets of properties.\n          ({{jsxref(\"Statements/for...in\",\n          \"for-in\")}}\n          includes only enumerable string-keyed properties;\n          {{jsxref(\"Object.keys\")}} includes only own, enumerable,\n          string-keyed properties;\n          {{jsxref(\"Object.getOwnPropertyNames\")}} includes own,\n          string-keyed properties even if non-enumerable;\n          {{jsxref(\"Object.getOwnPropertySymbols\")}} does the same\n          for just <code>Symbol</code>-keyed properties, etc.)\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\"><p>Size</p></th>\n      <td>\n        The number of items in a <code>Map</code> is easily retrieved from its\n        {{jsxref(\"Map.prototype.size\", \"size\")}} property.\n      </td>\n      <td>\n        Determining the number of items in an <code>Object</code> is more roundabout and less efficient. A common way to do it is through the {{jsxref(\"Array/length\", \"length\")}} of the array returned from {{jsxref(\"Object.keys()\")}}.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Iteration</th>\n      <td>\n        A <code>Map</code> is an\n        <a href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\"\n          >iterable</a\n        >, so it can be directly iterated.\n      </td>\n      <td>\n        <p>\n          <code>Object</code> does not implement an <a\n            href=\"/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\"\n            >iteration protocol</a\n          >, and so objects are not directly iterable using the JavaScript\n          <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\n            >for...of</a\n          >\n          statement (by default).\n        </p>\n        <div class=\"notecard note\">\n          <p><strong>Note:</strong></p>\n          <ul>\n            <li>\n              An object can implement the iteration protocol, or you can get an\n              iterable for an object using <a\n                href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"\n                ><code>Object.keys</code></a\n              > or <a\n                href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"\n                ><code>Object.entries</code></a\n              >.\n            </li>\n            <li>\n              The\n              <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\n                >for...in</a\n              >\n              statement allows you to iterate over the\n              <em>enumerable</em> properties of an object.\n            </li>\n          </ul>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Performance</th>\n      <td>\n        <p>\n          Performs better in scenarios involving frequent additions and removals\n          of key-value pairs.\n        </p>\n      </td>\n      <td>\n        <p>\n          Not optimized for frequent additions and removals of key-value pairs.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Serialization and parsing</th>\n      <td>\n        <p>No native support for serialization or parsing.</p>\n        <p>\n          (But you can build your own serialization and parsing support for\n          <code>Map</code> by using {{jsxref(\"JSON.stringify()\")}}\n          with its <em>replacer</em> argument, and by using\n          {{jsxref(\"JSON.parse()\")}} with its\n          <em>reviver</em> argument. See the Stack Overflow question\n          <a href=\"https://stackoverflow.com/q/29085197/\"\n            >How do you JSON.stringify an ES6 Map?</a\n          >).\n        </p>\n      </td>\n      <td>\n        <p>\n          Native support for serialization from {{jsxref(\"Object\")}} to\n          JSON, using {{jsxref(\"JSON.stringify()\")}}.\n        </p>\n        <p>\n          Native support for parsing from JSON to {{jsxref(\"Object\")}},\n          using {{jsxref(\"JSON.parse()\")}}.\n        </p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n### Setting object properties\n\nSetting Object properties works for Map objects as well, and can cause\nconsiderable confusion.\n\nTherefore, this appears to work in a way:\n\n```js example-bad\nconst wrongMap = new Map();\nwrongMap[\"bla\"] = \"blaa\";\nwrongMap[\"bla2\"] = \"blaaa2\";\n\nconsole.log(wrongMap); // Map { bla: 'blaa', bla2: 'blaaa2' }\n```\n\nBut that way of setting a property does not interact with the Map data\nstructure. It uses the feature of the generic object. The value of 'bla' is not\nstored in the Map for queries. Other operations on the data fail:\n\n```js example-bad\nwrongMap.has(\"bla\"); // false\nwrongMap.delete(\"bla\"); // false\nconsole.log(wrongMap); // Map { bla: 'blaa', bla2: 'blaaa2' }\n```\n\nThe correct usage for storing data in the Map is through the `set(key, value)`\nmethod.\n\n```js example-good\nconst contacts = new Map();\ncontacts.set(\"Jessie\", { phone: \"213-555-1234\", address: \"123 N 1st Ave\" });\ncontacts.has(\"Jessie\"); // true\ncontacts.get(\"Hilary\"); // undefined\ncontacts.set(\"Hilary\", { phone: \"617-555-4321\", address: \"321 S 2nd St\" });\ncontacts.get(\"Jessie\"); // {phone: \"213-555-1234\", address: \"123 N 1st Ave\"}\ncontacts.delete(\"Raymond\"); // false\ncontacts.delete(\"Jessie\"); // true\nconsole.log(contacts.size); // 1\n```\n\n### Map-like browser APIs\n\n**Browser `Map`-like objects** (or \"maplike objects\") are [Web API](/en-US/docs/Web/API) interfaces that behave in many ways like a `Map`.\n\nJust like `Map`, entries can be iterated in the same order that they were added to the object.\n`Map`-like objects and `Map` also have properties and methods that share the same name and behavior.\nHowever unlike `Map` they only allow specific predefined types for the keys and values of each entry.\n\nThe allowed types are set in the specification IDL definition.\nFor example, {{domxref(\"RTCStatsReport\")}} is a `Map`-like object that must use strings for keys and objects for values.\nThis is defined in the specification IDL below:\n\n```webidl\ninterface RTCStatsReport {\n  readonly maplike<DOMString, object>;\n};\n```\n\n`Map`-like objects are either read-only or read-writable (see the `readonly` keyword in the IDL above).\n\n- Read-only `Map`-like objects have the property [`size`](#map.prototype.size), and the methods: [`entries()`](#map.prototype.entries), [`forEach()`](#map.prototype.foreach), [`get()`](#map.prototype.get), [`has()`](#map.prototype.has), [`keys()`](#map.prototype.keys), [`values()`](#map.prototype.values), and [`@@iterator`](#map.prototypeiterator).\n- Writeable `Map`-like objects additionally have the methods: [`clear()`](#map.prototype.clear), [`delete()`](#map.prototype.delete), and [`set()`](#map.prototype.set).\n\nThe methods and properties have the same behavior as the equivalent entities in `Map`, except for the restriction on the types of the keys and values.\n\nThe following are examples of read-only `Map`-like browser objects:\n\n- {{domxref(\"AudioParamMap\")}}\n- {{domxref(\"RTCStatsReport\")}}\n- {{domxref(\"EventCounts\")}}\n- {{domxref(\"KeyboardLayoutMap\")}}\n- {{domxref(\"MIDIInputMap\")}}\n- {{domxref(\"MIDIOutputMap\")}}\n\n## Constructor\n\n- {{jsxref(\"Map/Map\", \"Map()\")}}\n  - : Creates a new `Map` object.\n\n## Static properties\n\n- {{jsxref(\"Map/@@species\", \"Map[@@species]\")}}\n  - : The constructor function that is used to create derived objects.\n\n## Static methods\n\n- {{jsxref(\"Map.groupBy()\")}}\n  - : Groups the elements of a given iterable using the values returned by a provided callback function. The final returned `Map` uses the unique values from the test function as keys, which can be used to get the array of elements in each group.\n\n## Instance properties\n\nThese properties are defined on `Map.prototype` and shared by all `Map` instances.\n\n- {{jsxref(\"Object/constructor\", \"Map.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Map` instances, the initial value is the {{jsxref(\"Map/Map\", \"Map\")}} constructor.\n- {{jsxref(\"Map.prototype.size\")}}\n  - : Returns the number of key/value pairs in the `Map` object.\n- `Map.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Map\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Map.prototype.clear()\")}}\n  - : Removes all key-value pairs from the `Map` object.\n- {{jsxref(\"Map.prototype.delete()\")}}\n  - : Returns `true` if an element in the `Map` object existed and has been\n    removed, or `false` if the element does not exist. `map.has(key)`\n    will return `false` afterwards.\n- {{jsxref(\"Map.prototype.entries()\")}}\n  - : Returns a new Iterator object that contains a two-member array of `[key, value]` for each element in the `Map` object in insertion order.\n- {{jsxref(\"Map.prototype.forEach()\")}}\n  - : Calls `callbackFn` once for each key-value pair present in the `Map` object, in insertion order. If a `thisArg` parameter is provided to `forEach`, it will be used as the `this` value for each callback.\n- {{jsxref(\"Map.prototype.get()\")}}\n  - : Returns the value associated to the passed key, or `undefined` if there is none.\n- {{jsxref(\"Map.prototype.has()\")}}\n  - : Returns a boolean indicating whether a value has been associated with the passed key in the `Map` object or not.\n- {{jsxref(\"Map.prototype.keys()\")}}\n  - : Returns a new Iterator object that contains the keys for each element in the `Map` object in insertion order.\n- {{jsxref(\"Map.prototype.set()\")}}\n  - : Sets the value for the passed key in the `Map` object. Returns the `Map` object.\n- {{jsxref(\"Map.prototype.values()\")}}\n  - : Returns a new Iterator object that contains the values for each element in the `Map` object in insertion order.\n- [`Map.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator)\n  - : Returns a new Iterator object that contains a two-member array of `[key, value]` for each element in the `Map` object in insertion order.\n\n## Examples\n\n### Using the Map object\n\n```js\nconst myMap = new Map();\n\nconst keyString = \"a string\";\nconst keyObj = {};\nconst keyFunc = function () {};\n\n// setting the values\nmyMap.set(keyString, \"value associated with 'a string'\");\nmyMap.set(keyObj, \"value associated with keyObj\");\nmyMap.set(keyFunc, \"value associated with keyFunc\");\n\nconsole.log(myMap.size); // 3\n\n// getting the values\nconsole.log(myMap.get(keyString)); // \"value associated with 'a string'\"\nconsole.log(myMap.get(keyObj)); // \"value associated with keyObj\"\nconsole.log(myMap.get(keyFunc)); // \"value associated with keyFunc\"\n\nconsole.log(myMap.get(\"a string\")); // \"value associated with 'a string'\", because keyString === 'a string'\nconsole.log(myMap.get({})); // undefined, because keyObj !== {}\nconsole.log(myMap.get(function () {})); // undefined, because keyFunc !== function () {}\n```\n\n### Using NaN as Map keys\n\n{{jsxref(\"NaN\")}} can also be used as a key. Even though every `NaN` is\nnot equal to itself (`NaN !== NaN` is true), the following example works because\n`NaN`s are indistinguishable from each other:\n\n```js\nconst myMap = new Map();\nmyMap.set(NaN, \"not a number\");\n\nmyMap.get(NaN);\n// \"not a number\"\n\nconst otherNaN = Number(\"foo\");\nmyMap.get(otherNaN);\n// \"not a number\"\n```\n\n### Iterating Map with for...of\n\nMaps can be iterated using a `for...of` loop:\n\n```js\nconst myMap = new Map();\nmyMap.set(0, \"zero\");\nmyMap.set(1, \"one\");\n\nfor (const [key, value] of myMap) {\n  console.log(`${key} = ${value}`);\n}\n// 0 = zero\n// 1 = one\n\nfor (const key of myMap.keys()) {\n  console.log(key);\n}\n// 0\n// 1\n\nfor (const value of myMap.values()) {\n  console.log(value);\n}\n// zero\n// one\n\nfor (const [key, value] of myMap.entries()) {\n  console.log(`${key} = ${value}`);\n}\n// 0 = zero\n// 1 = one\n```\n\n### Iterating Map with forEach()\n\nMaps can be iterated using the\n{{jsxref(\"Map/forEach\", \"forEach()\")}} method:\n\n```js\nmyMap.forEach((value, key) => {\n  console.log(`${key} = ${value}`);\n});\n// 0 = zero\n// 1 = one\n```\n\n### Relation with Array objects\n\n```js\nconst kvArray = [\n  [\"key1\", \"value1\"],\n  [\"key2\", \"value2\"],\n];\n\n// Use the regular Map constructor to transform a 2D key-value Array into a map\nconst myMap = new Map(kvArray);\n\nconsole.log(myMap.get(\"key1\")); // \"value1\"\n\n// Use Array.from() to transform a map into a 2D key-value Array\nconsole.log(Array.from(myMap)); // Will show you exactly the same Array as kvArray\n\n// A succinct way to do the same, using the spread syntax\nconsole.log([...myMap]);\n\n// Or use the keys() or values() iterators, and convert them to an array\nconsole.log(Array.from(myMap.keys())); // [\"key1\", \"key2\"]\n```\n\n### Cloning and merging Maps\n\nJust like `Array`s, `Map`s can be cloned:\n\n```js\nconst original = new Map([[1, \"one\"]]);\n\nconst clone = new Map(original);\n\nconsole.log(clone.get(1)); // one\nconsole.log(original === clone); // false (useful for shallow comparison)\n```\n\n> **Note:** Keep in mind that _the data itself_ is not cloned.\n\nMaps can be merged, maintaining key uniqueness:\n\n```js\nconst first = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [3, \"three\"],\n]);\n\nconst second = new Map([\n  [1, \"uno\"],\n  [2, \"dos\"],\n]);\n\n// Merge two maps. The last repeated key wins.\n// Spread syntax essentially converts a Map to an Array\nconst merged = new Map([...first, ...second]);\n\nconsole.log(merged.get(1)); // uno\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\n\nMaps can be merged with Arrays, too:\n\n```js\nconst first = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [3, \"three\"],\n]);\n\nconst second = new Map([\n  [1, \"uno\"],\n  [2, \"dos\"],\n]);\n\n// Merge maps with an array. The last repeated key wins.\nconst merged = new Map([...first, ...second, [1, \"eins\"]]);\n\nconsole.log(merged.get(1)); // eins\nconsole.log(merged.get(2)); // dos\nconsole.log(merged.get(3)); // three\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill for `Map` in `core-js`](https://github.com/zloirock/core-js#map)\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"WeakMap\")}}\n- {{jsxref(\"WeakSet\")}}\n",
    "keys": {
      "index.md": "---\ntitle: Map.prototype.keys()\nslug: Web/JavaScript/Reference/Global_Objects/Map/keys\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Map.keys\n---\n\n{{JSRef}}\n\nThe **`keys()`** method of {{jsxref(\"Map\")}} instances returns a new _[map iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the keys for each element in this map in insertion order.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-keys.html\")}}\n\n## Syntax\n\n```js-nolint\nkeys()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Examples\n\n### Using keys()\n\n```js\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nconst mapIter = myMap.keys();\n\nconsole.log(mapIter.next().value); // \"0\"\nconsole.log(mapIter.next().value); // 1\nconsole.log(mapIter.next().value); // {}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Map.prototype.entries()\")}}\n- {{jsxref(\"Map.prototype.values()\")}}\n"
    },
    "map": {
      "index.md": "---\ntitle: Map() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Map/Map\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Map.Map\n---\n\n{{JSRef}}\n\nThe **`Map()`** constructor creates {{jsxref(\"Map\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew Map()\nnew Map(iterable)\n```\n\n> **Note:** `Map()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `iterable` {{optional_inline}}\n  - : An {{jsxref(\"Array\")}} or other\n    [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) object\n    whose elements are key-value pairs. (For example, arrays with two elements,\n    such as `[[ 1, 'one' ],[ 2, 'two' ]]`.) Each key-value pair is added to the\n    new `Map`.\n\n## Examples\n\n### Creating a new Map\n\n```js\nconst myMap = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [3, \"three\"],\n]);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill for `Map` in `core-js`](https://github.com/zloirock/core-js#map)\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"WeakMap\")}}\n- {{jsxref(\"WeakSet\")}}\n"
    },
    "set": {
      "index.md": "---\ntitle: Map.prototype.set()\nslug: Web/JavaScript/Reference/Global_Objects/Map/set\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Map.set\n---\n\n{{JSRef}}\n\nThe **`set()`** method of {{jsxref(\"Map\")}} instances adds or updates an entry in this map with a specified key and a value.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-set.html\")}}\n\n## Syntax\n\n```js-nolint\nset(key, value)\n```\n\n### Parameters\n\n- `key`\n  - : The key of the element to add to the `Map` object. The key may be any [JavaScript type](/en-US/docs/Web/JavaScript/Data_structures) (any [primitive value](/en-US/docs/Web/JavaScript/Data_structures#primitive_values) or any type of [JavaScript object](/en-US/docs/Web/JavaScript/Data_structures#objects)).\n- `value`\n  - : The value of the element to add to the `Map` object. The value may be any [JavaScript type](/en-US/docs/Web/JavaScript/Data_structures) (any [primitive value](/en-US/docs/Web/JavaScript/Data_structures#primitive_values) or any type of [JavaScript object](/en-US/docs/Web/JavaScript/Data_structures#objects)).\n\n### Return value\n\nThe `Map` object.\n\n## Examples\n\n### Using set()\n\n```js\nconst myMap = new Map();\n\n// Add new elements to the map\nmyMap.set(\"bar\", \"foo\");\nmyMap.set(1, \"foobar\");\n\n// Update an element in the map\nmyMap.set(\"bar\", \"baz\");\n```\n\n### Using the set() with chaining\n\nSince the `set()` method returns back the same `Map` object, you can chain the\nmethod call like below:\n\n```js\n// Add new elements to the map with chaining.\nmyMap.set(\"bar\", \"foo\").set(1, \"foobar\").set(2, \"baz\");\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Map\")}}\n- {{jsxref(\"Map.prototype.get()\")}}\n- {{jsxref(\"Map.prototype.has()\")}}\n"
    },
    "size": {
      "index.md": "---\ntitle: Map.prototype.size\nslug: Web/JavaScript/Reference/Global_Objects/Map/size\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Map.size\n---\n\n{{JSRef}}\n\nThe **`size`** accessor property of {{jsxref(\"Map\")}} instances returns the number of elements in this map.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-size.html\")}}\n\n## Description\n\nThe value of `size` is an integer representing how many entries the `Map` object\nhas. A set accessor function for `size` is `undefined`; you can not change this\nproperty.\n\n## Examples\n\n### Using size\n\n```js\nconst myMap = new Map();\nmyMap.set(\"a\", \"alpha\");\nmyMap.set(\"b\", \"beta\");\nmyMap.set(\"g\", \"gamma\");\n\nconsole.log(myMap.size); // 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Map\")}}\n"
    },
    "values": {
      "index.md": "---\ntitle: Map.prototype.values()\nslug: Web/JavaScript/Reference/Global_Objects/Map/values\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Map.values\n---\n\n{{JSRef}}\n\nThe **`values()`** method of {{jsxref(\"Map\")}} instances returns a new _[map iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the values for each element in this map in insertion order.\n\n{{EmbedInteractiveExample(\"pages/js/map-prototype-values.html\")}}\n\n## Syntax\n\n```js-nolint\nvalues()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Examples\n\n### Using values()\n\n```js\nconst myMap = new Map();\nmyMap.set(\"0\", \"foo\");\nmyMap.set(1, \"bar\");\nmyMap.set({}, \"baz\");\n\nconst mapIter = myMap.values();\n\nconsole.log(mapIter.next().value); // \"foo\"\nconsole.log(mapIter.next().value); // \"bar\"\nconsole.log(mapIter.next().value); // \"baz\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Map.prototype.entries()\")}}\n- {{jsxref(\"Map.prototype.keys()\")}}\n"
    }
  },
  "math": {
    "abs": {
      "index.md": "---\ntitle: Math.abs()\nslug: Web/JavaScript/Reference/Global_Objects/Math/abs\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.abs\n---\n\n{{JSRef}}\n\nThe **`Math.abs()`** static method returns the absolute value of a number.\n\n{{EmbedInteractiveExample(\"pages/js/math-abs.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.abs(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe absolute value of `x`. If `x` is negative (including `-0`), returns `-x`. Otherwise, returns `x`. The result is therefore always a positive number or `0`.\n\n## Description\n\nBecause `abs()` is a static method of `Math`, you always use it as `Math.abs()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.abs()\n\n```js\nMath.abs(-Infinity); // Infinity\nMath.abs(-1); // 1\nMath.abs(-0); // 0\nMath.abs(0); // 0\nMath.abs(1); // 1\nMath.abs(Infinity); // Infinity\n```\n\n### Coercion of parameter\n\n`Math.abs()` [coerces its parameter to a number](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion). Non-coercible values will become `NaN`, making `Math.abs()` also return `NaN`.\n\n```js\nMath.abs(\"-1\"); // 1\nMath.abs(-2); // 2\nMath.abs(null); // 0\nMath.abs(\"\"); // 0\nMath.abs([]); // 0\nMath.abs([2]); // 2\nMath.abs([1, 2]); // NaN\nMath.abs({}); // NaN\nMath.abs(\"string\"); // NaN\nMath.abs(); // NaN\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.ceil()\")}}\n- {{jsxref(\"Math.floor()\")}}\n- {{jsxref(\"Math.round()\")}}\n- {{jsxref(\"Math.sign()\")}}\n- {{jsxref(\"Math.trunc()\")}}\n"
    },
    "acos": {
      "index.md": "---\ntitle: Math.acos()\nslug: Web/JavaScript/Reference/Global_Objects/Math/acos\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.acos\n---\n\n{{JSRef}}\n\nThe **`Math.acos()`** static method returns the inverse cosine (in radians) of a number. That is,\n\n<math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mrow><mo>−</mo><mn>1</mn></mrow><mo>,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚌𝚘𝚜</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arccos</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique&nbsp;</mtext><mi>y</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo>,</mo><mi>π</mi><mo stretchy=\"false\">]</mo><mtext>&nbsp;such that&nbsp;</mtext><mo lspace=\"0em\" rspace=\"0em\">cos</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\in [{-1}, 1],\\;\\mathtt{\\operatorname{Math.acos}(x)} = \\arccos(x) = \\text{the unique } y \\in [0, \\pi] \\text{ such that } \\cos(y) = x</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-acos.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.acos(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number between -1 and 1, inclusive, representing the angle's cosine value.\n\n### Return value\n\nThe inverse cosine (angle in radians between 0 and π, inclusive) of `x`. If `x` is less than -1 or greater than 1, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nBecause `acos()` is a static method of `Math`, you always use it as `Math.acos()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.acos()\n\n```js\nMath.acos(-2); // NaN\nMath.acos(-1); // 3.141592653589793 (π)\nMath.acos(0); // 1.5707963267948966 (π/2)\nMath.acos(0.5); // 1.0471975511965979 (π/3)\nMath.acos(1); // 0\nMath.acos(2); // NaN\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.asin()\")}}\n- {{jsxref(\"Math.atan()\")}}\n- {{jsxref(\"Math.atan2()\")}}\n- {{jsxref(\"Math.cos()\")}}\n- {{jsxref(\"Math.sin()\")}}\n- {{jsxref(\"Math.tan()\")}}\n"
    },
    "acosh": {
      "index.md": "---\ntitle: Math.acosh()\nslug: Web/JavaScript/Reference/Global_Objects/Math/acosh\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.acosh\n---\n\n{{JSRef}}\n\nThe **`Math.acosh()`** static method returns the inverse hyperbolic cosine of a number. That is,\n\n<math display=\"block\"><semantics><mtable columnalign=\"right left right left right left right left right left\" columnspacing=\"0em\" displaystyle=\"true\"><mtr><mtd><mo>∀</mo><mi>x</mi><mo>≥</mo><mn>1</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚌𝚘𝚜𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow></mtd><mtd><mo>=</mo><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">arcosh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique&nbsp;</mtext><mi>y</mi><mo>≥</mo><mn>0</mn><mtext>&nbsp;such that&nbsp;</mtext><mo lspace=\"0em\" rspace=\"0em\">cosh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mtd></mtr><mtr><mtd></mtd><mtd><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mrow><mo>(</mo><mrow><mi>x</mi><mo>+</mo><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>1</mn></mrow></msqrt></mrow><mo>)</mo></mrow></mtd></mtr></mtable><annotation encoding=\"TeX\">\\begin{aligned}\\forall x \\geq 1,\\;\\mathtt{\\operatorname{Math.acosh}(x)} &amp;= \\operatorname{arcosh}(x) = \\text{the unique } y \\geq 0 \\text{ such that } \\cosh(y) = x\\\\&amp;= \\ln\\left(x + \\sqrt{x^2 - 1}\\right)\\end{aligned}</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-acosh.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.acosh(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number greater than or equal to 1.\n\n### Return value\n\nThe inverse hyperbolic cosine of `x`. If `x` is less than 1, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nBecause `acosh()` is a static method of `Math`, you always use it as `Math.acosh()`, rather than as a method of a `Math` object you created (`Math` is no constructor).\n\n## Examples\n\n### Using Math.acosh()\n\n```js\nMath.acosh(0); // NaN\nMath.acosh(1); // 0\nMath.acosh(2); // 1.3169578969248166\nMath.acosh(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.acosh` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.asinh()\")}}\n- {{jsxref(\"Math.atanh()\")}}\n- {{jsxref(\"Math.cosh()\")}}\n- {{jsxref(\"Math.sinh()\")}}\n- {{jsxref(\"Math.tanh()\")}}\n"
    },
    "asin": {
      "index.md": "---\ntitle: Math.asin()\nslug: Web/JavaScript/Reference/Global_Objects/Math/asin\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.asin\n---\n\n{{JSRef}}\n\nThe **`Math.asin()`** static method returns the inverse sine (in radians) of a number. That is,\n\n<math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mrow><mo>−</mo><mn>1</mn></mrow><mo>,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚜𝚒𝚗</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arcsin</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique&nbsp;</mtext><mi>y</mi><mo>∊</mo><mrow><mo>[</mo><mrow><mo>−</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo>,</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><mo>]</mo></mrow><mtext>&nbsp;such that&nbsp;</mtext><mo lspace=\"0em\" rspace=\"0em\">sin</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\in [{-1}, 1],\\;\\mathtt{\\operatorname{Math.asin}(x)} = \\arcsin(x) = \\text{the unique } y \\in \\left[-\\frac{\\pi}{2}, \\frac{\\pi}{2}\\right] \\text{ such that } \\sin(y) = x</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-asin.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.asin(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number between -1 and 1, inclusive, representing the angle's sine value.\n\n### Return value\n\nThe inverse sine (angle in radians between <math><semantics><mrow><mo>-</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">-\\frac{\\pi}{2}</annotation></semantics></math> and <math><semantics><mfrac><mi>π</mi><mn>2</mn></mfrac><annotation encoding=\"TeX\">\\frac{\\pi}{2}</annotation></semantics></math>, inclusive) of `x`. If `x` is less than -1 or greater than 1, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nBecause `asin()` is a static method of `Math`, you always use it as `Math.asin()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.asin()\n\n```js\nMath.asin(-2); // NaN\nMath.asin(-1); // -1.5707963267948966 (-π/2)\nMath.asin(-0); // -0\nMath.asin(0); // 0\nMath.asin(0.5); // 0.5235987755982989 (π/6)\nMath.asin(1); // 1.5707963267948966 (π/2)\nMath.asin(2); // NaN\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.acos()\")}}\n- {{jsxref(\"Math.atan()\")}}\n- {{jsxref(\"Math.atan2()\")}}\n- {{jsxref(\"Math.cos()\")}}\n- {{jsxref(\"Math.sin()\")}}\n- {{jsxref(\"Math.tan()\")}}\n"
    },
    "asinh": {
      "index.md": "---\ntitle: Math.asinh()\nslug: Web/JavaScript/Reference/Global_Objects/Math/asinh\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.asinh\n---\n\n{{JSRef}}\n\nThe **`Math.asinh()`** static method returns the inverse hyperbolic sine of a number. That is,\n\n<math display=\"block\"><semantics><mtable columnalign=\"right left right left right left right left right left\" columnspacing=\"0em\" displaystyle=\"true\"><mtr><mtd><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚜𝚒𝚗𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow></mtd><mtd><mo>=</mo><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">arsinh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique&nbsp;</mtext><mi>y</mi><mtext>&nbsp;such that&nbsp;</mtext><mo lspace=\"0em\" rspace=\"0em\">sinh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mtd></mtr><mtr><mtd></mtd><mtd><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mrow><mo>(</mo><mrow><mi>x</mi><mo>+</mo><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn></mrow></msqrt></mrow><mo>)</mo></mrow></mtd></mtr></mtable><annotation encoding=\"TeX\">\\begin{aligned}\\mathtt{\\operatorname{Math.asinh}(x)} &amp;= \\operatorname{arsinh}(x) = \\text{the unique } y \\text{ such that } \\sinh(y) = x \\\\&amp;= \\ln\\left(x + \\sqrt{x^2 + 1}\\right)\\end{aligned}\n</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-asinh.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.asinh(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe inverse hyperbolic sine of `x`.\n\n## Description\n\nBecause `asinh()` is a static method of `Math`, you always use it as `Math.asinh()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.asinh()\n\n```js\nMath.asinh(-Infinity); // -Infinity\nMath.asinh(-1); // -0.881373587019543\nMath.asinh(-0); // -0\nMath.asinh(0); // 0\nMath.asinh(1); // 0.881373587019543\nMath.asinh(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.asinh` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.acosh()\")}}\n- {{jsxref(\"Math.atanh()\")}}\n- {{jsxref(\"Math.cosh()\")}}\n- {{jsxref(\"Math.sinh()\")}}\n- {{jsxref(\"Math.tanh()\")}}\n"
    },
    "atan": {
      "index.md": "---\ntitle: Math.atan()\nslug: Web/JavaScript/Reference/Global_Objects/Math/atan\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.atan\n---\n\n{{JSRef}}\n\nThe **`Math.atan()`** static method returns the inverse tangent (in radians) of a number, that is\n\n<math display=\"block\"><semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚝𝚊𝚗</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arctan</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique&nbsp;</mtext><mi>y</mi><mo>∊</mo><mrow><mo>[</mo><mrow><mo>−</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo>,</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><mo>]</mo></mrow><mtext>&nbsp;such that&nbsp;</mtext><mo lspace=\"0em\" rspace=\"0em\">tan</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.atan}(x)} = \\arctan(x) = \\text{the unique } y \\in \\left[-\\frac{\\pi}{2}, \\frac{\\pi}{2}\\right] \\text{ such that } \\tan(y) = x</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-atan.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.atan(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe inverse tangent (angle in radians between <math><semantics><mrow><mo>-</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">-\\frac{\\pi}{2}</annotation></semantics></math> and <math><semantics><mfrac><mi>π</mi><mn>2</mn></mfrac><annotation encoding=\"TeX\">\\frac{\\pi}{2}</annotation></semantics></math>, inclusive) of `x`. If `x` is {{jsxref(\"Infinity\")}}, it returns <math><semantics><mfrac><mi>π</mi><mn>2</mn></mfrac><annotation encoding=\"TeX\">\\frac{\\pi}{2}</annotation></semantics></math>. If `x` is `-Infinity`, it returns <math><semantics><mrow><mo>-</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">-\\frac{\\pi}{2}</annotation></semantics></math>.\n\n## Description\n\nBecause `atan()` is a static method of `Math`, you always use it as `Math.atan()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.atan()\n\n```js\nMath.atan(-Infinity); // -1.5707963267948966 (-π/2)\nMath.atan(-0); // -0\nMath.atan(0); // 0\nMath.atan(1); // 0.7853981633974483  (π/4)\nMath.atan(Infinity); // 1.5707963267948966  (π/2)\n\n// The angle that the line (0,0) -- (x,y) forms with the x-axis in a Cartesian coordinate system\nconst theta = (x, y) => Math.atan(y / x);\n```\n\nNote that you may want to avoid the `theta` function and use {{jsxref(\"Math.atan2()\")}} instead, which has a wider range (between -π and π) and avoids outputting `NaN` for cases such as when `x` is `0`.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.acos()\")}}\n- {{jsxref(\"Math.asin()\")}}\n- {{jsxref(\"Math.atan2()\")}}\n- {{jsxref(\"Math.cos()\")}}\n- {{jsxref(\"Math.sin()\")}}\n- {{jsxref(\"Math.tan()\")}}\n"
    },
    "atan2": {
      "atan2.png": "�PNG\r\n\u001a\n\u0000\u0000\u0000\rIHDR\u0000\u0000\u0001,\u0000\u0000\u0001,\b\u0003\u0000\u0000\u0000N�~G\u0000\u0000\u0000\u0004gAMA\u0000\u0000��\u000b�a\u0005\u0000\u0000\u0000\u0001sRGB\u0000��\u001c�\u0000\u0000\u0002�PLTEGpL�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000��\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000=�\u0000\u001c<\u0000²\u0000L�\u0000\u0000\u0013\u0000\u0000\u0000\u0000��\u0000\u0000)\u0000\u0000V\u0000\u0000u\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000b\u0000\u0000�\u0000\u0000�\u0000\u0000C\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000�\u0000\u0000\u0000�\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0014\u0000�?\u0000\u0000$Ǫu\u0000\u0000\u0000�tRNS\u0000���\u0002\u0005��\u0001��\u0004�\u0003\u0011�\u0007*�f�\u001e�\u0015\u0001�\u001bo��\u0002\u0005��\u0017�\bCî\u0014��\u001d\r�:c� ���K�\n<>-\"�v�@�W�`(�\u0003�89S/\u0018�Z�Ll��\u0015S+��5W\u001a�\u0013��\f�F&\f3^�\rxA�\u001d�i\\q�\u000fo#2bn\u000f�gs�}���%�����;����\u000e�&}�s��÷��\u000bj��xM�|$���~|�Z� \b�^=��_�5�U!PEJ\u001cN⇒P\u00142��ݺ?(��O�\u001e��Id-�H���rX���0��K������ә����vb��������\u0000\u0000\b�IDATx���wt\u0014E\u001c\u0007�\\r^HHH�\u0012Bz\u0003)\t-!H\u0015\r�\u0014��Q@�W\u0005D�H\u0011A�\t�\u001dAA�\u0014Q�\r)�����[~?�?��咽x������v��?��s���}�����ͮ\u0010�0����&\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001K\u000f�\u0019\t}�r\u0011Ѹ㶲���\u001d��^\t[��\u001a��;��OI�\tJ��եK\u0013\u0015��ƽ��z��a@$\u0011m�=�X�\u0018f?O\u0014�6V�����oL�\u0004���ؖn+��M1��\u001e�\u0019�R6\u0017U\u0014d�?'[�B\u001a�1V�R+\u0019��p�\u0007�\u0014���X0�ډ��i�u�k%s�O�����ٳ\u001dm\u0014o��\u001a\u001f\r[�*�\"o5~�����>�n��z��Pc��dH��\u001d��\u0018P��,�'�O�2��YӍX�S^���F�CG���\b�K�eE)$�-��.0Z�tz�s\u0012�>-\u0017WQ\u0013�w/5򔮦��\u001e��p\u0018���*\f��p/�_���M���t\u001e]���Nc��\u001d�w\t\u000b�Wû�\u0014��{�l���1�n��<E\u00134?���m�4$��\u001e�cFyVn�l�7V�\u001c�v�G9����*v9�lhռ�-�_����~]�*�\u0011V���\u0015�$#QX2�c�v_t\u0011�RɌ�|a٘��k\nŏ\u0005�Rb�\u0012}S\u0004,�8\u001b\u0013�\u0015�\u0019*�L\u001b�.\u0010�RKa�\u000f\u0002X*q��rE\u0001K%\u0011CcÅ�c\u001e֝Dˀ����*�5\u0003+`��.t\u0002K)���k.����;�\u0006\u000b`�\u001e\f�\t`��ˉD�C��\u001a��V�\u0007�R�d羥!�����~&��Rr�h��\u0000���s���Q\u0013;��5\u0002XJ���B����L�d`��G<���RJb\u0018Q�\b`)�>Qv3�Y�C�֎�\u0002X�i�W\u0000K%\u0017wr\n�Rc��\u0004\u001a\u0012\u0003,��C4�=��r�<}>\u0007�P)Ú\u0012�'��6\u001c�Og�\u0000K1\u0011\u0013\\\u0002X*\u0019�(�LM�\n\u001da�\u0002K-\u001dR��x\bX��Q��o~2\rX�g\u000fQ�ϙ��D`U\u0017�\u0004\u001b�\u001c�Yj�\u000e\u0002V�yl�\u0010\r�f^;\u0015X�2j�w�E[悥��:��#c�\u0017fz&1�\u0016XU&��Q�Ӣɳ�\u0017�\u0007V\u0015qO��]��Rj\u0015L\u0005�߸�K�]V�\u001f�\u001f�\r,i�M\u0019g��\u001c̔#���������\u0005u�O׵\u00196kT���\u0007�1w�;�f ��+t������\u0016��j?�/-��[�]ym[�NC��S���?q��j���c��%��?�k�a��]���4y�4�r�i|e�ʹǹ�nX\u0001�]޼��x厩+s�g�R\u001e��\u0019�V�z��\u001cٕwo�[v5\u000f,+�ɼN/��G��IN��S�T��-Z��ek�[��R�fE5\u0019\u0019`�奲ۊ�)��o�\u000e���\t����D��a��2�9�X�����7��:a�W�-��H~��`\u0013\u001br�FX3�콪�gR���ʛN�d�V߬�S�\u0006TWM�\r���pD����\u001a�w�jQ��݈�U?�2N�$v�����x?`�\r�p\u0007�]�P�<\".\u001ag��P�֯|x�C3<��JE\u0013�0?Q�u>�\u001c�ڋ�8]\u0013��B�iX\u000f1g\u001e�n�n�=\u0006>o��\u000e�����\u001flѠ\r�E�[�yɠ��XO=�\"\u001a\u0011�Q�� �9ލuI��_肋�|\u000e�Vƺ3�i�\u001f2?X��B�gD����\u0002����w��k_4G����/��|�g+�\"\"\u0000V�'Do\u0007�[�\u001b�����QX+��Y\rwv�,��&3/>\"��*���0\u0018\u0011�,&y@�RG��#���M\u000e\u0014�뇵�N\u0019\u001d��-�q+\r�T��^!�Y�i�w1�\u001bV�P��5y\b��r�0U3��D��5��\u000e�=�aՍu��! ]�\u001fѮ�ϯ���\u0007fY���\u0002V���\u0010*\\a�v�\u0007k#��ռB�\u000e\u001f�\u0007k^h�.�e2��\u0005��\u0010��C��:�\u0005�`�d\u0010u�\u0017J���W�����:%�W��1oH�\u0004K�B|+\\�%�su�zl�\t\u000f�x�y�\u0006X��2��\u0016\u000b��Y\u001f�=�rը���������\u0010��$�*ӓ8�\n�c].G����1�y�ձ\u0012�\u0007qG5P�[��76è��<\u0004df�;b��\nټ\u0007[�c�ci��d�\u001b��1\u0017X\u0019됃(֬:ӧq�\u0003��r�T�v\u0019Z\n��Z\u0016�=\u001a�4�2��a^iY,g'GS3_Aѝ�����BS\u001fI�ܢ��$ַ]̮�E��>Db}\u001fi�\u001bѮ�?\u0015�\nX�Y&���?�VŲ=er��3/\u000f�\u001f�������̮��S�~\n�\nQ�(\u0007X�`��fx[I�m�����׳\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX�\u0002\u0016�\u0010`\u0001\u000bX��\u000b�~bX��g\u001d\u0000\u0000\u0000\u0000IEND�B`�",
      "index.md": "---\ntitle: Math.atan2()\nslug: Web/JavaScript/Reference/Global_Objects/Math/atan2\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.atan2\n---\n\n{{JSRef}}\n\nThe **`Math.atan2()`** static method returns the angle in the plane (in radians) between the positive x-axis and the ray from (0, 0) to the point (x, y), for `Math.atan2(y, x)`.\n\n{{EmbedInteractiveExample(\"pages/js/math-atan2.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.atan2(y, x)\n```\n\n### Parameters\n\n- `y`\n  - : The y coordinate of the point.\n- `x`\n  - : The x coordinate of the point.\n\n### Return value\n\nThe angle in radians (between -π and π, inclusive) between the positive x-axis and the ray from (0, 0) to the point (x, y).\n\n## Description\n\nThe `Math.atan2()` method measures the counterclockwise angle θ, in radians, between the positive x-axis and the point `(x, y)`. Note that the arguments to this function pass the y-coordinate first and the x-coordinate second.\n\n![A simple diagram showing the angle returned by atan2(y, x)](atan2.png)\n\n`Math.atan2()` is passed separate `x` and `y` arguments, while [`Math.atan()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan) is passed the ratio of those two arguments. `Math.atan2(y, x)` differs from `Math.atan(y / x)` in the following cases:\n\n| `x`                  | `y`         | `Math.atan2(y, x)` | `Math.atan(y / x)` |\n| -------------------- | ----------- | ------------------ | ------------------ |\n| `Infinity`           | `Infinity`  | π / 4              | `NaN`              |\n| `Infinity`           | `-Infinity` | -π / 4             | `NaN`              |\n| `-Infinity`          | `Infinity`  | 3π / 4             | `NaN`              |\n| `-Infinity`          | `-Infinity` | -3π / 4            | `NaN`              |\n| 0                    | 0           | 0                  | `NaN`              |\n| 0                    | -0          | -0                 | `NaN`              |\n| < 0 (including `-0`) | 0           | π                  | 0                  |\n| < 0 (including `-0`) | -0          | -π                 | 0                  |\n| `-Infinity`          | > 0         | π                  | -0                 |\n| -0                   | > 0         | π / 2              | -π / 2             |\n| `-Infinity`          | < 0         | -π                 | 0                  |\n| -0                   | < 0         | -π / 2             | π / 2              |\n\nIn addition, for points in the second and third quadrants (`x < 0`), `Math.atan2()` would output an angle less than <math><semantics><mrow><mo>-</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">-\\frac{\\pi}{2}</annotation></semantics></math> or greater than <math><semantics><mfrac><mi>π</mi><mn>2</mn></mfrac><annotation encoding=\"TeX\">\\frac{\\pi}{2}</annotation></semantics></math>.\n\nBecause `atan2()` is a static method of `Math`, you always use it as `Math.atan2()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.atan2()\n\n```js\nMath.atan2(90, 15); // 1.4056476493802699\nMath.atan2(15, 90); // 0.16514867741462683\n```\n\n### Difference between Math.atan2(y, x) and Math.atan(y / x)\n\nThe following script prints all inputs that produce a difference between `Math.atan2(y, x)` and `Math.atan(y / x)`.\n\n```js\nconst formattedNumbers = new Map([\n  [-Math.PI, \"-π\"],\n  [(-3 * Math.PI) / 4, \"-3π/4\"],\n  [-Math.PI / 2, \"-π/2\"],\n  [-Math.PI / 4, \"-π/4\"],\n  [Math.PI / 4, \"π/4\"],\n  [Math.PI / 2, \"π/2\"],\n  [(3 * Math.PI) / 4, \"3π/4\"],\n  [Math.PI, \"π\"],\n  [-Infinity, \"-∞\"],\n  [Infinity, \"∞\"],\n]);\n\nfunction format(template, ...args) {\n  return String.raw(\n    { raw: template },\n    ...args.map((num) =>\n      (Object.is(num, -0)\n        ? \"-0\"\n        : formattedNumbers.get(num) ?? String(num)\n      ).padEnd(5),\n    ),\n  );\n}\n\nconsole.log(`| x     | y     | atan2 | atan  |\n|-------|-------|-------|-------|`);\n\nfor (const x of [-Infinity, -1, -0, 0, 1, Infinity]) {\n  for (const y of [-Infinity, -1, -0, 0, 1, Infinity]) {\n    const atan2 = Math.atan2(y, x);\n    const atan = Math.atan(y / x);\n    if (!Object.is(atan2, atan)) {\n      console.log(format`| ${x} | ${y} | ${atan2} | ${atan} |`);\n    }\n  }\n}\n```\n\nThe output is:\n\n```plain\n| x     | y     | atan2 | atan  |\n|-------|-------|-------|-------|\n| -∞    | -∞    | -3π/4 | NaN   |\n| -∞    | -1    | -π    | 0     |\n| -∞    | -0    | -π    | 0     |\n| -∞    | 0     | π     | -0    |\n| -∞    | 1     | π     | -0    |\n| -∞    | ∞     | 3π/4  | NaN   |\n| -1    | -∞    | -π/2  | π/2   |\n| -1    | -1    | -3π/4 | π/4   |\n| -1    | -0    | -π    | 0     |\n| -1    | 0     | π     | -0    |\n| -1    | 1     | 3π/4  | -π/4  |\n| -1    | ∞     | π/2   | -π/2  |\n| -0    | -∞    | -π/2  | π/2   |\n| -0    | -1    | -π/2  | π/2   |\n| -0    | -0    | -π    | NaN   |\n| -0    | 0     | π     | NaN   |\n| -0    | 1     | π/2   | -π/2  |\n| -0    | ∞     | π/2   | -π/2  |\n| 0     | -0    | -0    | NaN   |\n| 0     | 0     | 0     | NaN   |\n| ∞     | -∞    | -π/4  | NaN   |\n| ∞     | ∞     | π/4   | NaN   |\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.acos()\")}}\n- {{jsxref(\"Math.asin()\")}}\n- {{jsxref(\"Math.atan()\")}}\n- {{jsxref(\"Math.cos()\")}}\n- {{jsxref(\"Math.sin()\")}}\n- {{jsxref(\"Math.tan()\")}}\n"
    },
    "atanh": {
      "index.md": "---\ntitle: Math.atanh()\nslug: Web/JavaScript/Reference/Global_Objects/Math/atanh\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.atanh\n---\n\n{{JSRef}}\n\nThe **`Math.atanh()`** static method returns the inverse hyperbolic tangent of a number. That is,\n\n<math display=\"block\"><semantics><mtable columnalign=\"right left right left right left right left right left\" columnspacing=\"0em\" displaystyle=\"true\"><mtr><mtd><mo>∀</mo><mi>x</mi><mo>∊</mo><mo stretchy=\"false\">(</mo><mrow><mo>−</mo><mn>1</mn></mrow><mo>,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚊𝚝𝚊𝚗𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow></mtd><mtd><mo>=</mo><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">artanh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique&nbsp;</mtext><mi>y</mi><mtext>&nbsp;such that&nbsp;</mtext><mo lspace=\"0em\" rspace=\"0em\">tanh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mtd></mtr><mtr><mtd></mtd><mtd><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mspace width=\"0.16666666666666666em\"></mspace><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mrow><mo>(</mo><mfrac><mrow><mn>1</mn><mo>+</mo><mi>x</mi></mrow><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac><mo>)</mo></mrow></mtd></mtr></mtable><annotation encoding=\"TeX\">\\begin{aligned}\\forall x \\in ({-1}, 1),\\;\\mathtt{\\operatorname{Math.atanh}(x)} &amp;= \\operatorname{artanh}(x) = \\text{the unique } y \\text{ such that } \\tanh(y) = x \\\\&amp;= \\frac{1}{2}\\,\\ln\\left(\\frac{1+x}{1-x}\\right)\\end{aligned}\n</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-atanh.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.atanh(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number between -1 and 1, inclusive.\n\n### Return value\n\nThe inverse hyperbolic tangent of `x`. If `x` is 1, returns {{jsxref(\"Infinity\")}}. If `x` is -1, returns `-Infinity`. If `x` is less than -1 or greater than 1, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nBecause `atanh()` is a static method of `Math`, you always use it as `Math.atanh()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.atanh()\n\n```js\nMath.atanh(-2); // NaN\nMath.atanh(-1); // -Infinity\nMath.atanh(-0); // -0\nMath.atanh(0); // 0\nMath.atanh(0.5); // 0.5493061443340548\nMath.atanh(1); // Infinity\nMath.atanh(2); // NaN\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.atanh` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.acosh()\")}}\n- {{jsxref(\"Math.asinh()\")}}\n- {{jsxref(\"Math.cosh()\")}}\n- {{jsxref(\"Math.sinh()\")}}\n- {{jsxref(\"Math.tanh()\")}}\n"
    },
    "cbrt": {
      "index.md": "---\ntitle: Math.cbrt()\nslug: Web/JavaScript/Reference/Global_Objects/Math/cbrt\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.cbrt\n---\n\n{{JSRef}}\n\nThe **`Math.cbrt()`** static method returns the cube root of a number. That is\n\n<math display=\"block\"><semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚌𝚋𝚛𝚝</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mroot><mi>x</mi><mn>3</mn></mroot><mo>=</mo><mtext>the unique&nbsp;</mtext><mi>y</mi><mtext>&nbsp;such that&nbsp;</mtext><msup><mi>y</mi><mn>3</mn></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.cbrt}(x)} = \\sqrt[3]{x} = \\text{the unique } y \\text{ such that } y^3 = x</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-cbrt.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.cbrt(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe cube root of `x`.\n\n## Description\n\nBecause `cbrt()` is a static method of `Math`, you always use it as `Math.cbrt()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.cbrt()\n\n```js\nMath.cbrt(-Infinity); // -Infinity\nMath.cbrt(-1); // -1\nMath.cbrt(-0); // -0\nMath.cbrt(0); // 0\nMath.cbrt(1); // 1\nMath.cbrt(2); // 1.2599210498948732\nMath.cbrt(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.cbrt` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.pow()\")}}\n- {{jsxref(\"Math.sqrt()\")}}\n"
    },
    "ceil": {
      "index.md": "---\ntitle: Math.ceil()\nslug: Web/JavaScript/Reference/Global_Objects/Math/ceil\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.ceil\n---\n\n{{JSRef}}\n\nThe **`Math.ceil()`** static method always rounds up and returns the smallest integer greater than or equal to a given number.\n\n{{EmbedInteractiveExample(\"pages/js/math-ceil.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.ceil(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe smallest integer greater than or equal to `x`. It's the same value as [`-Math.floor(-x)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor).\n\n## Description\n\nBecause `ceil()` is a static method of `Math`, you always use it as `Math.ceil()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.ceil()\n\n```js\nMath.ceil(-Infinity); // -Infinity\nMath.ceil(-7.004); // -7\nMath.ceil(-4); // -4\nMath.ceil(-0.95); // -0\nMath.ceil(-0); // -0\nMath.ceil(0); // 0\nMath.ceil(0.95); // 1\nMath.ceil(4); // 4\nMath.ceil(7.004); // 8\nMath.ceil(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.abs()\")}}\n- {{jsxref(\"Math.floor()\")}}\n- {{jsxref(\"Math.round()\")}}\n- {{jsxref(\"Math.sign()\")}}\n- {{jsxref(\"Math.trunc()\")}}\n"
    },
    "clz32": {
      "index.md": "---\ntitle: Math.clz32()\nslug: Web/JavaScript/Reference/Global_Objects/Math/clz32\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.clz32\n---\n\n{{JSRef}}\n\nThe **`Math.clz32()`** static method returns the number of leading zero bits in the 32-bit binary representation of a number.\n\n{{EmbedInteractiveExample(\"pages/js/math-clz32.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.clz32(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe number of leading zero bits in the 32-bit binary representation of `x`.\n\n## Description\n\n`clz32` is short for **C**ount**L**eading**Z**eros**32**.\n\nIf `x` is not a number, it will be converted to a number first, then converted to a 32-bit unsigned integer.\n\nIf the converted 32-bit unsigned integer is `0`, `32` is returned, because all bits are `0`. If the most significant bit is `1` (i.e. the number is greater than or equal to 2<sup>31</sup>), `0` is returned.\n\nThis function is particularly useful for systems that compile to JS, like [Emscripten](https://emscripten.org).\n\n## Examples\n\n### Using Math.clz32()\n\n```js\nMath.clz32(1); // 31\nMath.clz32(1000); // 22\nMath.clz32(); // 32\n\nconst stuff = [\n  NaN,\n  Infinity,\n  -Infinity,\n  0,\n  -0,\n  false,\n  null,\n  undefined,\n  \"foo\",\n  {},\n  [],\n];\nstuff.every((n) => Math.clz32(n) === 32); // true\n\nMath.clz32(true); // 31\nMath.clz32(3.5); // 30\n```\n\n### Implementing Count Leading Ones and beyond\n\nAt present, there is no `Math.clon` for \"Count Leading Ones\" (named \"clon\", not \"clo\", because \"clo\" and \"clz\" are too similar especially for non-English-speaking people). However, a `clon` function can easily be created by inverting the bits of a number and passing the result to `Math.clz32`. Doing this will work because the inverse of 1 is 0 and vice versa. Thus, inverting the bits will inverse the measured quantity of 0's (from `Math.clz32`), thereby making `Math.clz32` count the number of ones instead of counting the number of zeros.\n\nConsider the following 32-bit word:\n\n```js\nconst a = 32776; // 00000000000000001000000000001000 (16 leading zeros)\nMath.clz32(a); // 16\n\nconst b = ~32776; // 11111111111111110111111111110111 (32776 inverted, 0 leading zeros)\nMath.clz32(b); // 0 (this is equal to how many leading one's there are in a)\n```\n\nUsing this logic, a `clon` function can be created as follows:\n\n```js\nconst clz = Math.clz32;\n\nfunction clon(integer) {\n  return clz(~integer);\n}\n```\n\nFurther, this technique could be extended to create a jumpless \"Count Trailing Zeros\" function, as seen below. The `ctrz` function takes a bitwise AND of the integer with its two's complement. By how two's complement works, all trailing zeros will be converted to ones, and then when adding 1, it would be carried over until the first `0` (which was originally a `1`) is reached. All bits higher than this one stay the same and are inverses of the original integer's bits. Therefore, when doing bitwise AND with the original integer, all higher bits become `0`, which can be counted with `clz`. The number of trailing zeros, plus the first `1` bit, plus the leading bits that were counted by `clz`, total to 32.\n\n```js\nfunction ctrz(integer) {\n  integer >>>= 0; // coerce to Uint32\n  if (integer === 0) {\n    // skipping this step would make it return -1\n    return 32;\n  }\n  integer &= -integer; // equivalent to `int = int & (~int + 1)`\n  return 31 - clz(integer);\n}\n```\n\nThen we can define a \"Count Trailing Ones\" function like so:\n\n```js\nfunction ctron(integer) {\n  return ctrz(~integer);\n}\n```\n\nThese helper functions can be made into an [asm.js](/en-US/docs/Games/Tools/asm.js) module for a potential performance improvement.\n\n```js\nconst countTrailsMethods = (function (stdlib, foreign, heap) {\n  \"use asm\";\n  const clz = stdlib.Math.clz32;\n\n  // count trailing zeros\n  function ctrz(integer) {\n    integer = integer | 0; // coerce to an integer\n    if ((integer | 0) == 0) {\n      // skipping this step would make it return -1\n      return 32;\n    }\n    // Note: asm.js doesn't have compound assignment operators such as &=\n    integer = integer & -integer; // equivalent to `int = int & (~int + 1)`\n    return (31 - clz(integer)) | 0;\n  }\n\n  // count trailing ones\n  function ctron(integer) {\n    integer = integer | 0; // coerce to an integer\n    return ctrz(~integer) | 0;\n  }\n\n  // asm.js demands plain objects:\n  return { ctrz: ctrz, ctron: ctron };\n})(window, null, null);\n\nconst { ctrz, ctron } = countTrailsMethods;\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.clz32` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math\")}}\n- {{jsxref(\"Math.imul\")}}\n"
    },
    "cos": {
      "index.md": "---\ntitle: Math.cos()\nslug: Web/JavaScript/Reference/Global_Objects/Math/cos\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.cos\n---\n\n{{JSRef}}\n\nThe **`Math.cos()`** static method returns the cosine of a number in radians.\n\n{{EmbedInteractiveExample(\"pages/js/math-cos.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.cos(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number representing an angle in radians.\n\n### Return value\n\nThe cosine of `x`, between -1 and 1, inclusive. If `x` is {{jsxref(\"Infinity\")}}, `-Infinity`, or {{jsxref(\"NaN\")}}, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nBecause `cos()` is a static method of `Math`, you always use it as `Math.cos()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.cos()\n\n```js\nMath.cos(-Infinity); // NaN\nMath.cos(-0); // 1\nMath.cos(0); // 1\nMath.cos(1); // 0.5403023058681398\nMath.cos(Math.PI); // -1\nMath.cos(2 * Math.PI); // 1\nMath.cos(Infinity); // NaN\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.acos()\")}}\n- {{jsxref(\"Math.asin()\")}}\n- {{jsxref(\"Math.atan()\")}}\n- {{jsxref(\"Math.atan2()\")}}\n- {{jsxref(\"Math.sin()\")}}\n- {{jsxref(\"Math.tan()\")}}\n"
    },
    "cosh": {
      "index.md": "---\ntitle: Math.cosh()\nslug: Web/JavaScript/Reference/Global_Objects/Math/cosh\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.cosh\n---\n\n{{JSRef}}\n\nThe **`Math.cosh()`** static method returns the hyperbolic cosine of a number. That is,\n\n<math display=\"block\"><semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚌𝚘𝚜𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">cosh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><mo>+</mo><msup><mi mathvariant=\"normal\">e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.cosh}(x)} = \\cosh(x) = \\frac{\\mathrm{e}^x + \\mathrm{e}^{-x}}{2}</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-cosh.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.cosh(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe hyperbolic cosine of `x`.\n\n## Description\n\nBecause `cosh()` is a static method of `Math`, you always use it as `Math.cosh()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.cosh()\n\n```js\nMath.cosh(-Infinity); // Infinity\nMath.cosh(-1); // 1.5430806348152437\nMath.cosh(-0); // 1\nMath.cosh(0); // 1\nMath.cosh(1); // 1.5430806348152437\nMath.cosh(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.cosh` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.acosh()\")}}\n- {{jsxref(\"Math.asinh()\")}}\n- {{jsxref(\"Math.atanh()\")}}\n- {{jsxref(\"Math.sinh()\")}}\n- {{jsxref(\"Math.tanh()\")}}\n"
    },
    "e": {
      "index.md": "---\ntitle: Math.E\nslug: Web/JavaScript/Reference/Global_Objects/Math/E\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Math.E\n---\n\n{{JSRef}}\n\nThe **`Math.E`** static data property represents Euler's number, the base of natural logarithms, e, which is approximately 2.718.\n\n{{EmbedInteractiveExample(\"pages/js/math-e.html\")}}\n\n## Value\n\n<math display=\"block\"><semantics><mrow><mi>𝙼𝚊𝚝𝚑.𝙴</mi><mo>=</mo><mi>e</mi><mo>≈</mo><mn>2.718</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.E}} = e \\approx 2.718</annotation></semantics></math>\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nBecause `E` is a static property of `Math`, you always use it as `Math.E`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.E\n\nThe following function returns e:\n\n```js\nfunction getNapier() {\n  return Math.E;\n}\n\ngetNapier(); // 2.718281828459045\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.log1p()\")}}\n"
    },
    "exp": {
      "index.md": "---\ntitle: Math.exp()\nslug: Web/JavaScript/Reference/Global_Objects/Math/exp\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.exp\n---\n\n{{JSRef}}\n\nThe **`Math.exp()`** static method returns [e](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E) raised to the power of a number. That is\n\n<math display=\"block\"><semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚎𝚡𝚙</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.exp}(x)} = \\mathrm{e}^x</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-exp.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.exp(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nA nonnegative number representing e<sup>x</sup>, where e is [the base of the natural logarithm](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E).\n\n## Description\n\nBecause `exp()` is a static method of `Math`, you always use it as `Math.exp()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\nBeware that `e` to the power of a number very close to 0 will be very close to 1 and suffer from loss of precision. In this case, you may want to use {{jsxref(\"Math.expm1\")}} instead, and obtain a much higher-precision fractional part of the answer.\n\n## Examples\n\n### Using Math.exp()\n\n```js\nMath.exp(-Infinity); // 0\nMath.exp(-1); // 0.36787944117144233\nMath.exp(0); // 1\nMath.exp(1); // 2.718281828459045\nMath.exp(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.E\")}}\n- {{jsxref(\"Math.expm1()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.log10()\")}}\n- {{jsxref(\"Math.log1p()\")}}\n- {{jsxref(\"Math.log2()\")}}\n- {{jsxref(\"Math.pow()\")}}\n"
    },
    "expm1": {
      "index.md": "---\ntitle: Math.expm1()\nslug: Web/JavaScript/Reference/Global_Objects/Math/expm1\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.expm1\n---\n\n{{JSRef}}\n\nThe **`Math.expm1()`** static method returns [e](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E) raised to the power of a number, subtracted by 1. That is\n\n<math display=\"block\"><semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚎𝚡𝚙𝚖𝟷</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.expm1}(x)} = \\mathrm{e}^x - 1</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-expm1.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.expm1(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nA number representing e<sup>x</sup> - 1, where e is [the base of the natural logarithm](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E).\n\n## Description\n\nFor very small values of _x_, adding 1 can reduce or eliminate precision. The double floats used in JS give you about 15 digits of precision. 1 + 1e-15 \\= 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and therefore exactly 1.0 in that arithmetic, because digits past 15 are rounded off.\n\nWhen you calculate <math display=\"inline\"><semantics><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><annotation encoding=\"TeX\">\\mathrm{e}^x</annotation></semantics></math> where x is a number very close to 0, you should get an answer very close to 1 + x, because <math display=\"inline\"><semantics><mrow><munder><mo lspace=\"0em\" rspace=\"0em\">lim</mo><mrow><mi>x</mi><mo stretchy=\"false\">→</mo><mn>0</mn></mrow></munder><mfrac><mrow><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><mo>−</mo><mn>1</mn></mrow><mi>x</mi></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"TeX\">\\lim\\_{x \\to 0} \\frac{\\mathrm{e}^x - 1}{x} = 1</annotation></semantics></math>. If you calculate `Math.exp(1.1111111111e-15) - 1`, you should get an answer close to `1.1111111111e-15`. Instead, due to the highest significant figure in the result of `Math.exp` being the units digit `1`, the final value ends up being `1.1102230246251565e-15`, with only 3 correct digits. If, instead, you calculate `Math.exp1m(1.1111111111e-15)`, you will get a much more accurate answer `1.1111111111000007e-15`, with 11 correct digits of precision.\n\nBecause `expm1()` is a static method of `Math`, you always use it as `Math.expm1()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.expm1()\n\n```js\nMath.expm1(-Infinity); // -1\nMath.expm1(-1); // -0.6321205588285577\nMath.expm1(-0); // -0\nMath.expm1(0); // 0\nMath.expm1(1); // 1.718281828459045\nMath.expm1(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.expm1` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.E\")}}\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.log10()\")}}\n- {{jsxref(\"Math.log1p()\")}}\n- {{jsxref(\"Math.log2()\")}}\n- {{jsxref(\"Math.pow()\")}}\n"
    },
    "floor": {
      "index.md": "---\ntitle: Math.floor()\nslug: Web/JavaScript/Reference/Global_Objects/Math/floor\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.floor\n---\n\n{{JSRef}}\n\nThe **`Math.floor()`** static method always rounds down and returns the largest integer less than or equal to a given number.\n\n{{EmbedInteractiveExample(\"pages/js/math-floor.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.floor(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe largest integer smaller than or equal to `x`. It's the same value as [`-Math.ceil(-x)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil).\n\n## Description\n\nBecause `floor()` is a static method of `Math`, you always use it as `Math.floor()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.floor()\n\n```js\nMath.floor(-Infinity); // -Infinity\nMath.floor(-45.95); // -46\nMath.floor(-45.05); // -46\nMath.floor(-0); // -0\nMath.floor(0); // 0\nMath.floor(4); // 4\nMath.floor(45.05); // 45\nMath.floor(45.95); // 45\nMath.floor(Infinity); // Infinity\n```\n\n### Decimal adjustment\n\nIn this example, we implement a method called `decimalAdjust()` that is an enhancement method of `Math.floor()`, {{jsxref(\"Math.ceil()\")}}, and {{jsxref(\"Math.round()\")}}. While the three `Math` functions always adjust the input to the units digit, `decimalAdjust` accepts an `exp` parameter that specifies the number of digits to the left of the decimal point to which the number should be adjusted. For example, `-1` means it would leave one digit after the decimal point (as in \"× 10<sup>-1</sup>\"). In addition, it allows you to select the means of adjustment — `round`, `floor`, or `ceil` — through the `type` parameter.\n\nIt does so by multiplying the number by a power of 10, then rounding the result to the nearest integer, then dividing by the power of 10. To better preserve precision, it takes advantage of Number's [`toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) method, which represents large or small numbers in scientific notation (like `6.02e23`).\n\n```js\n/**\n * Adjusts a number to the specified digit.\n *\n * @param {\"round\" | \"floor\" | \"ceil\"} type The type of adjustment.\n * @param {number} value The number.\n * @param {number} exp The exponent (the 10 logarithm of the adjustment base).\n * @returns {number} The adjusted value.\n */\nfunction decimalAdjust(type, value, exp) {\n  type = String(type);\n  if (![\"round\", \"floor\", \"ceil\"].includes(type)) {\n    throw new TypeError(\n      \"The type of decimal adjustment must be one of 'round', 'floor', or 'ceil'.\",\n    );\n  }\n  exp = Number(exp);\n  value = Number(value);\n  if (exp % 1 !== 0 || Number.isNaN(value)) {\n    return NaN;\n  } else if (exp === 0) {\n    return Math[type](value);\n  }\n  const [magnitude, exponent = 0] = value.toString().split(\"e\");\n  const adjustedValue = Math[type](`${magnitude}e${exponent - exp}`);\n  // Shift back\n  const [newMagnitude, newExponent = 0] = adjustedValue.toString().split(\"e\");\n  return Number(`${newMagnitude}e${+newExponent + exp}`);\n}\n\n// Decimal round\nconst round10 = (value, exp) => decimalAdjust(\"round\", value, exp);\n// Decimal floor\nconst floor10 = (value, exp) => decimalAdjust(\"floor\", value, exp);\n// Decimal ceil\nconst ceil10 = (value, exp) => decimalAdjust(\"ceil\", value, exp);\n\n// Round\nround10(55.55, -1); // 55.6\nround10(55.549, -1); // 55.5\nround10(55, 1); // 60\nround10(54.9, 1); // 50\nround10(-55.55, -1); // -55.5\nround10(-55.551, -1); // -55.6\nround10(-55, 1); // -50\nround10(-55.1, 1); // -60\n// Floor\nfloor10(55.59, -1); // 55.5\nfloor10(59, 1); // 50\nfloor10(-55.51, -1); // -55.6\nfloor10(-51, 1); // -60\n// Ceil\nceil10(55.51, -1); // 55.6\nceil10(51, 1); // 60\nceil10(-55.59, -1); // -55.5\nceil10(-59, 1); // -50\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.abs()\")}}\n- {{jsxref(\"Math.ceil()\")}}\n- {{jsxref(\"Math.round()\")}}\n- {{jsxref(\"Math.sign()\")}}\n- {{jsxref(\"Math.trunc()\")}}\n"
    },
    "fround": {
      "index.md": "---\ntitle: Math.fround()\nslug: Web/JavaScript/Reference/Global_Objects/Math/fround\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.fround\n---\n\n{{JSRef}}\n\nThe **`Math.fround()`** static method returns the nearest [32-bit single precision](https://en.wikipedia.org/wiki/Single-precision_floating-point_format) float representation of a number.\n\n{{EmbedInteractiveExample(\"pages/js/math-fround.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.fround(doubleFloat)\n```\n\n### Parameters\n\n- `doubleFloat`\n  - : A number.\n\n### Return value\n\nThe nearest [32-bit single precision](https://en.wikipedia.org/wiki/Single-precision_floating-point_format) float representation of `x`.\n\n## Description\n\nJavaScript uses 64-bit double floating-point numbers internally, which offer a very high precision. However, sometimes you may be working with 32-bit floating-point numbers, for example if you are reading values from a {{jsxref(\"Float32Array\")}}. This can create confusion: checking a 64-bit float and a 32-bit float for equality may fail even though the numbers are seemingly identical.\n\nTo solve this, `Math.fround()` can be used to cast the 64-bit float to a 32-bit float. Internally, JavaScript continues to treat the number as a 64-bit float, it just performs a \"round to even\" on the 23rd bit of the mantissa, and sets all following mantissa bits to `0`. If the number is outside the range of a 32-bit float, {{jsxref(\"Infinity\")}} or `-Infinity` is returned.\n\nBecause `fround()` is a static method of `Math`, you always use it as `Math.fround()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.fround()\n\nThe number 1.5 can be precisely represented in the binary numeral system, and is identical in 32-bit and 64-bit:\n\n```js\nMath.fround(1.5); // 1.5\nMath.fround(1.5) === 1.5; // true\n```\n\nHowever, the number 1.337 cannot be precisely represented in the binary numeral system, so it differs in 32-bit and 64-bit:\n\n```js\nMath.fround(1.337); // 1.3370000123977661\nMath.fround(1.337) === 1.337; // false\n```\n\n<math><semantics><msup><mn>2</mn><mn>150</mn></msup><annotation encoding=\"TeX\">2^150</annotation></semantics></math> is too big for a 32-bit float, so `Infinity` is returned:\n\n```js\n2 ** 150; // 1.42724769270596e+45\nMath.fround(2 ** 150); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.fround` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.round()\")}}\n"
    },
    "hypot": {
      "index.md": "---\ntitle: Math.hypot()\nslug: Web/JavaScript/Reference/Global_Objects/Math/hypot\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.hypot\n---\n\n{{JSRef}}\n\nThe **`Math.hypot()`** static method returns the square root of the sum of squares of its arguments. That is,\n\n<math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚑𝚢𝚙𝚘𝚝</mo><mo stretchy=\"false\">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo>,</mo><msub><mi>v</mi><mn>2</mn></msub><mo>,</mo><mo>…</mo><mo>,</mo><msub><mi>v</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mstyle><mo>=</mo><msqrt><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>v</mi><mi>i</mi><mn>2</mn></msubsup></mrow></msqrt><mo>=</mo><msqrt><mrow><msubsup><mi>v</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>v</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>…</mo><mo>+</mo><msubsup><mi>v</mi><mi>n</mi><mn>2</mn></msubsup></mrow></msqrt></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.hypot}(v_1, v_2, \\dots, v_n)} = \\sqrt{\\sum\\_{i=1}^n v_i^2} = \\sqrt{v_1^2 + v_2^2 + \\dots + v_n^2}</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-hypot.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.hypot()\nMath.hypot(value1)\nMath.hypot(value1, value2)\nMath.hypot(value1, value2, /* …, */ valueN)\n```\n\n### Parameters\n\n- `value1`, …, `valueN`\n  - : Numbers.\n\n### Return value\n\nThe square root of the sum of squares of the given arguments. Returns {{jsxref(\"Infinity\")}} if any of the arguments is ±Infinity. Otherwise, if at least one of the arguments is or is converted to {{jsxref(\"NaN\")}}, returns {{jsxref(\"NaN\")}}. Returns `0` if no arguments are given or all arguments are ±0.\n\n## Description\n\nCalculating the hypotenuse of a right triangle, or the magnitude of a complex number, uses the formula `Math.sqrt(v1*v1 + v2*v2)`, where v1 and v2 are the lengths of the triangle's legs, or the complex number's real and complex components. The corresponding distance in 2 or more dimensions can be calculated by adding more squares under the square root: `Math.sqrt(v1*v1 + v2*v2 + v3*v3 + v4*v4)`.\n\nThis function makes this calculation easier and faster; you call `Math.hypot(v1, v2)`, or `Math.hypot(v1, /* …, */, vN)`.\n\n`Math.hypot` also avoids overflow/underflow problems if the magnitude of your numbers is very large. The largest number you can represent in JS is [`Number.MAX_VALUE`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE), which is around 10<sup>308</sup>. If your numbers are larger than about 10<sup>154</sup>, taking the square of them will result in Infinity. For example, `Math.sqrt(1e200*1e200 + 1e200*1e200) = Infinity`. If you use `hypot()` instead, you get a better answer: `Math.hypot(1e200, 1e200) = 1.4142...e+200` . This is also true with very small numbers. `Math.sqrt(1e-200*1e-200 + 1e-200*1e-200) = 0`, but `Math.hypot(1e-200, 1e-200) = 1.4142...e-200`.\n\nWith one argument, `Math.hypot()` is equivalent to [`Math.abs()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs). [`Math.hypot.length`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) is 2, which weakly signals that it's designed to handle at least two parameters.\n\nBecause `hypot()` is a static method of `Math`, you always use it as `Math.hypot()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.hypot()\n\n```js\nMath.hypot(3, 4); // 5\nMath.hypot(3, 4, 5); // 7.0710678118654755\nMath.hypot(); // 0\nMath.hypot(NaN); // NaN\nMath.hypot(NaN, Infinity); // Infinity\nMath.hypot(3, 4, \"foo\"); // NaN, since +'foo' => NaN\nMath.hypot(3, 4, \"5\"); // 7.0710678118654755, +'5' => 5\nMath.hypot(-3); // 3, the same as Math.abs(-3)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.hypot` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.abs()\")}}\n- {{jsxref(\"Math.pow()\")}}\n- {{jsxref(\"Math.sqrt()\")}}\n"
    },
    "imul": {
      "index.md": "---\ntitle: Math.imul()\nslug: Web/JavaScript/Reference/Global_Objects/Math/imul\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.imul\n---\n\n{{JSRef}}\n\nThe **`Math.imul()`** static method returns the result of the C-like 32-bit multiplication of the two parameters.\n\n{{EmbedInteractiveExample(\"pages/js/math-imul.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.imul(a, b)\n```\n\n### Parameters\n\n- `a`\n  - : First number.\n- `b`\n  - : Second number.\n\n### Return value\n\nThe result of the C-like 32-bit multiplication of the given arguments.\n\n## Description\n\n`Math.imul()` allows for 32-bit integer multiplication with C-like semantics. This feature is useful for projects like [Emscripten](https://en.wikipedia.org/wiki/Emscripten).\n\nBecause `imul()` is a static method of `Math`, you always use it as `Math.imul()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\nIf you use normal JavaScript floating point numbers in `imul()`, you will experience a degrade in performance. This is because of the costly conversion from a floating point to an integer for multiplication, and then converting the multiplied integer back into a floating point. However, with [asm.js](/en-US/docs/Games/Tools/asm.js), which allows JIT-optimizers to more confidently use integers in JavaScript, multiplying two numbers stored internally as integers (which is only possible with asm.js) with `imul()` could be potentially more performant.\n\n## Examples\n\n### Using Math.imul()\n\n```js\nMath.imul(2, 4); // 8\nMath.imul(-1, 8); // -8\nMath.imul(-2, -2); // 4\nMath.imul(0xffffffff, 5); // -5\nMath.imul(0xfffffffe, 5); // -10\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.imul` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- [Emscripten](https://en.wikipedia.org/wiki/Emscripten) on Wikipedia\n"
    },
    "index.md": "---\ntitle: Math\nslug: Web/JavaScript/Reference/Global_Objects/Math\npage-type: javascript-namespace\nbrowser-compat: javascript.builtins.Math\n---\n\n{{JSRef}}\n\nThe **`Math`** namespace object contains static properties and methods for mathematical constants and functions.\n\n`Math` works with the {{jsxref(\"Number\")}} type. It doesn't work with {{jsxref(\"BigInt\")}}.\n\n## Description\n\nUnlike most global objects, `Math` is not a constructor. You cannot use it with the [`new` operator](/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `Math` object as a function. All properties and methods of `Math` are static.\n\n> **Note:** Many `Math` functions have a precision that's _implementation-dependent_.\n>\n> This means that different browsers can give a different result. Even the same JavaScript engine on a different OS or architecture can give different results!\n\n## Static properties\n\n- {{jsxref(\"Math.E\")}}\n  - : Euler's number and the base of natural logarithms; approximately `2.718`.\n- {{jsxref(\"Math.LN10\")}}\n  - : Natural logarithm of `10`; approximately `2.303`.\n- {{jsxref(\"Math.LN2\")}}\n  - : Natural logarithm of `2`; approximately `0.693`.\n- {{jsxref(\"Math.LOG10E\")}}\n  - : Base-10 logarithm of `E`; approximately `0.434`.\n- {{jsxref(\"Math.LOG2E\")}}\n  - : Base-2 logarithm of `E`; approximately `1.443`.\n- {{jsxref(\"Math.PI\")}}\n  - : Ratio of a circle's circumference to its diameter; approximately `3.14159`.\n- {{jsxref(\"Math.SQRT1_2\")}}\n  - : Square root of ½; approximately `0.707`.\n- {{jsxref(\"Math.SQRT2\")}}\n  - : Square root of `2`; approximately `1.414`.\n- `Math[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Math\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Static methods\n\n- {{jsxref(\"Math.abs()\")}}\n  - : Returns the absolute value of `x`.\n- {{jsxref(\"Math.acos()\")}}\n  - : Returns the arccosine of `x`.\n- {{jsxref(\"Math.acosh()\")}}\n  - : Returns the hyperbolic arccosine of `x`.\n- {{jsxref(\"Math.asin()\")}}\n  - : Returns the arcsine of `x`.\n- {{jsxref(\"Math.asinh()\")}}\n  - : Returns the hyperbolic arcsine of a number.\n- {{jsxref(\"Math.atan()\")}}\n  - : Returns the arctangent of `x`.\n- {{jsxref(\"Math.atan2()\")}}\n  - : Returns the arctangent of the quotient of its arguments.\n- {{jsxref(\"Math.atanh()\")}}\n  - : Returns the hyperbolic arctangent of `x`.\n- {{jsxref(\"Math.cbrt()\")}}\n  - : Returns the cube root of `x`.\n- {{jsxref(\"Math.ceil()\")}}\n  - : Returns the smallest integer greater than or equal to `x`.\n- {{jsxref(\"Math.clz32()\")}}\n  - : Returns the number of leading zero bits of the 32-bit integer `x`.\n- {{jsxref(\"Math.cos()\")}}\n  - : Returns the cosine of `x`.\n- {{jsxref(\"Math.cosh()\")}}\n  - : Returns the hyperbolic cosine of `x`.\n- {{jsxref(\"Math.exp()\")}}\n  - : Returns e<sup>x</sup>, where x is the argument, and e is Euler's number (`2.718`…, the base of the natural logarithm).\n- {{jsxref(\"Math.expm1()\")}}\n  - : Returns subtracting `1` from `exp(x)`.\n- {{jsxref(\"Math.floor()\")}}\n  - : Returns the largest integer less than or equal to `x`.\n- {{jsxref(\"Math.fround()\")}}\n  - : Returns the nearest [single precision](https://en.wikipedia.org/wiki/Single-precision_floating-point_format) float representation of `x`.\n- {{jsxref(\"Math.hypot()\")}}\n  - : Returns the square root of the sum of squares of its arguments.\n- {{jsxref(\"Math.imul()\")}}\n  - : Returns the result of the 32-bit integer multiplication of `x` and `y`.\n- {{jsxref(\"Math.log()\")}}\n  - : Returns the natural logarithm (㏒<sub>e</sub>; also, ㏑) of `x`.\n- {{jsxref(\"Math.log10()\")}}\n  - : Returns the base-10 logarithm of `x`.\n- {{jsxref(\"Math.log1p()\")}}\n  - : Returns the natural logarithm (㏒<sub>e</sub>; also ㏑) of `1 + x` for the number `x`.\n- {{jsxref(\"Math.log2()\")}}\n  - : Returns the base-2 logarithm of `x`.\n- {{jsxref(\"Math.max()\")}}\n  - : Returns the largest of zero or more numbers.\n- {{jsxref(\"Math.min()\")}}\n  - : Returns the smallest of zero or more numbers.\n- {{jsxref(\"Math.pow()\")}}\n  - : Returns base `x` to the exponent power `y` (that is, `x`<sup><code>y</code></sup>).\n- {{jsxref(\"Math.random()\")}}\n  - : Returns a pseudo-random number between `0` and `1`.\n- {{jsxref(\"Math.round()\")}}\n  - : Returns the value of the number `x` rounded to the nearest integer.\n- {{jsxref(\"Math.sign()\")}}\n  - : Returns the sign of the `x`, indicating whether `x` is positive, negative, or zero.\n- {{jsxref(\"Math.sin()\")}}\n  - : Returns the sine of `x`.\n- {{jsxref(\"Math.sinh()\")}}\n  - : Returns the hyperbolic sine of `x`.\n- {{jsxref(\"Math.sqrt()\")}}\n  - : Returns the positive square root of `x`.\n- {{jsxref(\"Math.tan()\")}}\n  - : Returns the tangent of `x`.\n- {{jsxref(\"Math.tanh()\")}}\n  - : Returns the hyperbolic tangent of `x`.\n- {{jsxref(\"Math.trunc()\")}}\n  - : Returns the integer portion of `x`, removing any fractional digits.\n\n## Examples\n\n### Converting between degrees and radians\n\nThe trigonometric functions `sin()`, `cos()`, `tan()`, `asin()`, `acos()`, `atan()`, and `atan2()` expect (and return) angles in _radians_.\n\nSince humans tend to think in degrees, and some functions (such as CSS transforms) can accept degrees, it is a good idea to keep functions handy that convert between the two:\n\n```js\nfunction degToRad(degrees) {\n  return degrees * (Math.PI / 180);\n}\n\nfunction radToDeg(rad) {\n  return rad / (Math.PI / 180);\n}\n```\n\n### Calculating the height of an equilateral triangle\n\nIf we want to calculate the height of an equilateral triangle, and we know its side length is 100, we can use the formulae _length of the adjacent multiplied by the tangent of the angle is equal to the opposite._\n\n![An equilateral triangle where a perpendicular of one edge is drawn from the opposite vertex, forming a right triangle with three sides marked as \"adjacent\", \"opposite\", and \"hypotenuse\". The angle between the \"adjacent\" and \"hypotenuse\" sides is 60 degrees.](trigonometry.png)\n\nIn JavaScript, we can do this with the following:\n\n```js\n50 * Math.tan(degToRad(60));\n```\n\nWe use our `degToRad()` function to convert 60 degrees to radians, as {{jsxref(\"Math.tan()\")}} expects an input value in radians.\n\n### Returning a random integer between two bounds\n\nThis can be achieved with a combination of {{jsxref(\"Math.random()\")}} and {{jsxref(\"Math.floor()\")}}:\n\n```js\nfunction random(min, max) {\n  const num = Math.floor(Math.random() * (max - min + 1)) + min;\n  return num;\n}\n\nrandom(1, 10);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number\")}}\n",
    "ln10": {
      "index.md": "---\ntitle: Math.LN10\nslug: Web/JavaScript/Reference/Global_Objects/Math/LN10\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Math.LN10\n---\n\n{{JSRef}}\n\nThe **`Math.LN10`** static data property represents the natural logarithm of 10, approximately 2.302.\n\n{{EmbedInteractiveExample(\"pages/js/math-ln10.html\", \"shorter\")}}\n\n## Value\n\n<math display=\"block\"><semantics><mrow><mi>𝙼𝚊𝚝𝚑.𝙻𝙽𝟷𝟶</mi><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mn>10</mn><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>2.302</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LN10}} = \\ln(10) \\approx 2.302</annotation></semantics></math>\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nBecause `LN10` is a static property of `Math`, you always use it as `Math.LN10`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.LN10\n\nThe following function returns the natural log of 10:\n\n```js\nfunction getNatLog10() {\n  return Math.LN10;\n}\n\ngetNatLog10(); // 2.302585092994046\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.log10()\")}}\n"
    },
    "ln2": {
      "index.md": "---\ntitle: Math.LN2\nslug: Web/JavaScript/Reference/Global_Objects/Math/LN2\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Math.LN2\n---\n\n{{JSRef}}\n\nThe **`Math.LN2`** static data property represents the natural logarithm of 2, approximately 0.693:\n\n{{EmbedInteractiveExample(\"pages/js/math-ln2.html\", \"shorter\")}}\n\n## Value\n\n<math display=\"block\"><semantics><mrow><mi>𝙼𝚊𝚝𝚑.𝙻𝙽𝟸</mi><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>0.693</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LN2}} = \\ln(2) \\approx 0.693</annotation></semantics></math>\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nBecause `LN2` is a static property of `Math`, you always use it as `Math.LN2`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.LN2\n\nThe following function returns the natural log of 2:\n\n```js\nfunction getNatLog2() {\n  return Math.LN2;\n}\n\ngetNatLog2(); // 0.6931471805599453\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.log2()\")}}\n"
    },
    "log": {
      "index.md": "---\ntitle: Math.log()\nslug: Web/JavaScript/Reference/Global_Objects/Math/log\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.log\n---\n\n{{JSRef}}\n\nThe **`Math.log()`** static method returns the natural logarithm (base [e](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E)) of a number. That is\n\n<math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique&nbsp;</mtext><mi>y</mi><mtext>&nbsp;such that&nbsp;</mtext><msup><mi>e</mi><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0,\\;\\mathtt{\\operatorname{Math.log}(x)} = \\ln(x) = \\text{the unique } y \\text{ such that } e^y = x</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-log.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.log(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number greater than or equal to 0.\n\n### Return value\n\nThe natural logarithm (base [e](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E)) of `x`. If `x` is ±0, returns [`-Infinity`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY). If `x < 0`, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nBecause `log()` is a static method of `Math`, you always use it as `Math.log()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\nIf you need the natural log of 2 or 10, use the constants {{jsxref(\"Math.LN2\")}} or {{jsxref(\"Math.LN10\")}}. If you need a logarithm to base 2 or 10, use {{jsxref(\"Math.log2()\")}} or {{jsxref(\"Math.log10()\")}}. If you need a logarithm to other bases, use `Math.log(x) / Math.log(otherBase)` as in the example below; you might want to precalculate `1 / Math.log(otherBase)` since multiplication in `Math.log(x) * constant` is much faster.\n\nBeware that positive numbers very close to 1 can suffer from loss of precision and make its natural logarithm less accurate. In this case, you may want to use {{jsxref(\"Math.log1p\")}} instead.\n\n## Examples\n\n### Using Math.log()\n\n```js\nMath.log(-1); // NaN\nMath.log(-0); // -Infinity\nMath.log(0); // -Infinity\nMath.log(1); // 0\nMath.log(10); // 2.302585092994046\nMath.log(Infinity); // Infinity\n```\n\n### Using Math.log() with a different base\n\nThe following function returns the logarithm of `y` with base `x` (i.e. <math><semantics><mrow><msub><mo>log</mo><mi>x</mi></msub><mi>y</mi></mrow><annotation encoding=\"TeX\">\\log_x y</annotation></semantics></math>):\n\n```js\nfunction getBaseLog(x, y) {\n  return Math.log(y) / Math.log(x);\n}\n```\n\nIf you run `getBaseLog(10, 1000)`, it returns `2.9999999999999996` due to floating-point rounding, but still very close to the actual answer of 3.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log1p()\")}}\n- {{jsxref(\"Math.log10()\")}}\n- {{jsxref(\"Math.log2()\")}}\n- {{jsxref(\"Math.pow()\")}}\n"
    },
    "log10": {
      "index.md": "---\ntitle: Math.log10()\nslug: Web/JavaScript/Reference/Global_Objects/Math/log10\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.log10\n---\n\n{{JSRef}}\n\nThe **`Math.log10()`** static method returns the base 10 logarithm of a number. That is\n\n<math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟷𝟶</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>10</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique&nbsp;</mtext><mi>y</mi><mtext>&nbsp;such that&nbsp;</mtext><msup><mn>10</mn><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0,\\;\\mathtt{\\operatorname{Math.log10}(x)} = \\log\\_{10}(x) = \\text{the unique } y \\text{ such that } 10^y = x</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-log10.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.log10(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number greater than or equal to 0.\n\n### Return value\n\nThe base 10 logarithm of `x`. If `x < 0`, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nBecause `log10()` is a static method of `Math`, you always use it as `Math.log10()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\nThis function is the equivalent of `Math.log(x) / Math.log(10)`. For `log10(e)`, use the constant {{jsxref(\"Math.LOG10E\")}}, which is 1 / {{jsxref(\"Math.LN10\")}}.\n\n## Examples\n\n### Using Math.log10()\n\n```js\nMath.log10(-2); // NaN\nMath.log10(-0); // -Infinity\nMath.log10(0); // -Infinity\nMath.log10(1); // 0\nMath.log10(2); // 0.3010299956639812\nMath.log10(100000); // 5\nMath.log10(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.log10` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.log1p()\")}}\n- {{jsxref(\"Math.log2()\")}}\n- {{jsxref(\"Math.pow()\")}}\n"
    },
    "log10e": {
      "index.md": "---\ntitle: Math.LOG10E\nslug: Web/JavaScript/Reference/Global_Objects/Math/LOG10E\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Math.LOG10E\n---\n\n{{JSRef}}\n\nThe **`Math.LOG10E`** static data property represents the base 10 logarithm of [e](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E), approximately 0.434.\n\n{{EmbedInteractiveExample(\"pages/js/math-log10e.html\", \"shorter\")}}\n\n## Value\n\n<math display=\"block\"><semantics><mrow><mi>𝙼𝚊𝚝𝚑.𝙻𝙾𝙶𝟷𝟶𝙴</mi><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>10</mn></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">e</mi><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>0.434</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LOG10E}} = \\log\\_{10}(\\mathrm{e}) \\approx 0.434</annotation></semantics></math>\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nBecause `LOG10E` is a static property of `Math`, you always use it as `Math.LOG10E`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.LOG10E\n\nThe following function returns the base 10 logarithm of e:\n\n```js\nfunction getLog10e() {\n  return Math.LOG10E;\n}\n\ngetLog10e(); // 0.4342944819032518\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.log10()\")}}\n"
    },
    "log1p": {
      "index.md": "---\ntitle: Math.log1p()\nslug: Web/JavaScript/Reference/Global_Objects/Math/log1p\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.log1p\n---\n\n{{JSRef}}\n\nThe **`Math.log1p()`** static method returns the natural logarithm (base [e](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E)) of `1 + x`, where `x` is the argument. That is:\n\n<math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mo>−</mo><mn>1</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟷𝚙</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"TeX\">\\forall x &gt; -1,\\;\\mathtt{\\operatorname{Math.log1p}(x)} = \\ln(1 + x)</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-log1p.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.log1p(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number greater than or equal to -1.\n\n### Return value\n\nThe natural logarithm (base [e](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E)) of `x + 1`. If `x` is -1, returns [`-Infinity`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY). If `x < -1`, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nFor very small values of _x_, adding 1 can reduce or eliminate precision. The double floats used in JS give you about 15 digits of precision. 1 + 1e-15 \\= 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and therefore exactly 1.0 in that arithmetic, because digits past 15 are rounded off.\n\nWhen you calculate log(1 + _x_) where _x_ is a small positive number, you should get an answer very close to _x_, because <math display=\"inline\"><semantics><mrow><munder><mo movablelimits=\"true\" form=\"prefix\">lim</mo><mrow ><mi>x</mi><mo stretchy=\"false\">→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mi>x</mi></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"TeX\">\\lim\\_{x \\to 0} \\frac{\\log(1+x)}{x} = 1</annotation></semantics></math>. If you calculate `Math.log(1 + 1.1111111111e-15)`, you should get an answer close to `1.1111111111e-15`. Instead, you will end up taking the logarithm of `1.00000000000000111022` (the roundoff is in binary, so sometimes it gets ugly), and get the answer 1.11022…e-15, with only 3 correct digits. If, instead, you calculate `Math.log1p(1.1111111111e-15)`, you will get a much more accurate answer `1.1111111110999995e-15`, with 15 correct digits of precision (actually 16 in this case).\n\nIf the value of `x` is less than -1, the return value is always {{jsxref(\"NaN\")}}.\n\nBecause `log1p()` is a static method of `Math`, you always use it as `Math.log1p()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.log1p()\n\n```js\nMath.log1p(-2); // NaN\nMath.log1p(-1); // -Infinity\nMath.log1p(-0); // -0\nMath.log1p(0); // 0\nMath.log1p(1); // 0.6931471805599453\nMath.log1p(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.log1p` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.expm1()\")}}\n- {{jsxref(\"Math.log10()\")}}\n- {{jsxref(\"Math.log2()\")}}\n- {{jsxref(\"Math.pow()\")}}\n"
    },
    "log2": {
      "index.md": "---\ntitle: Math.log2()\nslug: Web/JavaScript/Reference/Global_Objects/Math/log2\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.log2\n---\n\n{{JSRef}}\n\nThe **`Math.log2()`** static method returns the base 2 logarithm of a number. That is\n\n<math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚕𝚘𝚐𝟸</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique&nbsp;</mtext><mi>y</mi><mtext>&nbsp;such that&nbsp;</mtext><msup><mn>2</mn><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0,\\;\\mathtt{\\operatorname{Math.log2}(x)} = \\log_2(x) = \\text{the unique } y \\text{ such that } 2^y = x</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-log2.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.log2(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number greater than or equal to 0.\n\n### Return value\n\nThe base 2 logarithm of `x`. If `x < 0`, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nBecause `log2()` is a static method of `Math`, you always use it as `Math.log2()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\nThis function is the equivalent of `Math.log(x) / Math.log(2)`. For `log2(e)`, use the constant {{jsxref(\"Math.LOG2E\")}}, which is 1 / {{jsxref(\"Math.LN2\")}}.\n\n## Examples\n\n### Using Math.log2()\n\n```js\nMath.log2(-2); // NaN\nMath.log2(-0); // -Infinity\nMath.log2(0); // -Infinity\nMath.log2(1); // 0\nMath.log2(2); // 1\nMath.log2(3); // 1.584962500721156\nMath.log2(1024); // 10\nMath.log2(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.log2` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.log10()\")}}\n- {{jsxref(\"Math.log1p()\")}}\n- {{jsxref(\"Math.pow()\")}}\n"
    },
    "log2e": {
      "index.md": "---\ntitle: Math.LOG2E\nslug: Web/JavaScript/Reference/Global_Objects/Math/LOG2E\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Math.LOG2E\n---\n\n{{JSRef}}\n\nThe **`Math.LOG2E`** static data property represents the base 2 logarithm of [e](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E), approximately 1.442.\n\n{{EmbedInteractiveExample(\"pages/js/math-log2e.html\", \"shorter\")}}\n\n## Value\n\n<math display=\"block\"><semantics><mrow><mi>𝙼𝚊𝚝𝚑.𝙻𝙾𝙶𝟸𝙴</mi><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">e</mi><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>1.442</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LOG2E}} = \\log_2(\\mathrm{e}) \\approx 1.442</annotation></semantics></math>\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nBecause `LOG2E` is a static property of `Math`, you always use it as `Math.LOG2E`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.LOG2E\n\nThe following function returns the base 2 logarithm of e:\n\n```js\nfunction getLog2e() {\n  return Math.LOG2E;\n}\n\ngetLog2e(); // 1.4426950408889634\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.log2()\")}}\n"
    },
    "max": {
      "index.md": "---\ntitle: Math.max()\nslug: Web/JavaScript/Reference/Global_Objects/Math/max\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.max\n---\n\n{{JSRef}}\n\nThe **`Math.max()`** static method returns the largest of the numbers given as input parameters, or -{{jsxref(\"Infinity\")}} if there are no parameters.\n\n{{EmbedInteractiveExample(\"pages/js/math-max.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.max()\nMath.max(value1)\nMath.max(value1, value2)\nMath.max(value1, value2, /* …, */ valueN)\n```\n\n### Parameters\n\n- `value1`, …, `valueN`\n  - : Zero or more numbers among which the largest value will be selected and returned.\n\n### Return value\n\nThe largest of the given numbers. Returns {{jsxref(\"NaN\")}} if any of the parameters is or is converted into `NaN`. Returns -{{jsxref(\"Infinity\")}} if no parameters are provided.\n\n## Description\n\nBecause `max()` is a static method of `Math`, you always use it as `Math.max()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n[`Math.max.length`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) is 2, which weakly signals that it's designed to handle at least two parameters.\n\n## Examples\n\n### Using Math.max()\n\n```js\nMath.max(10, 20); // 20\nMath.max(-10, -20); // -10\nMath.max(-10, 20); // 20\n```\n\n### Getting the maximum element of an array\n\n{{jsxref(\"Array.prototype.reduce()\")}} can be used to find the maximum\nelement in a numeric array, by comparing each value:\n\n```js\nconst arr = [1, 2, 3];\nconst max = arr.reduce((a, b) => Math.max(a, b), -Infinity);\n```\n\nThe following function uses {{jsxref(\"Function.prototype.apply()\")}} to get the maximum of an array. `getMaxOfArray([1, 2, 3])` is equivalent to `Math.max(1, 2, 3)`, but you can use `getMaxOfArray()` on programmatically constructed arrays. This should only be used for arrays with relatively few elements.\n\n```js\nfunction getMaxOfArray(numArray) {\n  return Math.max.apply(null, numArray);\n}\n```\n\nThe [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) is a shorter way of writing the `apply` solution to get the maximum of an array:\n\n```js\nconst arr = [1, 2, 3];\nconst max = Math.max(...arr);\n```\n\nHowever, both spread (`...`) and `apply` will either fail or return the wrong result if the array has too many elements, because they try to pass the array elements as function parameters. See [Using apply and built-in functions](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply#using_apply_and_built-in_functions) for more details. The `reduce` solution does not have this problem.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.min()\")}}\n"
    },
    "min": {
      "index.md": "---\ntitle: Math.min()\nslug: Web/JavaScript/Reference/Global_Objects/Math/min\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.min\n---\n\n{{JSRef}}\n\nThe **`Math.min()`** static method returns the smallest of the numbers given as input parameters, or {{jsxref(\"Infinity\")}} if there are no parameters.\n\n{{EmbedInteractiveExample(\"pages/js/math-min.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.min()\nMath.min(value1)\nMath.min(value1, value2)\nMath.min(value1, value2, /* …, */ valueN)\n```\n\n### Parameters\n\n- `value1`, …, `valueN`\n  - : Zero or more numbers among which the lowest value will be selected and returned.\n\n### Return value\n\nThe smallest of the given numbers. Returns {{jsxref(\"NaN\")}} if any of the parameters is or is converted into `NaN`. Returns {{jsxref(\"Infinity\")}} if no parameters are provided.\n\n## Description\n\nBecause `min()` is a static method of `Math`, you always use it as `Math.min()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n[`Math.min.length`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) is 2, which weakly signals that it's designed to handle at least two parameters.\n\n## Examples\n\n### Using Math.min()\n\nThis finds the min of `x` and `y` and assigns it to `z`:\n\n```js\nconst x = 10;\nconst y = -20;\nconst z = Math.min(x, y); // -20\n```\n\n### Clipping a value with Math.min()\n\n`Math.min()` is often used to clip a value so that it is always less than or\nequal to a boundary. For instance, this\n\n```js\nlet x = f(foo);\n\nif (x > boundary) {\n  x = boundary;\n}\n```\n\nmay be written as this\n\n```js\nconst x = Math.min(f(foo), boundary);\n```\n\n{{jsxref(\"Math.max()\")}} can be used in a similar way to clip a value at the other end.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.max()\")}}\n"
    },
    "pi": {
      "index.md": "---\ntitle: Math.PI\nslug: Web/JavaScript/Reference/Global_Objects/Math/PI\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Math.PI\n---\n\n{{JSRef}}\n\nThe **`Math.PI`** static data property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159.\n\n{{EmbedInteractiveExample(\"pages/js/math-pi.html\")}}\n\n## Value\n\n<math display=\"block\"><semantics><mrow><mi>𝙼𝚊𝚝𝚑.𝙿𝙸</mi><mo>=</mo><mi>π</mi><mo>≈</mo><mn>3.14159</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.PI}} = \\pi \\approx 3.14159</annotation></semantics></math>\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nBecause `PI` is a static property of `Math`, you always use it as `Math.PI`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.PI\n\nThe following function uses `Math.PI` to calculate the circumference of a circle with a passed radius.\n\n```js\nfunction calculateCircumference(radius) {\n  return Math.PI * (radius + radius);\n}\n\ncalculateCircumference(1); // 6.283185307179586\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math\")}}\n"
    },
    "pow": {
      "index.md": "---\ntitle: Math.pow()\nslug: Web/JavaScript/Reference/Global_Objects/Math/pow\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.pow\n---\n\n{{JSRef}}\n\nThe **`Math.pow()`** static method returns the value of a base raised to a power. That is\n\n<math display=\"block\"><semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚙𝚘𝚠</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo>,</mo><mi>𝚢</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msup><mi>x</mi><mi>y</mi></msup></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.pow}(x, y)} = x^y</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-pow.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.pow(base, exponent)\n```\n\n### Parameters\n\n- `base`\n  - : The base number.\n- `exponent`\n  - : The exponent number.\n\n### Return value\n\nA number representing `base` taken to the power of `exponent`. Returns {{jsxref(\"NaN\")}} in one of the following cases:\n\n- `exponent` is `NaN`.\n- `base` is `NaN` and `exponent` is not `0`.\n- `base` is ±1 and `exponent` is ±`Infinity`.\n- `base < 0` and `exponent` is not an integer.\n\n## Description\n\n`Math.pow()` is equivalent to the [`**`](/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation) operator, except `Math.pow()` only accepts numbers.\n\n`Math.pow(NaN, 0)` (and the equivalent `NaN ** 0`) is the only case where {{jsxref(\"NaN\")}} doesn't propagate through mathematical operations — it returns `1` despite the operand being `NaN`. In addition, the behavior where `base` is 1 and `exponent` is non-finite (±Infinity or `NaN`) is different from IEEE 754, which specifies that the result should be 1, whereas JavaScript returns `NaN` to preserve backward compatibility with its original behavior.\n\nBecause `pow()` is a static method of `Math`, use it as `Math.pow()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.pow()\n\n```js\n// Simple cases\nMath.pow(7, 2); // 49\nMath.pow(7, 3); // 343\nMath.pow(2, 10); // 1024\n\n// Fractional exponents\nMath.pow(4, 0.5); // 2 (square root of 4)\nMath.pow(8, 1 / 3); // 2 (cube root of 8)\nMath.pow(2, 0.5); // 1.4142135623730951 (square root of 2)\nMath.pow(2, 1 / 3); // 1.2599210498948732 (cube root of 2)\n\n// Signed exponents\nMath.pow(7, -2); // 0.02040816326530612 (1/49)\nMath.pow(8, -1 / 3); // 0.5\n\n// Signed bases\nMath.pow(-7, 2); // 49 (squares are positive)\nMath.pow(-7, 3); // -343 (cubes can be negative)\nMath.pow(-7, 0.5); // NaN (negative numbers don't have a real square root)\n// Due to \"even\" and \"odd\" roots laying close to each other,\n// and limits in the floating number precision,\n// negative bases with fractional exponents always return NaN,\n// even when the mathematical result is real\nMath.pow(-7, 1 / 3); // NaN\n\n// Zero and infinity\nMath.pow(0, 0); // 1 (anything ** ±0 is 1)\nMath.pow(Infinity, 0.1); // Infinity (positive exponent)\nMath.pow(Infinity, -1); // 0 (negative exponent)\nMath.pow(-Infinity, 1); // -Infinity (positive odd integer exponent)\nMath.pow(-Infinity, 1.5); // Infinity (positive exponent)\nMath.pow(-Infinity, -1); // -0 (negative odd integer exponent)\nMath.pow(-Infinity, -1.5); // 0 (negative exponent)\nMath.pow(0, 1); // 0 (positive exponent)\nMath.pow(0, -1); // Infinity (negative exponent)\nMath.pow(-0, 1); // -0 (positive odd integer exponent)\nMath.pow(-0, 1.5); // 0 (positive exponent)\nMath.pow(-0, -1); // -Infinity (negative odd integer exponent)\nMath.pow(-0, -1.5); // Infinity (negative exponent)\nMath.pow(0.9, Infinity); // 0\nMath.pow(1, Infinity); // NaN\nMath.pow(1.1, Infinity); // Infinity\nMath.pow(0.9, -Infinity); // Infinity\nMath.pow(1, -Infinity); // NaN\nMath.pow(1.1, -Infinity); // 0\n\n// NaN: only Math.pow(NaN, 0) does not result in NaN\nMath.pow(NaN, 0); // 1\nMath.pow(NaN, 1); // NaN\nMath.pow(1, NaN); // NaN\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.cbrt()\")}}\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.sqrt()\")}}\n- [Exponentiation (`**`)](/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation)\n"
    },
    "random": {
      "index.md": "---\ntitle: Math.random()\nslug: Web/JavaScript/Reference/Global_Objects/Math/random\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.random\n---\n\n{{JSRef}}\n\nThe **`Math.random()`** static method returns a floating-point, pseudo-random number that's greater than or equal to 0 and less than 1, with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.\n\n> **Note:** `Math.random()` _does not_ provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the {{domxref(\"Crypto/getRandomValues\", \"window.crypto.getRandomValues()\")}} method.\n\n{{EmbedInteractiveExample(\"pages/js/math-random.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.random()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA floating-point, pseudo-random number between 0 (inclusive) and 1 (exclusive).\n\n## Examples\n\nNote that as numbers in JavaScript are IEEE 754 floating point numbers with round-to-nearest-even behavior, the ranges claimed for the functions below (excluding the one for `Math.random()` itself) aren't exact. If extremely large bounds are chosen (2<sup>53</sup> or higher), it's possible in _extremely_ rare cases to reach the usually-excluded upper bound.\n\n### Getting a random number between 0 (inclusive) and 1 (exclusive)\n\n```js\nfunction getRandom() {\n  return Math.random();\n}\n```\n\n### Getting a random number between two values\n\nThis example returns a random number between the specified values. The returned value is no lower than (and may possibly equal) `min`, and is less than (and not equal) `max`.\n\n```js\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n```\n\n### Getting a random integer between two values\n\nThis example returns a random _integer_ between the specified values. The value is no lower than `min` (or the next integer greater than `min` if `min` isn't an integer), and is less than (but not equal to) `max`.\n\n```js\nfunction getRandomInt(min, max) {\n  const minCeiled = Math.ceil(min);\n  const maxFloored = Math.floor(max);\n  return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive\n}\n```\n\n> **Note:** It might be tempting to use [`Math.round()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round) to accomplish that, but doing so would cause your random numbers to follow a non-uniform distribution, which may not be acceptable for your needs.\n\n### Getting a random integer between two values, inclusive\n\nWhile the `getRandomInt()` function above is inclusive at the minimum, it's exclusive at the maximum. What if you need the results to be inclusive at both the minimum and the maximum? The `getRandomIntInclusive()` function below accomplishes that.\n\n```js\nfunction getRandomIntInclusive(min, max) {\n  const minCeiled = Math.ceil(min);\n  const maxFloored = Math.floor(max);\n  return Math.floor(Math.random() * (maxFloored - minCeiled + 1) + minCeiled); // The maximum is inclusive and the minimum is inclusive\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{domxref(\"Crypto/getRandomValues\", \"window.crypto.getRandomValues()\")}}\n"
    },
    "round": {
      "index.md": "---\ntitle: Math.round()\nslug: Web/JavaScript/Reference/Global_Objects/Math/round\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.round\n---\n\n{{JSRef}}\n\nThe **`Math.round()`** static method returns the value of a number rounded to the nearest integer.\n\n{{EmbedInteractiveExample(\"pages/js/math-round.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.round(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe value of `x` rounded to the nearest integer.\n\n## Description\n\nIf the fractional portion of the argument is greater than 0.5, the argument is rounded to the integer with the next higher absolute value. If it is less than 0.5, the argument is rounded to the integer with the lower absolute value. If the fractional portion is exactly 0.5, the argument is rounded to the next integer in the direction of +∞.\n\n> **Note:** This differs from many languages' `round()` functions, which often round half-increments _away from zero_, giving a different result in the case of negative numbers with a fractional part of exactly 0.5.\n\n`Math.round(x)` is not exactly the same as [`Math.floor(x + 0.5)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor). When `x` is -0, or -0.5 ≤ x < 0, `Math.round(x)` returns -0, while `Math.floor(x + 0.5)` returns 0. However, neglecting that difference and potential precision errors, `Math.round(x)` and `Math.floor(x + 0.5)` are generally equivalent.\n\nBecause `round()` is a static method of `Math`, you always use it as `Math.round()`, rather than as a method of a `Math` object you created (`Math` has no constructor).\n\n## Examples\n\n### Using round\n\n```js\nMath.round(-Infinity); // -Infinity\nMath.round(-20.51); // -21\nMath.round(-20.5); // -20\nMath.round(-0.1); // -0\nMath.round(0); // 0\nMath.round(20.49); // 20\nMath.round(20.5); // 21\nMath.round(42); // 42\nMath.round(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number.prototype.toPrecision()\")}}\n- {{jsxref(\"Number.prototype.toFixed()\")}}\n- {{jsxref(\"Math.abs()\")}}\n- {{jsxref(\"Math.ceil()\")}}\n- {{jsxref(\"Math.floor()\")}}\n- {{jsxref(\"Math.sign()\")}}\n- {{jsxref(\"Math.trunc()\")}}\n"
    },
    "sign": {
      "index.md": "---\ntitle: Math.sign()\nslug: Web/JavaScript/Reference/Global_Objects/Math/sign\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.sign\n---\n\n{{JSRef}}\n\nThe **`Math.sign()`** static method returns 1 or -1, indicating the sign of the number passed as argument. If the input is 0 or -0, it will be returned as-is.\n\n{{EmbedInteractiveExample(\"pages/js/math-sign.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.sign(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nA number representing the sign of `x`:\n\n- If `x` is positive, returns `1`.\n- If `x` is negative, returns `-1`.\n- If `x` is positive zero, returns `0`.\n- If `x` is negative zero, returns `-0`.\n- Otherwise, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nBecause `sign()` is a static method of `Math`, you always use it as `Math.sign()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.sign()\n\n```js\nMath.sign(3); // 1\nMath.sign(-3); // -1\nMath.sign(\"-3\"); // -1\nMath.sign(0); // 0\nMath.sign(-0); // -0\nMath.sign(NaN); // NaN\nMath.sign(\"foo\"); // NaN\nMath.sign(); // NaN\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.sign` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.abs()\")}}\n- {{jsxref(\"Math.ceil()\")}}\n- {{jsxref(\"Math.floor()\")}}\n- {{jsxref(\"Math.round()\")}}\n- {{jsxref(\"Math.trunc()\")}}\n"
    },
    "sin": {
      "index.md": "---\ntitle: Math.sin()\nslug: Web/JavaScript/Reference/Global_Objects/Math/sin\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.sin\n---\n\n{{JSRef}}\n\nThe **`Math.sin()`** static method returns the sine of a number in radians.\n\n{{EmbedInteractiveExample(\"pages/js/math-sin.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.sin(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number representing an angle in radians.\n\n### Return value\n\nThe sine of `x`, between -1 and 1, inclusive. If `x` is {{jsxref(\"Infinity\")}}, `-Infinity`, or {{jsxref(\"NaN\")}}, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nBecause `sin()` is a static method of `Math`, you always use it as `Math.sin()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.sin()\n\n```js\nMath.sin(-Infinity); // NaN\nMath.sin(-0); // -0\nMath.sin(0); // 0\nMath.sin(1); // 0.8414709848078965\nMath.sin(Math.PI / 2); // 1\nMath.sin(Infinity); // NaN\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.acos()\")}}\n- {{jsxref(\"Math.asin()\")}}\n- {{jsxref(\"Math.atan()\")}}\n- {{jsxref(\"Math.atan2()\")}}\n- {{jsxref(\"Math.cos()\")}}\n- {{jsxref(\"Math.tan()\")}}\n"
    },
    "sinh": {
      "index.md": "---\ntitle: Math.sinh()\nslug: Web/JavaScript/Reference/Global_Objects/Math/sinh\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.sinh\n---\n\n{{JSRef}}\n\nThe **`Math.sinh()`** static method returns the hyperbolic sine of a number. That is,\n\n<math display=\"block\"><semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚜𝚒𝚗𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">sinh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><mo>−</mo><msup><mi mathvariant=\"normal\">e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.sinh}(x)} = \\sinh(x) = \\frac{\\mathrm{e}^x - \\mathrm{e}^{-x}}{2}</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-sinh.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.sinh(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe hyperbolic sine of `x`.\n\n## Description\n\nBecause `sinh()` is a static method of `Math`, you always use it as `Math.sinh()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.sinh()\n\n```js\nMath.sinh(-Infinity); // -Infinity\nMath.sinh(-0); // -0\nMath.sinh(0); // 0\nMath.sinh(1); // 1.1752011936438014\nMath.sinh(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.sinh` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.acosh()\")}}\n- {{jsxref(\"Math.asinh()\")}}\n- {{jsxref(\"Math.atanh()\")}}\n- {{jsxref(\"Math.cosh()\")}}\n- {{jsxref(\"Math.tanh()\")}}\n"
    },
    "sqrt": {
      "index.md": "---\ntitle: Math.sqrt()\nslug: Web/JavaScript/Reference/Global_Objects/Math/sqrt\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.sqrt\n---\n\n{{JSRef}}\n\nThe **`Math.sqrt()`** static method returns the square root of a number. That is\n\n<math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>≥</mo><mn>0</mn><mo>,</mo><mspace width=\"0.2777777777777778em\"></mspace><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚜𝚚𝚛𝚝</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><msqrt><mi>x</mi></msqrt><mo>=</mo><mtext>the unique&nbsp;</mtext><mi>y</mi><mo>≥</mo><mn>0</mn><mtext>&nbsp;such that&nbsp;</mtext><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\geq 0,\\;\\mathtt{\\operatorname{Math.sqrt}(x)} = \\sqrt{x} = \\text{the unique } y \\geq 0 \\text{ such that } y^2 = x</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-sqrt.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.sqrt(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number greater than or equal to 0.\n\n### Return value\n\nThe square root of `x`, a nonnegative number. If `x < 0`, returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nBecause `sqrt()` is a static method of `Math`, you always use it as `Math.sqrt()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.sqrt()\n\n```js\nMath.sqrt(-1); // NaN\nMath.sqrt(-0); // -0\nMath.sqrt(0); // 0\nMath.sqrt(1); // 1\nMath.sqrt(2); // 1.414213562373095\nMath.sqrt(9); // 3\nMath.sqrt(Infinity); // Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.cbrt()\")}}\n- {{jsxref(\"Math.exp()\")}}\n- {{jsxref(\"Math.log()\")}}\n- {{jsxref(\"Math.pow()\")}}\n"
    },
    "sqrt1_2": {
      "index.md": "---\ntitle: Math.SQRT1_2\nslug: Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Math.SQRT1_2\n---\n\n{{JSRef}}\n\nThe **`Math.SQRT1_2`** static data property represents the square root of 1/2, which is approximately 0.707.\n\n{{EmbedInteractiveExample(\"pages/js/math-sqrt1_2.html\", \"shorter\")}}\n\n## Value\n\n<math display=\"block\"><semantics><mrow><mi>𝙼𝚊𝚝𝚑.𝚂𝚀𝚁𝚃𝟷_𝟸</mi><mo>=</mo><msqrt><mfrac><mn>1</mn><mn>2</mn></mfrac></msqrt><mo>≈</mo><mn>0.707</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.SQRT1_2}} = \\sqrt{\\frac{1}{2}} \\approx 0.707</annotation></semantics></math>\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\n`Math.SQRT1_2` is a constant and a more performant equivalent to [`Math.sqrt(0.5)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt).\n\nBecause `SQRT1_2` is a static property of `Math`, you always use it as `Math.SQRT1_2`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.SQRT1_2\n\nThe following function returns 1 over the square root of 2:\n\n```js\nfunction getRoot1_2() {\n  return Math.SQRT1_2;\n}\n\ngetRoot1_2(); // 0.7071067811865476\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.pow()\")}}\n- {{jsxref(\"Math.sqrt()\")}}\n"
    },
    "sqrt2": {
      "index.md": "---\ntitle: Math.SQRT2\nslug: Web/JavaScript/Reference/Global_Objects/Math/SQRT2\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Math.SQRT2\n---\n\n{{JSRef}}\n\nThe **`Math.SQRT2`** static data property represents the square root of 2, approximately 1.414.\n\n{{EmbedInteractiveExample(\"pages/js/math-sqrt2.html\", \"shorter\")}}\n\n## Value\n\n<math display=\"block\"><semantics><mrow><mi>𝙼𝚊𝚝𝚑.𝚂𝚀𝚁𝚃𝟸</mi><mo>=</mo><msqrt><mn>2</mn></msqrt><mo>≈</mo><mn>1.414</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.SQRT2}} = \\sqrt{2} \\approx 1.414</annotation></semantics></math>\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\n`Math.SQRT2` is a constant and a more performant equivalent to [`Math.sqrt(2)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt).\n\nBecause `SQRT2` is a static property of `Math`, you always use it as `Math.SQRT2`, rather than as a property of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.SQRT2\n\nThe following function returns the square root of 2:\n\n```js\nfunction getRoot2() {\n  return Math.SQRT2;\n}\n\ngetRoot2(); // 1.4142135623730951\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.pow()\")}}\n- {{jsxref(\"Math.sqrt()\")}}\n"
    },
    "tan": {
      "index.md": "---\ntitle: Math.tan()\nslug: Web/JavaScript/Reference/Global_Objects/Math/tan\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.tan\n---\n\n{{JSRef}}\n\nThe **`Math.tan()`** static method returns the tangent of a number in radians.\n\n{{EmbedInteractiveExample(\"pages/js/math-tan.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.tan(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number representing an angle in radians.\n\n### Return value\n\nThe tangent of `x`. If `x` is {{jsxref(\"Infinity\")}}, `-Infinity`, or {{jsxref(\"NaN\")}}, returns {{jsxref(\"NaN\")}}.\n\n> **Note:** Due to floating point precision, it's not possible to obtain the exact value π/2, so the result is always finite if not `NaN`.\n\n## Description\n\nBecause `tan()` is a static method of `Math`, you always use it as `Math.tan()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.tan()\n\n```js\nMath.tan(-Infinity); // NaN\nMath.tan(-0); // -0\nMath.tan(0); // 0\nMath.tan(1); // 1.5574077246549023\nMath.tan(Math.PI / 4); // 0.9999999999999999 (Floating point error)\nMath.tan(Infinity); // NaN\n```\n\n### Math.tan() and π/2\n\nIt's not possible to calculate `tan(π/2)` exactly.\n\n```js\nMath.tan(Math.PI / 2); // 16331239353195370\nMath.tan(Math.PI / 2 + Number.EPSILON); // -6218431163823738\n```\n\n### Using Math.tan() with a degree value\n\nBecause the `Math.tan()` function accepts radians, but it is often easier to work with degrees, the following function accepts a value in degrees, converts it to radians and returns the tangent.\n\n```js\nfunction getTanDeg(deg) {\n  const rad = (deg * Math.PI) / 180;\n  return Math.tan(rad);\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Math.acos()\")}}\n- {{jsxref(\"Math.asin()\")}}\n- {{jsxref(\"Math.atan()\")}}\n- {{jsxref(\"Math.atan2()\")}}\n- {{jsxref(\"Math.cos()\")}}\n- {{jsxref(\"Math.sin()\")}}\n"
    },
    "tanh": {
      "index.md": "---\ntitle: Math.tanh()\nslug: Web/JavaScript/Reference/Global_Objects/Math/tanh\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.tanh\n---\n\n{{JSRef}}\n\nThe **`Math.tanh()`** static method returns the hyperbolic tangent of a number. That is,\n\n<math display=\"block\"><semantics><mrow><mrow><mo lspace=\"0em\" rspace=\"0.16666666666666666em\">𝙼𝚊𝚝𝚑.𝚝𝚊𝚗𝚑</mo><mo stretchy=\"false\">(</mo><mi>𝚡</mi><mo stretchy=\"false\">)</mo></mrow><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">tanh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mo lspace=\"0em\" rspace=\"0em\">sinh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mo lspace=\"0em\" rspace=\"0em\">cosh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><mo>−</mo><msup><mi mathvariant=\"normal\">e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi mathvariant=\"normal\">e</mi><mi>x</mi></msup><mo>+</mo><msup><mi mathvariant=\"normal\">e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi mathvariant=\"normal\">e</mi><mrow><mn>2</mn><mi>x</mi></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><msup><mi mathvariant=\"normal\">e</mi><mrow><mn>2</mn><mi>x</mi></mrow></msup><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.tanh}(x)} = \\tanh(x) = \\frac{\\sinh(x)}{\\cosh(x)} = \\frac{\\mathrm{e}^x - \\mathrm{e}^{-x}}{\\mathrm{e}^x + \\mathrm{e}^{-x}} = \\frac{\\mathrm{e}^{2x} - 1}{\\mathrm{e}^{2x}+1}</annotation></semantics></math>\n\n{{EmbedInteractiveExample(\"pages/js/math-tanh.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.tanh(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe hyperbolic tangent of `x`.\n\n## Description\n\nBecause `tanh()` is a static method of `Math`, you always use it as `Math.tanh()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.tanh()\n\n```js\nMath.tanh(-Infinity); // -1\nMath.tanh(-0); // -0\nMath.tanh(0); // 0\nMath.tanh(1); // 0.7615941559557649\nMath.tanh(Infinity); // 1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.tanh` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.acosh()\")}}\n- {{jsxref(\"Math.asinh()\")}}\n- {{jsxref(\"Math.atanh()\")}}\n- {{jsxref(\"Math.cosh()\")}}\n- {{jsxref(\"Math.sinh()\")}}\n"
    },
    "trigonometry.png": "�PNG\r\n\u001a\n\u0000\u0000\u0000\rIHDR\u0000\u0000\u0000�\u0000\u0000\u0000�\b\u0003\u0000\u0000\u0000�x0�\u0000\u0000\u0000\u0004gAMA\u0000\u0000��\u000b�a\u0005\u0000\u0000\u0000\u0001sRGB\u0000��\u001c�\u0000\u0000\u0003\u0000PLTE���___\u000f\u000f\u000f\u0010\u0010\u0010��￿����\u0000\u0000\u0000������\u001f\u001f\u001f???���@@@   ������������OOO������oooG\u0000\u0000O\u0000\u0000���///000���G\u0000G\u0000G�������\u0000\u0000G������\u0000\u0000O�G\u0000_\u0000\u0000������קG\u0000\u0000/�/\u0000\u0000/��/\u0000�O\u0000������؞H����ő���M�ק��o\u0000\u0000���/��ܿ�\u0000\u0000�קO����꽓\u0000\u0000\u0000\u0000o���\u0017\u0017\u0017\u0000\u0000w�J\u0000�ߧ�ϗΏ/ߧM����uӦt���G��/\u0000/\u0000O�\u0000/�o��/\u0000\u0000���ՙ/�߹�������w\u0000������K\u0000�o\u0000\u0000/w�ӹ������ccc�\u0000\u0000������w\u0000\u0000\u0000s�/�Ϻ���筇/\u0000�ϳ\u0000_������ׯ��������\u0000\u0000������/��_��\u0000�ǲ��\u0000\u0000_\u0000�Ѥ��������������ͱ�ڧ_��O_��G\u0000/ǧw���o�����ϒ������/Ol������������פO��͔G��ߌ|�)))\u0006\u0006\u0006����O\u0000\u0000L���|������ſό�����/KO_/\u0000�l?ϟ_OG/��������������O��ӻ�ws��g/����㋫ˇkO��Gw/\u0000g��wOw���W���Os\u0000//\u0000_����\u0000/�w������קGOW\u0000G�WO_ӷ�������\u0000o�\u0000\u0000��çs�糧O��KK\u0000/��w��G/\u0000o\u0000_G\u0000oGOw\u0000��/w�������o�����/G/���\u0000O�\u0000Go���_\u0000/���_wǇ\u0000���OGw���Ƿ���O���__w��wwGO��ߟ�Oǧ_/O�������/�ϟ_\u0000oOGח\u0000��_w�ϧ��O_/\u0000/OO��wO/o/\u0000��\u001c�\u0000\u0000\n�IDATx��\\\u0007t\u0013W\u0016�B#=ɶd�\u0019ɶlY�-w\u001bc�p��@BM�m���\u0002�@BB�5\u0010\b��IXJȆ$�޳{ҳ�}{����G3�dyFӾ�?��9V\u001b4���w��o�|��b(�b(�\">����_M(�l�K�\u001fz�;�\u0006r9\u0004�_?�fٝ!�h�b�qxj7�܌�����\u0015���\u0018���\u001fv �>�o:�7W:*�����\u0005�r��t���k\u001c�\u0001��i�Z��\u001f���4�\u001b\u000e��[\u001aa���O�|�\u0003{�o��z+�ܚY�x\u0005�x��G���\n]��txN�,�mBh�o�n�Ի�M�Hd�6�\ni��9�h���\u0011�d��/��E\u0001o3K�:vc�\n]\u0018H���E1�qU�\u0017/~��\\�\u0016��,���\r�L͹�I\b�>��\u0006�擶> 4�����Uм���5\\��4�w���\u000e�m?4\u000b&���z��E<��w\u0013�8l>|&PI��\u0000�ؿ�a ]^�G�-�\u001a�k!��\u0000KU\u0004��ٿ��fn�\u00073\u0003��?��8�\u0003���\u0019�#F�q��X\u0010,G\u0017C������b{篟_�P��'��?��9z��\b�w��\u0015-k��}\f5<4�˝:�d7.���g��!4.X|rRŗ\u0004�\u001c���0��\u0018����^�:�\u001ch����a�,��\nt�52\u001c������)�ˣ�g�\\0�J4�נ��n\u0018�H�gc\u000b���\u0015����[�K�6�q*\u00132��\u0019\u0004^�\u001d3� �\f�d0��y���|ہz�bÿ\u0013�\f%@\u00103\f\f\u0003?0�3R&�z�5��\u000b�����iɊА\n (g\u0018�ƾ\u001f\u000eY��%O\u0003��D\u0013\u0001z��\u001c\u00003-@0�\"��/�\u0001r��\\Q6��D&�\u0000vj�`\u00115�����1M��&j��Úݗ�&\u0018�(<\n��\u0000AQ��V���\u0003S,�@���\u0011*\u00172�~�DP�c\u0006e�{��e�W9�`8�3�:��\u000e�\u0006^z\u0015E��Q\u0000\u0004�ʘ�rT\u0018NL�-$vb\u0000�J�`\tv��@�A��F�f6M@�;�㪏��\u001ej�m�گb\t6Ӓ��l�Pl��\u00156I\u0005b\u0000���\u0000DJ.\u0012�2i+ȭD�`-aז��]������\u001dd3\u0014P���|@I�^��nUSd\u0011M22@���&�#D-\"À���UɊa$\u0006f�\u0016Y���P��Y�5RK��\u0015sg\u001a]��d�[�$B���\u0006d�v����\u001a%X\u0013�\bZnҍG�E���Θ�I�I��M���B�l��BN�\u0015K9;�As�[IIo��Ux��\u0001���A�@\u0018#qNg)̹^�ui�.nN�zj\u0019�I�Z\u0015��\u0005Uף�F�U�E�%E\u0012|��Q�Ǌ�}����\u0012��R�X^\u0005���!-�r��^������!-�N��\n����+{�Cɳ.\r@����AVv��\u0016\u0006ȯz\u000e���٘�rB��,��/^5�\u00193Fˬ2\u0002\u001e������\u000e+�Zy\u0012�k[\u0015�dX��ZI��~\u001d��z\u0017�Yob��\u0015A�|�L&y@��e�\\K6�]�N��_\\d%�W+���\nm\u0007�\u0003�Բ�/��SPf�3�y�p\u000b�VYk\u0011��AB\u0014+?���D�G�-�Iw������zY\u0015�L�)���+���M\u0015���.ٳ�)�1�W��^�k���\u001b��\u0002�%�oŊk9\u0012\u001c�\u001e{\u0012�ن\n�E��(%�2\u001a�\u0013X\f�p�*\u000b��\u0012\u001c�\f��6��Z��\u0012m-jw�\u0007��#�ðM9����W\u0011q�{آq��dw�Bz��\"��xd�b�&#E@H�\u0016�$XR�G{\u0001��\u0003)��55�\u001b�z%��*ظ��\u001f�*���1��].�xlX�:ޥ���[�\u001ayp\u001a\u001eG�K�)�VRZ��\\o\u0017|o�λᅌ��$�=%EV�\u0004'�p�^3��\u0006��ޗ\u0014\u0000�H��F�S���\u0011���\u000b$r����b�H�x�<�\u000e�\u000f*�k~\u001apH4\u001e���\u0019���UJ\u0004Ę�+��D\u0012<��iᮏȤV\n���\u0011L�z���#�z�U�K\u0014�����M����T�]o/����_|F.\u0010~�Le\r\u000b�+\b�o[�$�\t\u001a�K�9�}��\\�u�Lj��\u0016+�\u0010{�a��\u0013x0��O~�sz)v�\u0013\u0001�\f5\u0002��-7�\u001e}a\u0001�pT|�\u0018��\u0005\b�G�\u0016�\u0012,Zr-�i96[�n�[�\u001dA��=�k\f�PG����\r{`�n8��{�\u000bkNqˍx����!�6Յ����\u001b~\u000f.n��KX���B�{:��P@S�������\u001f\u0019�T��d��c�U�}\u001f����6\u000f��Hg\u0019��eM�\u0015\u0015\nߨ[s�g�(~\u000bY�{9�essu��k��ڭ�\n>G��m�:\u001c��\u001f�K�\u001c\u000f�\u001a>�\u001b9[]�?��\u0001q�\n��㶔��`�j�S�\u0014yn��d�Vt�L\u0004\b{\u0003��Ϳ�q�nra��P�Ⱦ3�-7���]A��#��Qn���K@�=���x���\u0007$��دZ���.���\u001c�0o዇�/]�\u001a�\nqˍp@�\u0002޽%u�g�o@�p=�E�\u0004g\u000b\u0001�B�\u0019��<jŴ\u0016�;Թ/�\f�k�`��@��\u0001^,Gg���r#�\b��X1�vi9V38��m��z\u0005<����HxOP޲&­�\u001f�`W\u001b)�\u0016\u0019a�����F\u001eX\u00169p̨A[\u0014�`�1�\u0002\u001bM+��ۊ\u0005�]�vH�\n/��ǒ��\u0003\u001c�V^\u0019/�Z,Yy\u0017�h\n��z��=\r�V��5\u0001IakQR�\u00137\u001e-\u0012I�\u0006+&:Zf<���(%��\u001fi򷢮�QI-Ƙ��!�TP\\��-\u0012_\u0017�D�\u0012�2ݮ�Zih-JJ���Z\u0006=�\u001b�I*��KSkQ��MD-k���*�`��dO��\u0019r�7\u0011���\u0016%$X��h\u0011��f\u001a�(�ϯ�6��� e��%y�\"q�+F��M�!(� ���\u0012\"�\u0015T\u0019�4K�]&��tJoL�%o�3�Wd�K�<�K��\u0015s��2���ک3�\\/P�o�$� \t�@��&�U�<��-�g<R�Z��`�D%C��ƸބԢ��\nG�t\u001b�\u001bj�u�c��\u001d\u0000Ĭ\u0007�\u0015�\u0016y��N\t6��-]Ho4\u000f��k�\u0011�8�kх�\u0015�`F ٓ~W^r]/�P.Kg8\u0006$�E�\b��z�R��\u0013\t\u001e�z�m-JIpA\u001c�\n�%��]/��ߊ���>�u�\u0013H�t\u001b\u000bo��t�c�����(%�v��[Q�k�eҋ�\u0015\u000en�\r =�\u0016�$�\u001a\u0001bի�Ƹ^\u0006S�1�Ȋ�`\u0003�IkQ���襵(�z-v�\u0016Y�\u0012\f��ި�\u0005��[����/\n\u001cȌ�h(��\"��\u0000�ˇ%�U��\u0000\u0000\u0000\u0000IEND�B`�",
    "trunc": {
      "index.md": "---\ntitle: Math.trunc()\nslug: Web/JavaScript/Reference/Global_Objects/Math/trunc\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Math.trunc\n---\n\n{{JSRef}}\n\nThe **`Math.trunc()`** static method returns the integer part of a number by removing any fractional digits.\n\n{{EmbedInteractiveExample(\"pages/js/math-trunc.html\")}}\n\n## Syntax\n\n```js-nolint\nMath.trunc(x)\n```\n\n### Parameters\n\n- `x`\n  - : A number.\n\n### Return value\n\nThe integer part of `x`.\n\n## Description\n\nUnlike the other three `Math` methods: {{jsxref(\"Math.floor()\")}}, {{jsxref(\"Math.ceil()\")}} and {{jsxref(\"Math.round()\")}}, the way `Math.trunc()` works is very simple. It _truncates_ (cuts off) the dot and the digits to the right of it, no matter whether the argument is a positive or negative number.\n\nBecause `trunc()` is a static method of `Math`, you always use it as `Math.trunc()`, rather than as a method of a `Math` object you created (`Math` is not a constructor).\n\n## Examples\n\n### Using Math.trunc()\n\n```js\nMath.trunc(-Infinity); // -Infinity\nMath.trunc(\"-1.123\"); // -1\nMath.trunc(-0.123); // -0\nMath.trunc(-0); // -0\nMath.trunc(0); // 0\nMath.trunc(0.123); // 0\nMath.trunc(13.37); // 13\nMath.trunc(42.84); // 42\nMath.trunc(Infinity); // Infinity\n```\n\n### Using bitwise no-ops to truncate numbers\n\n> **Warning:** This is not a polyfill for `Math.trunc()` because of non-negligible edge cases.\n\nBitwise operations convert their operands to 32-bit integers, which people have historically taken advantage of to truncate float-point numbers. Common techniques include:\n\n```js\nconst original = 3.14;\nconst truncated1 = ~~original; // Double negation\nconst truncated2 = original & -1; // Bitwise AND with -1\nconst truncated3 = original | 0; // Bitwise OR with 0\nconst truncated4 = original ^ 0; // Bitwise XOR with 0\nconst truncated5 = original >> 0; // Bitwise shifting by 0\n```\n\nBeware that this is essentially `toInt32`, which is not the same as `Math.trunc`. When the value does not satisfy -2<sup>31</sup> - 1 < `value` < 2<sup>31</sup> (-2147483649 < `value` < 2147483648), the conversion would overflow.\n\n```js\nconst a = ~~2147483648; // -2147483648\nconst b = ~~-2147483649; // 2147483647\nconst c = ~~4294967296; // 0\n```\n\nOnly use `~~` as a substitution for `Math.trunc()` when you are confident that the range of input falls within the range of 32-bit integers.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Math.trunc` in `core-js`](https://github.com/zloirock/core-js#ecmascript-math)\n- {{jsxref(\"Math.abs()\")}}\n- {{jsxref(\"Math.ceil()\")}}\n- {{jsxref(\"Math.floor()\")}}\n- {{jsxref(\"Math.round()\")}}\n- {{jsxref(\"Math.sign()\")}}\n"
    }
  },
  "nan": {
    "index.md": "---\ntitle: NaN\nslug: Web/JavaScript/Reference/Global_Objects/NaN\npage-type: javascript-global-property\nbrowser-compat: javascript.builtins.NaN\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`NaN`** global property is a value representing Not-A-Number.\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-nan.html\")}}\n\n## Value\n\nThe same number value as {{jsxref(\"Number.NaN\")}}.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\n`NaN` is a property of the _global object_. In other words, it is a variable in global scope.\n\nIn modern browsers, `NaN` is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it.\n\nThere are five different types of operations that return `NaN`:\n\n- Failed number conversion (e.g. explicit ones like `parseInt(\"blabla\")`, `Number(undefined)`, or implicit ones like `Math.abs(undefined)`)\n- Math operation where the result is not a real number (e.g. `Math.sqrt(-1)`)\n- Indeterminate form (e.g. `0 * Infinity`, `1 ** Infinity`, `Infinity / Infinity`, `Infinity - Infinity`)\n- A method or expression whose operand is or gets coerced to `NaN` (e.g. `7 ** NaN`, `7 * \"blabla\"`) — this means `NaN` is contagious\n- Other cases where an invalid value is to be represented as a number (e.g. an invalid [Date](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) `new Date(\"blabla\").getTime()`, `\"\".charCodeAt(1)`)\n\n`NaN` and its behaviors are not invented by JavaScript. Its semantics in floating point arithmetic (including that `NaN !== NaN`) are specified by [IEEE 754](https://en.wikipedia.org/wiki/Double_precision_floating-point_format). `NaN`'s behaviors include:\n\n- If `NaN` is involved in a mathematical operation (but not [bitwise operations](/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_shift_operators)), the result is usually also `NaN`. (See [counter-example](#silently_escaping_nan) below.)\n- When `NaN` is one of the operands of any relational comparison (`>`, `<`, `>=`, `<=`), the result is always `false`.\n- `NaN` compares unequal (via [`==`](/en-US/docs/Web/JavaScript/Reference/Operators/Equality), [`!=`](/en-US/docs/Web/JavaScript/Reference/Operators/Inequality), [`===`](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality), and [`!==`](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality)) to any other value — including to another `NaN` value.\n\n`NaN` is also one of the [falsy](/en-US/docs/Glossary/Falsy) values in JavaScript.\n\n## Examples\n\n### Testing against NaN\n\nTo tell if a value is `NaN`, use {{jsxref(\"Number.isNaN()\")}} or {{jsxref(\"isNaN()\")}} to most clearly determine whether a value is `NaN` — or, since `NaN` is the only value that compares unequal to itself, you can perform a self-comparison like `x !== x`.\n\n```js\nNaN === NaN; // false\nNumber.NaN === NaN; // false\nisNaN(NaN); // true\nisNaN(Number.NaN); // true\nNumber.isNaN(NaN); // true\n\nfunction valueIsNaN(v) {\n  return v !== v;\n}\nvalueIsNaN(1); // false\nvalueIsNaN(NaN); // true\nvalueIsNaN(Number.NaN); // true\n```\n\nHowever, do note the difference between `isNaN()` and `Number.isNaN()`: the former will return `true` if the value is currently `NaN`, or if it is going to be `NaN` after it is coerced to a number, while the latter will return `true` only if the value is currently `NaN`:\n\n```js\nisNaN(\"hello world\"); // true\nNumber.isNaN(\"hello world\"); // false\n```\n\nFor the same reason, using a BigInt value will throw an error with `isNaN()` and not with `Number.isNaN()`:\n\n```js\nisNaN(1n); // TypeError: Conversion from 'BigInt' to 'number' is not allowed.\nNumber.isNaN(1n); // false\n```\n\nAdditionally, some array methods cannot find `NaN`, while others can. Namely, the index-finding ones ({{jsxref(\"Array/indexOf\", \"indexOf()\")}}, {{jsxref(\"Array/lastIndexOf\", \"lastIndexOf()\")}}) cannot find `NaN`, while the value-finding ones ({{jsxref(\"Array/includes\", \"includes()\")}}) can:\n\n```js\nconst arr = [2, 4, NaN, 12];\narr.indexOf(NaN); // -1\narr.includes(NaN); // true\n\n// Methods accepting a properly defined predicate can always find NaN\narr.findIndex((n) => Number.isNaN(n)); // 2\n```\n\nFor more information about `NaN` and its comparison, see [Equality comparison and sameness](/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness).\n\n### Observably distinct NaN values\n\nThere's a motivation for `NaN` being unequal to itself. It's possible to produce two floating point numbers with different binary representations but are both `NaN`, because in [IEEE 754 encoding](https://en.wikipedia.org/wiki/NaN#Floating_point), any floating point number with exponent `0x7ff` and a non-zero mantissa is `NaN`. In JavaScript, you can do bit-level manipulation using [typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays).\n\n```js\nconst f2b = (x) => new Uint8Array(new Float64Array([x]).buffer);\nconst b2f = (x) => new Float64Array(x.buffer)[0];\n// Get a byte representation of NaN\nconst n = f2b(NaN);\nconst m = f2b(NaN);\n// Change the sign bit, which doesn't matter for NaN\nn[7] += 2 ** 7;\n// n[0] += 2**7; for big endian processors\nconst nan2 = b2f(n);\nconsole.log(nan2); // NaN\nconsole.log(Object.is(nan2, NaN)); // true\nconsole.log(f2b(NaN)); // Uint8Array(8) [0, 0, 0, 0, 0, 0, 248, 127]\nconsole.log(f2b(nan2)); // Uint8Array(8) [0, 0, 0, 0, 0, 0, 248, 255]\n// Change the first bit, which is the least significant bit of the mantissa and doesn't matter for NaN\nm[0] = 1;\n// m[7] = 1; for big endian processors\nconst nan3 = b2f(m);\nconsole.log(nan3); // NaN\nconsole.log(Object.is(nan3, NaN)); // true\nconsole.log(f2b(NaN)); // Uint8Array(8) [0, 0, 0, 0, 0, 0, 248, 127]\nconsole.log(f2b(nan3)); // Uint8Array(8) [1, 0, 0, 0, 0, 0, 248, 127]\n```\n\n### Silently escaping NaN\n\n`NaN` propagates through mathematical operations, so it's usually sufficient to test for `NaN` once at the end of calculation to detect error conditions. The only case where `NaN` gets silently escaped is when using [exponentiation](/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation) with an exponent of `0`, which immediately returns `1` without testing the base's value.\n\n```js\nNaN ** 0 === 1; // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number.NaN\")}}\n- {{jsxref(\"Number.isNaN()\")}}\n- {{jsxref(\"isNaN()\")}}\n"
  },
  "number": {
    "epsilon": {
      "index.md": "---\ntitle: Number.EPSILON\nslug: Web/JavaScript/Reference/Global_Objects/Number/EPSILON\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Number.EPSILON\n---\n\n{{JSRef}}\n\nThe **`Number.EPSILON`** static data property represents the difference between 1 and the smallest floating point number greater than 1.\n\n{{EmbedInteractiveExample(\"pages/js/number-epsilon.html\")}}\n\n## Value\n\n2<sup>-52</sup>, or approximately `2.2204460492503130808472633361816E-16`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\n`Number.EPSILON` is the difference between 1 and the next greater number representable in the Number format, because [double precision floating point format](https://en.wikipedia.org/wiki/Double_precision_floating-point_format) only has 52 bits to represent the [mantissa](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding), and the lowest bit has a significance of 2<sup>-52</sup>.\n\nNote that the absolute accuracy of floating numbers decreases as the number gets larger, because the exponent grows while the mantissa's accuracy stays the same. {{jsxref(\"Number.MIN_VALUE\")}} is the smallest representable positive number, which is much smaller than `Number.EPSILON`.\n\nBecause `EPSILON` is a static property of {{jsxref(\"Number\")}}, you always use it as `Number.EPSILON`, rather than as a property of a number value.\n\n## Examples\n\n### Testing equality\n\nAny number encoding system occupying a finite number of bits, of whatever base you choose (e.g. decimal or binary), will _necessarily_ be unable to represent all numbers exactly, because you are trying to represent an infinite number of points on the number line using a finite amount of memory. For example, a base-10 (decimal) system cannot represent 1/3 exactly, and a base-2 (binary) system cannot represent `0.1` exactly. Thus, for example, `0.1 + 0.2` is not exactly equal to `0.3`:\n\n```js\nconsole.log(0.1 + 0.2); // 0.30000000000000004\nconsole.log(0.1 + 0.2 === 0.3); // false\n```\n\nFor this reason, it is often advised that **floating point numbers should never be compared with `===`**. Instead, we can deem two numbers as equal if they are _close enough_ to each other. The `Number.EPSILON` constant is usually a reasonable threshold for errors if the arithmetic is around the magnitude of `1`, because `EPSILON`, in essence, specifies how accurate the number \"1\" is.\n\n```js\nfunction equal(x, y) {\n  return Math.abs(x - y) < Number.EPSILON;\n}\n\nconst x = 0.2;\nconst y = 0.3;\nconst z = 0.1;\nconsole.log(equal(x + z, y)); // true\n```\n\nHowever, `Number.EPSILON` is inappropriate for any arithmetic operating on a larger magnitude. If your data is on the 10<sup>3</sup> order of magnitude, the decimal part will have a much smaller accuracy than `Number.EPSILON`:\n\n```js\nfunction equal(x, y) {\n  return Math.abs(x - y) < Number.EPSILON;\n}\n\nconst x = 1000.1;\nconst y = 1000.2;\nconst z = 2000.3;\nconsole.log(x + y); // 2000.3000000000002; error of 10^-13 instead of 10^-16\nconsole.log(equal(x + y, z)); // false\n```\n\nIn this case, a larger tolerance is required. As the numbers compared have a magnitude of approximately `2000`, a multiplier such as `2000 * Number.EPSILON` creates enough tolerance for this instance.\n\n```js\nfunction equal(x, y, tolerance = Number.EPSILON) {\n  return Math.abs(x - y) < tolerance;\n}\n\nconst x = 1000.1;\nconst y = 1000.2;\nconst z = 2000.3;\nconsole.log(equal(x + y, z, 2000 * Number.EPSILON)); // true\n```\n\nIn addition to magnitude, it is important to consider the _accuracy_ of your input. For example, if the numbers are collected from a form input and the input value can only be adjusted by steps of `0.1` (i.e. [`<input type=\"number\" step=\"0.1\">`](/en-US/docs/Web/HTML/Attributes/step)), it usually makes sense to allow a much larger tolerance, such as `0.01`, since the data only has a precision of `0.1`.\n\n> **Note:** Important takeaway: do not simply use `Number.EPSILON` as a threshold for equality testing. Use a threshold that is appropriate for the magnitude and accuracy of the numbers you are comparing.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Number.EPSILON` in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"Number\")}}\n"
    },
    "index.md": "---\ntitle: Number\nslug: Web/JavaScript/Reference/Global_Objects/Number\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Number\n---\n\n{{JSRef}}\n\n**`Number`** values represent floating-point numbers like `37` or `-9.25`.\n\nThe `Number` constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the `Number()` function.\n\n## Description\n\nNumbers are most commonly expressed in literal forms like `255` or `3.14159`. The [lexical grammar](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals) contains a more detailed reference.\n\n```js\n255; // two-hundred and fifty-five\n255.0; // same number\n255 === 255.0; // true\n255 === 0xff; // true (hexadecimal notation)\n255 === 0b11111111; // true (binary notation)\n255 === 0.255e3; // true (decimal exponential notation)\n```\n\nA number literal like `37` in JavaScript code is a floating-point value, not an integer. There is no separate integer type in common everyday use. (JavaScript also has a {{jsxref(\"BigInt\")}} type, but it's not designed to replace Number for everyday uses. `37` is still a number, not a BigInt.)\n\nWhen used as a function, `Number(value)` converts a string or other value to the Number type. If the value can't be converted, it returns {{jsxref(\"NaN\")}}.\n\n```js\nNumber(\"123\"); // returns the number 123\nNumber(\"123\") === 123; // true\n\nNumber(\"unicorn\"); // NaN\nNumber(undefined); // NaN\n```\n\n### Number encoding\n\nThe JavaScript `Number` type is a [double-precision 64-bit binary format IEEE 754](https://en.wikipedia.org/wiki/Double_precision_floating-point_format) value, like `double` in Java or C#. This means it can represent fractional values, but there are some limits to the stored number's magnitude and precision. Very briefly, an IEEE 754 double-precision number uses 64 bits to represent 3 parts:\n\n- 1 bit for the _sign_ (positive or negative)\n- 11 bits for the _exponent_ (-1022 to 1023)\n- 52 bits for the _mantissa_ (representing a number between 0 and 1)\n\nThe mantissa (also called _significand_) is the part of the number representing the actual value (significant digits). The exponent is the power of 2 that the mantissa should be multiplied by. Thinking about it as scientific notation:\n\n<math display=\"block\"><semantics><mrow><mtext>Number</mtext><mo>=</mo><mo stretchy=\"false\">(</mo><mrow><mo>−</mo><mn>1</mn></mrow><msup><mo stretchy=\"false\">)</mo><mtext>sign</mtext></msup><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mtext>mantissa</mtext><mo stretchy=\"false\">)</mo><mo>⋅</mo><msup><mn>2</mn><mtext>exponent</mtext></msup></mrow><annotation encoding=\"TeX\">\\text{Number} = ({-1})^{\\text{sign}} \\cdot (1 + \\text{mantissa}) \\cdot 2^{\\text{exponent}}</annotation></semantics></math>\n\nThe mantissa is stored with 52 bits, interpreted as digits after `1.…` in a binary fractional number. Therefore, the mantissa's precision is 2<sup>-52</sup> (obtainable via {{jsxref(\"Number.EPSILON\")}}), or about 15 to 17 decimal places; arithmetic above that level of precision is subject to [rounding](https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding).\n\nThe largest value a number can hold is 2<sup>1023</sup> × (2 - 2<sup>-52</sup>) (with the exponent being 1023 and the mantissa being 0.1111… in base 2), which is obtainable via {{jsxref(\"Number.MAX_VALUE\")}}. Values higher than that are replaced with the special number constant {{jsxref(\"Infinity\")}}.\n\nIntegers can only be represented without loss of precision in the range -2<sup>53</sup> + 1 to 2<sup>53</sup> - 1, inclusive (obtainable via {{jsxref(\"Number.MIN_SAFE_INTEGER\")}} and {{jsxref(\"Number.MAX_SAFE_INTEGER\")}}), because the mantissa can only hold 53 bits (including the leading 1).\n\nMore details on this are described in the [ECMAScript standard](https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-ecmascript-language-types-number-type).\n\n### Number coercion\n\nMany built-in operations that expect numbers first coerce their arguments to numbers (which is largely why `Number` objects behave similarly to number primitives). [The operation](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tonumber) can be summarized as follows:\n\n- Numbers are returned as-is.\n- [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) turns into [`NaN`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n- [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) turns into `0`.\n- `true` turns into `1`; `false` turns into `0`.\n- Strings are converted by parsing them as if they contain a [number literal](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals). Parsing failure results in `NaN`. There are some minor differences compared to an actual number literal:\n  - Leading and trailing whitespace/line terminators are ignored.\n  - A leading `0` digit does not cause the number to become an octal literal (or get rejected in strict mode).\n  - `+` and `-` are allowed at the start of the string to indicate its sign. (In actual code, they \"look like\" part of the literal, but are actually separate unary operators.) However, the sign can only appear once, and must not be followed by whitespace.\n  - `Infinity` and `-Infinity` are recognized as literals. In actual code, they are global variables.\n  - Empty or whitespace-only strings are converted to `0`.\n  - [Numeric separators](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_separators) are not allowed.\n- [BigInts](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) throw a {{jsxref(\"TypeError\")}} to prevent unintended implicit coercion causing loss of precision.\n- [Symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) throw a {{jsxref(\"TypeError\")}}.\n- Objects are first [converted to a primitive](/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) by calling their [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) (with `\"number\"` as hint), `valueOf()`, and `toString()` methods, in that order. The resulting primitive is then converted to a number.\n\nThere are two ways to achieve nearly the same effect in JavaScript.\n\n- [Unary plus](/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus): `+x` does exactly the number coercion steps explained above to convert `x`.\n- The [`Number()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number) function: `Number(x)` uses the same algorithm to convert `x`, except that [BigInts](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) don't throw a {{jsxref(\"TypeError\")}}, but return their number value, with possible loss of precision.\n\n{{jsxref(\"Number.parseFloat()\")}} and {{jsxref(\"Number.parseInt()\")}} are similar to `Number()` but only convert strings, and have slightly different parsing rules. For example, `parseInt()` doesn't recognize the decimal point, and `parseFloat()` doesn't recognize the `0x` prefix.\n\n#### Integer conversion\n\nSome operations expect integers, most notably those that work with array/string indices, date/time components, and number radixes. After performing the number coercion steps above, the result is [truncated](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc) to an integer (by discarding the fractional part). If the number is ±Infinity, it's returned as-is. If the number is `NaN` or `-0`, it's returned as `0`. The result is therefore always an integer (which is not `-0`) or ±Infinity.\n\nNotably, when converted to integers, both `undefined` and `null` become `0`, because `undefined` is converted to `NaN`, which also becomes `0`.\n\n#### Fixed-width number conversion\n\nJavaScript has some lower-level functions that deal with the binary encoding of integer numbers, most notably [bitwise operators](/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_shift_operators) and {{jsxref(\"TypedArray\")}} objects. Bitwise operators always convert the operands to 32-bit integers. In these cases, after converting the value to a number, the number is then normalized to the given width by first [truncating](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc) the fractional part and then taking the lowest bits in the integer's two's complement encoding.\n\n```js\nnew Int32Array([1.1, 1.9, -1.1, -1.9]); // Int32Array(4) [ 1, 1, -1, -1 ]\n\nnew Int8Array([257, -257]); // Int8Array(2) [ 1, -1 ]\n// 257 = 0001 0000 0001\n//     =      0000 0001 (mod 2^8)\n//     = 1\n// -257 = 1110 1111 1111\n//      =      1111 1111 (mod 2^8)\n//      = -1 (as signed integer)\n\nnew Uint8Array([257, -257]); // Uint8Array(2) [ 1, 255 ]\n// -257 = 1110 1111 1111\n//      =      1111 1111 (mod 2^8)\n//      = 255 (as unsigned integer)\n```\n\n## Constructor\n\n- {{jsxref(\"Number/Number\", \"Number()\")}}\n  - : Creates a new `Number` value.\n\nWhen `Number` is called as a constructor (with `new`), it creates a {{jsxref(\"Number\")}} object, which is **not** a primitive. For example, `typeof new Number(42) === \"object\"`, and `new Number(42) !== 42` (although `new Number(42) == 42`).\n\n> **Warning:** You should rarely find yourself using `Number` as a constructor.\n\n## Static properties\n\n- {{jsxref(\"Number.EPSILON\")}}\n  - : The smallest interval between two representable numbers.\n- {{jsxref(\"Number.MAX_SAFE_INTEGER\")}}\n  - : The maximum safe integer in JavaScript (2<sup>53</sup> - 1).\n- {{jsxref(\"Number.MAX_VALUE\")}}\n  - : The largest positive representable number.\n- {{jsxref(\"Number.MIN_SAFE_INTEGER\")}}\n  - : The minimum safe integer in JavaScript (-(2<sup>53</sup> - 1)).\n- {{jsxref(\"Number.MIN_VALUE\")}}\n  - : The smallest positive representable number—that is, the positive number closest to zero (without actually being zero).\n- {{jsxref(\"Number.NaN\")}}\n  - : Special \"**N**ot **a** **N**umber\" value.\n- {{jsxref(\"Number.NEGATIVE_INFINITY\")}}\n  - : Special value representing negative infinity. Returned on overflow.\n- {{jsxref(\"Number.POSITIVE_INFINITY\")}}\n  - : Special value representing infinity. Returned on overflow.\n\n## Static methods\n\n- {{jsxref(\"Number.isFinite()\")}}\n  - : Determine whether the passed value is a finite number.\n- {{jsxref(\"Number.isInteger()\")}}\n  - : Determine whether the passed value is an integer.\n- {{jsxref(\"Number.isNaN()\")}}\n  - : Determine whether the passed value is `NaN`.\n- {{jsxref(\"Number.isSafeInteger()\")}}\n  - : Determine whether the passed value is a safe integer (number between -(2<sup>53</sup> - 1) and 2<sup>53</sup> - 1).\n- {{jsxref(\"Number.parseFloat()\")}}\n  - : This is the same as the global {{jsxref(\"parseFloat()\")}} function.\n- {{jsxref(\"Number.parseInt()\")}}\n  - : This is the same as the global {{jsxref(\"parseInt()\")}} function.\n\n## Instance properties\n\nThese properties are defined on `Number.prototype` and shared by all `Number` instances.\n\n- {{jsxref(\"Object/constructor\", \"Number.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Number` instances, the initial value is the {{jsxref(\"Number/Number\", \"Number\")}} constructor.\n\n## Instance methods\n\n- {{jsxref(\"Number.prototype.toExponential()\")}}\n  - : Returns a string representing the number in exponential notation.\n- {{jsxref(\"Number.prototype.toFixed()\")}}\n  - : Returns a string representing the number in fixed-point notation.\n- {{jsxref(\"Number.prototype.toLocaleString()\")}}\n  - : Returns a string with a language sensitive representation of this number. Overrides the {{jsxref(\"Object.prototype.toLocaleString()\")}} method.\n- {{jsxref(\"Number.prototype.toPrecision()\")}}\n  - : Returns a string representing the number to a specified precision in fixed-point or exponential notation.\n- {{jsxref(\"Number.prototype.toString()\")}}\n  - : Returns a string representing the specified object in the specified _radix_ (\"base\"). Overrides the {{jsxref(\"Object.prototype.toString()\")}} method.\n- {{jsxref(\"Number.prototype.valueOf()\")}}\n  - : Returns the primitive value of the specified object. Overrides the {{jsxref(\"Object.prototype.valueOf()\")}} method.\n\n## Examples\n\n### Using the Number object to assign values to numeric variables\n\nThe following example uses the `Number` object's properties to assign values to several numeric variables:\n\n```js\nconst biggestNum = Number.MAX_VALUE;\nconst smallestNum = Number.MIN_VALUE;\nconst infiniteNum = Number.POSITIVE_INFINITY;\nconst negInfiniteNum = Number.NEGATIVE_INFINITY;\nconst notANum = Number.NaN;\n```\n\n### Integer range for Number\n\nThe following example shows the minimum and maximum integer values that can be represented as `Number` object.\n\n```js\nconst biggestInt = Number.MAX_SAFE_INTEGER; // (2**53 - 1) => 9007199254740991\nconst smallestInt = Number.MIN_SAFE_INTEGER; // -(2**53 - 1) => -9007199254740991\n```\n\nWhen parsing data that has been serialized to JSON, integer values falling outside of this range can be expected to become corrupted when JSON parser coerces them to `Number` type.\n\nA possible workaround is to use {{jsxref(\"String\")}} instead.\n\nLarger numbers can be represented using the {{jsxref(\"BigInt\")}} type.\n\n### Using Number() to convert a Date object\n\nThe following example converts the {{jsxref(\"Date\")}} object to a numerical value using `Number` as a function:\n\n```js\nconst d = new Date(\"1995-12-17T03:24:00\");\nconsole.log(Number(d));\n```\n\nThis logs `819199440000`.\n\n### Convert numeric strings and null to numbers\n\n```js\nNumber(\"123\"); // 123\nNumber(\"123\") === 123; // true\nNumber(\"12.3\"); // 12.3\nNumber(\"12.00\"); // 12\nNumber(\"123e-1\"); // 12.3\nNumber(\"\"); // 0\nNumber(null); // 0\nNumber(\"0x11\"); // 17\nNumber(\"0b11\"); // 3\nNumber(\"0o11\"); // 9\nNumber(\"foo\"); // NaN\nNumber(\"100a\"); // NaN\nNumber(\"-Infinity\"); // -Infinity\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of modern `Number` behavior (with support binary and octal literals) in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"NaN\")}}\n- [Arithmetic operators](/en-US/docs/Web/JavaScript/Reference/Operators#arithmetic_operators)\n- {{jsxref(\"Math\")}}\n- {{jsxref(\"BigInt\")}}\n",
    "isfinite": {
      "index.md": "---\ntitle: Number.isFinite()\nslug: Web/JavaScript/Reference/Global_Objects/Number/isFinite\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Number.isFinite\n---\n\n{{JSRef}}\n\nThe **`Number.isFinite()`** static method determines whether the passed value is a finite number — that is, it checks that a given value is a number, and the number is neither positive {{jsxref(\"Infinity\")}}, negative `Infinity`, nor {{jsxref(\"NaN\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/number-isfinite.html\")}}\n\n## Syntax\n\n```js-nolint\nNumber.isFinite(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value to be tested for finiteness.\n\n### Return value\n\nThe boolean value `true` if the given value is a finite number. Otherwise `false`.\n\n## Examples\n\n### Using isFinite()\n\n```js\nNumber.isFinite(Infinity); // false\nNumber.isFinite(NaN); // false\nNumber.isFinite(-Infinity); // false\n\nNumber.isFinite(0); // true\nNumber.isFinite(2e64); // true\n```\n\n### Difference between Number.isFinite() and global isFinite()\n\nIn comparison to the global {{jsxref(\"isFinite()\")}} function, this method doesn't first convert the parameter to a number. This means only values of the type number _and_ are finite return `true`, and non-numbers always return `false`.\n\n```js\nisFinite(\"0\"); // true; coerced to number 0\nNumber.isFinite(\"0\"); // false\nisFinite(null); // true; coerced to number 0\nNumber.isFinite(null); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Number.isFinite` in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"Number\")}}\n- {{jsxref(\"isFinite()\")}}\n"
    },
    "isinteger": {
      "index.md": "---\ntitle: Number.isInteger()\nslug: Web/JavaScript/Reference/Global_Objects/Number/isInteger\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Number.isInteger\n---\n\n{{JSRef}}\n\nThe **`Number.isInteger()`** static method determines whether the passed value is an integer.\n\n{{EmbedInteractiveExample(\"pages/js/number-isinteger.html\")}}\n\n## Syntax\n\n```js-nolint\nNumber.isInteger(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value to be tested for being an integer.\n\n### Return value\n\nThe boolean value `true` if the given value is an integer. Otherwise `false`.\n\n## Description\n\nIf the target value is an integer, return `true`, otherwise return `false`. If the value is {{jsxref(\"NaN\")}} or {{jsxref(\"Infinity\")}}, return `false`. The method will also return `true` for floating point numbers that can be represented as integer. It will always return `false` if the value is not a number.\n\nNote that some number literals, while looking like non-integers, actually represent integers — due to the precision limit of ECMAScript floating-point number encoding (IEEE-754). For example, `5.0000000000000001` only differs from `5` by `1e-16`, which is too small to be represented. (For reference, [`Number.EPSILON`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON) stores the distance between 1 and the next representable floating-point number greater than 1, and that is about `2.22e-16`.) Therefore, `5.0000000000000001` will be represented with the same encoding as `5`, thus making `Number.isInteger(5.0000000000000001)` return `true`.\n\nIn a similar sense, numbers around the magnitude of [`Number.MAX_SAFE_INTEGER`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) will suffer from loss of precision and make `Number.isInteger` return `true` even when it's not an integer. (The actual threshold varies based on how many bits are needed to represent the decimal — for example, `Number.isInteger(4500000000000000.1)` is `true`, but `Number.isInteger(4500000000000000.5)` is `false`.)\n\n## Examples\n\n### Using isInteger\n\n```js\nNumber.isInteger(0); // true\nNumber.isInteger(1); // true\nNumber.isInteger(-100000); // true\nNumber.isInteger(99999999999999999999999); // true\n\nNumber.isInteger(0.1); // false\nNumber.isInteger(Math.PI); // false\n\nNumber.isInteger(NaN); // false\nNumber.isInteger(Infinity); // false\nNumber.isInteger(-Infinity); // false\nNumber.isInteger(\"10\"); // false\nNumber.isInteger(true); // false\nNumber.isInteger(false); // false\nNumber.isInteger([1]); // false\n\nNumber.isInteger(5.0); // true\nNumber.isInteger(5.000000000000001); // false\nNumber.isInteger(5.0000000000000001); // true, because of loss of precision\nNumber.isInteger(4500000000000000.1); // true, because of loss of precision\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Number.isInteger` in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"Number\")}}\n"
    },
    "isnan": {
      "index.md": "---\ntitle: Number.isNaN()\nslug: Web/JavaScript/Reference/Global_Objects/Number/isNaN\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Number.isNaN\n---\n\n{{JSRef}}\n\nThe **`Number.isNaN()`** static method determines whether the passed value is the number value {{jsxref(\"NaN\")}}, and returns `false` if the input is not of the Number type. It is a more robust version of the original, global {{jsxref(\"isNaN()\")}} function.\n\n{{EmbedInteractiveExample(\"pages/js/number-isnan.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nNumber.isNaN(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value to be tested for {{jsxref(\"NaN\")}}.\n\n### Return value\n\nThe boolean value `true` if the given value is a number with value {{jsxref(\"NaN\")}}. Otherwise, `false`.\n\n## Description\n\nThe function `Number.isNaN()` provides a convenient way to check for equality with `NaN`. Note that you cannot test for equality with `NaN` using either the [`==`](/en-US/docs/Web/JavaScript/Reference/Operators/Equality) or [`===`](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) operators, because unlike all other value comparisons in JavaScript, these evaluate to `false` whenever one operand is {{jsxref(\"NaN\")}}, even if the other operand is also {{jsxref(\"NaN\")}}.\n\nSince `x !== x` is only true for `NaN` among all possible JavaScript values, `Number.isNaN(x)` can also be replaced with a test for `x !== x`, despite the latter being less readable.\n\nAs opposed to the global {{jsxref(\"isNaN()\")}} function, the `Number.isNaN()` method doesn't force-convert the parameter to a number. This makes it safe to pass values that would normally convert to {{jsxref(\"NaN\")}} but aren't actually the same value as {{jsxref(\"NaN\")}}. This also means that only values of the Number type that are also {{jsxref(\"NaN\")}} return `true`.\n\n## Examples\n\n### Using isNaN()\n\n```js\nNumber.isNaN(NaN); // true\nNumber.isNaN(Number.NaN); // true\nNumber.isNaN(0 / 0); // true\nNumber.isNaN(37); // false\n```\n\n### Difference between Number.isNaN() and global isNaN()\n\n`Number.isNaN()` doesn't attempt to convert the parameter to a number, so non-numbers always return `false`. The following are all `false`:\n\n```js\nNumber.isNaN(\"NaN\");\nNumber.isNaN(undefined);\nNumber.isNaN({});\nNumber.isNaN(\"blabla\");\nNumber.isNaN(true);\nNumber.isNaN(null);\nNumber.isNaN(\"37\");\nNumber.isNaN(\"37.37\");\nNumber.isNaN(\"\");\nNumber.isNaN(\" \");\n```\n\nThe global {{jsxref(\"isNaN()\")}} coerces its parameter to a number:\n\n```js\nisNaN(\"NaN\"); // true\nisNaN(undefined); // true\nisNaN({}); // true\nisNaN(\"blabla\"); // true\nisNaN(true); // false, this is coerced to 1\nisNaN(null); // false, this is coerced to 0\nisNaN(\"37\"); // false, this is coerced to 37\nisNaN(\"37.37\"); // false, this is coerced to 37.37\nisNaN(\"\"); // false, this is coerced to 0\nisNaN(\" \"); // false, this is coerced to 0\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Number.isNaN` in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"Number\")}}\n- {{jsxref(\"isNaN()\")}}\n"
    },
    "issafeinteger": {
      "index.md": "---\ntitle: Number.isSafeInteger()\nslug: Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Number.isSafeInteger\n---\n\n{{JSRef}}\n\nThe **`Number.isSafeInteger()`** static method determines whether the provided value is a number that is a _safe integer_.\n\n{{EmbedInteractiveExample(\"pages/js/number-issafeinteger.html\")}}\n\n## Syntax\n\n```js-nolint\nNumber.isSafeInteger(testValue)\n```\n\n### Parameters\n\n- `testValue`\n  - : The value to be tested for being a safe integer.\n\n### Return value\n\nThe boolean value `true` if the given value is a number that is a safe integer. Otherwise `false`.\n\n## Description\n\nThe safe integers consist of all integers from -(2<sup>53</sup> - 1) to 2<sup>53</sup> - 1, inclusive (±9,007,199,254,740,991). A safe integer is an integer that:\n\n- can be exactly represented as an IEEE-754 double precision number, and\n- whose IEEE-754 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation.\n\nFor example, 2<sup>53</sup> - 1 is a safe integer: it can be exactly represented, and no other integer rounds to it under any IEEE-754 rounding mode. In contrast, 2<sup>53</sup> is _not_ a safe integer: it can be exactly represented in IEEE-754, but the integer 2<sup>53</sup> + 1 can't be directly represented in IEEE-754 but instead rounds to 2<sup>53</sup> under round-to-nearest and round-to-zero rounding.\n\nHandling values larger or smaller than \\~9 quadrillion with full precision requires using an [arbitrary precision arithmetic library](https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic). See [What Every Programmer Needs to Know about Floating Point Arithmetic](https://floating-point-gui.de/) for more information on floating point representations of numbers.\n\nFor larger integers, consider using the {{jsxref(\"BigInt\")}} type.\n\n## Examples\n\n### Using isSafeInteger()\n\n```js\nNumber.isSafeInteger(3); // true\nNumber.isSafeInteger(2 ** 53); // false\nNumber.isSafeInteger(2 ** 53 - 1); // true\nNumber.isSafeInteger(NaN); // false\nNumber.isSafeInteger(Infinity); // false\nNumber.isSafeInteger(\"3\"); // false\nNumber.isSafeInteger(3.1); // false\nNumber.isSafeInteger(3.0); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Number.isSafeInteger` in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"Number\")}}\n- {{jsxref(\"Number.MIN_SAFE_INTEGER\")}}\n- {{jsxref(\"Number.MAX_SAFE_INTEGER\")}}\n- {{jsxref(\"BigInt\")}}\n"
    },
    "max_safe_integer": {
      "index.md": "---\ntitle: Number.MAX_SAFE_INTEGER\nslug: Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Number.MAX_SAFE_INTEGER\n---\n\n{{JSRef}}\n\nThe **`Number.MAX_SAFE_INTEGER`** static data property represents the maximum safe integer in JavaScript (2<sup>53</sup> – 1).\n\nFor larger integers, consider using {{jsxref(\"BigInt\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/number-maxsafeinteger.html\")}}\n\n## Value\n\n`9007199254740991` (9,007,199,254,740,991, or \\~9 quadrillion).\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\n[Double precision floating point format](https://en.wikipedia.org/wiki/Double_precision_floating-point_format) only has 52 bits to represent the [mantissa](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding), so it can only safely represent integers between -(2<sup>53</sup> – 1) and 2<sup>53</sup> – 1. \"Safe\" in this context refers to the ability to represent integers exactly and to compare them correctly. For example, `Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2` will evaluate to true, which is mathematically incorrect. See {{jsxref(\"Number.isSafeInteger()\")}} for more information.\n\nBecause `MAX_SAFE_INTEGER` is a static property of {{jsxref(\"Number\")}}, you always use it as `Number.MAX_SAFE_INTEGER`, rather than as a property of a number value.\n\n## Examples\n\n### Return value of MAX_SAFE_INTEGER\n\n```js\nNumber.MAX_SAFE_INTEGER; // 9007199254740991\n```\n\n### Relationship between MAX_SAFE_INTEGER and EPSILON\n\n{{jsxref(\"Number.EPSILON\")}} is 2<sup>-52</sup>, while `MAX_SAFE_INTEGER` is 2<sup>53</sup> – 1 — both of them are derived from the width of the mantissa, which is 53 bits (with the highest bit always being 1). Multiplying them will give a value very close — but not equal — to 2.\n\n```js\nNumber.MAX_SAFE_INTEGER * Number.EPSILON; // 1.9999999999999998\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Number.MAX_SAFE_INTEGER` in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"Number.MIN_SAFE_INTEGER\")}}\n- {{jsxref(\"Number.isSafeInteger()\")}}\n- {{jsxref(\"BigInt\")}}\n"
    },
    "max_value": {
      "index.md": "---\ntitle: Number.MAX_VALUE\nslug: Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Number.MAX_VALUE\n---\n\n{{JSRef}}\n\nThe **`Number.MAX_VALUE`** static data property represents the maximum numeric value representable in JavaScript.\n\n{{EmbedInteractiveExample(\"pages/js/number-maxvalue.html\")}}\n\n## Value\n\n2<sup>1024</sup> - 2<sup>971</sup>, or approximately `1.7976931348623157E+308`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nValues larger than `MAX_VALUE` are represented as {{jsxref(\"Infinity\")}} and will lose their actual value.\n\nBecause `MAX_VALUE` is a static property of {{jsxref(\"Number\")}}, you always use it as `Number.MAX_VALUE`, rather than as a property of a number value.\n\n## Examples\n\n### Using MAX_VALUE\n\nThe following code multiplies two numeric values. If the result is less than or equal to `MAX_VALUE`, the `func1` function is called; otherwise, the `func2` function is called.\n\n```js\nif (num1 * num2 <= Number.MAX_VALUE) {\n  func1();\n} else {\n  func2();\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number.MIN_VALUE\")}}\n- {{jsxref(\"Number\")}}\n"
    },
    "min_safe_integer": {
      "index.md": "---\ntitle: Number.MIN_SAFE_INTEGER\nslug: Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Number.MIN_SAFE_INTEGER\n---\n\n{{JSRef}}\n\nThe **`Number.MIN_SAFE_INTEGER`** static data property represents the minimum safe integer in JavaScript, or -(2<sup>53</sup> - 1).\n\nTo represent integers smaller than this, consider using {{jsxref(\"BigInt\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/number-min-safe-integer.html\")}}\n\n## Value\n\n`-9007199254740991` (-9,007,199,254,740,991, or about -9 quadrillion).\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\n[Double precision floating point format](https://en.wikipedia.org/wiki/Double_precision_floating-point_format) only has 52 bits to represent the [mantissa](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding), so it can only safely represent integers between -(2<sup>53</sup> – 1) and 2<sup>53</sup> – 1. Safe in this context refers to the ability to represent integers exactly and to correctly compare them. For example, `Number.MIN_SAFE_INTEGER - 1 === Number.MIN_SAFE_INTEGER - 2` will evaluate to true, which is mathematically incorrect. See {{jsxref(\"Number.isSafeInteger()\")}} for more information.\n\nBecause `MIN_SAFE_INTEGER` is a static property of {{jsxref(\"Number\")}}, you always use it as `Number.MIN_SAFE_INTEGER`, rather than as a property of a number value.\n\n## Examples\n\n### Using MIN_SAFE_INTEGER\n\n```js\nNumber.MIN_SAFE_INTEGER; // -9007199254740991\n-(2 ** 53 - 1); // -9007199254740991\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Number.MIN_SAFE_INTEGER` in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"Number.MAX_SAFE_INTEGER\")}}\n- {{jsxref(\"Number.isSafeInteger()\")}}\n- {{jsxref(\"BigInt\")}}\n"
    },
    "min_value": {
      "index.md": "---\ntitle: Number.MIN_VALUE\nslug: Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Number.MIN_VALUE\n---\n\n{{JSRef}}\n\nThe **`Number.MIN_VALUE`** static data property represents the smallest positive numeric value representable in JavaScript.\n\n{{EmbedInteractiveExample(\"pages/js/number-min-value.html\")}}\n\n## Value\n\n2<sup>-1074</sup>, or `5E-324`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\n`Number.MIN_VALUE` is the smallest positive number (not the most negative number) that can be represented within float precision — in other words, the number closest to 0. The ECMAScript spec doesn't define a precise value that implementations are required to support — instead the spec says, _\"must be the smallest non-zero positive value that can actually be represented by the implementation\"_. This is because small IEEE-754 floating point numbers are [denormalized](https://en.wikipedia.org/wiki/Subnormal_number), but implementations are not required to support this representation, in which case `Number.MIN_VALUE` may be larger.\n\nIn practice, its precise value in mainstream engines like V8 (used by Chrome, Edge, Node.js), SpiderMonkey (used by Firefox), and JavaScriptCore (used by Safari) is 2<sup>-1074</sup>, or `5E-324`.\n\nBecause `MIN_VALUE` is a static property of {{jsxref(\"Number\")}}, you always use it as `Number.MIN_VALUE`, rather than as a property of a number value.\n\n## Examples\n\n### Using MIN_VALUE\n\nThe following code divides two numeric values. If the result is greater than or equal to `MIN_VALUE`, the `func1` function is called; otherwise, the `func2` function is called.\n\n```js\nif (num1 / num2 >= Number.MIN_VALUE) {\n  func1();\n} else {\n  func2();\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number.MAX_VALUE\")}}\n"
    },
    "nan": {
      "index.md": "---\ntitle: Number.NaN\nslug: Web/JavaScript/Reference/Global_Objects/Number/NaN\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Number.NaN\n---\n\n{{JSRef}}\n\nThe **`Number.NaN`** static data property represents Not-A-Number, which is equivalent to {{jsxref(\"NaN\")}}. For more information about the behaviors of `NaN`, see the [description for the global property](/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).\n\n{{EmbedInteractiveExample(\"pages/js/number-nan.html\", \"taller\")}}\n\n## Value\n\nThe number value {{jsxref(\"NaN\")}}.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nBecause `NaN` is a static property of {{jsxref(\"Number\")}}, you always use it as `Number.NaN`, rather than as a property of a number value.\n\n## Examples\n\n### Checking whether values are numeric\n\n```js\nfunction sanitize(x) {\n  if (isNaN(x)) {\n    return Number.NaN;\n  }\n  return x;\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"NaN\")}}\n- {{jsxref(\"Number.isNaN()\")}}\n"
    },
    "negative_infinity": {
      "index.md": "---\ntitle: Number.NEGATIVE_INFINITY\nslug: Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Number.NEGATIVE_INFINITY\n---\n\n{{JSRef}}\n\nThe **`Number.NEGATIVE_INFINITY`** static data property represents the negative Infinity value.\n\n{{EmbedInteractiveExample(\"pages/js/number-negative-infinity.html\")}}\n\n## Value\n\nThe same as the negative value of the global {{jsxref(\"Infinity\")}} property.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nThe `Number.NEGATIVE_INFINITY` value behaves slightly differently than mathematical infinity:\n\n- Any positive value, including {{jsxref(\"Number/POSITIVE_INFINITY\", \"POSITIVE_INFINITY\")}}, multiplied by `NEGATIVE_INFINITY` is `NEGATIVE_INFINITY`.\n- Any negative value, including `NEGATIVE_INFINITY`, multiplied by `NEGATIVE_INFINITY` is {{jsxref(\"Number/POSITIVE_INFINITY\", \"POSITIVE_INFINITY\")}}.\n- Any positive value divided by `NEGATIVE_INFINITY` is [negative zero](https://en.wikipedia.org/wiki/Signed_zero) (as defined in [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754)).\n- Any negative value divided by `NEGATIVE_INFINITY` is [positive zero](https://en.wikipedia.org/wiki/Signed_zero) (as defined in [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754)).\n- Zero multiplied by `NEGATIVE_INFINITY` is {{jsxref(\"NaN\")}}.\n- {{jsxref(\"NaN\")}} multiplied by `NEGATIVE_INFINITY` is {{jsxref(\"NaN\")}}.\n- `NEGATIVE_INFINITY`, divided by any negative value except `NEGATIVE_INFINITY`, is {{jsxref(\"Number/POSITIVE_INFINITY\", \"POSITIVE_INFINITY\")}}.\n- `NEGATIVE_INFINITY`, divided by any positive value except {{jsxref(\"Number/POSITIVE_INFINITY\", \"POSITIVE_INFINITY\")}}, is `NEGATIVE_INFINITY`.\n- `NEGATIVE_INFINITY`, divided by either `NEGATIVE_INFINITY` or {{jsxref(\"Number/POSITIVE_INFINITY\", \"POSITIVE_INFINITY\")}}, is {{jsxref(\"NaN\")}}.\n- `x > Number.NEGATIVE_INFINITY` is true for any number _x_ that isn't `NEGATIVE_INFINITY`.\n\nYou might use the `Number.NEGATIVE_INFINITY` property to indicate an error condition that returns a finite number in case of success. Note, however, that {{jsxref(\"NaN\")}} would be more appropriate in such a case.\n\nBecause `NEGATIVE_INFINITY` is a static property of {{jsxref(\"Number\")}}, you always use it as `Number.NEGATIVE_INFINITY`, rather than as a property of a number value.\n\n## Examples\n\n### Using NEGATIVE_INFINITY\n\nIn the following example, the variable `smallNumber` is assigned a value that is smaller than the minimum value. When the {{jsxref(\"Statements/if...else\", \"if\")}} statement executes, `smallNumber` has the value `-Infinity`, so `smallNumber` is set to a more manageable value before continuing.\n\n```js\nlet smallNumber = -Number.MAX_VALUE * 2;\n\nif (smallNumber === Number.NEGATIVE_INFINITY) {\n  smallNumber = returnFinite();\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number.POSITIVE_INFINITY\")}}\n- {{jsxref(\"Number.isFinite()\")}}\n- {{jsxref(\"Infinity\")}}\n- {{jsxref(\"isFinite()\")}}\n"
    },
    "number": {
      "index.md": "---\ntitle: Number() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Number/Number\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Number.Number\n---\n\n{{JSRef}}\n\nThe **`Number()`** constructor creates {{jsxref(\"Number\")}} objects. When called as a function, it returns primitive values of type Number.\n\n## Syntax\n\n```js-nolint\nnew Number(value)\nNumber(value)\n```\n\n> **Note:** `Number()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new), but with different effects. See [Return value](#return_value).\n\n### Parameters\n\n- `value`\n  - : The numeric value of the object being created.\n\n### Return value\n\nWhen `Number` is called as a constructor (with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new)), it creates a {{jsxref(\"Number\")}} object, which is **not** a primitive.\n\nWhen `Number` is called as a function, it [coerces the parameter to a number primitive](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion). [BigInts](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) are converted to numbers. If the value can't be converted, it returns {{jsxref(\"NaN\")}}.\n\n> **Warning:** You should rarely find yourself using `Number` as a constructor.\n\n## Examples\n\n### Creating Number objects\n\n```js\nconst a = new Number(\"123\"); // a === 123 is false\nconst b = Number(\"123\"); // b === 123 is true\na instanceof Number; // is true\nb instanceof Number; // is false\ntypeof a; // \"object\"\ntypeof b; // \"number\"\n```\n\n### Using Number() to convert a BigInt to a number\n\n`Number()` is the only case where a BigInt can be converted to a number without throwing, because it's very explicit.\n\n```js example-bad\n+1n; // TypeError: Cannot convert a BigInt value to a number\n0 + 1n; // TypeError: Cannot mix BigInt and other types, use explicit conversions\n```\n\n```js example-good\nNumber(1n); // 1\n```\n\nNote that this may result in loss of precision, if the BigInt is too large to be [safely represented](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger).\n\n```js\nBigInt(Number(2n ** 54n + 1n)) === 2n ** 54n + 1n; // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of modern `Number` behavior (with support binary and octal literals) in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"NaN\")}}\n- {{jsxref(\"Math\")}}\n- {{jsxref(\"BigInt\")}}\n"
    },
    "parsefloat": {
      "index.md": "---\ntitle: Number.parseFloat()\nslug: Web/JavaScript/Reference/Global_Objects/Number/parseFloat\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Number.parseFloat\n---\n\n{{JSRef}}\n\nThe **`Number.parseFloat()`** static method parses an argument and returns a floating point number. If a number cannot be parsed from the argument, it returns {{jsxref(\"NaN\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/number-parsefloat.html\")}}\n\n## Syntax\n\n```js-nolint\nNumber.parseFloat(string)\n```\n\n### Parameters\n\n- `string`\n  - : The value to parse, [coerced to a string](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). Leading {{Glossary(\"whitespace\")}} in this argument is ignored.\n\n### Return value\n\nA floating point number parsed from the given `string`.\n\nOr {{jsxref(\"NaN\")}} when the first non-whitespace character cannot be converted to a number.\n\n## Examples\n\n### Number.parseFloat vs. parseFloat\n\nThis method has the same functionality as the global {{jsxref(\"parseFloat()\")}} function:\n\n```js\nNumber.parseFloat === parseFloat; // true\n```\n\nIts purpose is modularization of globals.\n\nSee {{jsxref(\"parseFloat()\")}} for more detail and examples.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Number.parseFloat` in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"Number\")}}\n- {{jsxref(\"parseFloat()\")}}\n"
    },
    "parseint": {
      "index.md": "---\ntitle: Number.parseInt()\nslug: Web/JavaScript/Reference/Global_Objects/Number/parseInt\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Number.parseInt\n---\n\n{{JSRef}}\n\nThe **`Number.parseInt()`** static method parses a string argument and\nreturns an integer of the specified radix or base.\n\n{{EmbedInteractiveExample(\"pages/js/number-parseint.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nNumber.parseInt(string)\nNumber.parseInt(string, radix)\n```\n\n### Parameters\n\n- `string`\n  - : The value to parse, [coerced to a string](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). Leading whitespace in this argument is ignored.\n- `radix` {{optional_inline}}\n\n  - : An integer between `2` and `36` that represents the\n    _radix_ (the base in mathematical numeral systems) of the\n    `string`.\n\n    If `radix` is undefined or `0`, it is assumed to be `10` except when the number begins with the code unit pairs `0x` or `0X`, in which case a radix of `16` is assumed.\n\n### Return value\n\nAn integer parsed from the given `string`.\n\nIf the `radix` is smaller than `2` or bigger than\n`36`, or the first non-whitespace character cannot be converted to a number,\n{{jsxref(\"NaN\")}} is returned.\n\n## Examples\n\n### Number.parseInt vs. parseInt\n\nThis method has the same functionality as the global {{jsxref(\"parseInt()\")}} function:\n\n```js\nNumber.parseInt === parseInt; // true\n```\n\nIts purpose is modularization of globals. Please see\n{{jsxref(\"parseInt()\")}} for more detail and examples.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Number.parseInt` in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"Number\")}}\n- {{jsxref(\"parseInt()\")}}\n"
    },
    "positive_infinity": {
      "index.md": "---\ntitle: Number.POSITIVE_INFINITY\nslug: Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Number.POSITIVE_INFINITY\n---\n\n{{JSRef}}\n\nThe **`Number.POSITIVE_INFINITY`** static data property represents the positive Infinity value.\n\n{{EmbedInteractiveExample(\"pages/js/number-positive-infinity.html\")}}\n\n## Value\n\nThe same as the value of the global {{jsxref(\"Infinity\")}} property.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nThe `Number.POSITIVE_INFINITY` value behaves slightly differently than mathematical infinity:\n\n- Any positive value, including `POSITIVE_INFINITY`, multiplied by `POSITIVE_INFINITY` is `POSITIVE_INFINITY`.\n- Any negative value, including {{jsxref(\"Number/NEGATIVE_INFINITY\", \"NEGATIVE_INFINITY\")}}, multiplied by `POSITIVE_INFINITY` is {{jsxref(\"Number/NEGATIVE_INFINITY\", \"NEGATIVE_INFINITY\")}}.\n- Any positive number divided by `POSITIVE_INFINITY` is [positive zero](https://en.wikipedia.org/wiki/Signed_zero) (as defined in [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754)).\n- Any negative number divided by `POSITIVE_INFINITY` is [negative zero](https://en.wikipedia.org/wiki/Signed_zero) (as defined in [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754).\n- Zero multiplied by `POSITIVE_INFINITY` is {{jsxref(\"NaN\")}}.\n- {{jsxref(\"NaN\")}} multiplied by `POSITIVE_INFINITY` is {{jsxref(\"NaN\")}}.\n- `POSITIVE_INFINITY`, divided by any negative value except {{jsxref(\"Number/NEGATIVE_INFINITY\", \"NEGATIVE_INFINITY\")}}, is {{jsxref(\"Number/NEGATIVE_INFINITY\", \"NEGATIVE_INFINITY\")}}.\n- `POSITIVE_INFINITY`, divided by any positive value except `POSITIVE_INFINITY`, is `POSITIVE_INFINITY`.\n- `POSITIVE_INFINITY`, divided by either {{jsxref(\"Number/NEGATIVE_INFINITY\", \"NEGATIVE_INFINITY\")}} or `POSITIVE_INFINITY`, is {{jsxref(\"NaN\")}}.\n- `Number.POSITIVE_INFINITY > x` is true for any number _x_ that isn't `POSITIVE_INFINITY`.\n\nYou might use the `Number.POSITIVE_INFINITY` property to indicate an error condition that returns a finite number in case of success. Note, however, that {{jsxref(\"NaN\")}} would be more appropriate in such a case.\n\nBecause `POSITIVE_INFINITY` is a static property of {{jsxref(\"Number\")}}, you always use it as `Number.POSITIVE_INFINITY`, rather than as a property of a number value.\n\n## Examples\n\n### Using POSITIVE_INFINITY\n\nIn the following example, the variable `bigNumber` is assigned a value that is larger than the maximum value. When the {{jsxref(\"Statements/if...else\", \"if\")}} statement executes, `bigNumber` has the value `Infinity`, so `bigNumber` is set to a more manageable value before continuing.\n\n```js\nlet bigNumber = Number.MAX_VALUE * 2;\n\nif (bigNumber === Number.POSITIVE_INFINITY) {\n  bigNumber = returnFinite();\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number.NEGATIVE_INFINITY\")}}\n- {{jsxref(\"Number.isFinite()\")}}\n- {{jsxref(\"Infinity\")}}\n- {{jsxref(\"isFinite()\")}}\n"
    },
    "toexponential": {
      "index.md": "---\ntitle: Number.prototype.toExponential()\nslug: Web/JavaScript/Reference/Global_Objects/Number/toExponential\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Number.toExponential\n---\n\n{{JSRef}}\n\nThe **`toExponential()`** method of {{jsxref(\"Number\")}} values returns a string representing\nthis number in exponential notation.\n\n{{EmbedInteractiveExample(\"pages/js/number-toexponential.html\")}}\n\n## Syntax\n\n```js-nolint\ntoExponential()\ntoExponential(fractionDigits)\n```\n\n### Parameters\n\n- `fractionDigits` {{optional_inline}}\n  - : Optional. An integer specifying the number of digits after the decimal point.\n    Defaults to as many digits as necessary to specify the number.\n\n### Return value\n\nA string representing the given {{jsxref(\"Number\")}} object in exponential notation\nwith one digit before the decimal point, rounded to\n`fractionDigits` digits after the decimal point.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `fractionDigits` is not between `0` and `100` (inclusive).\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if this method is invoked on an object that is not a {{jsxref(\"Number\")}}.\n\n## Description\n\nIf the `fractionDigits` argument is omitted, the number of digits\nafter the decimal point defaults to the number of digits necessary to represent the\nvalue uniquely.\n\nIf you use the `toExponential()` method for a numeric literal and the\nnumeric literal has no exponent and no decimal point, leave whitespace(s) before the dot\nthat precedes the method call to prevent the dot from being interpreted as a decimal\npoint.\n\nIf a number has more digits than requested by the\n`fractionDigits` parameter, the number is rounded to the nearest\nnumber represented by `fractionDigits` digits. See the discussion\nof rounding in the description of the {{jsxref(\"Number/toFixed\", \"toFixed()\")}} method, which also applies to `toExponential()`.\n\n## Examples\n\n### Using toExponential\n\n```js\nconst numObj = 77.1234;\n\nconsole.log(numObj.toExponential()); // 7.71234e+1\nconsole.log(numObj.toExponential(4)); // 7.7123e+1\nconsole.log(numObj.toExponential(2)); // 7.71e+1\nconsole.log((77.1234).toExponential()); // 7.71234e+1\nconsole.log((77).toExponential()); // 7.7e+1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Number.prototype.toExponential` with many bug fixes in `core-js`](https://github.com/zloirock/core-js#ecmascript-number)\n- {{jsxref(\"Number.prototype.toFixed()\")}}\n- {{jsxref(\"Number.prototype.toPrecision()\")}}\n- {{jsxref(\"Number.prototype.toString()\")}}\n"
    },
    "tofixed": {
      "index.md": "---\ntitle: Number.prototype.toFixed()\nslug: Web/JavaScript/Reference/Global_Objects/Number/toFixed\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Number.toFixed\n---\n\n{{JSRef}}\n\nThe **`toFixed()`** method of {{jsxref(\"Number\")}} values formats this number using [fixed-point notation](https://en.wikipedia.org/wiki/Fixed-point_arithmetic).\n\n{{EmbedInteractiveExample(\"pages/js/number-tofixed.html\")}}\n\n## Syntax\n\n```js-nolint\ntoFixed()\ntoFixed(digits)\n```\n\n### Parameters\n\n- `digits` {{optional_inline}}\n  - : The number of digits to appear after the decimal point; should be a value between `0` and `100`, inclusive. If this argument is omitted, it is treated as `0`.\n\n### Return value\n\nA string representing the given number using fixed-point notation.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `digits` is not between `0` and `100` (inclusive).\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if this method is invoked on an object that is not a {{jsxref(\"Number\")}}.\n\n## Description\n\nThe `toFixed()` method returns a string representation of a number without using [exponential notation](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential) and with exactly `digits` digits after the decimal point. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length.\n\nIf the absolute value of the number is greater or equal to 10<sup>21</sup>, this method uses the same algorithm as {{jsxref(\"Number.prototype.toString()\")}} and returns a string in exponential notation. `toFixed()` returns `\"Infinity\"`, `\"NaN\"`, or `\"-Infinity\"` if the value of the number is non-finite.\n\nThe output of `toFixed()` may be more precise than [`toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) for some values, because `toString()` only prints enough significant digits to distinguish the number from adjacent number values. For example:\n\n```js\n(1000000000000000128).toString(); // '1000000000000000100'\n(1000000000000000128).toFixed(0); // '1000000000000000128'\n```\n\nHowever, choosing a `digits` precision that's too high can return unexpected results, because decimal fractional numbers cannot be represented precisely in floating point. For example:\n\n```js\n(0.3).toFixed(50); // '0.29999999999999998889776975374843459576368331909180'\n```\n\n## Examples\n\n### Using toFixed()\n\n```js\nconst numObj = 12345.6789;\n\nnumObj.toFixed(); // '12346'; rounding, no fractional part\nnumObj.toFixed(1); // '12345.7'; it rounds up\nnumObj.toFixed(6); // '12345.678900'; additional zeros\n(1.23e20).toFixed(2); // '123000000000000000000.00'\n(1.23e-10).toFixed(2); // '0.00'\n(2.34).toFixed(1); // '2.3'\n(2.35).toFixed(1); // '2.4'; it rounds up\n(2.55).toFixed(1); // '2.5'\n// it rounds down as it can't be represented exactly by a float and the\n// closest representable float is lower\n(2.449999999999999999).toFixed(1); // '2.5'\n// it rounds up as it's less than Number.EPSILON away from 2.45.\n// This literal actually encodes the same number value as 2.45\n\n(6.02 * 10 ** 23).toFixed(50); // 6.019999999999999e+23; large numbers still use exponential notation\n```\n\n### Using toFixed() with negative numbers\n\nBecause member access has higher [precedence](/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence) than unary minus, you need to group the negative number expression to get a string.\n\n```js-nolint\n-2.34.toFixed(1); // -2.3, a number\n(-2.34).toFixed(1); // '-2.3'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number.prototype.toExponential()\")}}\n- {{jsxref(\"Number.prototype.toPrecision()\")}}\n- {{jsxref(\"Number.prototype.toString()\")}}\n- {{jsxref(\"Number.EPSILON\")}}\n"
    },
    "tolocalestring": {
      "index.md": "---\ntitle: Number.prototype.toLocaleString()\nslug: Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Number.toLocaleString\n---\n\n{{JSRef}}\n\nThe **`toLocaleString()`** method of {{jsxref(\"Number\")}} values returns a string with a language-sensitive representation of this number. In implementations with [`Intl.NumberFormat` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) support, this method simply calls `Intl.NumberFormat`.\n\nEvery time `toLocaleString` is called, it has to perform a search in a big database of localization strings, which is potentially inefficient. When the method is called many times with the same arguments, it is better to create a {{jsxref(\"Intl.NumberFormat\")}} object and use its {{jsxref(\"Intl/NumberFormat/format\", \"format()\")}} method, because a `NumberFormat` object remembers the arguments passed to it and may decide to cache a slice of the database, so future `format` calls can search for localization strings within a more constrained context.\n\n{{EmbedInteractiveExample(\"pages/js/number-tolocalestring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n```\n\n### Parameters\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.NumberFormat` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat), these parameters correspond exactly to the [`Intl.NumberFormat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) constructor's parameters. Implementations without `Intl.NumberFormat` support are asked to ignore both parameters, making the locale used and the form of the string returned entirely implementation-dependent.\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#locales) parameter of the `Intl.NumberFormat()` constructor.\n\n    In implementations without `Intl.NumberFormat` support, this parameter is ignored and the host's locale is usually used.\n\n- `options` {{optional_inline}}\n\n  - : An object adjusting the output format. Corresponds to the [`options`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options) parameter of the `Intl.NumberFormat()` constructor.\n\n    In implementations without `Intl.NumberFormat` support, this parameter is ignored.\n\nSee the [`Intl.NumberFormat()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat) for details on these parameters and how to use them.\n\n### Return value\n\nA string representing the given number according to language-specific conventions.\n\nIn implementations with `Intl.NumberFormat`, this is equivalent to `new Intl.NumberFormat(locales, options).format(number)`.\n\n> **Note:** Most of the time, the formatting returned by `toLocaleString()` is consistent. However, the output may vary with time, language, and implementation — output variations are by design and allowed by the specification. You should not compare the results of `toLocaleString()` to static values.\n\n## Examples\n\n### Using toLocaleString()\n\nBasic use of this method without specifying a `locale` returns a formatted string in the default locale and with default options.\n\n```js\nconst number = 3500;\n\nconsole.log(number.toLocaleString()); // \"3,500\" if in U.S. English locale\n```\n\n### Checking for support for locales and options parameters\n\nThe `locales` and `options` parameters may not be supported in all implementations, because support for the internationalization API is optional, and some systems may not have the necessary data. For implementations without internationalization support, `toLocaleString()` always uses the system's locale, which may not be what you want. Because any implementation that supports the `locales` and `options` parameters must support the {{jsxref(\"Intl\")}} API, you can check the existence of the latter for support:\n\n```js\nfunction toLocaleStringSupportsLocales() {\n  return (\n    typeof Intl === \"object\" &&\n    !!Intl &&\n    typeof Intl.NumberFormat === \"function\"\n  );\n}\n```\n\n### Using locales\n\nThis example shows some of the variations in localized number formats. In order to get\nthe format of the language used in the user interface of your application, make sure to\nspecify that language (and possibly some fallback languages) using the\n`locales` argument:\n\n```js\nconst number = 123456.789;\n\n// German uses comma as decimal separator and period for thousands\nconsole.log(number.toLocaleString(\"de-DE\"));\n// 123.456,789\n\n// Arabic in most Arabic speaking countries uses Eastern Arabic digits\nconsole.log(number.toLocaleString(\"ar-EG\"));\n// ١٢٣٤٥٦٫٧٨٩\n\n// India uses thousands/lakh/crore separators\nconsole.log(number.toLocaleString(\"en-IN\"));\n// 1,23,456.789\n\n// the nu extension key requests a numbering system, e.g. Chinese decimal\nconsole.log(number.toLocaleString(\"zh-Hans-CN-u-nu-hanidec\"));\n// 一二三,四五六.七八九\n\n// when requesting a language that may not be supported, such as\n// Balinese, include a fallback language, in this case Indonesian\nconsole.log(number.toLocaleString([\"ban\", \"id\"]));\n// 123.456,789\n```\n\n### Using options\n\nThe results provided by `toLocaleString()` can be customized using the `options` parameter:\n\n```js\nconst number = 123456.789;\n\n// request a currency format\nconsole.log(\n  number.toLocaleString(\"de-DE\", { style: \"currency\", currency: \"EUR\" }),\n);\n// 123.456,79 €\n\n// the Japanese yen doesn't use a minor unit\nconsole.log(\n  number.toLocaleString(\"ja-JP\", { style: \"currency\", currency: \"JPY\" }),\n);\n// ￥123,457\n\n// limit to three significant digits\nconsole.log(number.toLocaleString(\"en-IN\", { maximumSignificantDigits: 3 }));\n// 1,23,000\n\n// Use the host default language with options for number formatting\nconst num = 30000.65;\nconsole.log(\n  num.toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }),\n);\n// \"30,000.65\" where English is the default language, or\n// \"30.000,65\" where German is the default language, or\n// \"30 000,65\" where French is the default language\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Intl.NumberFormat\")}}\n- {{jsxref(\"Number.prototype.toString()\")}}\n"
    },
    "toprecision": {
      "index.md": "---\ntitle: Number.prototype.toPrecision()\nslug: Web/JavaScript/Reference/Global_Objects/Number/toPrecision\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Number.toPrecision\n---\n\n{{JSRef}}\n\nThe **`toPrecision()`** method of {{jsxref(\"Number\")}} values returns a string representing\nthis number to the specified precision.\n\n{{EmbedInteractiveExample(\"pages/js/number-toprecision.html\")}}\n\n## Syntax\n\n```js-nolint\ntoPrecision()\ntoPrecision(precision)\n```\n\n### Parameters\n\n- `precision` {{optional_inline}}\n  - : An integer specifying the number of significant digits.\n\n### Return value\n\nA string representing a {{jsxref(\"Number\")}} object in fixed-point or exponential\nnotation rounded to `precision` significant digits. See the discussion of\nrounding in the description of the {{jsxref(\"Number.prototype.toFixed()\")}} method,\nwhich also applies to `toPrecision()`.\n\nIf the `precision` argument is omitted, behaves as\n{{jsxref(\"Number.prototype.toString()\")}}. If the `precision` argument is a\nnon-integer value, it is rounded to the nearest integer.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `precision` is not between `1` and `100` (inclusive).\n\n## Examples\n\n### Using `toPrecision`\n\n```js\nlet num = 5.123456;\n\nconsole.log(num.toPrecision()); // '5.123456'\nconsole.log(num.toPrecision(5)); // '5.1235'\nconsole.log(num.toPrecision(2)); // '5.1'\nconsole.log(num.toPrecision(1)); // '5'\n\nnum = 0.000123;\n\nconsole.log(num.toPrecision()); // '0.000123'\nconsole.log(num.toPrecision(5)); // '0.00012300'\nconsole.log(num.toPrecision(2)); // '0.00012'\nconsole.log(num.toPrecision(1)); // '0.0001'\n\n// note that exponential notation might be returned in some circumstances\nconsole.log((1234.5).toPrecision(2)); // '1.2e+3'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number.prototype.toFixed()\")}}\n- {{jsxref(\"Number.prototype.toExponential()\")}}\n- {{jsxref(\"Number.prototype.toString()\")}}\n"
    },
    "tostring": {
      "index.md": "---\ntitle: Number.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/Number/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Number.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"Number\")}} values returns a string representing this number value.\n\n{{EmbedInteractiveExample(\"pages/js/number-tostring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\ntoString(radix)\n```\n\n### Parameters\n\n- `radix` {{optional_inline}}\n  - : An integer in the range `2` through `36` specifying the base to use for representing the number value. Defaults to 10.\n\n### Return value\n\nA string representing the specified number value.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `radix` is less than 2 or greater than 36.\n\n## Description\n\nThe {{jsxref(\"Number\")}} object overrides the `toString` method of {{jsxref(\"Object\")}}; it does not inherit\n{{jsxref(\"Object.prototype.toString()\")}}. For `Number` values, the `toString` method returns a string representation of the value in the specified radix.\n\nFor radixes above 10, the letters of the alphabet indicate digits greater than 9. For example, for hexadecimal numbers (base 16) `a` through `f` are used.\n\nIf the specified number value is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the number value preceded by a `-` sign, **not** the two's complement of the number value.\n\nBoth `0` and `-0` have `\"0\"` as their string representation. {{jsxref(\"Infinity\")}} returns `\"Infinity\"` and {{jsxref(\"NaN\")}} returns `\"NaN\"`.\n\nIf the number is not a whole number, the decimal point `.` is used to separate the decimal places. [Scientific notation](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#exponential) is used if the radix is 10 and the number's magnitude (ignoring sign) is greater than or equal to 10<sup>21</sup> or less than 10<sup>-6</sup>. In this case, the returned string always explicitly specifies the sign of the exponent.\n\n```js\nconsole.log((10 ** 21.5).toString()); // \"3.1622776601683794e+21\"\nconsole.log((10 ** 21.5).toString(8)); // \"526665530627250154000000\"\n```\n\nThe `toString()` method requires its `this` value to be a `Number` primitive or wrapper object. It throws a {{jsxref(\"TypeError\")}} for other `this` values without attempting to coerce them to number values.\n\nBecause `Number` doesn't have a [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, JavaScript calls the `toString()` method automatically when a `Number` _object_ is used in a context expecting a string, such as in a [template literal](/en-US/docs/Web/JavaScript/Reference/Template_literals). However, Number _primitive_ values do not consult the `toString()` method to be [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) — rather, they are directly converted using the same algorithm as the initial `toString()` implementation.\n\n```js\nNumber.prototype.toString = () => \"Overridden\";\nconsole.log(`${1}`); // \"1\"\nconsole.log(`${new Number(1)}`); // \"Overridden\"\n```\n\n## Examples\n\n### Using toString()\n\n```js\nconst count = 10;\nconsole.log(count.toString()); // \"10\"\n\nconsole.log((17).toString()); // \"17\"\nconsole.log((17.2).toString()); // \"17.2\"\n\nconst x = 6;\nconsole.log(x.toString(2)); // \"110\"\nconsole.log((254).toString(16)); // \"fe\"\nconsole.log((-10).toString(2)); // \"-1010\"\nconsole.log((-0xff).toString(2)); // \"-11111111\"\n```\n\n### Converting radix of number strings\n\nIf you have a string representing a number in a non-decimal radix, you can use [`parseInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) and `toString()` to convert it to a different radix.\n\n```js\nconst hex = \"CAFEBABE\";\nconst bin = parseInt(hex, 16).toString(2); // \"11001010111111101011101010111110\"\n```\n\nBeware of loss of precision: if the original number string is too large (larger than [`Number.MAX_SAFE_INTEGER`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER), for example), you should use a [`BigInt`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) instead. However, the `BigInt` constructor only has support for strings representing number literals (i.e. strings starting with `0b`, `0o`, `0x`). In case your original radix is not one of binary, octal, decimal, or hexadecimal, you may need to hand-write your radix converter, or use a library.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Number.prototype.toFixed()\")}}\n- {{jsxref(\"Number.prototype.toExponential()\")}}\n- {{jsxref(\"Number.prototype.toPrecision()\")}}\n"
    },
    "valueof": {
      "index.md": "---\ntitle: Number.prototype.valueOf()\nslug: Web/JavaScript/Reference/Global_Objects/Number/valueOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Number.valueOf\n---\n\n{{JSRef}}\n\nThe **`valueOf()`** method of {{jsxref(\"Number\")}} values returns the value of this number.\n\n{{EmbedInteractiveExample(\"pages/js/number-valueof.html\")}}\n\n## Syntax\n\n```js-nolint\nvalueOf()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA number representing the primitive value of the specified {{jsxref(\"Number\")}} object.\n\n## Description\n\nThis method is usually called internally by JavaScript and not explicitly in web code.\n\n## Examples\n\n### Using valueOf\n\n```js\nconst numObj = new Number(10);\nconsole.log(typeof numObj); // object\n\nconst num = numObj.valueOf();\nconsole.log(num); // 10\nconsole.log(typeof num); // number\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.valueOf()\")}}\n"
    }
  },
  "object": {
    "__definegetter__": {
      "index.md": "---\ntitle: Object.prototype.__defineGetter__()\nslug: Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.Object.defineGetter\n---\n\n{{JSRef}}{{Deprecated_Header}}\n\n> **Note:** This feature is deprecated in favor of defining [getters](/en-US/docs/Web/JavaScript/Reference/Functions/get) using the [object initializer syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) or the {{jsxref(\"Object.defineProperty()\")}} API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n\nThe **`__defineGetter__()`** method of {{jsxref(\"Object\")}} instances binds an object's property to a function to be called when that property is looked up.\n\n## Syntax\n\n```js-nolint\n__defineGetter__(prop, func)\n```\n\n### Parameters\n\n- `prop`\n  - : A string containing the name of the property that the getter `func` is bound to.\n- `func`\n  - : A function to be bound to a lookup of the specified property.\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `func` is not a function.\n\n## Description\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `__defineGetter__()` method. This method allows a [getter](/en-US/docs/Web/JavaScript/Reference/Functions/get) to be defined on a pre-existing object. This is equivalent to [`Object.defineProperty(obj, prop, { get: func, configurable: true, enumerable: true })`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), which means the property is enumerable and configurable, and any existing setter, if present, is preserved.\n\n`__defineGetter__()` is defined in the spec as \"normative optional\", which means no implementation is required to implement this. However, all major browsers implement it, and due to its continued usage, it's unlikely to be removed. If a browser implements `__defineGetter__()`, it also needs to implement the [`__lookupGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__), [`__lookupSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__), and [`__defineSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__) methods.\n\n## Examples\n\n### Using \\_\\_defineGetter\\_\\_()\n\n```js\nconst o = {};\no.__defineGetter__(\"gimmeFive\", function () {\n  return 5;\n});\nconsole.log(o.gimmeFive); // 5\n```\n\n### Defining a getter property in standard ways\n\nYou can use the `get` syntax to define a getter when the object is first initialized.\n\n```js\nconst o = {\n  get gimmeFive() {\n    return 5;\n  },\n};\nconsole.log(o.gimmeFive); // 5\n```\n\nYou may also use {{jsxref(\"Object.defineProperty()\")}} to define a getter on an object after it's been created. Compared to `__defineGetter__()`, this method allows you to control the getter's enumerability and configurability, as well as defining [symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties. The `Object.defineProperty()` method also works with [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects), which don't inherit from `Object.prototype` and therefore don't have the `__defineGetter__()` method.\n\n```js\nconst o = {};\nObject.defineProperty(o, \"gimmeFive\", {\n  get() {\n    return 5;\n  },\n  configurable: true,\n  enumerable: true,\n});\nconsole.log(o.gimmeFive); // 5\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.prototype.__defineGetter__` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- [`Object.prototype.__defineSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__)\n- {{jsxref(\"Functions/get\", \"get\")}}\n- {{jsxref(\"Object.defineProperty()\")}}\n- [`Object.prototype.__lookupGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__)\n- [`Object.prototype.__lookupSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__)\n- [JS Guide: Defining Getters and Setters](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#defining_getters_and_setters)\n- [Firefox bug 647423](https://bugzil.la/647423)\n"
    },
    "__definesetter__": {
      "index.md": "---\ntitle: Object.prototype.__defineSetter__()\nslug: Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.Object.defineSetter\n---\n\n{{JSRef}}{{Deprecated_Header}}\n\n> **Note:** This feature is deprecated in favor of defining [setters](/en-US/docs/Web/JavaScript/Reference/Functions/set) using the [object initializer syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) or the {{jsxref(\"Object.defineProperty()\")}} API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n\nThe **`__defineSetter__()`** method of {{jsxref(\"Object\")}} instances binds an object's property to a function to be called when an attempt is made to set that property.\n\n## Syntax\n\n```js-nolint\n__defineSetter__(prop, func)\n```\n\n### Parameters\n\n- `prop`\n  - : A string containing the name of the property that the setter `func` is bound to.\n- `func`\n  - : A function to be called when there is an attempt to set the specified property. This function receives the following parameter:\n    - `val`\n      - : The value attempted to be assigned to `prop`.\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `func` is not a function.\n\n## Description\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `__defineSetter__()` method. This method allows a [setter](/en-US/docs/Web/JavaScript/Reference/Functions/set) to be defined on a pre-existing object. This is equivalent to [`Object.defineProperty(obj, prop, { set: func, configurable: true, enumerable: true })`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty), which means the property is enumerable and configurable, and any existing getter, if present, is preserved.\n\n`__defineSetter__()` is defined in the spec as \"normative optional\", which means no implementation is required to implement this. However, all major browsers implement it, and due to its continued usage, it's unlikely to be removed. If a browser implements `__defineSetter__()`, it also needs to implement the [`__lookupGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__), [`__lookupSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__), and [`__defineGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__) methods.\n\n## Examples\n\n### Using \\_\\_defineSetter\\_\\_()\n\n```js\nconst o = {};\no.__defineSetter__(\"value\", function (val) {\n  this.anotherValue = val;\n});\no.value = 5;\nconsole.log(o.value); // undefined\nconsole.log(o.anotherValue); // 5\n```\n\n### Defining a setter property in standard ways\n\nYou can use the `set` syntax to define a setter when the object is first initialized.\n\n```js\nconst o = {\n  set value(val) {\n    this.anotherValue = val;\n  },\n};\no.value = 5;\nconsole.log(o.value); // undefined\nconsole.log(o.anotherValue); // 5\n```\n\nYou may also use {{jsxref(\"Object.defineProperty()\")}} to define a setter on an object after it's been created. Compared to `__defineSetter__()`, this method allows you to control the setter's enumerability and configurability, as well as defining [symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties. The `Object.defineProperty()` method also works with [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects), which don't inherit from `Object.prototype` and therefore don't have the `__defineSetter__()` method.\n\n```js\nconst o = {};\nObject.defineProperty(o, \"value\", {\n  set(val) {\n    this.anotherValue = val;\n  },\n  configurable: true,\n  enumerable: true,\n});\no.value = 5;\nconsole.log(o.value); // undefined\nconsole.log(o.anotherValue); // 5\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.prototype.__defineSetter__` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- [`Object.prototype.__defineGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__)\n- {{jsxref(\"Functions/set\", \"set\")}}\n- {{jsxref(\"Object.defineProperty()\")}}\n- [`Object.prototype.__lookupGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__)\n- [`Object.prototype.__lookupSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__)\n- [JS Guide: Defining Getters and Setters](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#defining_getters_and_setters)\n- [Firefox bug 647423](https://bugzil.la/647423)\n"
    },
    "__lookupgetter__": {
      "index.md": "---\ntitle: Object.prototype.__lookupGetter__()\nslug: Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.Object.lookupGetter\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\n> **Note:** This feature is deprecated in favor of the {{jsxref(\"Object.getOwnPropertyDescriptor()\")}} API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n\nThe **`__lookupGetter__()`** method of {{jsxref(\"Object\")}} instances returns the function bound as a getter to the specified property.\n\n## Syntax\n\n```js-nolint\n__lookupGetter__(prop)\n```\n\n### Parameters\n\n- `prop`\n  - : A string containing the name of the property whose getter should be returned.\n\n### Return value\n\nThe function bound as a getter to the specified property. Returns `undefined` if no such property is found, or the property is a [data property](/en-US/docs/Web/JavaScript/Data_structures#data_property).\n\n## Description\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `__lookupGetter__()` method. If a [getter](/en-US/docs/Web/JavaScript/Reference/Functions/get) has been defined for an object's property, it's not possible to reference the getter function through that property, because that property refers to the return value of that function. `__lookupGetter__()` can be used to obtain a reference to the getter function.\n\n`__lookupGetter__()` walks up the [prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) to find the specified property. If any object along the prototype chain has the specified [own property](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn), the `get` attribute of the [property descriptor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) for that property is returned. If that property is a data property, `undefined` is returned. If the property is not found along the entire prototype chain, `undefined` is also returned.\n\n`__lookupGetter__()` is defined in the spec as \"normative optional\", which means no implementation is required to implement this. However, all major browsers implement it, and due to its continued usage, it's unlikely to be removed. If a browser implements `__lookupGetter__()`, it also needs to implement the [`__lookupSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__), [`__defineGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__), and [`__defineSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__) methods.\n\n## Examples\n\n### Using \\_\\_lookupGetter\\_\\_()\n\n```js\nconst obj = {\n  get foo() {\n    return Math.random() > 0.5 ? \"foo\" : \"bar\";\n  },\n};\n\nobj.__lookupGetter__(\"foo\");\n// [Function: get foo]\n```\n\n### Looking up a property's getter in the standard way\n\nYou should use the {{jsxref(\"Object.getOwnPropertyDescriptor()\")}} API to look up a property's getter. Compared to `__lookupGetter__()`, this method allows looking up [symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties. The `Object.getOwnPropertyDescriptor()` method also works with [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects), which don't inherit from `Object.prototype` and therefore don't have the `__lookupGetter__()` method. If `__lookupGetter__()`'s behavior of walking up the prototype chain is important, you may implement it yourself with {{jsxref(\"Object.getPrototypeOf()\")}}.\n\n```js\nconst obj = {\n  get foo() {\n    return Math.random() > 0.5 ? \"foo\" : \"bar\";\n  },\n};\n\nObject.getOwnPropertyDescriptor(obj, \"foo\").get;\n// [Function: get foo]\n```\n\n```js\nconst obj2 = {\n  __proto__: {\n    get foo() {\n      return Math.random() > 0.5 ? \"foo\" : \"bar\";\n    },\n  },\n};\n\nfunction findGetter(obj, prop) {\n  while (obj) {\n    const desc = Object.getOwnPropertyDescriptor(obj, prop);\n    if (desc) {\n      return desc.get;\n    }\n    obj = Object.getPrototypeOf(obj);\n  }\n}\n\nconsole.log(findGetter(obj2, \"foo\")); // [Function: get foo]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.prototype.__lookupGetter__` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- [`Object.prototype.__lookupSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__)\n- {{jsxref(\"Functions/get\", \"get\")}}\n- {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}\n- [`Object.prototype.__defineGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__)\n- [`Object.prototype.__defineSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__)\n- [JS Guide: Defining Getters and Setters](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#defining_getters_and_setters)\n"
    },
    "__lookupsetter__": {
      "index.md": "---\ntitle: Object.prototype.__lookupSetter__()\nslug: Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.Object.lookupSetter\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\n> **Note:** This feature is deprecated in favor of the {{jsxref(\"Object.getOwnPropertyDescriptor()\")}} API. This method's behavior is only specified for web compatibility, and is not required to be implemented in any platform. It may not work everywhere.\n\nThe **`__lookupSetter__()`** method of {{jsxref(\"Object\")}} instances returns the function bound as a setter to the specified property.\n\n## Syntax\n\n```js-nolint\n__lookupSetter__(prop)\n```\n\n### Parameters\n\n- `prop`\n  - : A string containing the name of the property whose setter should be returned.\n\n### Return value\n\nThe function bound as a setter to the specified property. Returns `undefined` if no such property is found, or the property is a [data property](/en-US/docs/Web/JavaScript/Data_structures#data_property).\n\n## Description\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `__lookupSetter__()` method. If a [setter](/en-US/docs/Web/JavaScript/Reference/Functions/get) has been defined for an object's property, it's not possible to reference the setter function through that property, because that property only calls the function when it's being set. `__lookupSetter__()` can be used to obtain a reference to the setter function.\n\n`__lookupSetter__()` walks up the [prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) to find the specified property. If any object along the prototype chain has the specified [own property](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn), the `set` attribute of the [property descriptor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) for that property is returned. If that property is a data property, `undefined` is returned. If the property is not found along the entire prototype chain, `undefined` is also returned.\n\n`__lookupSetter__()` is defined in the spec as \"normative optional\", which means no implementation is required to implement this. However, all major browsers implement it, and due to its continued usage, it's unlikely to be removed. If a browser implements `__lookupSetter__()`, it also needs to implement the [`__lookupGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__), [`__defineGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__), and [`__defineSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__) methods.\n\n## Examples\n\n### Using \\_\\_lookupSetter\\_\\_()\n\n```js\nconst obj = {\n  set foo(value) {\n    this.bar = value;\n  },\n};\n\nobj.__lookupSetter__(\"foo\");\n// [Function: set foo]\n```\n\n### Looking up a property's setter in the standard way\n\nYou should use the {{jsxref(\"Object.getOwnPropertyDescriptor()\")}} API to look up a property's setter. Compared to `__lookupSetter__()`, this method allows looking up [symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) properties. The `Object.getOwnPropertyDescriptor()` method also works with [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects), which don't inherit from `Object.prototype` and therefore don't have the `__lookupSetter__()` method. If `__lookupSetter__()`'s behavior of walking up the prototype chain is important, you may implement it yourself with {{jsxref(\"Object.getPrototypeOf()\")}}.\n\n```js\nconst obj = {\n  set foo(value) {\n    this.bar = value;\n  },\n};\n\nObject.getOwnPropertyDescriptor(obj, \"foo\").set;\n// [Function: set foo]\n```\n\n```js\nconst obj2 = {\n  __proto__: {\n    set foo(value) {\n      this.bar = value;\n    },\n  },\n};\n\nfunction findSetter(obj, prop) {\n  while (obj) {\n    const desc = Object.getOwnPropertyDescriptor(obj, prop);\n    if (desc) {\n      return desc.set;\n    }\n    obj = Object.getPrototypeOf(obj);\n  }\n}\n\nconsole.log(findSetter(obj2, \"foo\")); // [Function: set foo]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.prototype.__lookupSetter__` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- [`Object.prototype.__lookupGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__)\n- {{jsxref(\"Functions/set\", \"set\")}}\n- {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}\n- [`Object.prototype.__defineGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__)\n- [`Object.prototype.__defineSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__)\n- [JS Guide: Defining Getters and Setters](/en-US/docs/Web/JavaScript/Guide/Working_with_objects#defining_getters_and_setters)\n"
    },
    "assign": {
      "index.md": "---\ntitle: Object.assign()\nslug: Web/JavaScript/Reference/Global_Objects/Object/assign\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.assign\n---\n\n{{JSRef}}\n\nThe **`Object.assign()`** static method\ncopies all {{jsxref(\"Object/propertyIsEnumerable\", \"enumerable\", \"\", 1)}}\n{{jsxref(\"Object/hasOwn\", \"own properties\", \"\", 1)}} from one or more\n_source objects_ to a _target object_. It returns the modified target\nobject.\n\n{{EmbedInteractiveExample(\"pages/js/object-assign.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.assign(target)\nObject.assign(target, source1)\nObject.assign(target, source1, source2)\nObject.assign(target, source1, source2, /* …, */ sourceN)\n```\n\n### Parameters\n\n- `target`\n  - : The target object — what to apply the sources' properties to, which is returned\n    after it is modified.\n- `source1`, …, `sourceN`\n  - : The source object(s) — objects containing the properties you want to apply.\n\n### Return value\n\nThe target object.\n\n## Description\n\nProperties in the target object are overwritten by properties in the sources if they\nhave the same {{jsxref(\"Object/keys\", \"key\", \"\", 1)}}. Later sources' properties\noverwrite earlier ones.\n\nThe `Object.assign()` method only copies _enumerable_ and\n_own_ properties from a source object to a target object. It uses\n`[[Get]]` on the source and `[[Set]]` on the target, so it will\ninvoke [getters](/en-US/docs/Web/JavaScript/Reference/Functions/get) and [setters](/en-US/docs/Web/JavaScript/Reference/Functions/set). Therefore it\n_assigns_ properties, versus copying or defining new properties. This may make it\nunsuitable for merging new properties into a prototype if the merge sources contain\ngetters.\n\nFor copying property definitions (including their enumerability) into prototypes, use\n{{jsxref(\"Object.getOwnPropertyDescriptor()\")}} and\n{{jsxref(\"Object.defineProperty()\")}} instead.\n\nBoth {{jsxref(\"String\")}} and {{jsxref(\"Symbol\")}} properties are copied.\n\nIn case of an error, for example if a property is non-writable, a\n{{jsxref(\"TypeError\")}} is raised, and the `target` object is\nchanged if any properties are added before the error is raised.\n\n> **Note:** `Object.assign()` does not throw on\n> [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) or {{jsxref(\"undefined\")}} sources.\n\n## Examples\n\n### Cloning an object\n\n```js\nconst obj = { a: 1 };\nconst copy = Object.assign({}, obj);\nconsole.log(copy); // { a: 1 }\n```\n\n### Warning for Deep Clone\n\nFor [deep cloning](/en-US/docs/Glossary/Deep_copy), we need to use alternatives like [`structuredClone()`](/en-US/docs/Web/API/structuredClone), because `Object.assign()`\ncopies property values.\n\nIf the source value is a reference to an object, it only copies the reference value.\n\n```js\nconst obj1 = { a: 0, b: { c: 0 } };\nconst obj2 = Object.assign({}, obj1);\nconsole.log(obj2); // { a: 0, b: { c: 0 } }\n\nobj1.a = 1;\nconsole.log(obj1); // { a: 1, b: { c: 0 } }\nconsole.log(obj2); // { a: 0, b: { c: 0 } }\n\nobj2.a = 2;\nconsole.log(obj1); // { a: 1, b: { c: 0 } }\nconsole.log(obj2); // { a: 2, b: { c: 0 } }\n\nobj2.b.c = 3;\nconsole.log(obj1); // { a: 1, b: { c: 3 } }\nconsole.log(obj2); // { a: 2, b: { c: 3 } }\n\n// Deep Clone\nconst obj3 = { a: 0, b: { c: 0 } };\nconst obj4 = structuredClone(obj3);\nobj3.a = 4;\nobj3.b.c = 4;\nconsole.log(obj4); // { a: 0, b: { c: 0 } }\n```\n\n### Merging objects\n\n```js\nconst o1 = { a: 1 };\nconst o2 = { b: 2 };\nconst o3 = { c: 3 };\n\nconst obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1); // { a: 1, b: 2, c: 3 }, target object itself is changed.\n```\n\n### Merging objects with same properties\n\n```js\nconst o1 = { a: 1, b: 1, c: 1 };\nconst o2 = { b: 2, c: 2 };\nconst o3 = { c: 3 };\n\nconst obj = Object.assign({}, o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\n```\n\nThe properties are overwritten by other objects that have the same properties later in\nthe parameters order.\n\n### Copying symbol-typed properties\n\n```js\nconst o1 = { a: 1 };\nconst o2 = { [Symbol(\"foo\")]: 2 };\n\nconst obj = Object.assign({}, o1, o2);\nconsole.log(obj); // { a : 1, [Symbol(\"foo\")]: 2 } (cf. bug 1207182 on Firefox)\nObject.getOwnPropertySymbols(obj); // [Symbol(foo)]\n```\n\n### Properties on the prototype chain and non-enumerable properties cannot be copied\n\n```js\nconst obj = Object.create(\n  // foo is on obj's prototype chain.\n  { foo: 1 },\n  {\n    bar: {\n      value: 2, // bar is a non-enumerable property.\n    },\n    baz: {\n      value: 3,\n      enumerable: true, // baz is an own enumerable property.\n    },\n  },\n);\n\nconst copy = Object.assign({}, obj);\nconsole.log(copy); // { baz: 3 }\n```\n\n### Primitives will be wrapped to objects\n\n```js\nconst v1 = \"abc\";\nconst v2 = true;\nconst v3 = 10;\nconst v4 = Symbol(\"foo\");\n\nconst obj = Object.assign({}, v1, null, v2, undefined, v3, v4);\n// Primitives will be wrapped, null and undefined will be ignored.\n// Note, only string wrappers can have own enumerable properties.\nconsole.log(obj); // { \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" }\n```\n\n### Exceptions will interrupt the ongoing copying task\n\n```js\nconst target = Object.defineProperty({}, \"foo\", {\n  value: 1,\n  writable: false,\n}); // target.foo is a read-only property\n\nObject.assign(target, { bar: 2 }, { foo2: 3, foo: 3, foo3: 3 }, { baz: 4 });\n// TypeError: \"foo\" is read-only\n// The Exception is thrown when assigning target.foo\n\nconsole.log(target.bar); // 2, the first source was copied successfully.\nconsole.log(target.foo2); // 3, the first property of the second source was copied successfully.\nconsole.log(target.foo); // 1, exception is thrown here.\nconsole.log(target.foo3); // undefined, assign method has finished, foo3 will not be copied.\nconsole.log(target.baz); // undefined, the third source will not be copied either.\n```\n\n### Copying accessors\n\n```js\nconst obj = {\n  foo: 1,\n  get bar() {\n    return 2;\n  },\n};\n\nlet copy = Object.assign({}, obj);\nconsole.log(copy);\n// { foo: 1, bar: 2 }\n// The value of copy.bar is obj.bar's getter's return value.\n\n// This is an assign function that copies full descriptors\nfunction completeAssign(target, ...sources) {\n  sources.forEach((source) => {\n    const descriptors = Object.keys(source).reduce((descriptors, key) => {\n      descriptors[key] = Object.getOwnPropertyDescriptor(source, key);\n      return descriptors;\n    }, {});\n\n    // By default, Object.assign copies enumerable Symbols, too\n    Object.getOwnPropertySymbols(source).forEach((sym) => {\n      const descriptor = Object.getOwnPropertyDescriptor(source, sym);\n      if (descriptor.enumerable) {\n        descriptors[sym] = descriptor;\n      }\n    });\n    Object.defineProperties(target, descriptors);\n  });\n  return target;\n}\n\ncopy = completeAssign({}, obj);\nconsole.log(copy);\n// { foo:1, get bar() { return 2 } }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.assign` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- {{jsxref(\"Object.defineProperties()\")}}\n- [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)\n- [Spread in object literals](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals)\n"
    },
    "constructor": {
      "index.md": "---\ntitle: Object.prototype.constructor\nslug: Web/JavaScript/Reference/Global_Objects/Object/constructor\npage-type: javascript-instance-data-property\nbrowser-compat: javascript.builtins.Object.constructor\n---\n\n{{JSRef}}\n\nThe **`constructor`** data property of an {{jsxref(\"Object\")}} instance returns a reference to the constructor function that created the instance object. Note that the value of this property is a reference to _the function itself_, not a string containing the function's name.\n\n> **Note:** This is a property of JavaScript objects. For the `constructor` method in classes, see [its own reference page](/en-US/docs/Web/JavaScript/Reference/Classes/constructor).\n\n## Value\n\nA reference to the constructor function that created the instance object.\n\n{{js_property_attributes(1, 0, 1)}}\n\n> **Note:** This property is created by default on the [`prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property of every constructor function and is inherited by all objects created by that constructor.\n\n## Description\n\nAny object (with the exception of [`null` prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) will have a `constructor` property on its `[[Prototype]]`. Objects created with literals will also have a `constructor` property that points to the constructor type for that object — for example, array literals create {{jsxref(\"Array\")}} objects, and [object literals](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) create plain objects.\n\n```js\nconst o1 = {};\no1.constructor === Object; // true\n\nconst o2 = new Object();\no2.constructor === Object; // true\n\nconst a1 = [];\na1.constructor === Array; // true\n\nconst a2 = new Array();\na2.constructor === Array; // true\n\nconst n = 3;\nn.constructor === Number; // true\n```\n\nNote that `constructor` usually comes from the constructor's [`prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property. If you have a longer prototype chain, you can usually expect every object in the chain to have a `constructor` property.\n\n```js\nconst o = new TypeError(); // Inheritance: TypeError -> Error -> Object\nconst proto = Object.getPrototypeOf;\nproto(o).constructor === TypeError; // true\nproto(proto(o)).constructor === Error; // true\nproto(proto(proto(o))).constructor === Object; // true\n```\n\n## Examples\n\n### Displaying the constructor of an object\n\nThe following example creates a constructor (`Tree`) and an object of that type (`theTree`). The example then displays the `constructor` property for the object `theTree`.\n\n```js\nfunction Tree(name) {\n  this.name = name;\n}\n\nconst theTree = new Tree(\"Redwood\");\nconsole.log(`theTree.constructor is ${theTree.constructor}`);\n```\n\nThis example displays the following output:\n\n```plain\ntheTree.constructor is function Tree(name) {\n  this.name = name;\n}\n```\n\n### Assigning the constructor property to an object\n\nOne can assign the `constructor` property of non-primitives.\n\n```js\nconst arr = [];\narr.constructor = String;\narr.constructor === String; // true\narr instanceof String; // false\narr instanceof Array; // true\n\nconst foo = new Foo();\nfoo.constructor = \"bar\";\nfoo.constructor === \"bar\"; // true\n\n// etc.\n```\n\nThis does not overwrite the old `constructor` property — it was originally present on the instance's `[[Prototype]]`, not as its own property.\n\n```js\nconst arr = [];\nObject.hasOwn(arr, \"constructor\"); // false\nObject.hasOwn(Object.getPrototypeOf(arr), \"constructor\"); // true\n\narr.constructor = String;\nObject.hasOwn(arr, \"constructor\"); // true — the instance property shadows the one on its prototype\n```\n\nBut even when `Object.getPrototypeOf(a).constructor` is re-assigned, it won't change other behaviors of the object. For example, the behavior of `instanceof` is controlled by [`Symbol.hasInstance`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance), not `constructor`:\n\n```js\nconst arr = [];\narr.constructor = String;\narr instanceof String; // false\narr instanceof Array; // true\n```\n\nThere is nothing protecting the `constructor` property from being re-assigned or shadowed, so using it to detect the type of a variable should usually be avoided in favor of less fragile ways like `instanceof` and [`Symbol.toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) for objects, or [`typeof`](/en-US/docs/Web/JavaScript/Reference/Operators/typeof) for primitives.\n\n### Changing the constructor of a constructor function's prototype\n\nEvery constructor has a [`prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property, which will become the instance's `[[Prototype]]` when called via the [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator. `ConstructorFunction.prototype.constructor` will therefore become a property on the instance's `[[Prototype]]`, as previously demonstrated.\n\nHowever, if `ConstructorFunction.prototype` is re-assigned, the `constructor` property will be lost. For example, the following is a common way to create an inheritance pattern:\n\n```js\nfunction Parent() {\n  // …\n}\nParent.prototype.parentMethod = function () {};\n\nfunction Child() {\n  Parent.call(this); // Make sure everything is initialized properly\n}\n// Pointing the [[Prototype]] of Child.prototype to Parent.prototype\nChild.prototype = Object.create(Parent.prototype);\n```\n\nThe `constructor` of instances of `Child` will be `Parent` due to `Child.prototype` being re-assigned.\n\nThis is usually not a big deal — the language almost never reads the `constructor` property of an object. The only exception is when using [`@@species`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species) to create new instances of a class, but such cases are rare, and you should be using the [`extends`](/en-US/docs/Web/JavaScript/Reference/Classes/extends) syntax to subclass builtins anyway.\n\nHowever, ensuring that `Child.prototype.constructor` always points to `Child` itself is crucial when some caller is using `constructor` to access the original class from an instance. Take the following case: the object has the `create()` method to create itself.\n\n```js\nfunction Parent() {\n  // …\n}\nfunction CreatedConstructor() {\n  Parent.call(this);\n}\n\nCreatedConstructor.prototype = Object.create(Parent.prototype);\n\nCreatedConstructor.prototype.create = function () {\n  return new this.constructor();\n};\n\nnew CreatedConstructor().create().create(); // TypeError: new CreatedConstructor().create().create is undefined, since constructor === Parent\n```\n\nIn the example above, an exception is thrown, since the `constructor` links to `Parent`. To avoid this, just assign the necessary constructor you are going to use.\n\n```js\nfunction Parent() {\n  // …\n}\nfunction CreatedConstructor() {\n  // …\n}\n\nCreatedConstructor.prototype = Object.create(Parent.prototype, {\n  // Return original constructor to Child\n  constructor: {\n    value: CreatedConstructor,\n    enumerable: false, // Make it non-enumerable, so it won't appear in `for...in` loop\n    writable: true,\n    configurable: true,\n  },\n});\n\nCreatedConstructor.prototype.create = function () {\n  return new this.constructor();\n};\n\nnew CreatedConstructor().create().create(); // it's pretty fine\n```\n\nNote that when manually adding the `constructor` property, it's crucial to make the property [non-enumerable](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties), so `constructor` won't be visited in [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops — as it normally isn't.\n\nIf the code above looks like too much boilerplate, you may also consider using [`Object.setPrototypeOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf) to manipulate the prototype chain.\n\n```js\nfunction Parent() {\n  // …\n}\nfunction CreatedConstructor() {\n  // …\n}\n\nObject.setPrototypeOf(CreatedConstructor.prototype, Parent.prototype);\n\nCreatedConstructor.prototype.create = function () {\n  return new this.constructor();\n};\n\nnew CreatedConstructor().create().create(); // still works without re-creating constructor property\n```\n\n`Object.setPrototypeOf()` comes with its potential performance downsides because all previously created objects involved in the prototype chain have to be re-compiled; but if the above initialization code happens before `Parent` or `CreatedConstructor` are constructed, the effect should be minimal.\n\nLet's consider one more involved case.\n\n```js\nfunction ParentWithStatic() {}\n\nParentWithStatic.startPosition = { x: 0, y: 0 }; // Static member property\nParentWithStatic.getStartPosition = function () {\n  return this.startPosition;\n};\n\nfunction Child(x, y) {\n  this.position = { x, y };\n}\n\nChild.prototype = Object.create(ParentWithStatic.prototype, {\n  // Return original constructor to Child\n  constructor: {\n    value: Child,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\n\nChild.prototype.getOffsetByInitialPosition = function () {\n  const position = this.position;\n  // Using this.constructor, in hope that getStartPosition exists as a static method\n  const startPosition = this.constructor.getStartPosition();\n\n  return {\n    offsetX: startPosition.x - position.x,\n    offsetY: startPosition.y - position.y,\n  };\n};\n\nnew Child(1, 1).getOffsetByInitialPosition();\n// Error: this.constructor.getStartPosition is undefined, since the\n// constructor is Child, which doesn't have the getStartPosition static method\n```\n\nFor this example to work properly, we can reassign the `Parent`'s static properties to `Child`:\n\n```js\n// …\nObject.assign(Child, ParentWithStatic); // Notice that we assign it before we create() a prototype below\nChild.prototype = Object.create(ParentWithStatic.prototype, {\n  // Return original constructor to Child\n  constructor: {\n    value: Child,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\n// …\n```\n\nBut even better, we can make the constructor functions themselves extend each other, as classes' [`extends`](/en-US/docs/Web/JavaScript/Reference/Classes/extends) do.\n\n```js\nfunction ParentWithStatic() {}\n\nParentWithStatic.startPosition = { x: 0, y: 0 }; // Static member property\nParentWithStatic.getStartPosition = function () {\n  return this.startPosition;\n};\n\nfunction Child(x, y) {\n  this.position = { x, y };\n}\n\n// Properly create inheritance!\nObject.setPrototypeOf(Child.prototype, ParentWithStatic.prototype);\nObject.setPrototypeOf(Child, ParentWithStatic);\n\nChild.prototype.getOffsetByInitialPosition = function () {\n  const position = this.position;\n  const startPosition = this.constructor.getStartPosition();\n\n  return {\n    offsetX: startPosition.x - position.x,\n    offsetY: startPosition.y - position.y,\n  };\n};\n\nconsole.log(new Child(1, 1).getOffsetByInitialPosition()); // { offsetX: -1, offsetY: -1 }\n```\n\nAgain, using `Object.setPrototypeOf()` may have adverse performance effects, so make sure it happens immediately after the constructor declaration and before any instances are created — to avoid objects being \"tainted\".\n\n> **Note:** Manually updating or setting the constructor can lead to different and sometimes confusing consequences. To prevent this, just define the role of `constructor` in each specific case. In most cases, `constructor` is not used and reassigning it is not necessary.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Statements/class\", \"class\")}}\n- {{jsxref(\"Classes/constructor\", \"constructor\")}}\n- {{Glossary(\"Constructor\")}}\n"
    },
    "create": {
      "index.md": "---\ntitle: Object.create()\nslug: Web/JavaScript/Reference/Global_Objects/Object/create\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.create\n---\n\n{{JSRef}}\n\nThe **`Object.create()`** static method creates a new object, using an existing object as the prototype of the newly created object.\n\n{{EmbedInteractiveExample(\"pages/js/object-create.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nObject.create(proto)\nObject.create(proto, propertiesObject)\n```\n\n### Parameters\n\n- `proto`\n  - : The object which should be the prototype of the newly-created object.\n- `propertiesObject` {{optional_inline}}\n  - : If specified and not {{jsxref(\"undefined\")}}, an object whose [enumerable own properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of {{jsxref(\"Object.defineProperties()\")}}.\n\n### Return value\n\nA new object with the specified prototype object and properties.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `proto` is neither [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) nor an {{jsxref(\"Object\")}}.\n\n## Examples\n\n### Classical inheritance with Object.create()\n\nBelow is an example of how to use `Object.create()` to achieve classical inheritance. This is for a single inheritance, which is all that JavaScript supports.\n\n```js\n// Shape - superclass\nfunction Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\n// superclass method\nShape.prototype.move = function (x, y) {\n  this.x += x;\n  this.y += y;\n  console.info(\"Shape moved.\");\n};\n\n// Rectangle - subclass\nfunction Rectangle() {\n  Shape.call(this); // call super constructor.\n}\n\n// subclass extends superclass\nRectangle.prototype = Object.create(Shape.prototype, {\n  // If you don't set Rectangle.prototype.constructor to Rectangle,\n  // it will take the prototype.constructor of Shape (parent).\n  // To avoid that, we set the prototype.constructor to Rectangle (child).\n  constructor: {\n    value: Rectangle,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\n\nconst rect = new Rectangle();\n\nconsole.log(\"Is rect an instance of Rectangle?\", rect instanceof Rectangle); // true\nconsole.log(\"Is rect an instance of Shape?\", rect instanceof Shape); // true\nrect.move(1, 1); // Logs 'Shape moved.'\n```\n\nNote that there are caveats to watch out for using `create()`, such as re-adding the [`constructor`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) property to ensure proper semantics. Although `Object.create()` is believed to have better performance than mutating the prototype with {{jsxref(\"Object.setPrototypeOf()\")}}, the difference is in fact negligible if no instances have been created and property accesses haven't been optimized yet. In modern code, the [class](/en-US/docs/Web/JavaScript/Reference/Classes) syntax should be preferred in any case.\n\n### Using propertiesObject argument with Object.create()\n\n`Object.create()` allows fine-tuned control over the object creation process. The [object initializer syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) is, in fact, a syntax sugar of `Object.create()`. With `Object.create()`, we can create objects with a designated prototype and also some properties. Note that the second parameter maps keys to _property descriptors_ — this means you can control each property's enumerability, configurability, etc. as well, which you can't do in object initializers.\n\n```js\no = {};\n// Is equivalent to:\no = Object.create(Object.prototype);\n\no = Object.create(Object.prototype, {\n  // foo is a regular data property\n  foo: {\n    writable: true,\n    configurable: true,\n    value: \"hello\",\n  },\n  // bar is an accessor property\n  bar: {\n    configurable: false,\n    get() {\n      return 10;\n    },\n    set(value) {\n      console.log(\"Setting `o.bar` to\", value);\n    },\n  },\n});\n\n// Create a new object whose prototype is a new, empty\n// object and add a single property 'p', with value 42.\no = Object.create({}, { p: { value: 42 } });\n```\n\nWith `Object.create()`, we can create an object [with `null` as prototype](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects). The equivalent syntax in object initializers would be the [`__proto__`](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#prototype_setter) key.\n\n```js\no = Object.create(null);\n// Is equivalent to:\no = { __proto__: null };\n```\n\nBy default properties are _not_ writable, enumerable or configurable.\n\n```js\no.p = 24; // throws in strict mode\no.p; // 42\n\no.q = 12;\nfor (const prop in o) {\n  console.log(prop);\n}\n// 'q'\n\ndelete o.p;\n// false; throws in strict mode\n```\n\nTo specify a property with the same attributes as in an initializer, explicitly specify `writable`, `enumerable` and `configurable`.\n\n```js\no2 = Object.create(\n  {},\n  {\n    p: {\n      value: 42,\n      writable: true,\n      enumerable: true,\n      configurable: true,\n    },\n  },\n);\n// This is not equivalent to:\n// o2 = Object.create({ p: 42 })\n// which will create an object with prototype { p: 42 }\n```\n\nYou can use `Object.create()` to mimic the behavior of the [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator.\n\n```js\nfunction Constructor() {}\no = new Constructor();\n// Is equivalent to:\no = Object.create(Constructor.prototype);\n```\n\nOf course, if there is actual initialization code in the `Constructor` function, the `Object.create()` method cannot reflect it.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.create` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- {{jsxref(\"Object.defineProperty()\")}}\n- {{jsxref(\"Object.defineProperties()\")}}\n- {{jsxref(\"Object.prototype.isPrototypeOf()\")}}\n- {{jsxref(\"Reflect.construct()\")}}\n- [Object.getPrototypeOf](https://johnresig.com/blog/objectgetprototypeof/) by John Resig (2008)\n"
    },
    "defineproperties": {
      "index.md": "---\ntitle: Object.defineProperties()\nslug: Web/JavaScript/Reference/Global_Objects/Object/defineProperties\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.defineProperties\n---\n\n{{JSRef}}\n\nThe **`Object.defineProperties()`** static method defines new or\nmodifies existing properties directly on an object, returning the object.\n\n{{EmbedInteractiveExample(\"pages/js/object-defineproperties.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.defineProperties(obj, props)\n```\n\n### Parameters\n\n- `obj`\n  - : The object on which to define or modify properties.\n- `props`\n\n  - : An object whose keys represent the names of properties to be defined or modified and\n    whose values are objects describing those properties. Each value in `props`\n    must be either a data descriptor or an accessor descriptor; it cannot be both (see\n    {{jsxref(\"Object.defineProperty()\")}} for more details).\n\n    Data descriptors and accessor descriptors may optionally contain the following keys:\n\n    - `configurable`\n      - : `true` if and only if the type of this property descriptor may be\n        changed and if the property may be deleted from the corresponding object.\n        **Defaults to `false`.**\n    - `enumerable`\n      - : `true` if and only if this property shows up during enumeration of\n        the properties on the corresponding object.\n        **Defaults to `false`.**\n\n    A data descriptor also has the following optional keys:\n\n    - `value`\n      - : The value associated with the property. Can be any valid JavaScript value\n        (number, object, function, etc.).\n        **Defaults to {{jsxref(\"undefined\")}}.**\n    - `writable`\n      - : `true` if and only if the value associated with the property may be\n        changed with an {{jsxref(\"Operators\", \"assignment operator\", \"assignment_operators\", 1)}}.\n        **Defaults to `false`.**\n\n    An accessor descriptor also has the following optional keys:\n\n    - `get`\n      - : A function which serves as a getter for the property, or {{jsxref(\"undefined\")}}\n        if there is no getter. The function's return value will be used as the value of\n        the property.\n        **Defaults to {{jsxref(\"undefined\")}}.**\n    - `set`\n      - : A function which serves as a setter for the property, or {{jsxref(\"undefined\")}}\n        if there is no setter. The function will receive as its only argument the new\n        value being assigned to the property.\n        **Defaults to {{jsxref(\"undefined\")}}.**\n\n    If a descriptor has neither of `value`, `writable`,\n    `get` and `set` keys, it is treated as a data descriptor. If a\n    descriptor has both `value` or `writable` and `get`\n    or `set` keys, an exception is thrown.\n\n### Return value\n\nThe object that was passed to the function.\n\n## Examples\n\n### Using Object.defineProperties\n\n```js\nconst obj = {};\nObject.defineProperties(obj, {\n  property1: {\n    value: true,\n    writable: true,\n  },\n  property2: {\n    value: \"Hello\",\n    writable: false,\n  },\n  // etc. etc.\n});\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.defineProperties` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- {{jsxref(\"Object.defineProperty()\")}}\n- {{jsxref(\"Object.keys()\")}}\n- [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)\n"
    },
    "defineproperty": {
      "index.md": "---\ntitle: Object.defineProperty()\nslug: Web/JavaScript/Reference/Global_Objects/Object/defineProperty\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.defineProperty\n---\n\n{{JSRef}}\n\nThe **`Object.defineProperty()`** static method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\n\n{{EmbedInteractiveExample(\"pages/js/object-defineproperty.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.defineProperty(obj, prop, descriptor)\n```\n\n### Parameters\n\n- `obj`\n  - : The object on which to define the property.\n- `prop`\n  - : A string or {{jsxref(\"Symbol\")}} specifying the key of the property to be defined or modified.\n- `descriptor`\n  - : The descriptor for the property being defined or modified.\n\n### Return value\n\nThe object that was passed to the function, with the specified property added or modified.\n\n## Description\n\n`Object.defineProperty()` allows a precise addition to or modification of a property on an object. Normal property addition through [assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Assignment) creates properties which show up during property enumeration ({{jsxref(\"Statements/for...in\", \"for...in\")}}, {{jsxref(\"Object.keys()\")}}, etc.), whose values may be changed and which may be {{jsxref(\"Operators/delete\", \"deleted\", \"\", 1)}}. This method allows these extra details to be changed from their defaults. By default, properties added using `Object.defineProperty()` are not writable, not enumerable, and not configurable. In addition, `Object.defineProperty()` uses the [`[[DefineOwnProperty]]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty) internal method, instead of [`[[Set]]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set), so it does not invoke [setters](/en-US/docs/Web/JavaScript/Reference/Functions/set), even when the property is already present.\n\nProperty descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A **data descriptor** is a property with a value that may or may not be writable. An **accessor descriptor** is a property described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both.\n\nBoth data and accessor descriptors are objects. They share the following optional keys (please note: the **defaults** mentioned here are in the case of defining properties using `Object.defineProperty()`):\n\n- `configurable`\n\n  - : when this is set to `false`,\n\n    - the type of this property cannot be changed between data property and accessor property, and\n    - the property may not be deleted, and\n    - other attributes of its descriptor cannot be changed (however, if it's a data descriptor with `writable: true`, the `value` can be changed, and `writable` can be changed to `false`).\n\n    **Defaults to `false`.**\n\n- `enumerable`\n  - : `true` if and only if this property shows up during enumeration of the properties on the corresponding object. **Defaults to `false`.**\n\nA **data descriptor** also has the following optional keys:\n\n- `value`\n  - : The value associated with the property. Can be any valid JavaScript value (number, object, function, etc.). **Defaults to {{jsxref(\"undefined\")}}.**\n- `writable`\n  - : `true` if the value associated with the property may be changed with an [assignment operator](/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators). **Defaults to `false`.**\n\nAn **accessor descriptor** also has the following optional keys:\n\n- `get`\n  - : A function which serves as a getter for the property, or {{jsxref(\"undefined\")}} if there is no getter. When the property is accessed, this function is called without arguments and with `this` set to the object through which the property is accessed (this may not be the object on which the property is defined due to inheritance). The return value will be used as the value of the property. **Defaults to {{jsxref(\"undefined\")}}.**\n- `set`\n  - : A function which serves as a setter for the property, or {{jsxref(\"undefined\")}} if there is no setter. When the property is assigned, this function is called with one argument (the value being assigned to the property) and with `this` set to the object through which the property is assigned. **Defaults to {{jsxref(\"undefined\")}}.**\n\nIf a descriptor doesn't have any of the `value`, `writable`, `get`, and `set` keys, it is treated as a data descriptor. If a descriptor has both \\[`value` or `writable`] and \\[`get` or `set`] keys, an exception is thrown.\n\nThese attributes are not necessarily the descriptor's own properties. Inherited properties will be considered as well. In order to ensure these defaults are preserved, you might freeze existing objects in the descriptor object's prototype chain upfront, specify all options explicitly, or create a [`null`-prototype object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects).\n\n```js\nconst obj = {};\n// 1. Using a null prototype: no inherited properties\nconst descriptor = Object.create(null);\ndescriptor.value = \"static\";\n\n// not enumerable, not configurable, not writable as defaults\nObject.defineProperty(obj, \"key\", descriptor);\n\n// 2. Being explicit by using a throw-away object literal with all attributes present\nObject.defineProperty(obj, \"key2\", {\n  enumerable: false,\n  configurable: false,\n  writable: false,\n  value: \"static\",\n});\n\n// 3. Recycling same object\nfunction withValue(value) {\n  const d =\n    withValue.d ||\n    (withValue.d = {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value,\n    });\n\n  // avoiding duplicate operation for assigning value\n  if (d.value !== value) d.value = value;\n\n  return d;\n}\n// and\nObject.defineProperty(obj, \"key\", withValue(\"static\"));\n\n// if freeze is available, prevents adding or\n// removing the object prototype properties\n// (value, get, set, enumerable, writable, configurable)\n(Object.freeze || Object)(Object.prototype);\n```\n\nWhen the property already exists, `Object.defineProperty()` attempts to modify the property according to the values in the descriptor and the property's current configuration.\n\nIf the old descriptor had its `configurable` attribute set to `false`, the property is said to be _non-configurable_. It is not possible to change any attribute of a non-configurable accessor property, and it is not possible to switch between data and accessor property types. For data properties with `writable: true`, it is possible to modify the value and change the `writable` attribute from `true` to `false`. A {{jsxref(\"TypeError\")}} is thrown when attempts are made to change non-configurable property attributes (except `value` and `writable`, if permitted), except when defining a value same as the original value on a data property.\n\nWhen the current property is configurable, defining an attribute to `undefined` effectively deletes it. For example, if `o.k` is an accessor property, `Object.defineProperty(o, \"k\", { set: undefined })` will remove the setter, making `k` only have a getter and become readonly. If an attribute is absent from the new descriptor, the old descriptor attribute's value is kept (it won't be implicitly re-defined to `undefined`). It is possible to toggle between data and accessor property by giving a descriptor of a different \"flavor\". For example, if the new descriptor is a data descriptor (with `value` or `writable`), the original descriptor's `get` and `set` attributes will both be dropped.\n\n## Examples\n\n### Creating a property\n\nWhen the property specified doesn't exist in the object, `Object.defineProperty()` creates a new property as described. Fields may be omitted from the descriptor and default values for those fields are inputted.\n\n```js\nconst o = {}; // Creates a new object\n\n// Example of an object property added\n// with defineProperty with a data property descriptor\nObject.defineProperty(o, \"a\", {\n  value: 37,\n  writable: true,\n  enumerable: true,\n  configurable: true,\n});\n// 'a' property exists in the o object and its value is 37\n\n// Example of an object property added\n// with defineProperty with an accessor property descriptor\nlet bValue = 38;\nObject.defineProperty(o, \"b\", {\n  get() {\n    return bValue;\n  },\n  set(newValue) {\n    bValue = newValue;\n  },\n  enumerable: true,\n  configurable: true,\n});\no.b; // 38\n// 'b' property exists in the o object and its value is 38\n// The value of o.b is now always identical to bValue,\n// unless o.b is redefined\n\n// You cannot try to mix both:\nObject.defineProperty(o, \"conflict\", {\n  value: 0x9f91102,\n  get() {\n    return 0xdeadbeef;\n  },\n});\n// throws a TypeError: value appears\n// only in data descriptors,\n// get appears only in accessor descriptors\n```\n\n### Modifying a property\n\nWhen modifying an existing property, the current property configuration determines if the operator succeeds, does nothing, or throws a {{jsxref(\"TypeError\")}}.\n\n#### Writable attribute\n\nWhen the `writable` property attribute is `false`, the property is said to be \"non-writable\". It cannot be reassigned. Trying to write to a non-writable property doesn't change it and results in an error in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode).\n\n```js\nconst o = {}; // Creates a new object\n\nObject.defineProperty(o, \"a\", {\n  value: 37,\n  writable: false,\n});\n\nconsole.log(o.a); // 37\no.a = 25; // No error thrown\n// (it would throw in strict mode,\n// even if the value had been the same)\nconsole.log(o.a); // 37; the assignment didn't work\n\n// strict mode\n(() => {\n  \"use strict\";\n  const o = {};\n  Object.defineProperty(o, \"b\", {\n    value: 2,\n    writable: false,\n  });\n  o.b = 3; // throws TypeError: \"b\" is read-only\n  return o.b; // returns 2 without the line above\n})();\n```\n\n#### Enumerable attribute\n\nThe `enumerable` property attribute defines whether the property is considered by {{jsxref(\"Object.assign()\")}} or the [spread](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) operator. For non-{{jsxref(\"Symbol\")}} properties, it also defines whether it shows up in a {{jsxref(\"Statements/for...in\", \"for...in\")}} loop and {{jsxref(\"Object.keys()\")}} or not. For more information, see [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties).\n\n```js\nconst o = {};\nObject.defineProperty(o, \"a\", {\n  value: 1,\n  enumerable: true,\n});\nObject.defineProperty(o, \"b\", {\n  value: 2,\n  enumerable: false,\n});\nObject.defineProperty(o, \"c\", {\n  value: 3,\n}); // enumerable defaults to false\no.d = 4; // enumerable defaults to true when creating a property by setting it\nObject.defineProperty(o, Symbol.for(\"e\"), {\n  value: 5,\n  enumerable: true,\n});\nObject.defineProperty(o, Symbol.for(\"f\"), {\n  value: 6,\n  enumerable: false,\n});\n\nfor (const i in o) {\n  console.log(i);\n}\n// Logs 'a' and 'd' (always in that order)\n\nObject.keys(o); // ['a', 'd']\n\no.propertyIsEnumerable(\"a\"); // true\no.propertyIsEnumerable(\"b\"); // false\no.propertyIsEnumerable(\"c\"); // false\no.propertyIsEnumerable(\"d\"); // true\no.propertyIsEnumerable(Symbol.for(\"e\")); // true\no.propertyIsEnumerable(Symbol.for(\"f\")); // false\n\nconst p = { ...o };\np.a; // 1\np.b; // undefined\np.c; // undefined\np.d; // 4\np[Symbol.for(\"e\")]; // 5\np[Symbol.for(\"f\")]; // undefined\n```\n\n#### Configurable attribute\n\nThe `configurable` attribute controls whether the property can be deleted from the object and whether its attributes (other than `value` and `writable`) can be changed.\n\nThis example illustrates a non-configurable accessor property.\n\n```js\nconst o = {};\nObject.defineProperty(o, \"a\", {\n  get() {\n    return 1;\n  },\n  configurable: false,\n});\n\nObject.defineProperty(o, \"a\", {\n  configurable: true,\n}); // throws a TypeError\nObject.defineProperty(o, \"a\", {\n  enumerable: true,\n}); // throws a TypeError\nObject.defineProperty(o, \"a\", {\n  set() {},\n}); // throws a TypeError (set was undefined previously)\nObject.defineProperty(o, \"a\", {\n  get() {\n    return 1;\n  },\n}); // throws a TypeError\n// (even though the new get does exactly the same thing)\nObject.defineProperty(o, \"a\", {\n  value: 12,\n}); // throws a TypeError\n// ('value' can be changed when 'configurable' is false, but only when the property is a writable data property)\n\nconsole.log(o.a); // 1\ndelete o.a; // Nothing happens; throws an error in strict mode\nconsole.log(o.a); // 1\n```\n\nIf the `configurable` attribute of `o.a` had been `true`, none of the errors would be thrown and the property would be deleted at the end.\n\nThis example illustrates a non-configurable but writable data property. The property's `value` can still be changed, and `writable` can still be toggled from `true` to `false`.\n\n```js\nconst o = {};\nObject.defineProperty(o, \"b\", {\n  writable: true,\n  configurable: false,\n});\nconsole.log(o.b); // undefined\nObject.defineProperty(o, \"b\", {\n  value: 1,\n}); // Even when configurable is false, because the object is writable, we may still replace the value\nconsole.log(o.b); // 1\no.b = 2; // We can change the value with assignment operators as well\nconsole.log(o.b); // 2\n// Toggle the property's writability\nObject.defineProperty(o, \"b\", {\n  writable: false,\n});\nObject.defineProperty(o, \"b\", {\n  value: 1,\n}); // TypeError: because the property is neither writable nor configurable, it cannot be modified\n// At this point, there's no way to further modify 'b'\n// or restore its writability\n```\n\nThis example illustrates a configurable but non-writable data property. The property's `value` may still be replaced with `defineProperty` (but not with assignment operators), and `writable` may be toggled.\n\n```js\nconst o = {};\nObject.defineProperty(o, \"b\", {\n  writable: false,\n  configurable: true,\n});\nObject.defineProperty(o, \"b\", {\n  value: 1,\n}); // We can replace the value with defineProperty\nconsole.log(o.b); // 1\no.b = 2; // throws TypeError in strict mode: cannot change a non-writable property's value with assignment\n```\n\nThis example illustrates a non-configurable and non-writable data property. There's no way to update any attribute of the property, including its `value`.\n\n```js\nconst o = {};\nObject.defineProperty(o, \"b\", {\n  writable: false,\n  configurable: false,\n});\nObject.defineProperty(o, \"b\", {\n  value: 1,\n}); // TypeError: the property cannot be modified because it is neither writable nor configurable.\n```\n\n### Adding properties and default values\n\nIt is important to consider the way default values of attributes are applied. There is often a difference between using [property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) to assign a value and using `Object.defineProperty()`, as shown in the example below.\n\n```js\nconst o = {};\n\no.a = 1;\n// is equivalent to:\nObject.defineProperty(o, \"a\", {\n  value: 1,\n  writable: true,\n  configurable: true,\n  enumerable: true,\n});\n\n// On the other hand,\nObject.defineProperty(o, \"a\", { value: 1 });\n// is equivalent to:\nObject.defineProperty(o, \"a\", {\n  value: 1,\n  writable: false,\n  configurable: false,\n  enumerable: false,\n});\n```\n\n### Custom setters and getters\n\nThe example below shows how to implement a self-archiving object. When `temperature` property is set, the `archive` array gets a log entry.\n\n```js\nfunction Archiver() {\n  let temperature = null;\n  const archive = [];\n\n  Object.defineProperty(this, \"temperature\", {\n    get() {\n      console.log(\"get!\");\n      return temperature;\n    },\n    set(value) {\n      temperature = value;\n      archive.push({ val: temperature });\n    },\n  });\n\n  this.getArchive = () => archive;\n}\n\nconst arc = new Archiver();\narc.temperature; // 'get!'\narc.temperature = 11;\narc.temperature = 13;\narc.getArchive(); // [{ val: 11 }, { val: 13 }]\n```\n\nIn this example, a getter always returns the same value.\n\n```js\nconst pattern = {\n  get() {\n    return \"I always return this string, whatever you have assigned\";\n  },\n  set() {\n    this.myname = \"this is my name string\";\n  },\n};\n\nfunction TestDefineSetAndGet() {\n  Object.defineProperty(this, \"myproperty\", pattern);\n}\n\nconst instance = new TestDefineSetAndGet();\ninstance.myproperty = \"test\";\nconsole.log(instance.myproperty);\n// I always return this string, whatever you have assigned\n\nconsole.log(instance.myname); // this is my name string\n```\n\n### Inheritance of properties\n\nIf an accessor property is inherited, its `get` and `set` methods will be called when the property is accessed and modified on descendant objects. If these methods use a variable to store the value, this value will be shared by all objects.\n\n```js\nfunction MyClass() {}\n\nlet value;\nObject.defineProperty(MyClass.prototype, \"x\", {\n  get() {\n    return value;\n  },\n  set(x) {\n    value = x;\n  },\n});\n\nconst a = new MyClass();\nconst b = new MyClass();\na.x = 1;\nconsole.log(b.x); // 1\n```\n\nThis can be fixed by storing the value in another property. In `get` and `set` methods, `this` points to the object which is used to access or modify the property.\n\n```js\nfunction MyClass() {}\n\nObject.defineProperty(MyClass.prototype, \"x\", {\n  get() {\n    return this.storedX;\n  },\n  set(x) {\n    this.storedX = x;\n  },\n});\n\nconst a = new MyClass();\nconst b = new MyClass();\na.x = 1;\nconsole.log(b.x); // undefined\n```\n\nUnlike accessor properties, data properties are always set on the object itself, not on a prototype. However, if a non-writable data property is inherited, it is still prevented from being modified on the object.\n\n```js\nfunction MyClass() {}\n\nMyClass.prototype.x = 1;\nObject.defineProperty(MyClass.prototype, \"y\", {\n  writable: false,\n  value: 1,\n});\n\nconst a = new MyClass();\na.x = 2;\nconsole.log(a.x); // 2\nconsole.log(MyClass.prototype.x); // 1\na.y = 2; // Ignored, throws in strict mode\nconsole.log(a.y); // 1\nconsole.log(MyClass.prototype.y); // 1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)\n- {{jsxref(\"Object.defineProperties()\")}}\n- {{jsxref(\"Object.prototype.propertyIsEnumerable()\")}}\n- {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}\n- {{jsxref(\"Functions/get\", \"get\")}}\n- {{jsxref(\"Functions/set\", \"set\")}}\n- {{jsxref(\"Object.create()\")}}\n- {{jsxref(\"Reflect.defineProperty()\")}}\n"
    },
    "entries": {
      "index.md": "---\ntitle: Object.entries()\nslug: Web/JavaScript/Reference/Global_Objects/Object/entries\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.entries\n---\n\n{{JSRef}}\n\nThe **`Object.entries()`** static method returns an array of a given object's own enumerable string-keyed property key-value pairs.\n\n{{EmbedInteractiveExample(\"pages/js/object-entries.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.entries(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : An object.\n\n### Return value\n\nAn array of the given object's own enumerable string-keyed property key-value pairs. Each key-value pair is an array with two elements: the first element is the property key (which is always a string), and the second element is the property value.\n\n## Description\n\n`Object.entries()` returns an array whose elements are arrays corresponding to the enumerable string-keyed property key-value pairs found directly upon `object`. This is the same as iterating with a {{jsxref(\"Statements/for...in\", \"for...in\")}} loop, except that a `for...in` loop enumerates properties in the prototype chain as well. The order of the array returned by `Object.entries()` is the same as that provided by a {{jsxref(\"Statements/for...in\", \"for...in\")}} loop.\n\nIf you only need the property keys, use {{jsxref(\"Object.keys()\")}} instead. If you only need the property values, use {{jsxref(\"Object.values()\")}} instead.\n\n## Examples\n\n### Using Object.entries()\n\n```js\nconst obj = { foo: \"bar\", baz: 42 };\nconsole.log(Object.entries(obj)); // [ ['foo', 'bar'], ['baz', 42] ]\n\nconst arrayLike = { 0: \"a\", 1: \"b\", 2: \"c\" };\nconsole.log(Object.entries(arrayLike)); // [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]\n\nconst randomKeyOrder = { 100: \"a\", 2: \"b\", 7: \"c\" };\nconsole.log(Object.entries(randomKeyOrder)); // [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]\n\n// getFoo is a non-enumerable property\nconst myObj = Object.create(\n  {},\n  {\n    getFoo: {\n      value() {\n        return this.foo;\n      },\n    },\n  },\n);\nmyObj.foo = \"bar\";\nconsole.log(Object.entries(myObj)); // [ ['foo', 'bar'] ]\n```\n\n### Using Object.entries() on primitives\n\nNon-object arguments are [coerced to objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion). [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) cannot be coerced to objects and throw a {{jsxref(\"TypeError\")}} upfront. Only strings may have own enumerable properties, while all other primitives return an empty array.\n\n```js\n// Strings have indices as enumerable own properties\nconsole.log(Object.entries(\"foo\")); // [ ['0', 'f'], ['1', 'o'], ['2', 'o'] ]\n\n// Other primitives except undefined and null have no own properties\nconsole.log(Object.entries(100)); // []\n```\n\n### Converting an Object to a Map\n\nThe {{jsxref(\"Map/Map\", \"Map()\")}} constructor accepts an iterable of `entries`. With `Object.entries`, you can easily convert from {{jsxref(\"Object\")}} to {{jsxref(\"Map\")}}:\n\n```js\nconst obj = { foo: \"bar\", baz: 42 };\nconst map = new Map(Object.entries(obj));\nconsole.log(map); // Map(2) {\"foo\" => \"bar\", \"baz\" => 42}\n```\n\n### Iterating through an Object\n\nUsing [array destructuring](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#array_destructuring), you can iterate through objects easily.\n\n```js\n// Using for...of loop\nconst obj = { a: 5, b: 7, c: 9 };\nfor (const [key, value] of Object.entries(obj)) {\n  console.log(`${key} ${value}`); // \"a 5\", \"b 7\", \"c 9\"\n}\n\n// Using array methods\nObject.entries(obj).forEach(([key, value]) => {\n  console.log(`${key} ${value}`); // \"a 5\", \"b 7\", \"c 9\"\n});\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.entries` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)\n- {{jsxref(\"Object.keys()\")}}\n- {{jsxref(\"Object.values()\")}}\n- {{jsxref(\"Object.prototype.propertyIsEnumerable()\")}}\n- {{jsxref(\"Object.create()\")}}\n- {{jsxref(\"Object.fromEntries()\")}}\n- {{jsxref(\"Object.getOwnPropertyNames()\")}}\n- {{jsxref(\"Map.prototype.entries()\")}}\n"
    },
    "freeze": {
      "index.md": "---\ntitle: Object.freeze()\nslug: Web/JavaScript/Reference/Global_Objects/Object/freeze\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.freeze\n---\n\n{{JSRef}}\n\nThe **`Object.freeze()`** static method _freezes_ an object. Freezing an object [prevents extensions](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and makes existing properties non-writable and non-configurable. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's prototype cannot be re-assigned. `freeze()` returns the same object that was passed in.\n\nFreezing an object is the highest integrity level that JavaScript provides.\n\n{{EmbedInteractiveExample(\"pages/js/object-freeze.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.freeze(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : The object to freeze.\n\n### Return value\n\nThe object that was passed to the function.\n\n## Description\n\nFreezing an object is equivalent to [preventing extensions](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and then changing all existing [properties' descriptors'](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#description) `configurable` to `false` — and for data properties, `writable` to `false` as well. Nothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail, either silently or by throwing a {{jsxref(\"TypeError\")}} exception (most commonly, but not exclusively, when in {{jsxref(\"Strict_mode\", \"strict mode\", \"\", 1)}}).\n\nFor data properties of a frozen object, their values cannot be changed since the `writable` and\n`configurable` attributes are set to `false`. Accessor properties (getters and setters) work the same — the property value returned by the getter may still change, and the setter can still be called without throwing errors when setting the property. Note that values\nthat are objects can still be modified, unless they are also frozen. As an object, an\narray can be frozen; after doing so, its elements cannot be altered and no elements can\nbe added to or removed from the array.\n\n[Private properties](/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) do not have the concept of property descriptors. Freezing an object with private properties does not prevent the values of these private properties from being changed. (Freezing objects is usually meant as a security measure against external code, but external code cannot access private properties anyway.) Private properties cannot be added or removed from the object, whether the object is frozen or not.\n\n`freeze()` returns the same object that was passed into the function. It\n_does not_ create a frozen copy.\n\nA {{jsxref(\"TypedArray\")}} or a {{jsxref(\"DataView\")}} with elements will cause a {{jsxref(\"TypeError\")}},\nas they are views over memory and will definitely cause other possible issues:\n\n```js\nObject.freeze(new Uint8Array(0)); // No elements\n// Uint8Array []\n\nObject.freeze(new Uint8Array(1)); // Has elements\n// TypeError: Cannot freeze array buffer views with elements\n\nObject.freeze(new DataView(new ArrayBuffer(32))); // No elements\n// DataView {}\n\nObject.freeze(new Float64Array(new ArrayBuffer(64), 63, 0)); // No elements\n// Float64Array []\n\nObject.freeze(new Float64Array(new ArrayBuffer(64), 32, 2)); // Has elements\n// TypeError: Cannot freeze array buffer views with elements\n```\n\nNote that as the standard three properties (`buf.byteLength`,\n`buf.byteOffset` and `buf.buffer`) are read-only (as are those of\nan {{jsxref(\"ArrayBuffer\")}} or {{jsxref(\"SharedArrayBuffer\")}}), there is no reason for\nattempting to freeze these properties.\n\nUnlike {{jsxref(\"Object.seal()\")}}, existing properties in objects frozen with `Object.freeze()` are made immutable and data properties cannot be re-assigned.\n\n## Examples\n\n### Freezing objects\n\n```js\nconst obj = {\n  prop() {},\n  foo: \"bar\",\n};\n\n// Before freezing: new properties may be added,\n// and existing properties may be changed or removed\nobj.foo = \"baz\";\nobj.lumpy = \"woof\";\ndelete obj.prop;\n\n// Freeze.\nconst o = Object.freeze(obj);\n\n// The return value is just the same object we passed in.\no === obj; // true\n\n// The object has become frozen.\nObject.isFrozen(obj); // === true\n\n// Now any changes will fail\nobj.foo = \"quux\"; // silently does nothing\n// silently doesn't add the property\nobj.quaxxor = \"the friendly duck\";\n\n// In strict mode such attempts will throw TypeErrors\nfunction fail() {\n  \"use strict\";\n  obj.foo = \"sparky\"; // throws a TypeError\n  delete obj.foo; // throws a TypeError\n  delete obj.quaxxor; // returns true since attribute 'quaxxor' was never added\n  obj.sparky = \"arf\"; // throws a TypeError\n}\n\nfail();\n\n// Attempted changes through Object.defineProperty;\n// both statements below throw a TypeError.\nObject.defineProperty(obj, \"ohai\", { value: 17 });\nObject.defineProperty(obj, \"foo\", { value: \"eit\" });\n\n// It's also impossible to change the prototype\n// both statements below will throw a TypeError.\nObject.setPrototypeOf(obj, { x: 20 });\nobj.__proto__ = { x: 20 };\n```\n\n### Freezing arrays\n\n```js\nconst a = [0];\nObject.freeze(a); // The array cannot be modified now.\n\na[0] = 1; // fails silently\n\n// In strict mode such attempt will throw a TypeError\nfunction fail() {\n  \"use strict\";\n  a[0] = 1;\n}\n\nfail();\n\n// Attempted to push\na.push(2); // throws a TypeError\n```\n\nThe object being frozen is _immutable_. However, it is not necessarily\n_constant_. The following example shows that a frozen object is not constant\n(freeze is shallow).\n\n```js\nconst obj1 = {\n  internal: {},\n};\n\nObject.freeze(obj1);\nobj1.internal.a = \"aValue\";\n\nobj1.internal.a; // 'aValue'\n```\n\nTo be a constant object, the entire reference graph (direct and indirect references to\nother objects) must reference only immutable frozen objects. The object being frozen is\nsaid to be immutable because the entire object _state_ (values and references to\nother objects) within the whole object is fixed. Note that strings, numbers, and\nbooleans are always immutable and that Functions and Arrays are objects.\n\n#### What is \"shallow freeze\"?\n\nThe result of calling `Object.freeze(object)` only applies to the\nimmediate properties of `object` itself and will prevent future property\naddition, removal or value re-assignment operations _only_ on\n`object`. If the value of those properties are objects themselves, those\nobjects are not frozen and may be the target of property addition, removal or value\nre-assignment operations.\n\n```js\nconst employee = {\n  name: \"Mayank\",\n  designation: \"Developer\",\n  address: {\n    street: \"Rohini\",\n    city: \"Delhi\",\n  },\n};\n\nObject.freeze(employee);\n\nemployee.name = \"Dummy\"; // fails silently in non-strict mode\nemployee.address.city = \"Noida\"; // attributes of child object can be modified\n\nconsole.log(employee.address.city); // \"Noida\"\n```\n\nTo make an object immutable, recursively freeze each non-primitive property\n(deep freeze). Use the pattern on a case-by-case basis based on your design when you\nknow the object contains no [cycles](<https://en.wikipedia.org/wiki/Cycle_(graph_theory)>) in the reference\ngraph, otherwise an endless loop will be triggered. An enhancement to\n`deepFreeze()` would be to have an internal function that receives a path\n(e.g. an Array) argument so you can suppress calling `deepFreeze()`\nrecursively when an object is in the process of being made immutable. You still run a\nrisk of freezing an object that shouldn't be frozen, such as [`window`](/en-US/docs/Web/API/Window).\n\n```js\nfunction deepFreeze(object) {\n  // Retrieve the property names defined on object\n  const propNames = Reflect.ownKeys(object);\n\n  // Freeze properties before freezing self\n  for (const name of propNames) {\n    const value = object[name];\n\n    if ((value && typeof value === \"object\") || typeof value === \"function\") {\n      deepFreeze(value);\n    }\n  }\n\n  return Object.freeze(object);\n}\n\nconst obj2 = {\n  internal: {\n    a: null,\n  },\n};\n\ndeepFreeze(obj2);\n\nobj2.internal.a = \"anotherValue\"; // fails silently in non-strict mode\nobj2.internal.a; // null\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.isFrozen()\")}}\n- {{jsxref(\"Object.preventExtensions()\")}}\n- {{jsxref(\"Object.isExtensible()\")}}\n- {{jsxref(\"Object.seal()\")}}\n- {{jsxref(\"Object.isSealed()\")}}\n"
    },
    "fromentries": {
      "index.md": "---\ntitle: Object.fromEntries()\nslug: Web/JavaScript/Reference/Global_Objects/Object/fromEntries\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.fromEntries\n---\n\n{{JSRef}}\n\nThe **`Object.fromEntries()`** static method transforms a list of key-value pairs into an object.\n\n{{EmbedInteractiveExample(\"pages/js/object-fromentries.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.fromEntries(iterable)\n```\n\n### Parameters\n\n- `iterable`\n\n  - : An [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), such as an {{jsxref(\"Array\")}} or {{jsxref(\"Map\")}}, containing a list of objects. Each object should have two properties:\n\n    - `0`\n      - : A string or [symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) representing the property key.\n    - `1`\n      - : The property value.\n\n    Typically, this object is implemented as a two-element array, with the first element being the property key and the second element being the property value.\n\n### Return value\n\nA new object whose properties are given by the entries of the iterable.\n\n## Description\n\nThe `Object.fromEntries()` method takes a list of key-value pairs and returns a new object whose properties are given by those entries. The `iterable` argument is expected to be an object that implements an `@@iterator` method. The method returns an iterator object that produces two-element array-like objects. The first element is a value that will be used as a property key, and the second element is the value to associate with that property key.\n\n`Object.fromEntries()` performs the reverse of {{jsxref(\"Object.entries()\")}}, except that `Object.entries()` only returns string-keyed properties, while `Object.fromEntries()` can also create symbol-keyed properties.\n\n> **Note:** Unlike {{jsxref(\"Array.from()\")}}, `Object.fromEntries()` does not use the value of `this`, so calling it on another constructor does not create objects of that type.\n\n## Examples\n\n### Converting a Map to an Object\n\nWith `Object.fromEntries`, you can convert from {{jsxref(\"Map\")}} to {{jsxref(\"Object\")}}:\n\n```js\nconst map = new Map([\n  [\"foo\", \"bar\"],\n  [\"baz\", 42],\n]);\nconst obj = Object.fromEntries(map);\nconsole.log(obj); // { foo: \"bar\", baz: 42 }\n```\n\n### Converting an Array to an Object\n\nWith `Object.fromEntries`, you can convert from {{jsxref(\"Array\")}} to {{jsxref(\"Object\")}}:\n\n```js\nconst arr = [\n  [\"0\", \"a\"],\n  [\"1\", \"b\"],\n  [\"2\", \"c\"],\n];\nconst obj = Object.fromEntries(arr);\nconsole.log(obj); // { 0: \"a\", 1: \"b\", 2: \"c\" }\n```\n\n### Object transformations\n\nWith `Object.fromEntries`, its reverse method {{jsxref(\"Object.entries()\")}}, and [array manipulation methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_methods), you are able to transform objects like this:\n\n```js\nconst object1 = { a: 1, b: 2, c: 3 };\n\nconst object2 = Object.fromEntries(\n  Object.entries(object1).map(([key, val]) => [key, val * 2]),\n);\n\nconsole.log(object2);\n// { a: 2, b: 4, c: 6 }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.fromEntries` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- {{jsxref(\"Object.entries()\")}}\n- {{jsxref(\"Object.keys()\")}}\n- {{jsxref(\"Object.values()\")}}\n- {{jsxref(\"Object.prototype.propertyIsEnumerable()\")}}\n- {{jsxref(\"Object.create()\")}}\n- {{jsxref(\"Map.prototype.entries()\")}}\n- {{jsxref(\"Map.prototype.keys()\")}}\n- {{jsxref(\"Map.prototype.values()\")}}\n"
    },
    "getownpropertydescriptor": {
      "index.md": "---\ntitle: Object.getOwnPropertyDescriptor()\nslug: Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.getOwnPropertyDescriptor\n---\n\n{{JSRef}}\n\nThe **`Object.getOwnPropertyDescriptor()`** static method returns an\nobject describing the configuration of a specific property on a given object (that is,\none directly present on an object and not in the object's prototype chain). The object\nreturned is mutable but mutating it has no effect on the original property's\nconfiguration.\n\n{{EmbedInteractiveExample(\"pages/js/object-getownpropertydescriptor.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.getOwnPropertyDescriptor(obj, prop)\n```\n\n### Parameters\n\n- `obj`\n  - : The object in which to look for the property.\n- `prop`\n  - : The name or {{jsxref(\"Symbol\")}} of the property whose description is to be\n    retrieved.\n\n### Return value\n\nA property descriptor of the given property if it exists on the object,\n{{jsxref(\"undefined\")}} otherwise.\n\n## Description\n\nThis method permits examination of the precise description of a property. A\n_property_ in JavaScript consists of either a string-valued name or a\n{{jsxref(\"Symbol\")}} and a property descriptor. Further information about property\ndescriptor types and their attributes can be found in\n{{jsxref(\"Object.defineProperty()\")}}.\n\nA _property descriptor_ is a record with some of the following attributes:\n\n- `value`\n  - : The value associated with the property (data descriptors only).\n- `writable`\n  - : `true` if and only if the value associated with the property may be\n    changed (data descriptors only).\n- `get`\n  - : A function which serves as a getter for the property, or {{jsxref(\"undefined\")}} if\n    there is no getter (accessor descriptors only).\n- `set`\n  - : A function which serves as a setter for the property, or {{jsxref(\"undefined\")}} if\n    there is no setter (accessor descriptors only).\n- `configurable`\n  - : `true` if and only if the type of this property descriptor may be changed\n    and if the property may be deleted from the corresponding object.\n- `enumerable`\n  - : `true` if and only if this property shows up during enumeration of the\n    properties on the corresponding object.\n\n## Examples\n\n### Using Object.getOwnPropertyDescriptor()\n\n```js\nlet o, d;\n\no = {\n  get foo() {\n    return 17;\n  },\n};\nd = Object.getOwnPropertyDescriptor(o, \"foo\");\nconsole.log(d);\n// {\n//   configurable: true,\n//   enumerable: true,\n//   get: [Function: get foo],\n//   set: undefined\n// }\n\no = { bar: 42 };\nd = Object.getOwnPropertyDescriptor(o, \"bar\");\nconsole.log(d);\n// {\n//   configurable: true,\n//   enumerable: true,\n//   value: 42,\n//   writable: true\n// }\n\no = { [Symbol.for(\"baz\")]: 73 };\nd = Object.getOwnPropertyDescriptor(o, Symbol.for(\"baz\"));\nconsole.log(d);\n// {\n//   configurable: true,\n//   enumerable: true,\n//   value: 73,\n//   writable: true\n// }\n\no = {};\nObject.defineProperty(o, \"qux\", {\n  value: 8675309,\n  writable: false,\n  enumerable: false,\n});\nd = Object.getOwnPropertyDescriptor(o, \"qux\");\nconsole.log(d);\n// {\n//   value: 8675309,\n//   writable: false,\n//   enumerable: false,\n//   configurable: false\n// }\n```\n\n### Non-object coercion\n\nIn ES5, if the first argument to this method is not an object (a primitive), then it\nwill cause a {{jsxref(\"TypeError\")}}. In ES2015, a non-object first argument will be\ncoerced to an object at first.\n\n```js\nObject.getOwnPropertyDescriptor(\"foo\", 0);\n// TypeError: \"foo\" is not an object  // ES5 code\n\nObject.getOwnPropertyDescriptor(\"foo\", 0);\n// Object returned by ES2015 code: {\n//   configurable: false,\n//   enumerable: true,\n//   value: \"f\",\n//   writable: false\n// }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.defineProperty()\")}}\n- {{jsxref(\"Reflect.getOwnPropertyDescriptor()\")}}\n"
    },
    "getownpropertydescriptors": {
      "index.md": "---\ntitle: Object.getOwnPropertyDescriptors()\nslug: Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.getOwnPropertyDescriptors\n---\n\n{{JSRef}}\n\nThe **`Object.getOwnPropertyDescriptors()`** static method returns all\nown property descriptors of a given object.\n\n{{EmbedInteractiveExample(\"pages/js/object-getownpropertydescriptors.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.getOwnPropertyDescriptors(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : The object for which to get all own property descriptors.\n\n### Return value\n\nAn object containing all own property descriptors of an object. Might be an empty\nobject, if there are no properties.\n\n## Description\n\nThis method permits examination of the precise description of all own properties of an\nobject. A _property_ in JavaScript consists of either a string-valued name or a\n{{jsxref(\"Symbol\")}} and a property descriptor. Further information about property\ndescriptor types and their attributes can be found in\n{{jsxref(\"Object.defineProperty()\")}}.\n\nA _property descriptor_ is a record with some of the following attributes:\n\n- `value`\n  - : The value associated with the property (data descriptors only).\n- `writable`\n  - : `true` if and only if the value associated with the property may be\n    changed (data descriptors only).\n- `get`\n  - : A function which serves as a getter for the property, or {{jsxref(\"undefined\")}} if\n    there is no getter (accessor descriptors only).\n- `set`\n  - : A function which serves as a setter for the property, or {{jsxref(\"undefined\")}} if\n    there is no setter (accessor descriptors only).\n- `configurable`\n  - : `true` if and only if the type of this property descriptor may be changed\n    and if the property may be deleted from the corresponding object.\n- `enumerable`\n  - : `true` if and only if this property shows up during enumeration of the\n    properties on the corresponding object.\n\n## Examples\n\n### Creating a shallow copy\n\nWhereas the {{jsxref(\"Object.assign()\")}} method will only copy enumerable and own\nproperties from a source object to a target object, you are able to use this method and\n{{jsxref(\"Object.create()\")}} for a [shallow copy](/en-US/docs/Glossary/Shallow_copy) between two unknown objects:\n\n```js\nObject.create(\n  Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj),\n);\n```\n\n### Creating a subclass\n\nA typical way of creating a subclass is to define the subclass, set its prototype to an\ninstance of the superclass, and then define properties on that instance. This can get\nawkward especially for getters and setters. Instead, you can use this code to set the\nprototype:\n\n```js\nfunction superclass() {}\nsuperclass.prototype = {\n  // Define the superclass constructor, methods, and properties here\n};\nfunction subclass() {}\nsubclass.prototype = Object.create(superclass.prototype, {\n  // Define the subclass constructor, methods, and properties here\n});\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.getOwnPropertyDescriptors` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}\n- {{jsxref(\"Object.defineProperty()\")}}\n"
    },
    "getownpropertynames": {
      "index.md": "---\ntitle: Object.getOwnPropertyNames()\nslug: Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.getOwnPropertyNames\n---\n\n{{JSRef}}\n\nThe **`Object.getOwnPropertyNames()`** static method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.\n\n{{EmbedInteractiveExample(\"pages/js/object-getownpropertynames.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.getOwnPropertyNames(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : The object whose enumerable and non-enumerable properties are to be returned.\n\n### Return value\n\nAn array of strings that corresponds to the properties found directly in the given object.\n\n## Description\n\n`Object.getOwnPropertyNames()` returns an array whose elements are strings corresponding to the enumerable and non-enumerable properties found directly in a given object `obj`. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a {{jsxref(\"Statements/for...in\", \"for...in\")}} loop (or by {{jsxref(\"Object.keys()\")}}) over the properties of the object. The non-negative integer keys of the object (both enumerable and non-enumerable) are added in ascending order to the array first, followed by the string keys in the order of insertion.\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a {{jsxref(\"TypeError\")}}. In ES2015, a non-object argument will be coerced to an object.\n\n```js\nObject.getOwnPropertyNames(\"foo\");\n// TypeError: \"foo\" is not an object (ES5 code)\n\nObject.getOwnPropertyNames(\"foo\");\n// [\"0\", \"1\", \"2\", \"length\"]  (ES2015 code)\n```\n\n## Examples\n\n### Using Object.getOwnPropertyNames()\n\n```js\nconst arr = [\"a\", \"b\", \"c\"];\nconsole.log(Object.getOwnPropertyNames(arr).sort());\n// [\"0\", \"1\", \"2\", \"length\"]\n\n// Array-like object\nconst obj = { 0: \"a\", 1: \"b\", 2: \"c\" };\nconsole.log(Object.getOwnPropertyNames(obj).sort());\n// [\"0\", \"1\", \"2\"]\n\nObject.getOwnPropertyNames(obj).forEach((val, idx, array) => {\n  console.log(`${val} -> ${obj[val]}`);\n});\n// 0 -> a\n// 1 -> b\n// 2 -> c\n\n// non-enumerable property\nconst myObj = Object.create(\n  {},\n  {\n    getFoo: {\n      value() {\n        return this.foo;\n      },\n      enumerable: false,\n    },\n  },\n);\nmyObj.foo = 1;\n\nconsole.log(Object.getOwnPropertyNames(myObj).sort()); // [\"foo\", \"getFoo\"]\n```\n\nIf you want only the enumerable properties, see {{jsxref(\"Object.keys()\")}} or use a {{jsxref(\"Statements/for...in\", \"for...in\")}} loop (note that this will also return enumerable properties found along the prototype chain for the object unless the latter is filtered with {{jsxref(\"Object.hasOwn()\")}}).\n\nItems on the prototype chain are not listed:\n\n```js\nfunction ParentClass() {}\nParentClass.prototype.inheritedMethod = function () {};\n\nfunction ChildClass() {\n  this.prop = 5;\n  this.method = function () {};\n}\nChildClass.prototype = new ParentClass();\nChildClass.prototype.prototypeMethod = function () {};\n\nconsole.log(Object.getOwnPropertyNames(new ChildClass()));\n// [\"prop\", \"method\"]\n```\n\n### Get non-enumerable properties only\n\nThis uses the {{jsxref(\"Array.prototype.filter()\")}} function to remove the enumerable keys (obtained with {{jsxref(\"Object.keys()\")}}) from a list of all keys (obtained with `Object.getOwnPropertyNames()`) thus giving only the non-enumerable keys as output.\n\n```js\nconst target = myObject;\nconst enumAndNonenum = Object.getOwnPropertyNames(target);\nconst enumOnly = new Set(Object.keys(target));\nconst nonenumOnly = enumAndNonenum.filter((key) => !enumOnly.has(key));\n\nconsole.log(nonenumOnly);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.getOwnPropertyNames` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)\n- {{jsxref(\"Object.hasOwn()\")}}\n- {{jsxref(\"Object.prototype.propertyIsEnumerable()\")}}\n- {{jsxref(\"Object.create()\")}}\n- {{jsxref(\"Object.keys()\")}}\n- {{jsxref(\"Array.prototype.forEach()\")}}\n"
    },
    "getownpropertysymbols": {
      "index.md": "---\ntitle: Object.getOwnPropertySymbols()\nslug: Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.getOwnPropertySymbols\n---\n\n{{JSRef}}\n\nThe **`Object.getOwnPropertySymbols()`** static method returns an array of all symbol properties found directly upon a given object.\n\n{{EmbedInteractiveExample(\"pages/js/object-getownpropertysymbols.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.getOwnPropertySymbols(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : The object whose symbol properties are to be returned.\n\n### Return value\n\nAn array of all symbol properties found directly upon the given object.\n\n## Description\n\nSimilar to {{jsxref(\"Object.getOwnPropertyNames()\")}}, you can get all symbol properties of a given object as an array of symbols. Note that {{jsxref(\"Object.getOwnPropertyNames()\")}} itself does not contain the symbol properties of an object and only the string properties.\n\nAs all objects have no own symbol properties initially, `Object.getOwnPropertySymbols()` returns an empty array unless you have set symbol properties on your object.\n\n## Examples\n\n### Using Object.getOwnPropertySymbols()\n\n```js\nconst obj = {};\nconst a = Symbol(\"a\");\nconst b = Symbol.for(\"b\");\n\nobj[a] = \"localSymbol\";\nobj[b] = \"globalSymbol\";\n\nconst objectSymbols = Object.getOwnPropertySymbols(obj);\n\nconsole.log(objectSymbols.length); // 2\nconsole.log(objectSymbols); // [Symbol(a), Symbol(b)]\nconsole.log(objectSymbols[0]); // Symbol(a)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.getOwnPropertySymbols` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- {{jsxref(\"Object.getOwnPropertyNames()\")}}\n- {{jsxref(\"Symbol\")}}\n"
    },
    "getprototypeof": {
      "index.md": "---\ntitle: Object.getPrototypeOf()\nslug: Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.getPrototypeOf\n---\n\n{{JSRef}}\n\nThe **`Object.getPrototypeOf()`** static method returns the prototype\n(i.e. the value of the internal `[[Prototype]]` property) of the specified\nobject.\n\n{{EmbedInteractiveExample(\"pages/js/object-getprototypeof.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nObject.getPrototypeOf(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : The object whose prototype is to be returned.\n\n### Return value\n\nThe prototype of the given object, which may be [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null).\n\n## Examples\n\n### Using getPrototypeOf\n\n```js\nconst proto = {};\nconst obj = Object.create(proto);\nObject.getPrototypeOf(obj) === proto; // true\n```\n\n### Non-object coercion\n\nIn ES5, it will throw a {{jsxref(\"TypeError\")}} exception if the `obj`\nparameter isn't an object. In ES2015, the parameter will be coerced to an\n{{jsxref(\"Object\")}}.\n\n```js\nObject.getPrototypeOf(\"foo\");\n// TypeError: \"foo\" is not an object (ES5 code)\nObject.getPrototypeOf(\"foo\");\n// String.prototype                  (ES2015 code)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.getPrototypeOf` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- {{jsxref(\"Object.prototype.isPrototypeOf()\")}}\n- {{jsxref(\"Object.setPrototypeOf()\")}}\n- [`Object.prototype.__proto__`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto)\n- {{jsxref(\"Reflect.getPrototypeOf()\")}}\n- [Object.getPrototypeOf](https://johnresig.com/blog/objectgetprototypeof/) by John Resig (2008)\n"
    },
    "groupby": {
      "index.md": "---\ntitle: Object.groupBy()\nslug: Web/JavaScript/Reference/Global_Objects/Object/groupBy\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.groupBy\n---\n\n{{JSRef}}\n\n> **Note:** In some versions of some browsers, this method was implemented as the method `Array.prototype.group()`. Due to web compatibility issues, it is now implemented as a static method. Check the [browser compatibility table](#browser_compatibility) for details.\n\nThe **`Object.groupBy()`** static method groups the elements of a given iterable according to the string values returned by a provided callback function. The returned object has separate properties for each group, containing arrays with the elements in the group.\n\nThis method should be used when group names can be represented by strings. If you need to group elements using a key that is some arbitrary value, use {{jsxref(\"Map.groupBy()\")}} instead.\n\n<!-- {{EmbedInteractiveExample(\"pages/js/object-groupby.html\")}} -->\n\n## Syntax\n\n```js-nolint\nObject.groupBy(items, callbackFn)\n```\n\n### Parameters\n\n- `items`\n  - : An [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an {{jsxref(\"Array\")}}) whose elements will be grouped.\n- `callbackFn`\n  - : A function to execute for each element in the iterable. It should return a value that can get coerced into a property key (string or [symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)) indicating the group of the current element. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed.\n    - `index`\n      - : The index of the current element being processed.\n\n### Return value\n\nA [`null`-prototype object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) with properties for all groups, each assigned to an array containing the elements of the associated group.\n\n## Description\n\n`Object.groupBy()` calls a provided `callbackFn` function once for each element in an iterable. The callback function should return a string or symbol (values that are neither type are [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion)) indicating the group of the associated element. The values returned by `callbackFn` are used as keys for the object returned by `Map.groupBy()`. Each key has an associated array containing all the elements for which the callback returned the same value.\n\nThe elements in the returned object and the original iterable are the same (not {{Glossary(\"deep copy\", \"deep copies\")}}). Changing the internal structure of the elements will be reflected in both the original iterable and the returned object.\n\n## Examples\n\n### Using Object.groupBy()\n\nFirst we define an array containing objects representing an inventory of different foodstuffs. Each food has a `type` and a `quantity`.\n\n```js\nconst inventory = [\n  { name: \"asparagus\", type: \"vegetables\", quantity: 5 },\n  { name: \"bananas\", type: \"fruit\", quantity: 0 },\n  { name: \"goat\", type: \"meat\", quantity: 23 },\n  { name: \"cherries\", type: \"fruit\", quantity: 5 },\n  { name: \"fish\", type: \"meat\", quantity: 22 },\n];\n```\n\nThe code below groups the elements by the value of their `type` property.\n\n```js\nconst result = Object.groupBy(inventory, ({ type }) => type);\n\n/* Result is:\n{\n  vegetables: [\n    { name: 'asparagus', type: 'vegetables', quantity: 5 },\n  ],\n  fruit: [\n    { name: \"bananas\", type: \"fruit\", quantity: 0 },\n    { name: \"cherries\", type: \"fruit\", quantity: 5 }\n  ],\n  meat: [\n    { name: \"goat\", type: \"meat\", quantity: 23 },\n    { name: \"fish\", type: \"meat\", quantity: 22 }\n  ]\n}\n*/\n```\n\nThe arrow function just returns the `type` of each array element each time it is called. Note that the function argument `{ type }` is a basic example of [object destructuring syntax for function arguments](/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#unpacking_properties_from_objects_passed_as_a_function_parameter). This unpacks the `type` property of an object passed as a parameter, and assigns it to a variable named `type` in the body of the function.\nThis is a very succinct way to access the relevant values of elements within a function.\n\nWe can also create groups inferred from values in one or more properties of the elements. Below is a very similar example that puts the items into `ok` or `restock` groups based on the value of the `quantity` field.\n\n```js\nfunction myCallback({ quantity }) {\n  return quantity > 5 ? \"ok\" : \"restock\";\n}\n\nconst result2 = Object.groupBy(inventory, myCallback);\n\n/* Result is:\n{\n  restock: [\n    { name: \"asparagus\", type: \"vegetables\", quantity: 5 },\n    { name: \"bananas\", type: \"fruit\", quantity: 0 },\n    { name: \"cherries\", type: \"fruit\", quantity: 5 }\n  ],\n  ok: [\n    { name: \"goat\", type: \"meat\", quantity: 23 },\n    { name: \"fish\", type: \"meat\", quantity: 22 }\n  ]\n}\n*/\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.groupBy` in `core-js`](https://github.com/zloirock/core-js#array-grouping)\n- [Indexed collections](/en-US/docs/Web/JavaScript/Guide/Indexed_collections) guide\n- {{jsxref(\"Array.prototype.reduce()\")}}\n- {{jsxref(\"Object.fromEntries()\")}}\n- {{jsxref(\"Map.groupBy()\")}}\n"
    },
    "hasown": {
      "index.md": "---\ntitle: Object.hasOwn()\nslug: Web/JavaScript/Reference/Global_Objects/Object/hasOwn\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.hasOwn\n---\n\n{{JSRef}}\n\nThe **`Object.hasOwn()`** static method returns `true` if the specified object has the indicated property as its _own_ property.\nIf the property is inherited, or does not exist, the method returns `false`.\n\n> **Note:** `Object.hasOwn()` is intended as a replacement for {{jsxref(\"Object.prototype.hasOwnProperty()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/object-hasown.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.hasOwn(obj, prop)\n```\n\n### Parameters\n\n- `obj`\n  - : The JavaScript object instance to test.\n- `prop`\n  - : The {{jsxref(\"String\")}} name or [Symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) of the property to test.\n\n### Return value\n\n`true` if the specified object has directly defined the specified property.\nOtherwise `false`\n\n## Description\n\nThe **`Object.hasOwn()`** method returns `true` if the specified property is a\ndirect property of the object — even if the property value is `null` or `undefined`.\nThe method returns `false` if the property is inherited, or has not been declared at all.\nUnlike the {{jsxref(\"Operators/in\", \"in\")}} operator, this\nmethod does not check for the specified property in the object's prototype chain.\n\nIt is recommended over {{jsxref(\"Object.prototype.hasOwnProperty()\")}} because\nit works for [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) and with objects that\nhave overridden the inherited `hasOwnProperty()` method. While it is possible to\nworkaround these problems by calling `Object.prototype.hasOwnProperty()` on an\nexternal object, `Object.hasOwn()` is more intuitive.\n\n## Examples\n\n### Using hasOwn to test for a property's existence\n\nThe following code shows how to determine whether the `example` object contains a property named `prop`.\n\n```js\nconst example = {};\nObject.hasOwn(example, \"prop\"); // false - 'prop' has not been defined\n\nexample.prop = \"exists\";\nObject.hasOwn(example, \"prop\"); // true - 'prop' has been defined\n\nexample.prop = null;\nObject.hasOwn(example, \"prop\"); // true - own property exists with value of null\n\nexample.prop = undefined;\nObject.hasOwn(example, \"prop\"); // true - own property exists with value of undefined\n```\n\n### Direct vs. inherited properties\n\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\n```js\nconst example = {};\nexample.prop = \"exists\";\n\n// `hasOwn` will only return true for direct properties:\nObject.hasOwn(example, \"prop\"); // true\nObject.hasOwn(example, \"toString\"); // false\nObject.hasOwn(example, \"hasOwnProperty\"); // false\n\n// The `in` operator will return true for direct or inherited properties:\n\"prop\" in example; // true\n\"toString\" in example; // true\n\"hasOwnProperty\" in example; // true\n```\n\n### Iterating over the properties of an object\n\nTo iterate over the enumerable properties of an object, you _should_ use:\n\n```js\nconst example = { foo: true, bar: true };\nfor (const name of Object.keys(example)) {\n  // …\n}\n```\n\nBut if you need to use `for...in`, you can use `Object.hasOwn()` to skip the inherited properties:\n\n```js\nconst example = { foo: true, bar: true };\nfor (const name in example) {\n  if (Object.hasOwn(example, name)) {\n    // …\n  }\n}\n```\n\n### Checking if an Array index exists\n\nThe elements of an {{jsxref(\"Array\")}} are defined as direct properties, so\nyou can use `hasOwn()` method to check whether a particular index exists:\n\n```js\nconst fruits = [\"Apple\", \"Banana\", \"Watermelon\", \"Orange\"];\nObject.hasOwn(fruits, 3); // true ('Orange')\nObject.hasOwn(fruits, 4); // false - not defined\n```\n\n### Problematic cases for hasOwnProperty\n\nThis section demonstrates that `hasOwn()` is immune to the problems that affect\n`hasOwnProperty`. Firstly, it can be used with objects that have reimplemented\n`hasOwnProperty()`:\n\n```js\nconst foo = {\n  hasOwnProperty() {\n    return false;\n  },\n  bar: \"The dragons be out of office\",\n};\n\nif (Object.hasOwn(foo, \"bar\")) {\n  console.log(foo.bar); // true - re-implementation of hasOwnProperty() does not affect Object\n}\n```\n\nIt can also be used with [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects). These do\nnot inherit from `Object.prototype`, and so `hasOwnProperty()` is inaccessible.\n\n```js\nconst foo = Object.create(null);\nfoo.prop = \"exists\";\nif (Object.hasOwn(foo, \"prop\")) {\n  console.log(foo.prop); // true - works irrespective of how the object is created.\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.hasOwn` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- {{jsxref(\"Object.prototype.hasOwnProperty()\")}}\n- [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)\n- {{jsxref(\"Object.getOwnPropertyNames()\")}}\n- {{jsxref(\"Statements/for...in\", \"for...in\")}}\n- {{jsxref(\"Operators/in\", \"in\")}}\n- [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n"
    },
    "hasownproperty": {
      "index.md": "---\ntitle: Object.prototype.hasOwnProperty()\nslug: Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Object.hasOwnProperty\n---\n\n{{JSRef}}\n\nThe **`hasOwnProperty()`** method of {{jsxref(\"Object\")}} instances returns a boolean indicating whether this\nobject has the specified property as its own property (as opposed to inheriting\nit).\n\n> **Note:** {{jsxref(\"Object.hasOwn()\")}} is recommended over\n> `hasOwnProperty()`, in browsers where it is supported.\n\n{{EmbedInteractiveExample(\"pages/js/object-prototype-hasownproperty.html\")}}\n\n## Syntax\n\n```js-nolint\nhasOwnProperty(prop)\n```\n\n### Parameters\n\n- `prop`\n  - : The {{jsxref(\"String\")}} name or [Symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) of the property to test.\n\n### Return value\n\nReturns `true` if the object has the specified property as own property; `false`\notherwise.\n\n## Description\n\nThe **`hasOwnProperty()`** method returns `true` if the specified property is a\ndirect property of the object — even if the value is `null` or `undefined`. The\nmethod returns `false` if the property is inherited, or has not been declared at\nall. Unlike the {{jsxref(\"Operators/in\", \"in\")}} operator, this\nmethod does not check for the specified property in the object's prototype\nchain.\n\nThe method can be called on _most_ JavaScript objects, because most objects\ndescend from {{jsxref(\"Object\")}}, and hence inherit its methods. For\nexample {{jsxref(\"Array\")}} is an {{jsxref(\"Object\")}}, so you can\nuse `hasOwnProperty()` method to check whether an index exists:\n\n```js\nconst fruits = [\"Apple\", \"Banana\", \"Watermelon\", \"Orange\"];\nfruits.hasOwnProperty(3); // true ('Orange')\nfruits.hasOwnProperty(4); // false - not defined\n```\n\nThe method will not be available in objects where it is reimplemented, or on\n[`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) (as these don't inherit from\n`Object.prototype`). Examples for these cases are given below.\n\n## Examples\n\n### Using hasOwnProperty to test for an own property's existence\n\nThe following code shows how to determine whether the `example` object contains a property named `prop`.\n\n```js\nconst example = {};\nexample.hasOwnProperty(\"prop\"); // false\n\nexample.prop = \"exists\";\nexample.hasOwnProperty(\"prop\"); // true - 'prop' has been defined\n\nexample.prop = null;\nexample.hasOwnProperty(\"prop\"); // true - own property exists with value of null\n\nexample.prop = undefined;\nexample.hasOwnProperty(\"prop\"); // true - own property exists with value of undefined\n```\n\n### Direct vs. inherited properties\n\nThe following example differentiates between direct properties and properties inherited through the prototype chain:\n\n```js\nconst example = {};\nexample.prop = \"exists\";\n\n// `hasOwnProperty` will only return true for direct properties:\nexample.hasOwnProperty(\"prop\"); // true\nexample.hasOwnProperty(\"toString\"); // false\nexample.hasOwnProperty(\"hasOwnProperty\"); // false\n\n// The `in` operator will return true for direct or inherited properties:\n\"prop\" in example; // true\n\"toString\" in example; // true\n\"hasOwnProperty\" in example; // true\n```\n\n### Iterating over the properties of an object\n\nThe following example shows how to iterate over the enumerable properties of an\nobject without executing on inherited properties.\n\n```js\nconst buz = {\n  fog: \"stack\",\n};\n\nfor (const name in buz) {\n  if (buz.hasOwnProperty(name)) {\n    console.log(`this is fog (${name}) for sure. Value: ${buz[name]}`);\n  } else {\n    console.log(name); // toString or something else\n  }\n}\n```\n\nNote that the {{jsxref(\"Statements/for...in\", \"for...in\")}} loop\nonly iterates enumerable items: the absence of non-enumerable properties emitted\nfrom the loop does not imply that `hasOwnProperty` itself is confined strictly\nto enumerable items. You can iterate over non-enumerable properties with\n{{jsxref(\"Object.getOwnPropertyNames()\")}}.\n\n### Using hasOwnProperty as a property name\n\nJavaScript does not protect the property name `hasOwnProperty`; an object that\nhas a property with this name may return incorrect results:\n\n```js\nconst foo = {\n  hasOwnProperty() {\n    return false;\n  },\n  bar: \"Here be dragons\",\n};\n\nfoo.hasOwnProperty(\"bar\"); // re-implementation always returns false\n```\n\nThe recommended way to overcome this problem is to instead use\n{{jsxref(\"Object.hasOwn()\")}} (in browsers that support it). Other\nalternatives include using an _external_ `hasOwnProperty`:\n\n```js\nconst foo = { bar: \"Here be dragons\" };\n\n// Use Object.hasOwn() method - recommended\nObject.hasOwn(foo, \"bar\"); // true\n\n// Use the hasOwnProperty property from the Object prototype\nObject.prototype.hasOwnProperty.call(foo, \"bar\"); // true\n\n// Use another Object's hasOwnProperty\n// and call it with 'this' set to foo\n({}).hasOwnProperty.call(foo, \"bar\"); // true\n```\n\nNote that in the first two cases there are no newly created objects.\n\n### Objects created with Object.create(null)\n\n[`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) do not\ninherit from `Object.prototype`, making `hasOwnProperty()` inaccessible.\n\n```js\nconst foo = Object.create(null);\nfoo.prop = \"exists\";\nfoo.hasOwnProperty(\"prop\"); // Uncaught TypeError: foo.hasOwnProperty is not a function\n```\n\nThe solutions in this case are the same as for the previous section: use\n{{jsxref(\"Object.hasOwn()\")}} by preference, otherwise use an\nexternal object's `hasOwnProperty()`.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.hasOwn()\")}}\n- [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)\n- {{jsxref(\"Object.getOwnPropertyNames()\")}}\n- {{jsxref(\"Statements/for...in\", \"for...in\")}}\n- {{jsxref(\"Operators/in\", \"in\")}}\n- [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n"
    },
    "index.md": "---\ntitle: Object\nslug: Web/JavaScript/Reference/Global_Objects/Object\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Object\n---\n\n{{JSRef}}\n\nThe **`Object`** type represents one of [JavaScript's data types](/en-US/docs/Web/JavaScript/Data_structures). It is used to store various keyed collections and more complex entities. Objects can be created using the {{jsxref(\"Object/Object\", \"Object()\")}} constructor or the [object initializer / literal syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer).\n\n## Description\n\nNearly all [objects](/en-US/docs/Web/JavaScript/Data_structures#objects) in JavaScript are instances of `Object`; a typical object inherits properties (including methods) from `Object.prototype`, although these properties may be shadowed (a.k.a. overridden). The only objects that don't inherit from `Object.prototype` are those with [`null` prototype](#null-prototype_objects), or descended from other `null` prototype objects.\n\nChanges to the `Object.prototype` object are seen by **all** objects through prototype chaining, unless the properties and methods subject to those changes are overridden further along the prototype chain. This provides a very powerful although potentially dangerous mechanism to override or extend object behavior. To make it more secure, `Object.prototype` is the only object in the core JavaScript language that has [immutable prototype](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf#description) — the prototype of `Object.prototype` is always `null` and not changeable.\n\n### Object prototype properties\n\nYou should avoid calling any `Object.prototype` method directly from the instance, especially those that are not intended to be polymorphic (i.e. only its initial behavior makes sense and no descending object could override it in a meaningful way). All objects descending from `Object.prototype` may define a custom own property that has the same name, but with entirely different semantics from what you expect. Furthermore, these properties are not inherited by [`null`-prototype objects](#null-prototype_objects). All modern JavaScript utilities for working with objects are [static](#static_methods). More specifically:\n\n- [`valueOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf), [`toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString), and [`toLocaleString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString) exist to be polymorphic and you should expect the object to define its own implementation with sensible behaviors, so you can call them as instance methods. However, `valueOf()` and `toString()` are usually implicitly called through [type conversion](/en-US/docs/Web/JavaScript/Data_structures#type_coercion) and you don't need to call them yourself in your code.\n- [`__defineGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__), [`__defineSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__), [`__lookupGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__), and [`__lookupSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__) are deprecated and should not be used. Use the static alternatives {{jsxref(\"Object.defineProperty()\")}} and {{jsxref(\"Object.getOwnPropertyDescriptor()\")}} instead.\n- The [`__proto__`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) property is deprecated and should not be used. The {{jsxref(\"Object.getPrototypeOf()\")}} and {{jsxref(\"Object.setPrototypeOf()\")}} alternatives are static methods.\n- The [`propertyIsEnumerable()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable) and [`hasOwnProperty()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty) methods can be replaced with the {{jsxref(\"Object.getOwnPropertyDescriptor()\")}} and {{jsxref(\"Object.hasOwn()\")}} static methods, respectively.\n- The [`isPrototypeOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf) method can usually be replaced with [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof), if you are checking the `prototype` property of a constructor.\n\nIn case where a semantically equivalent static method doesn't exist, or if you really want to use the `Object.prototype` method, you should directly [`call()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) the `Object.prototype` method on your target object instead, to prevent the object from having an overriding property that produces unexpected results.\n\n```js\nconst obj = {\n  foo: 1,\n  // You should not define such a method on your own object,\n  // but you may not be able to prevent it from happening if\n  // you are receiving the object from external input\n  propertyIsEnumerable() {\n    return false;\n  },\n};\n\nobj.propertyIsEnumerable(\"foo\"); // false; unexpected result\nObject.prototype.propertyIsEnumerable.call(obj, \"foo\"); // true; expected result\n```\n\n### Deleting a property from an object\n\nThere isn't any method in an Object itself to delete its own properties (such as {{jsxref(\"Map.prototype.delete()\")}}). To do so, one must use the {{jsxref(\"Operators/delete\", \"delete\")}} operator.\n\n### null-prototype objects\n\nAlmost all objects in JavaScript ultimately inherit from `Object.prototype` (see [inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)). However, you may create `null`-prototype objects using [`Object.create(null)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create) or the [object initializer syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) with `__proto__: null` (note: the `__proto__` key in object literals is different from the deprecated [`Object.prototype.__proto__`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) property). You can also change the prototype of an existing object to `null` by calling [`Object.setPrototypeOf(obj, null)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf).\n\n```js\nconst obj = Object.create(null);\nconst obj2 = { __proto__: null };\n```\n\nAn object with a `null` prototype can behave in unexpected ways, because it doesn't inherit any object methods from `Object.prototype`. This is especially true when debugging, since common object-property converting/detecting utility functions may generate errors, or lose information (especially if using silent error-traps that ignore errors).\n\nFor example, the lack of [`Object.prototype.toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) often makes debugging intractable:\n\n```js\nconst normalObj = {}; // create a normal object\nconst nullProtoObj = Object.create(null); // create an object with \"null\" prototype\n\nconsole.log(`normalObj is: ${normalObj}`); // shows \"normalObj is: [object Object]\"\nconsole.log(`nullProtoObj is: ${nullProtoObj}`); // throws error: Cannot convert object to primitive value\n\nalert(normalObj); // shows [object Object]\nalert(nullProtoObj); // throws error: Cannot convert object to primitive value\n```\n\nOther methods will fail as well.\n\n```js\nnormalObj.valueOf(); // shows {}\nnullProtoObj.valueOf(); // throws error: nullProtoObj.valueOf is not a function\n\nnormalObj.hasOwnProperty(\"p\"); // shows \"true\"\nnullProtoObj.hasOwnProperty(\"p\"); // throws error: nullProtoObj.hasOwnProperty is not a function\n\nnormalObj.constructor; // shows \"Object() { [native code] }\"\nnullProtoObj.constructor; // shows \"undefined\"\n```\n\nWe can add the `toString` method back to the null-prototype object by assigning it one:\n\n```js\nnullProtoObj.toString = Object.prototype.toString; // since new object lacks toString, add the original generic one back\n\nconsole.log(nullProtoObj.toString()); // shows \"[object Object]\"\nconsole.log(`nullProtoObj is: ${nullProtoObj}`); // shows \"nullProtoObj is: [object Object]\"\n```\n\nUnlike normal objects, in which `toString()` is on the object's prototype, the `toString()` method here is an own property of `nullProtoObj`. This is because `nullProtoObj` has no (`null`) prototype.\n\nYou can also revert a null-prototype object back to an ordinary object using [`Object.setPrototypeOf(nullProtoObj, Object.prototype)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf).\n\nIn practice, objects with `null` prototype are usually used as a cheap substitute for [maps](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map). The presence of `Object.prototype` properties will cause some bugs:\n\n```js\nconst ages = { alice: 18, bob: 27 };\n\nfunction hasPerson(name) {\n  return name in ages;\n}\n\nfunction getAge(name) {\n  return ages[name];\n}\n\nhasPerson(\"hasOwnProperty\"); // true\ngetAge(\"toString\"); // [Function: toString]\n```\n\nUsing a null-prototype object removes this hazard without introducing too much complexity to the `hasPerson` and `getAge` functions:\n\n```js\nconst ages = Object.create(null, {\n  alice: { value: 18, enumerable: true },\n  bob: { value: 27, enumerable: true },\n});\n\nhasPerson(\"hasOwnProperty\"); // false\ngetAge(\"toString\"); // undefined\n```\n\nIn such case, the addition of any method should be done cautiously, as they can be confused with the other key-value pairs stored as data.\n\nMaking your object not inherit from `Object.prototype` also prevents prototype pollution attacks. If a malicious script adds a property to `Object.prototype`, it will be accessible on every object in your program, except objects that have null prototype.\n\n```js\nconst user = {};\n\n// A malicious script:\nObject.prototype.authenticated = true;\n\n// Unexpectedly allowing unauthenticated user to pass through\nif (user.authenticated) {\n  // access confidential data\n}\n```\n\nJavaScript also has built-in APIs that produce `null`-prototype objects, especially those that use objects as ad hoc key-value collections. For example:\n\n- The return value of {{jsxref(\"Object.groupBy()\")}}\n- The `groups` and `indices.groups` properties of the result of {{jsxref(\"RegExp.prototype.exec()\")}}\n- [`Array.prototype[@@unscopables]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables) (all `@@unscopables` objects should have `null`-prototype)\n- [`import.meta`](/en-US/docs/Web/JavaScript/Reference/Operators/import.meta)\n- Module namespace objects, obtained through [`import * as ns from \"module\";`](/en-US/docs/Web/JavaScript/Reference/Statements/import#namespace_import) or [`import()`](/en-US/docs/Web/JavaScript/Reference/Operators/import)\n\nThe term \"`null`-prototype object\" often also includes any object without `Object.prototype` in its prototype chain. Such objects can be created with [`extends null`](/en-US/docs/Web/JavaScript/Reference/Classes/extends#extending_null) when using classes.\n\n### Object coercion\n\nMany built-in operations that expect objects first coerce their arguments to objects. [The operation](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-toobject) can be summarized as follows:\n\n- Objects are returned as-is.\n- [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) throw a {{jsxref(\"TypeError\")}}.\n- {{jsxref(\"Number\")}}, {{jsxref(\"String\")}}, {{jsxref(\"Boolean\")}}, {{jsxref(\"Symbol\")}}, {{jsxref(\"BigInt\")}} primitives are wrapped into their corresponding object wrappers.\n\nThere are two ways to achieve nearly the same effect in JavaScript.\n\n- {{jsxref(\"Object.prototype.valueOf()\")}}: `Object.prototype.valueOf.call(x)` does exactly the object coercion steps explained above to convert `x`.\n- The {{jsxref(\"Object/Object\", \"Object()\")}} function: `Object(x)` uses the same algorithm to convert `x`, except that `undefined` and `null` don't throw a {{jsxref(\"TypeError\")}}, but return a plain object.\n\nPlaces that use object coercion include:\n\n- The `object` parameter of [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops.\n- The `this` value of {{jsxref(\"Array\")}} methods.\n- Parameters of `Object` methods such as {{jsxref(\"Object.keys()\")}}.\n- Auto-boxing when a property is accessed on a primitive value, since primitives do not have properties.\n- The [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this) value when calling a non-strict function. Primitives are boxed while `null` and `undefined` are replaced with the [global object](/en-US/docs/Glossary/Global_object).\n\nUnlike [conversion to primitives](/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion), the object coercion process itself is not observable in any way, since it doesn't invoke custom code like `toString` or `valueOf` methods.\n\n## Constructor\n\n- {{jsxref(\"Object/Object\", \"Object()\")}}\n  - : Turns the input into an object.\n\n## Static methods\n\n- {{jsxref(\"Object.assign()\")}}\n  - : Copies the values of all enumerable own properties from one or more source objects to a target object.\n- {{jsxref(\"Object.create()\")}}\n  - : Creates a new object with the specified prototype object and properties.\n- {{jsxref(\"Object.defineProperties()\")}}\n  - : Adds the named properties described by the given descriptors to an object.\n- {{jsxref(\"Object.defineProperty()\")}}\n  - : Adds the named property described by a given descriptor to an object.\n- {{jsxref(\"Object.entries()\")}}\n  - : Returns an array containing all of the `[key, value]` pairs of a given object's **own** enumerable string properties.\n- {{jsxref(\"Object.freeze()\")}}\n  - : Freezes an object. Other code cannot delete or change its properties.\n- {{jsxref(\"Object.fromEntries()\")}}\n  - : Returns a new object from an iterable of `[key, value]` pairs. (This is the reverse of {{jsxref(\"Object.entries\")}}).\n- {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}\n  - : Returns a property descriptor for a named property on an object.\n- {{jsxref(\"Object.getOwnPropertyDescriptors()\")}}\n  - : Returns an object containing all own property descriptors for an object.\n- {{jsxref(\"Object.getOwnPropertyNames()\")}}\n  - : Returns an array containing the names of all of the given object's **own** enumerable and non-enumerable properties.\n- {{jsxref(\"Object.getOwnPropertySymbols()\")}}\n  - : Returns an array of all symbol properties found directly upon a given object.\n- {{jsxref(\"Object.getPrototypeOf()\")}}\n  - : Returns the prototype (internal `[[Prototype]]` property) of the specified object.\n- {{jsxref(\"Object.groupBy()\")}}\n  - : Groups the elements of a given iterable according to the string values returned by a provided callback function. The returned object has separate properties for each group, containing arrays with the elements in the group.\n- {{jsxref(\"Object.hasOwn()\")}}\n  - : Returns `true` if the specified object has the indicated property as its _own_ property, or `false` if the property is inherited or does not exist.\n- {{jsxref(\"Object.is()\")}}\n  - : Compares if two values are the same value. Equates all `NaN` values (which differs from both `IsLooselyEqual` used by [`==`](/en-US/docs/Web/JavaScript/Reference/Operators/Equality) and `IsStrictlyEqual` used by [`===`](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality)).\n- {{jsxref(\"Object.isExtensible()\")}}\n  - : Determines if extending of an object is allowed.\n- {{jsxref(\"Object.isFrozen()\")}}\n  - : Determines if an object was frozen.\n- {{jsxref(\"Object.isSealed()\")}}\n  - : Determines if an object is sealed.\n- {{jsxref(\"Object.keys()\")}}\n  - : Returns an array containing the names of all of the given object's **own** enumerable string properties.\n- {{jsxref(\"Object.preventExtensions()\")}}\n  - : Prevents any extensions of an object.\n- {{jsxref(\"Object.seal()\")}}\n  - : Prevents other code from deleting properties of an object.\n- {{jsxref(\"Object.setPrototypeOf()\")}}\n  - : Sets the object's prototype (its internal `[[Prototype]]` property).\n- {{jsxref(\"Object.values()\")}}\n  - : Returns an array containing the values that correspond to all of a given object's **own** enumerable string properties.\n\n## Instance properties\n\nThese properties are defined on `Object.prototype` and shared by all `Object` instances.\n\n- [`Object.prototype.__proto__`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) {{deprecated_inline}}\n  - : Points to the object which was used as prototype when the object was instantiated.\n- {{jsxref(\"Object.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For plain `Object` instances, the initial value is the {{jsxref(\"Object/Object\", \"Object\")}} constructor. Instances of other constructors each inherit the `constructor` property from their respective `Constructor.prototype` object.\n\n## Instance methods\n\n- [`Object.prototype.__defineGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__) {{deprecated_inline}}\n  - : Associates a function with a property that, when accessed, executes that function and returns its return value.\n- [`Object.prototype.__defineSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__) {{deprecated_inline}}\n  - : Associates a function with a property that, when set, executes that function which modifies the property.\n- [`Object.prototype.__lookupGetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__) {{deprecated_inline}}\n  - : Returns the function bound as a getter to the specified property.\n- [`Object.prototype.__lookupSetter__()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__) {{deprecated_inline}}\n  - : Returns the function bound as a setter to the specified property.\n- {{jsxref(\"Object.prototype.hasOwnProperty()\")}}\n  - : Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.\n- {{jsxref(\"Object.prototype.isPrototypeOf()\")}}\n  - : Returns a boolean indicating whether the object this method is called upon is in the prototype chain of the specified object.\n- {{jsxref(\"Object.prototype.propertyIsEnumerable()\")}}\n  - : Returns a boolean indicating whether the specified property is the object's [enumerable own](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) property.\n- {{jsxref(\"Object.prototype.toLocaleString()\")}}\n  - : Calls {{jsxref(\"Object/toString\", \"toString()\")}}.\n- {{jsxref(\"Object.prototype.toString()\")}}\n  - : Returns a string representation of the object.\n- {{jsxref(\"Object.prototype.valueOf()\")}}\n  - : Returns the primitive value of the specified object.\n\n## Examples\n\n### Constructing empty objects\n\nThe following example creates empty objects using the `new` keyword with different arguments:\n\n```js\nconst o1 = new Object();\nconst o2 = new Object(undefined);\nconst o3 = new Object(null);\n```\n\n### Using Object() constructor to turn primitives into an Object of their respective type\n\nYou can use the {{jsxref(\"Object/Object\", \"Object()\")}} constructor to create an object wrapper of a primitive value.\n\nThe following examples create variables `o1` and `o2` which are objects storing {{jsxref(\"Boolean\")}} and {{jsxref(\"BigInt\")}} values:\n\n```js\n// Equivalent to const o1 = new Boolean(true)\nconst o1 = new Object(true);\n\n// No equivalent because BigInt() can't be called as a constructor,\n// and calling it as a regular function won't create an object\nconst o2 = new Object(1n);\n```\n\n### Object prototypes\n\nWhen altering the behavior of existing `Object.prototype` methods, consider injecting code by wrapping your extension before or after the existing logic. For example, this (untested) code will pre-conditionally execute custom logic before the built-in logic or someone else's extension is executed.\n\nWhen modifying prototypes with hooks, pass `this` and the arguments (the call state) to the current behavior by calling `apply()` on the function. This pattern can be used for any prototype, such as `Node.prototype`, `Function.prototype`, etc.\n\n```js\nconst current = Object.prototype.valueOf;\n\n// Since my property \"-prop-value\" is cross-cutting and isn't always\n// on the same prototype chain, I want to modify Object.prototype:\nObject.prototype.valueOf = function (...args) {\n  if (Object.hasOwn(this, \"-prop-value\")) {\n    return this[\"-prop-value\"];\n  } else {\n    // It doesn't look like one of my objects, so let's fall back on\n    // the default behavior by reproducing the current behavior as best we can.\n    // The apply behaves like \"super\" in some other languages.\n    // Even though valueOf() doesn't take arguments, some other hook may.\n    return current.apply(this, args);\n  }\n};\n```\n\n> **Warning:** Modifying the `prototype` property of any built-in constructor is considered a bad practice and risks forward compatibility.\n\nYou can read more about prototypes in [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain).\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Object initializer](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer)\n",
    "is": {
      "index.md": "---\ntitle: Object.is()\nslug: Web/JavaScript/Reference/Global_Objects/Object/is\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.is\n---\n\n{{JSRef}}\n\nThe **`Object.is()`** static method determines whether two values are [the same value](/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is).\n\n{{EmbedInteractiveExample(\"pages/js/object-is.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.is(value1, value2)\n```\n\n### Parameters\n\n- `value1`\n  - : The first value to compare.\n- `value2`\n  - : The second value to compare.\n\n### Return value\n\nA boolean indicating whether or not the two arguments are the same value.\n\n## Description\n\n`Object.is()` determines whether two values are [the same value](/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is). Two values are the same if one of the following holds:\n\n- both {{jsxref(\"undefined\")}}\n- both [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null)\n- both `true` or both `false`\n- both strings of the same length with the same characters in the same order\n- both the same object (meaning both values reference the same object in memory)\n- both [BigInts](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) with the same numeric value\n- both [symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) that reference the same symbol value\n- both numbers and\n\n  - both `+0`\n  - both `-0`\n  - both {{jsxref(\"NaN\")}}\n  - or both non-zero, not {{jsxref(\"NaN\")}}, and have the same value\n\n`Object.is()` is not equivalent to the [`==`](/en-US/docs/Web/JavaScript/Reference/Operators/Equality) operator. The `==` operator applies various coercions to both sides (if they are not the same type) before testing for equality (resulting in such behavior as `\"\" == false` being `true`), but `Object.is()` doesn't coerce either value.\n\n`Object.is()` is also _not_ equivalent to the [`===`](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) operator. The only difference between `Object.is()` and `===` is in their treatment of signed zeros and `NaN` values. The `===` operator (and the `==` operator) treats the number values `-0` and `+0` as equal, but treats {{jsxref(\"NaN\")}} as not equal to each other.\n\n## Examples\n\n### Using Object.is()\n\n```js\n// Case 1: Evaluation result is the same as using ===\nObject.is(25, 25); // true\nObject.is(\"foo\", \"foo\"); // true\nObject.is(\"foo\", \"bar\"); // false\nObject.is(null, null); // true\nObject.is(undefined, undefined); // true\nObject.is(window, window); // true\nObject.is([], []); // false\nconst foo = { a: 1 };\nconst bar = { a: 1 };\nconst sameFoo = foo;\nObject.is(foo, foo); // true\nObject.is(foo, bar); // false\nObject.is(foo, sameFoo); // true\n\n// Case 2: Signed zero\nObject.is(0, -0); // false\nObject.is(+0, -0); // false\nObject.is(-0, -0); // true\n\n// Case 3: NaN\nObject.is(NaN, 0 / 0); // true\nObject.is(NaN, Number.NaN); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.is` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- [Equality comparisons and sameness](/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n"
    },
    "isextensible": {
      "index.md": "---\ntitle: Object.isExtensible()\nslug: Web/JavaScript/Reference/Global_Objects/Object/isExtensible\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.isExtensible\n---\n\n{{JSRef}}\n\nThe **`Object.isExtensible()`** static method determines if an object\nis extensible (whether it can have new properties added to it).\n\n{{EmbedInteractiveExample(\"pages/js/object-isextensible.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.isExtensible(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : The object which should be checked.\n\n### Return value\n\nA {{jsxref(\"Boolean\")}} indicating whether or not the given object is extensible.\n\n## Description\n\nObjects are extensible by default: they can have new properties added to them, and their `[[Prototype]]` can be re-assigned. An object can be marked as non-extensible using one of {{jsxref(\"Object.preventExtensions()\")}}, {{jsxref(\"Object.seal()\")}}, {{jsxref(\"Object.freeze()\")}}, or {{jsxref(\"Reflect.preventExtensions()\")}}.\n\n## Examples\n\n### Using Object.isExtensible\n\n```js\n// New objects are extensible.\nconst empty = {};\nObject.isExtensible(empty); // true\n\n// They can be made un-extensible\nObject.preventExtensions(empty);\nObject.isExtensible(empty); // false\n\n// Sealed objects are by definition non-extensible.\nconst sealed = Object.seal({});\nObject.isExtensible(sealed); // false\n\n// Frozen objects are also by definition non-extensible.\nconst frozen = Object.freeze({});\nObject.isExtensible(frozen); // false\n```\n\n### Non-object argument\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a {{jsxref(\"TypeError\")}}. In ES2015, it will return `false` without any errors if a non-object argument is passed, since primitives are, by definition, immutable.\n\n```js\nObject.isExtensible(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.isExtensible(1);\n// false                         (ES2015 code)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.preventExtensions()\")}}\n- {{jsxref(\"Object.seal()\")}}\n- {{jsxref(\"Object.isSealed()\")}}\n- {{jsxref(\"Object.freeze()\")}}\n- {{jsxref(\"Object.isFrozen()\")}}\n- {{jsxref(\"Reflect.isExtensible()\")}}\n"
    },
    "isfrozen": {
      "index.md": "---\ntitle: Object.isFrozen()\nslug: Web/JavaScript/Reference/Global_Objects/Object/isFrozen\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.isFrozen\n---\n\n{{JSRef}}\n\nThe **`Object.isFrozen()`** static method determines if an object is\n{{jsxref(\"Object/freeze\", \"frozen\", \"\", 1)}}.\n\n{{EmbedInteractiveExample(\"pages/js/object-isfrozen.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.isFrozen(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : The object which should be checked.\n\n### Return value\n\nA {{jsxref(\"Boolean\")}} indicating whether or not the given object is frozen.\n\n## Description\n\nAn object is frozen if and only if it is not [extensible](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible), all its properties are non-configurable, and all its data\nproperties (that is, properties which are not accessor properties with getter or setter\ncomponents) are non-writable.\n\n## Examples\n\n### Using Object.isFrozen\n\n```js\n// A new object is extensible, so it is not frozen.\nObject.isFrozen({}); // false\n\n// An empty object which is not extensible\n// is vacuously frozen.\nconst vacuouslyFrozen = Object.preventExtensions({});\nObject.isFrozen(vacuouslyFrozen); // true\n\n// A new object with one property is also extensible,\n// ergo not frozen.\nconst oneProp = { p: 42 };\nObject.isFrozen(oneProp); // false\n\n// Preventing extensions to the object still doesn't\n// make it frozen, because the property is still\n// configurable (and writable).\nObject.preventExtensions(oneProp);\nObject.isFrozen(oneProp); // false\n\n// Deleting that property makes the object vacuously frozen.\ndelete oneProp.p;\nObject.isFrozen(oneProp); // true\n\n// A non-extensible object with a non-writable\n// but still configurable property is not frozen.\nconst nonWritable = { e: \"plep\" };\nObject.preventExtensions(nonWritable);\nObject.defineProperty(nonWritable, \"e\", {\n  writable: false,\n}); // make non-writable\nObject.isFrozen(nonWritable); // false\n\n// Changing that property to non-configurable\n// then makes the object frozen.\nObject.defineProperty(nonWritable, \"e\", {\n  configurable: false,\n}); // make non-configurable\nObject.isFrozen(nonWritable); // true\n\n// A non-extensible object with a non-configurable\n// but still writable property also isn't frozen.\nconst nonConfigurable = { release: \"the kraken!\" };\nObject.preventExtensions(nonConfigurable);\nObject.defineProperty(nonConfigurable, \"release\", {\n  configurable: false,\n});\nObject.isFrozen(nonConfigurable); // false\n\n// Changing that property to non-writable\n// then makes the object frozen.\nObject.defineProperty(nonConfigurable, \"release\", {\n  writable: false,\n});\nObject.isFrozen(nonConfigurable); // true\n\n// A non-extensible object with a configurable\n// accessor property isn't frozen.\nconst accessor = {\n  get food() {\n    return \"yum\";\n  },\n};\nObject.preventExtensions(accessor);\nObject.isFrozen(accessor); // false\n\n// When we make that property non-configurable it becomes frozen.\nObject.defineProperty(accessor, \"food\", {\n  configurable: false,\n});\nObject.isFrozen(accessor); // true\n\n// But the easiest way for an object to be frozen\n// is if Object.freeze has been called on it.\nconst frozen = { 1: 81 };\nObject.isFrozen(frozen); // false\nObject.freeze(frozen);\nObject.isFrozen(frozen); // true\n\n// By definition, a frozen object is non-extensible.\nObject.isExtensible(frozen); // false\n\n// Also by definition, a frozen object is sealed.\nObject.isSealed(frozen); // true\n```\n\n### Non-object argument\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a {{jsxref(\"TypeError\")}}. In ES2015, it will return `true` without any errors if a non-object argument is passed, since primitives are, by definition, immutable.\n\n```js\nObject.isFrozen(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.isFrozen(1);\n// true                          (ES2015 code)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.freeze()\")}}\n- {{jsxref(\"Object.preventExtensions()\")}}\n- {{jsxref(\"Object.isExtensible()\")}}\n- {{jsxref(\"Object.seal()\")}}\n- {{jsxref(\"Object.isSealed()\")}}\n"
    },
    "isprototypeof": {
      "index.md": "---\ntitle: Object.prototype.isPrototypeOf()\nslug: Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Object.isPrototypeOf\n---\n\n{{JSRef}}\n\nThe **`isPrototypeOf()`** method of {{jsxref(\"Object\")}} instances checks if this object exists in another object's prototype chain.\n\n> **Note:** `isPrototypeOf()` differs from the [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof) operator. In the expression `object instanceof AFunction`, `object`'s prototype chain is checked against `AFunction.prototype`, not against `AFunction` itself.\n\n{{EmbedInteractiveExample(\"pages/js/object-prototype-isprototypeof.html\")}}\n\n## Syntax\n\n```js-nolint\nisPrototypeOf(object)\n```\n\n### Parameters\n\n- `object`\n  - : The object whose prototype chain will be searched.\n\n### Return value\n\nA boolean indicating whether the calling object (`this`) lies in the prototype chain of `object`. Directly returns `false` when `object` is not an object (i.e. a primitive).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `this` is `null` or `undefined` (because it can't be [converted to an object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion)).\n\n## Description\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `isPrototypeOf()` method. This method allows you to check whether or not the object exists within another object's prototype chain. If the `object` passed as the parameter is not an object (i.e. a primitive), the method directly returns `false`. Otherwise, the `this` value is [converted to an object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion), and the prototype chain of `object` is searched for the `this` value, until the end of the chain is reached or the `this` value is found.\n\n## Examples\n\n### Using isPrototypeOf()\n\nThis example demonstrates that `Baz.prototype`, `Bar.prototype`, `Foo.prototype` and `Object.prototype` exist in the prototype chain for object `baz`:\n\n```js\nclass Foo {}\nclass Bar extends Foo {}\nclass Baz extends Bar {}\n\nconst foo = new Foo();\nconst bar = new Bar();\nconst baz = new Baz();\n\n// prototype chains:\n// foo: Foo --> Object\n// bar: Bar --> Foo --> Object\n// baz: Baz --> Bar --> Foo --> Object\nconsole.log(Baz.prototype.isPrototypeOf(baz)); // true\nconsole.log(Baz.prototype.isPrototypeOf(bar)); // false\nconsole.log(Baz.prototype.isPrototypeOf(foo)); // false\nconsole.log(Bar.prototype.isPrototypeOf(baz)); // true\nconsole.log(Bar.prototype.isPrototypeOf(foo)); // false\nconsole.log(Foo.prototype.isPrototypeOf(baz)); // true\nconsole.log(Foo.prototype.isPrototypeOf(bar)); // true\nconsole.log(Object.prototype.isPrototypeOf(baz)); // true\n```\n\nThe `isPrototypeOf()` method — along with the {{jsxref(\"Operators/instanceof\", \"instanceof\")}} operator — comes in particularly handy if you have code that can only function when dealing with objects descended from a specific prototype chain; e.g., to guarantee that certain methods or properties will be present on that object.\n\nFor example, to execute some code that's only safe to run if a `baz` object has `Foo.prototype` in its prototype chain, you can do this:\n\n```js\nif (Foo.prototype.isPrototypeOf(baz)) {\n  // do something safe\n}\n```\n\nHowever, `Foo.prototype` existing in `baz`'s prototype chain doesn't imply `baz` was created using `Foo` as its constructor. For example, `baz` could be directly assigned with `Foo.prototype` as its prototype. In this case, if your code reads [private fields](/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) of `Foo` from `baz`, it would still fail:\n\n```js\nclass Foo {\n  #value = \"foo\";\n  static getValue(x) {\n    return x.#value;\n  }\n}\n\nconst baz = { __proto__: Foo.prototype };\n\nif (Foo.prototype.isPrototypeOf(baz)) {\n  console.log(Foo.getValue(baz)); // TypeError: Cannot read private member #value from an object whose class did not declare it\n}\n```\n\nThe same applies to [`instanceof`](/en-US/docs/Web/JavaScript/Reference/Operators/instanceof). If you need to read private fields in a secure way, offer a branded check method using [`in`](/en-US/docs/Web/JavaScript/Reference/Operators/in) instead.\n\n```js\nclass Foo {\n  #value = \"foo\";\n  static getValue(x) {\n    return x.#value;\n  }\n  static isFoo(x) {\n    return #value in x;\n  }\n}\n\nconst baz = { __proto__: Foo.prototype };\n\nif (Foo.isFoo(baz)) {\n  // Doesn't run, because baz is not a Foo\n  console.log(Foo.getValue(baz));\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Operators/instanceof\", \"instanceof\")}}\n- {{jsxref(\"Object.getPrototypeOf()\")}}\n- {{jsxref(\"Object.setPrototypeOf()\")}}\n- [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n"
    },
    "issealed": {
      "index.md": "---\ntitle: Object.isSealed()\nslug: Web/JavaScript/Reference/Global_Objects/Object/isSealed\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.isSealed\n---\n\n{{JSRef}}\n\nThe **`Object.isSealed()`** static method determines if an object is\nsealed.\n\n{{EmbedInteractiveExample(\"pages/js/object-issealed.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.isSealed(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : The object which should be checked.\n\n### Return value\n\nA {{jsxref(\"Boolean\")}} indicating whether or not the given object is sealed.\n\n## Description\n\nReturns `true` if the object is sealed, otherwise `false`. An\nobject is sealed if it is not {{jsxref(\"Object/isExtensible\", \"extensible\", \"\", 1)}} and\nif all its properties are non-configurable and therefore not removable (but not\nnecessarily non-writable).\n\n## Examples\n\n### Using Object.isSealed\n\n```js\n// Objects aren't sealed by default.\nconst empty = {};\nObject.isSealed(empty); // false\n\n// If you make an empty object non-extensible,\n// it is vacuously sealed.\nObject.preventExtensions(empty);\nObject.isSealed(empty); // true\n\n// The same is not true of a non-empty object,\n// unless its properties are all non-configurable.\nconst hasProp = { fee: \"fie foe fum\" };\nObject.preventExtensions(hasProp);\nObject.isSealed(hasProp); // false\n\n// But make them all non-configurable\n// and the object becomes sealed.\nObject.defineProperty(hasProp, \"fee\", {\n  configurable: false,\n});\nObject.isSealed(hasProp); // true\n\n// The easiest way to seal an object, of course,\n// is Object.seal.\nconst sealed = {};\nObject.seal(sealed);\nObject.isSealed(sealed); // true\n\n// A sealed object is, by definition, non-extensible.\nObject.isExtensible(sealed); // false\n\n// A sealed object might be frozen,\n// but it doesn't have to be.\nObject.isFrozen(sealed); // true\n// (all properties also non-writable)\n\nconst s2 = Object.seal({ p: 3 });\nObject.isFrozen(s2); // false\n// ('p' is still writable)\n\nconst s3 = Object.seal({\n  get p() {\n    return 0;\n  },\n});\nObject.isFrozen(s3); // true\n// (only configurability matters for accessor properties)\n```\n\n### Non-object argument\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a {{jsxref(\"TypeError\")}}. In ES2015, it will return `true` without any errors if a non-object argument is passed, since primitives are, by definition, immutable.\n\n```js\nObject.isSealed(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.isSealed(1);\n// true                          (ES2015 code)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.seal()\")}}\n- {{jsxref(\"Object.preventExtensions()\")}}\n- {{jsxref(\"Object.isExtensible()\")}}\n- {{jsxref(\"Object.freeze()\")}}\n- {{jsxref(\"Object.isFrozen()\")}}\n"
    },
    "keys": {
      "index.md": "---\ntitle: Object.keys()\nslug: Web/JavaScript/Reference/Global_Objects/Object/keys\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.keys\n---\n\n{{JSRef}}\n\nThe **`Object.keys()`** static method returns an array of a given object's own enumerable string-keyed property names.\n\n{{EmbedInteractiveExample(\"pages/js/object-keys.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.keys(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : An object.\n\n### Return value\n\nAn array of strings representing the given object's own enumerable string-keyed property keys.\n\n## Description\n\n`Object.keys()` returns an array whose elements are strings corresponding to the enumerable string-keyed property names found directly upon `object`. This is the same as iterating with a {{jsxref(\"Statements/for...in\", \"for...in\")}} loop, except that a `for...in` loop enumerates properties in the prototype chain as well. The order of the array returned by `Object.keys()` is the same as that provided by a {{jsxref(\"Statements/for...in\", \"for...in\")}} loop.\n\nIf you need the property values, use {{jsxref(\"Object.values()\")}} instead. If you need both the property keys and values, use {{jsxref(\"Object.entries()\")}} instead.\n\n## Examples\n\n### Using Object.keys()\n\n```js\n// Simple array\nconst arr = [\"a\", \"b\", \"c\"];\nconsole.log(Object.keys(arr)); // ['0', '1', '2']\n\n// Array-like object\nconst obj = { 0: \"a\", 1: \"b\", 2: \"c\" };\nconsole.log(Object.keys(obj)); // ['0', '1', '2']\n\n// Array-like object with random key ordering\nconst anObj = { 100: \"a\", 2: \"b\", 7: \"c\" };\nconsole.log(Object.keys(anObj)); // ['2', '7', '100']\n\n// getFoo is a non-enumerable property\nconst myObj = Object.create(\n  {},\n  {\n    getFoo: {\n      value() {\n        return this.foo;\n      },\n    },\n  },\n);\nmyObj.foo = 1;\nconsole.log(Object.keys(myObj)); // ['foo']\n```\n\nIf you want _all_ string-keyed own properties, including non-enumerable ones, see {{jsxref(\"Object.getOwnPropertyNames()\")}}.\n\n### Using Object.keys() on primitives\n\nNon-object arguments are [coerced to objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion). [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) cannot be coerced to objects and throw a {{jsxref(\"TypeError\")}} upfront. Only strings may have own enumerable properties, while all other primitives return an empty array.\n\n```js\n// Strings have indices as enumerable own properties\nconsole.log(Object.keys(\"foo\")); // ['0', '1', '2']\n\n// Other primitives except undefined and null have no own properties\nconsole.log(Object.keys(100)); // []\n```\n\n> **Note:** In ES5, passing a non-object to `Object.keys()` threw a {{jsxref(\"TypeError\")}}.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.keys` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)\n- {{jsxref(\"Object.entries()\")}}\n- {{jsxref(\"Object.values()\")}}\n- {{jsxref(\"Object.prototype.propertyIsEnumerable()\")}}\n- {{jsxref(\"Object.create()\")}}\n- {{jsxref(\"Object.getOwnPropertyNames()\")}}\n- {{jsxref(\"Map.prototype.keys()\")}}\n"
    },
    "object": {
      "index.md": "---\ntitle: Object() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Object/Object\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Object.Object\n---\n\n{{JSRef}}\n\nThe **`Object()`** constructor turns the input into an object. Its behavior depends on the input's type.\n\n## Syntax\n\n```js-nolint\nnew Object()\nnew Object(value)\n\nObject()\nObject(value)\n```\n\n> **Note:** `Object()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new), but sometimes with different effects. See [Return value](#return_value).\n\n### Parameters\n\n- `value` {{optional_inline}}\n  - : Any value.\n\n### Return value\n\nWhen the `Object()` constructor itself is called or constructed, its return value is an object:\n\n- If the value is [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) or {{jsxref(\"undefined\")}}, it creates and returns an empty object.\n- If the value is an object already, it returns the value.\n- Otherwise, it returns an object of a type that corresponds to the given value. For example, passing a {{jsxref(\"BigInt\")}} primitive returns a `BigInt` wrapper object.\n\nWhen `Object()` is constructed but [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target) is not the `Object` constructor itself, the behavior is slightly different — it initializes a new object with `new.target.prototype` as its prototype. Any argument value is ignored. This may happen, for example, when `Object()` is implicitly called via [`super()`](/en-US/docs/Web/JavaScript/Reference/Operators/super) in the constructor of a class that [extends `Object`](/en-US/docs/Web/JavaScript/Reference/Classes/extends#extending_object). In this case, even if you pass a number to `super()`, the `this` value inside the constructor does not become a {{jsxref(\"Number\")}} instance.\n\n## Examples\n\n### Creating a new Object\n\n```js\nconst o = new Object();\no.foo = 42;\n\nconsole.log(o);\n// { foo: 42 }\n```\n\n### Using Object given undefined and null types\n\nThe following examples store an empty `Object` object in `o`:\n\n```js\nconst o = new Object();\n```\n\n```js\nconst o = new Object(undefined);\n```\n\n```js\nconst o = new Object(null);\n```\n\n### Obtaining wrapper objects for BigInt and Symbol\n\nThe {{jsxref(\"BigInt/BigInt\", \"BigInt()\")}} and {{jsxref(\"Symbol/Symbol\", \"Symbol()\")}} constructors throw an error when called with `new`, to prevent the common mistake of creating a wrapper object instead of the primitive value. The only way to create a wrapper object for these types is to call `Object()` with them:\n\n```js\nconst numberObj = new Number(1);\nconsole.log(typeof numberObj); // \"object\"\n\nconst bigintObj = Object(1n);\nconsole.log(typeof bigintObj); // \"object\"\n\nconst symbolObj = Object(Symbol(\"foo\"));\nconsole.log(typeof symbolObj); // \"object\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Object initializer](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer)\n"
    },
    "preventextensions": {
      "index.md": "---\ntitle: Object.preventExtensions()\nslug: Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.preventExtensions\n---\n\n{{JSRef}}\n\nThe **`Object.preventExtensions()`** static method prevents new\nproperties from ever being added to an object (i.e. prevents future extensions to the\nobject). It also prevents the object's prototype from being re-assigned.\n\n{{EmbedInteractiveExample(\"pages/js/object-preventextensions.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.preventExtensions(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : The object which should be made non-extensible.\n\n### Return value\n\nThe object being made non-extensible.\n\n## Description\n\nAn object is extensible if new properties can be added to it.\n`Object.preventExtensions()` marks an object as no longer extensible, so that\nit will never have properties beyond the ones it had at the time it was marked as\nnon-extensible. Note that the properties of a non-extensible object, in general, may\nstill be _deleted_. Attempting to add new properties to a non-extensible object\nwill fail, either silently or, in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode), throwing a {{jsxref(\"TypeError\")}}.\n\nUnlike [`Object.seal()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal) and [`Object.freeze()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze), `Object.preventExtensions()` invokes an intrinsic JavaScript behavior and cannot be replaced with a composition of several other operations. It also has its `Reflect` counterpart (which only exists for intrinsic operations), [`Reflect.preventExtensions()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions).\n\n`Object.preventExtensions()` only prevents addition of own properties. Properties can still be added to the object prototype.\n\nThis method makes the `[[Prototype]]` of the target immutable; any `[[Prototype]]` re-assignment will throw a `TypeError`. This behavior is specific to the internal `[[Prototype]]` property; other properties of the target object will remain mutable.\n\nThere is no way to make an object extensible again once it has been made non-extensible.\n\n## Examples\n\n### Using Object.preventExtensions\n\n```js\n// Object.preventExtensions returns the object\n// being made non-extensible.\nconst obj = {};\nconst obj2 = Object.preventExtensions(obj);\nobj === obj2; // true\n\n// Objects are extensible by default.\nconst empty = {};\nObject.isExtensible(empty); // true\n\n// They can be made un-extensible\nObject.preventExtensions(empty);\nObject.isExtensible(empty); // false\n\n// Object.defineProperty throws when adding\n// a new property to a non-extensible object.\nconst nonExtensible = { removable: true };\nObject.preventExtensions(nonExtensible);\nObject.defineProperty(nonExtensible, \"new\", {\n  value: 8675309,\n}); // throws a TypeError\n\n// In strict mode, attempting to add new properties\n// to a non-extensible object throws a TypeError.\nfunction fail() {\n  \"use strict\";\n  // throws a TypeError\n  nonExtensible.newProperty = \"FAIL\";\n}\nfail();\n```\n\nA non-extensible object's prototype is immutable:\n\n```js\nconst fixed = Object.preventExtensions({});\n// throws a 'TypeError'.\nfixed.__proto__ = { oh: \"hai\" };\n```\n\n### Non-object argument\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a {{jsxref(\"TypeError\")}}. In ES2015, a non-object argument will be returned as-is without any errors, since primitives are already, by definition, immutable.\n\n```js\nObject.preventExtensions(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.preventExtensions(1);\n// 1                             (ES2015 code)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.isExtensible()\")}}\n- {{jsxref(\"Object.seal()\")}}\n- {{jsxref(\"Object.isSealed()\")}}\n- {{jsxref(\"Object.freeze()\")}}\n- {{jsxref(\"Object.isFrozen()\")}}\n- {{jsxref(\"Reflect.preventExtensions()\")}}\n"
    },
    "propertyisenumerable": {
      "index.md": "---\ntitle: Object.prototype.propertyIsEnumerable()\nslug: Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Object.propertyIsEnumerable\n---\n\n{{JSRef}}\n\nThe **`propertyIsEnumerable()`** method of {{jsxref(\"Object\")}} instances returns a boolean indicating whether the specified property is this object's [enumerable own](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties) property.\n\n{{EmbedInteractiveExample(\"pages/js/object-prototype-propertyisenumerable.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\npropertyIsEnumerable(prop)\n```\n\n### Parameters\n\n- `prop`\n  - : The name of the property to test. Can be a string or a {{jsxref(\"Symbol\")}}.\n\n### Return value\n\nA boolean value indicating whether the specified property is enumerable and is the object's own property.\n\n## Description\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `propertyIsEnumerable()` method. This method determines if the specified property, string or symbol, is an enumerable own property of the object. If the object does not have the specified property, this method returns `false`.\n\nThis method is equivalent to [`Object.getOwnPropertyDescriptor(obj, prop)?.enumerable ?? false`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor).\n\n## Examples\n\n### Using propertyIsEnumerable()\n\nThe following example shows the use of `propertyIsEnumerable()` on objects and arrays.\n\n```js\nconst o = {};\nconst a = [];\no.prop = \"is enumerable\";\na[0] = \"is enumerable\";\n\no.propertyIsEnumerable(\"prop\"); // true\na.propertyIsEnumerable(0); // true\n```\n\n### User-defined vs. built-in objects\n\nMost built-in properties are non-enumerable by default, while user-created object properties are often enumerable, unless explicitly designated otherwise.\n\n```js\nconst a = [\"is enumerable\"];\n\na.propertyIsEnumerable(0); // true\na.propertyIsEnumerable(\"length\"); // false\n\nMath.propertyIsEnumerable(\"random\"); // false\nglobalThis.propertyIsEnumerable(\"Math\"); // false\n```\n\n### Direct vs. inherited properties\n\nOnly enumerable own properties cause `propertyIsEnumerable()` to return `true`, although all enumerable properties, including inherited ones, are visited by the [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop.\n\n```js\nconst o1 = {\n  enumerableInherited: \"is enumerable\",\n};\nObject.defineProperty(o1, \"nonEnumerableInherited\", {\n  value: \"is non-enumerable\",\n  enumerable: false,\n});\nconst o2 = {\n  // o1 is the prototype of o2\n  __proto__: o1,\n  enumerableOwn: \"is enumerable\",\n};\nObject.defineProperty(o2, \"nonEnumerableOwn\", {\n  value: \"is non-enumerable\",\n  enumerable: false,\n});\n\no2.propertyIsEnumerable(\"enumerableInherited\"); // false\no2.propertyIsEnumerable(\"nonEnumerableInherited\"); // false\no2.propertyIsEnumerable(\"enumerableOwn\"); // true\no2.propertyIsEnumerable(\"nonEnumerableOwn\"); // false\n```\n\n### Testing symbol properties\n\n{{jsxref(\"Symbol\")}} properties are also supported by `propertyIsEnumerable()`. Note that most enumeration methods only visit string properties; enumerability of symbol properties is only useful when using {{jsxref(\"Object.assign()\")}} or [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax). For more information, see [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties).\n\n```js\nconst sym = Symbol(\"enumerable\");\nconst sym2 = Symbol(\"non-enumerable\");\nconst o = {\n  [sym]: \"is enumerable\",\n};\nObject.defineProperty(o, sym2, {\n  value: \"is non-enumerable\",\n  enumerable: false,\n});\n\no.propertyIsEnumerable(sym); // true\no.propertyIsEnumerable(sym2); // false\n```\n\n### Usage with null-prototype objects\n\nBecause `null`-prototype objects do not inherit from `Object.prototype`, they do not inherit the `propertyIsEnumerable()` method. You must call `Object.prototype.propertyIsEnumerable` with the object as `this` instead.\n\n```js\nconst o = {\n  __proto__: null,\n  enumerableOwn: \"is enumerable\",\n};\n\no.propertyIsEnumerable(\"enumerableOwn\"); // TypeError: o.propertyIsEnumerable is not a function\nObject.prototype.propertyIsEnumerable.call(o, \"enumerableOwn\"); // true\n```\n\nAlternatively, you may use {{jsxref(\"Object.getOwnPropertyDescriptor()\")}} instead, which also helps to distinguish between non-existent properties and actually non-enumerable properties.\n\n```js\nconst o = {\n  __proto__: null,\n  enumerableOwn: \"is enumerable\",\n};\n\nObject.getOwnPropertyDescriptor(o, \"enumerableOwn\")?.enumerable; // true\nObject.getOwnPropertyDescriptor(o, \"nonExistent\")?.enumerable; // undefined\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)\n- {{jsxref(\"Statements/for...in\", \"for...in\")}}\n- {{jsxref(\"Object.keys()\")}}\n- {{jsxref(\"Object.defineProperty()\")}}\n"
    },
    "proto": {
      "index.md": "---\ntitle: Object.prototype.__proto__\nslug: Web/JavaScript/Reference/Global_Objects/Object/proto\npage-type: javascript-instance-accessor-property\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.Object.proto\n---\n\n{{JSRef}}{{Deprecated_Header}}\n\n> **Warning:** Changing the `[[Prototype]]` of an object is, by the nature of how modern JavaScript engines optimize property accesses, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to the time spent in the `obj.__proto__ = ...` statement, but may extend to **_any_** code that has access to any object whose `[[Prototype]]` has been altered. You can read more in [JavaScript engine fundamentals: optimizing prototypes](https://mathiasbynens.be/notes/prototypes).\n\n> **Note:** The use of `__proto__` is controversial and discouraged. Its existence and exact behavior have only been standardized as a legacy feature to ensure web compatibility, while it presents several security issues and footguns. For better support, prefer {{jsxref(\"Object.getPrototypeOf()\")}}/{{jsxref(\"Reflect.getPrototypeOf()\")}} and {{jsxref(\"Object.setPrototypeOf()\")}}/{{jsxref(\"Reflect.setPrototypeOf()\")}} instead.\n\nThe **`__proto__`** accessor property of {{jsxref(\"Object\")}} instances exposes the [`[[Prototype]]`](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) (either an object or {{jsxref(\"Operators/null\", \"null\")}}) of this object.\n\nThe `__proto__` property can also be used in an object literal definition to set the object `[[Prototype]]` on creation, as an alternative to {{jsxref(\"Object.create()\")}}. See: [object initializer / literal syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer). That syntax is standard and optimized for in implementations, and quite different from `Object.prototype.__proto__`.\n\n## Syntax\n\n```js-nolint\nobj.__proto__\n```\n\n### Return value\n\nIf used as a getter, returns the object's `[[Prototype]]`.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if attempting to set the prototype of a [non-extensible](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible) object or an [immutable prototype exotic object](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-immutable-prototype-exotic-objects), such as `Object.prototype` or [`window`](/en-US/docs/Web/API/Window).\n\n## Description\n\nThe `__proto__` getter function exposes the value of the internal `[[Prototype]]` of an object. For objects created using an object literal (unless you use the [prototype setter](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#prototype_setter) syntax), this value is `Object.prototype`. For objects created using array literals, this value is [`Array.prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). For functions, this value is {{jsxref(\"Function.prototype\")}}. You can read more about the prototype chain in [Inheritance and the prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain).\n\nThe `__proto__` setter allows the `[[Prototype]]` of an object to be mutated. The value provided must be an object or {{jsxref(\"Operators/null\", \"null\")}}. Providing any other value will do nothing.\n\nUnlike {{jsxref(\"Object.getPrototypeOf()\")}} and {{jsxref(\"Object.setPrototypeOf()\")}}, which are always available on `Object` as static properties and always reflect the `[[Prototype]]` internal property, the `__proto__` property doesn't always exist as a property on all objects, and as a result doesn't reflect `[[Prototype]]` reliably.\n\nThe `__proto__` property is a simple accessor property on `Object.prototype` consisting of a getter and setter function. A property access for `__proto__` that eventually consults `Object.prototype` will find this property, but an access that does not consult `Object.prototype` will not. If some other `__proto__` property is found before `Object.prototype` is consulted, that property will hide the one found on `Object.prototype`.\n\n[`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) don't inherit any property from `Object.prototype`, including the `__proto__` accessor property, so if you try to read `__proto__` on such an object, the value is always `undefined` regardless of the object's actual `[[Prototype]]`, and any assignment to `__proto__` would create a new property called `__proto__` instead of setting the object's prototype. Furthermore, `__proto__` can be redefined as an own property on any object instance through {{jsxref(\"Object.defineProperty()\")}} without triggering the setter. In this case, `__proto__` will no longer be an accessor for `[[Prototype]]`. Therefore, always prefer {{jsxref(\"Object.getPrototypeOf()\")}} and {{jsxref(\"Object.setPrototypeOf()\")}} for setting and getting the `[[Prototype]]` of an object.\n\n## Examples\n\n### Using \\_\\_proto\\_\\_\n\n```js\nfunction Circle() {}\nconst shape = {};\nconst circle = new Circle();\n\n// Set the object prototype.\n// DEPRECATED. This is for example purposes only. DO NOT DO THIS in real code.\nshape.__proto__ = circle;\n\n// Get the object prototype\nconsole.log(shape.__proto__ === Circle); // false\n```\n\n```js\nconst ShapeA = function () {};\nconst ShapeB = {\n  a() {\n    console.log(\"aaa\");\n  },\n};\n\nShapeA.prototype.__proto__ = ShapeB;\nconsole.log(ShapeA.prototype.__proto__); // { a: [Function: a] }\n\nconst shapeA = new ShapeA();\nshapeA.a(); // aaa\nconsole.log(ShapeA.prototype === shapeA.__proto__); // true\n```\n\n```js\nconst ShapeC = function () {};\nconst ShapeD = {\n  a() {\n    console.log(\"a\");\n  },\n};\n\nconst shapeC = new ShapeC();\nshapeC.__proto__ = ShapeD;\nshapeC.a(); // a\nconsole.log(ShapeC.prototype === shapeC.__proto__); // false\n```\n\n```js\nfunction Test() {}\nTest.prototype.myName = function () {\n  console.log(\"myName\");\n};\n\nconst test = new Test();\nconsole.log(test.__proto__ === Test.prototype); // true\ntest.myName(); // myName\n\nconst obj = {};\nobj.__proto__ = Test.prototype;\nobj.myName(); // myName\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.isPrototypeOf()\")}}\n- {{jsxref(\"Object.getPrototypeOf()\")}}\n- {{jsxref(\"Object.setPrototypeOf()\")}}\n"
    },
    "seal": {
      "index.md": "---\ntitle: Object.seal()\nslug: Web/JavaScript/Reference/Global_Objects/Object/seal\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.seal\n---\n\n{{JSRef}}\n\nThe **`Object.seal()`** static method _seals_ an object. Sealing an object [prevents extensions](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and makes existing properties non-configurable. A sealed object has a fixed set of properties: new properties cannot be added, existing properties cannot be removed, their enumerability and configurability cannot be changed, and its prototype cannot be re-assigned. Values of existing properties can still be changed as long as they are writable. `seal()` returns the same object that was passed in.\n\n{{EmbedInteractiveExample(\"pages/js/object-seal.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.seal(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : The object which should be sealed.\n\n### Return value\n\nThe object being sealed.\n\n## Description\n\nSealing an object is equivalent to [preventing extensions](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions) and then changing all existing [properties' descriptors](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#description) to `configurable: false`. This has the effect of making the set of properties on the object fixed. Making all properties non-configurable\nalso prevents them from being converted from data properties to accessor properties and\nvice versa, but it does not prevent the values of data properties from being changed.\nAttempting to delete or add properties to a sealed object, or to convert a data property\nto accessor or vice versa, will fail, either silently or by throwing a\n{{jsxref(\"TypeError\")}} (most commonly, although not exclusively, when in\n{{jsxref(\"Strict_mode\", \"strict mode\", \"\", 1)}} code).\n\n[Private properties](/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) do not have the concept of property descriptors. Private properties cannot be added or removed from the object, whether the object is sealed or not.\n\nThe prototype chain remains untouched. However, due to the effect of [preventing extensions](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions), the `[[Prototype]]` cannot be reassigned.\n\nUnlike {{jsxref(\"Object.freeze()\")}}, objects sealed with `Object.seal()` may have their existing\nproperties changed, as long as they are writable.\n\n## Examples\n\n### Using Object.seal\n\n```js\nconst obj = {\n  prop() {},\n  foo: \"bar\",\n};\n\n// New properties may be added, existing properties\n// may be changed or removed.\nobj.foo = \"baz\";\nobj.lumpy = \"woof\";\ndelete obj.prop;\n\nconst o = Object.seal(obj);\n\no === obj; // true\nObject.isSealed(obj); // true\n\n// Changing property values on a sealed object\n// still works.\nobj.foo = \"quux\";\n\n// But you can't convert data properties to accessors,\n// or vice versa.\nObject.defineProperty(obj, \"foo\", {\n  get() {\n    return \"g\";\n  },\n}); // throws a TypeError\n\n// Now any changes, other than to property values,\n// will fail.\nobj.quaxxor = \"the friendly duck\";\n// silently doesn't add the property\ndelete obj.foo;\n// silently doesn't delete the property\n\n// ...and in strict mode such attempts\n// will throw TypeErrors.\nfunction fail() {\n  \"use strict\";\n  delete obj.foo; // throws a TypeError\n  obj.sparky = \"arf\"; // throws a TypeError\n}\nfail();\n\n// Attempted additions through\n// Object.defineProperty will also throw.\nObject.defineProperty(obj, \"ohai\", {\n  value: 17,\n}); // throws a TypeError\nObject.defineProperty(obj, \"foo\", {\n  value: \"eit\",\n}); // changes existing property value\n```\n\n### Non-object argument\n\nIn ES5, if the argument to this method is not an object (a primitive), then it will cause a {{jsxref(\"TypeError\")}}. In ES2015, a non-object argument will be returned as-is without any errors, since primitives are already, by definition, immutable.\n\n```js\nObject.seal(1);\n// TypeError: 1 is not an object (ES5 code)\n\nObject.seal(1);\n// 1                             (ES2015 code)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.isSealed()\")}}\n- {{jsxref(\"Object.preventExtensions()\")}}\n- {{jsxref(\"Object.isExtensible()\")}}\n- {{jsxref(\"Object.freeze()\")}}\n- {{jsxref(\"Object.isFrozen()\")}}\n"
    },
    "setprototypeof": {
      "index.md": "---\ntitle: Object.setPrototypeOf()\nslug: Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.setPrototypeOf\n---\n\n{{JSRef}}\n\nThe **`Object.setPrototypeOf()`** static method sets the prototype (i.e., the internal `[[Prototype]]` property) of a specified object to another object or [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null).\n\n> **Warning:** Changing the `[[Prototype]]` of an object is, by the nature of how modern JavaScript engines optimize property accesses, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to the time spent in the `Object.setPrototypeOf(...)` statement, but may extend to **_any_** code that has access to any object whose `[[Prototype]]` has been altered. You can read more in [JavaScript engine fundamentals: optimizing prototypes](https://mathiasbynens.be/notes/prototypes).\n>\n> Because this feature is a part of the language, it is still the burden on engine developers to implement that feature performantly (ideally). Until engine developers address this issue, if you are concerned about performance, you should avoid setting the `[[Prototype]]` of an object. Instead, create a new object with the desired `[[Prototype]]` using {{jsxref(\"Object.create()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/object-setprototypeof.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.setPrototypeOf(obj, prototype)\n```\n\n### Parameters\n\n- `obj`\n  - : The object which is to have its prototype set.\n- `prototype`\n  - : The object's new prototype (an object or [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null)).\n\n### Return value\n\nThe specified object.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown in one of the following cases:\n    - The `obj` parameter is `undefined` or `null`.\n    - The `obj` parameter is [non-extensible](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible), or it's an [immutable prototype exotic object](https://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-immutable-prototype-exotic-objects), such as `Object.prototype` or [`window`](/en-US/docs/Web/API/Window). However, the error is not thrown if the new prototype is the same value as the original prototype of `obj`.\n    - The `prototype` parameter is not an object or [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null).\n\n## Description\n\n`Object.setPrototypeOf()` is generally considered the proper way to set the prototype of an object. You should always use it in favor of the deprecated [`Object.prototype.__proto__`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto) accessor.\n\nIf the `obj` parameter is not an object (e.g. number, string, etc.), this method does nothing — without coercing it to an object or attempting to set its prototype — and directly returns `obj` as a primitive value. If `prototype` is the same value as the prototype of `obj`, then `obj` is directly returned, without causing a `TypeError` even when `obj` has immutable prototype.\n\nFor security concerns, there are certain built-in objects that are designed to have an _immutable prototype_. This prevents prototype pollution attacks, especially [proxy-related ones](https://github.com/tc39/ecma262/issues/272). The core language only specifies `Object.prototype` as an immutable prototype exotic object, whose prototype is always `null`. In browsers, [`window`](/en-US/docs/Web/API/Window) and [`location`](/en-US/docs/Web/API/Window/location) are two other very common examples.\n\n```js\nObject.isExtensible(Object.prototype); // true; you can add more properties\nObject.setPrototypeOf(Object.prototype, {}); // TypeError: Immutable prototype object '#<Object>' cannot have their prototype set\nObject.setPrototypeOf(Object.prototype, null); // No error; the prototype of `Object.prototype` is already `null`\n```\n\n## Examples\n\n### Pseudoclassical inheritance using Object.setPrototypeOf()\n\nInheritance in JS using classes.\n\n```js\nclass Human {}\nclass SuperHero extends Human {}\n\nconst superMan = new SuperHero();\n```\n\nHowever, if we want to implement subclasses without using `class`, we can do the following:\n\n```js\nfunction Human(name, level) {\n  this.name = name;\n  this.level = level;\n}\n\nfunction SuperHero(name, level) {\n  Human.call(this, name, level);\n}\n\nObject.setPrototypeOf(SuperHero.prototype, Human.prototype);\n\n// Set the `[[Prototype]]` of `SuperHero.prototype`\n// to `Human.prototype`\n// To set the prototypal inheritance chain\n\nHuman.prototype.speak = function () {\n  return `${this.name} says hello.`;\n};\n\nSuperHero.prototype.fly = function () {\n  return `${this.name} is flying.`;\n};\n\nconst superMan = new SuperHero(\"Clark Kent\", 1);\n\nconsole.log(superMan.fly());\nconsole.log(superMan.speak());\n```\n\nThe similarity between classical inheritance (with classes) and pseudoclassical inheritance (with constructors' `prototype` property) as done above is mentioned in [Inheritance chains](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#building_longer_inheritance_chains).\n\nSince function constructors' [`prototype`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype) property is writable, you can reassign it to a new object created with [`Object.create()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#classical_inheritance_with_object.create) to achieve the same inheritance chain as well. There are caveats to watch out when using `create()`, such as remembering to re-add the [`constructor`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) property.\n\nIn the example below, which also uses classes, `SuperHero` is made to inherit from `Human` without using `extends` by using `setPrototypeOf()` instead.\n\n> **Warning:** It is not advisable to use `setPrototypeOf()` instead of `extends` due to performance and readability reasons.\n\n```js\nclass Human {}\nclass SuperHero {}\n\n// Set the instance properties\nObject.setPrototypeOf(SuperHero.prototype, Human.prototype);\n\n// Hook up the static properties\nObject.setPrototypeOf(SuperHero, Human);\n\nconst superMan = new SuperHero();\n```\n\nSubclassing without `extends` is mentioned in [ES-6 subclassing](https://hacks.mozilla.org/2015/08/es6-in-depth-subclassing/).\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.setPrototypeOf` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- {{jsxref(\"Reflect.setPrototypeOf()\")}}\n- {{jsxref(\"Object.prototype.isPrototypeOf()\")}}\n- {{jsxref(\"Object.getPrototypeOf()\")}}\n- [`Object.prototype.__proto__`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto)\n- [Inheritance chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain#building_longer_inheritance_chains)\n- [ES6 In Depth: Subclassing](https://hacks.mozilla.org/2015/08/es6-in-depth-subclassing/) on hacks.mozilla.org (2015)\n"
    },
    "tolocalestring": {
      "index.md": "---\ntitle: Object.prototype.toLocaleString()\nslug: Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Object.toLocaleString\n---\n\n{{JSRef}}\n\nThe **`toLocaleString()`** method of {{jsxref(\"Object\")}} instances returns a string representing this object. This method is meant to be overridden by derived objects for locale-specific purposes.\n\n{{EmbedInteractiveExample(\"pages/js/object-prototype-tolocalestring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoLocaleString()\n```\n\n### Parameters\n\nNone. However, all objects that override this method are expected to accept at most two parameters, corresponding to `locales` and `options`, such as {{jsxref(\"Date.prototype.toLocaleString\")}}. The parameter positions should not be used for any other purpose.\n\n### Return value\n\nThe return value of calling `this.toString()`.\n\n## Description\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `toLocaleString()` method. {{jsxref(\"Object\")}}'s `toLocaleString` returns the result of calling {{jsxref(\"Object/toString\", \"this.toString()\")}}.\n\nThis function is provided to give objects a generic `toLocaleString` method, even though not all may use it. In the core language, these built-in objects override `toLocaleString` to provide locale-specific formatting:\n\n- {{jsxref(\"Array\")}}: {{jsxref(\"Array.prototype.toLocaleString()\")}}\n- {{jsxref(\"Number\")}}: {{jsxref(\"Number.prototype.toLocaleString()\")}}\n- {{jsxref(\"Date\")}}: {{jsxref(\"Date.prototype.toLocaleString()\")}}\n- {{jsxref(\"TypedArray\")}}: {{jsxref(\"TypedArray.prototype.toLocaleString()\")}}\n- {{jsxref(\"BigInt\")}}: {{jsxref(\"BigInt.prototype.toLocaleString()\")}}\n\n## Examples\n\n### Using the base toLocaleString() method\n\nThe base `toLocaleString()` method simply calls `toString()`.\n\n```js\nconst obj = {\n  toString() {\n    return \"My Object\";\n  },\n};\nconsole.log(obj.toLocaleString()); // \"My Object\"\n```\n\n### Array toLocaleString() override\n\n{{jsxref(\"Array.prototype.toLocaleString()\")}} is used to print array values as a string by invoking each element's `toLocaleString()` method and joining the results with a locale-specific separator. For example:\n\n```js\nconst testArray = [4, 7, 10];\n\nconst euroPrices = testArray.toLocaleString(\"fr\", {\n  style: \"currency\",\n  currency: \"EUR\",\n});\n// \"4,00 €,7,00 €,10,00 €\"\n```\n\n### Date toLocaleString() override\n\n{{jsxref(\"Date.prototype.toLocaleString()\")}} is used to print out date displays more suitable for specific locales. For example:\n\n```js\nconst testDate = new Date();\n// \"Fri May 29 2020 18:04:24 GMT+0100 (British Summer Time)\"\n\nconst deDate = testDate.toLocaleString(\"de\");\n// \"29.5.2020, 18:04:24\"\n\nconst frDate = testDate.toLocaleString(\"fr\");\n// \"29/05/2020, 18:04:24\"\n```\n\n### Number toLocaleString() override\n\n{{jsxref(\"Number.prototype.toLocaleString()\")}} is used to print out number displays more suitable for specific locales, e.g. with the correct separators. For example:\n\n```js\nconst testNumber = 2901234564;\n// \"2901234564\"\n\nconst deNumber = testNumber.toLocaleString(\"de\");\n// \"2.901.234.564\"\n\nconst frNumber = testNumber.toLocaleString(\"fr\");\n// \"2 901 234 564\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.toString()\")}}\n"
    },
    "tostring": {
      "index.md": "---\ntitle: Object.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/Object/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Object.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"Object\")}} instances returns a string representing this object. This method is meant to be overridden by derived objects for custom [type coercion](/en-US/docs/Web/JavaScript/Data_structures#type_coercion) logic.\n\n{{EmbedInteractiveExample(\"pages/js/object-prototype-tostring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\n```\n\n### Parameters\n\nBy default `toString()` takes no parameters. However, objects that inherit from `Object` may override it with their own implementations that do take parameters. For example, the [`Number.prototype.toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) and [`BigInt.prototype.toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString) methods take an optional `radix` parameter.\n\n### Return value\n\nA string representing the object.\n\n## Description\n\nJavaScript calls the `toString` method to [convert an object to a primitive value](/en-US/docs/Web/JavaScript/Data_structures#type_coercion). You rarely need to invoke the `toString` method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\nThis method is called in priority by [string conversion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), but [numeric conversion](/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and [primitive conversion](/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) call `valueOf()` in priority. However, because the base [`valueOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) method returns an object, the `toString()` method is usually called in the end, unless the object overrides `valueOf()`. For example, `+[1]` returns `1`, because its [`toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString) method returns `\"1\"`, which is then converted to a number.\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `toString()` method. When you create a custom object, you can override `toString()` to call a custom method, so that your custom object can be converted to a string value. Alternatively, you can add a [`@@toPrimitive`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, which allows even more control over the conversion process, and will always be preferred over `valueOf` or `toString` for any type conversion.\n\nTo use the base `Object.prototype.toString()` with an object that has it overridden (or to invoke it on `null` or `undefined`), you need to call {{jsxref(\"Function.prototype.call()\")}} or {{jsxref(\"Function.prototype.apply()\")}} on it, passing the object you want to inspect as the first parameter (called `thisArg`).\n\n```js\nconst arr = [1, 2, 3];\n\narr.toString(); // \"1,2,3\"\nObject.prototype.toString.call(arr); // \"[object Array]\"\n```\n\n`Object.prototype.toString()` returns `\"[object Type]\"`, where `Type` is the object type. If the object has a [`Symbol.toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property whose value is a string, that value will be used as the `Type`. Many built-in objects, including [`Map`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Symbol`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), have a `Symbol.toStringTag`. Some objects predating ES6 do not have `Symbol.toStringTag`, but have a special tag nonetheless. They include (the tag is the same as the type name given below):\n\n- [`Array`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\n- [`Function`](/en-US/docs/Web/JavaScript/Reference/Functions) (anything whose [`typeof`](/en-US/docs/Web/JavaScript/Reference/Operators/typeof) returns `\"function\"`)\n- [`Error`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)\n- [`Boolean`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)\n- [`Number`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)\n- [`String`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\n- [`Date`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)\n- [`RegExp`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n\nThe [`arguments`](/en-US/docs/Web/JavaScript/Reference/Functions/arguments) object returns `\"[object Arguments]\"`. Everything else, including user-defined classes, unless with a custom `Symbol.toStringTag`, will return `\"[object Object]\"`.\n\n`Object.prototype.toString()` invoked on [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) and {{jsxref(\"undefined\")}} returns `[object Null]` and `[object Undefined]`, respectively.\n\n## Examples\n\n### Overriding toString for custom objects\n\nYou can create a function to be called in place of the default `toString()` method. The `toString()` function you create should return a string value. If it returns an object and the method is called implicitly during [type conversion](/en-US/docs/Web/JavaScript/Data_structures#type_coercion), then its result is ignored and the value of a related method, {{jsxref(\"Object/valueOf\", \"valueOf()\")}}, is used instead, or a `TypeError` is thrown if none of these methods return a primitive.\n\nThe following code defines a `Dog` class.\n\n```js\nclass Dog {\n  constructor(name, breed, color, sex) {\n    this.name = name;\n    this.breed = breed;\n    this.color = color;\n    this.sex = sex;\n  }\n}\n```\n\nIf you call the `toString()` method, either explicitly or implicitly, on an instance of `Dog`, it returns the default value inherited from {{jsxref(\"Object\")}}:\n\n```js\nconst theDog = new Dog(\"Gabby\", \"Lab\", \"chocolate\", \"female\");\n\ntheDog.toString(); // \"[object Object]\"\n`${theDog}`; // \"[object Object]\"\n```\n\nThe following code overrides the default `toString()` method. This method generates a string containing the `name`, `breed`, `color`, and `sex` of the object.\n\n```js\nclass Dog {\n  constructor(name, breed, color, sex) {\n    this.name = name;\n    this.breed = breed;\n    this.color = color;\n    this.sex = sex;\n  }\n  toString() {\n    return `Dog ${this.name} is a ${this.sex} ${this.color} ${this.breed}`;\n  }\n}\n```\n\nWith the preceding code in place, any time an instance of `Dog` is used in a string context, JavaScript automatically calls the `toString()` method.\n\n```js\nconst theDog = new Dog(\"Gabby\", \"Lab\", \"chocolate\", \"female\");\n\n`${theDog}`; // \"Dog Gabby is a female chocolate Lab\"\n```\n\n### Using toString() to detect object class\n\n`toString()` can be used with every object and (by default) allows you to get its class.\n\n```js\nconst toString = Object.prototype.toString;\n\ntoString.call(new Date()); // [object Date]\ntoString.call(new String()); // [object String]\n// Math has its Symbol.toStringTag\ntoString.call(Math); // [object Math]\n\ntoString.call(undefined); // [object Undefined]\ntoString.call(null); // [object Null]\n```\n\nUsing `toString()` in this way is unreliable; objects can change the behavior of `Object.prototype.toString()` by defining a {{jsxref(\"Symbol.toStringTag\")}} property, leading to unexpected results. For example:\n\n```js\nconst myDate = new Date();\nObject.prototype.toString.call(myDate); // [object Date]\n\nmyDate[Symbol.toStringTag] = \"myDate\";\nObject.prototype.toString.call(myDate); // [object myDate]\n\nDate.prototype[Symbol.toStringTag] = \"prototype polluted\";\nObject.prototype.toString.call(new Date()); // [object prototype polluted]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.prototype.toString` with `Symbol.toStringTag` support in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- {{jsxref(\"Object.prototype.valueOf()\")}}\n- {{jsxref(\"Number.prototype.toString()\")}}\n- {{jsxref(\"Symbol.toPrimitive\")}}\n- {{jsxref(\"Symbol.toStringTag\")}}\n"
    },
    "valueof": {
      "index.md": "---\ntitle: Object.prototype.valueOf()\nslug: Web/JavaScript/Reference/Global_Objects/Object/valueOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Object.valueOf\n---\n\n{{JSRef}}\n\nThe **`valueOf()`** method of {{jsxref(\"Object\")}} instances converts the `this` value [to an object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion). This method is meant to be overridden by derived objects for custom [type conversion](/en-US/docs/Web/JavaScript/Data_structures#type_coercion) logic.\n\n{{EmbedInteractiveExample(\"pages/js/object-prototype-valueof.html\")}}\n\n## Syntax\n\n```js-nolint\nvalueOf()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe `this` value, converted to an object.\n\n> **Note:** In order for `valueOf` to be useful during type conversion, it must return a primitive. Because all primitive types have their own `valueOf()` methods, calling `aPrimitiveValue.valueOf()` generally does not invoke `Object.prototype.valueOf()`.\n\n## Description\n\nJavaScript calls the `valueOf` method to [convert an object to a primitive value](/en-US/docs/Web/JavaScript/Data_structures#type_coercion). You rarely need to invoke the `valueOf` method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\nThis method is called in priority by [numeric conversion](/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) and [primitive conversion](/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion), but [string conversion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) calls `toString()` in priority, and `toString()` is very likely to return a string value (even for the {{jsxref(\"Object.prototype.toString()\")}} base implementation), so `valueOf()` is usually not called in this case.\n\nAll objects that inherit from `Object.prototype` (that is, all except [`null`-prototype objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects)) inherit the `toString()` method. The `Object.prototype.valueOf()` base implementation is deliberately useless: by returning an object, its return value will never be used by any [primitive conversion algorithm](/en-US/docs/Web/JavaScript/Data_structures#type_coercion). Many built-in objects override this method to return an appropriate primitive value. When you create a custom object, you can override `valueOf()` to call a custom method, so that your custom object can be converted to a primitive value. Generally, `valueOf()` is used to return a value that is most meaningful for the object — unlike `toString()`, it does not need to be a string. Alternatively, you can add a [`@@toPrimitive`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, which allows even more control over the conversion process, and will always be preferred over `valueOf` or `toString` for any type conversion.\n\n## Examples\n\n### Using valueOf()\n\nThe base `valueOf()` method returns the `this` value itself, converted to an object if it isn't already. Therefore its return value will never be used by any primitive conversion algorithm.\n\n```js\nconst obj = { foo: 1 };\nconsole.log(obj.valueOf() === obj); // true\n\nconsole.log(Object.prototype.valueOf.call(\"primitive\"));\n// [String: 'primitive'] (a wrapper object)\n```\n\n### Overriding valueOf for custom objects\n\nYou can create a function to be called in place of the default `valueOf` method. Your function should take no arguments, since it won't be passed any when called during type conversion.\n\nFor example, you can add a `valueOf` method to your custom class `Box`.\n\n```js\nclass Box {\n  #value;\n  constructor(value) {\n    this.#value = value;\n  }\n  valueOf() {\n    return this.#value;\n  }\n}\n```\n\nWith the preceding code in place, any time an object of type `Box` is used in a context where it is to be represented as a primitive value (but not specifically a string), JavaScript automatically calls the function defined in the preceding code.\n\n```js\nconst box = new Box(123);\nconsole.log(box + 456); // 579\nconsole.log(box == 123); // true\n```\n\nAn object's `valueOf` method is usually invoked by JavaScript, but you can invoke it yourself as follows:\n\n```js\nbox.valueOf();\n```\n\n### Using unary plus on objects\n\n[Unary plus](/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus) performs [number coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion) on its operand, which, for most objects without [`@@toPrimitive`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive), means calling its `valueOf()`. However, if the object doesn't have a custom `valueOf()` method, the base implementation will cause `valueOf()` to be ignored and the return value of `toString()` to be used instead.\n\n```js\n+new Date(); // the current timestamp; same as new Date().getTime()\n+{}; // NaN (toString() returns \"[object Object]\")\n+[]; // 0 (toString() returns an empty string list)\n+[1]; // 1 (toString() returns \"1\")\n+[1, 2]; // NaN (toString() returns \"1,2\")\n+new Set([1]); // NaN (toString() returns \"[object Set]\")\n+{ valueOf: () => 42 }; // 42\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.toString()\")}}\n- {{jsxref(\"parseInt()\")}}\n- {{jsxref(\"Symbol.toPrimitive\")}}\n"
    },
    "values": {
      "index.md": "---\ntitle: Object.values()\nslug: Web/JavaScript/Reference/Global_Objects/Object/values\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Object.values\n---\n\n{{JSRef}}\n\nThe **`Object.values()`** static method returns an array of a given object's own enumerable string-keyed property values.\n\n{{EmbedInteractiveExample(\"pages/js/object-values.html\")}}\n\n## Syntax\n\n```js-nolint\nObject.values(obj)\n```\n\n### Parameters\n\n- `obj`\n  - : An object.\n\n### Return value\n\nAn array containing the given object's own enumerable string-keyed property values.\n\n## Description\n\n`Object.values()` returns an array whose elements are values of enumerable string-keyed properties found directly upon `object`. This is the same as iterating with a {{jsxref(\"Statements/for...in\", \"for...in\")}} loop, except that a `for...in` loop enumerates properties in the prototype chain as well. The order of the array returned by `Object.values()` is the same as that provided by a {{jsxref(\"Statements/for...in\", \"for...in\")}} loop.\n\nIf you need the property keys, use {{jsxref(\"Object.keys()\")}} instead. If you need both the property keys and values, use {{jsxref(\"Object.entries()\")}} instead.\n\n## Examples\n\n### Using Object.values()\n\n```js\nconst obj = { foo: \"bar\", baz: 42 };\nconsole.log(Object.values(obj)); // ['bar', 42]\n\n// Array-like object\nconst arrayLikeObj1 = { 0: \"a\", 1: \"b\", 2: \"c\" };\nconsole.log(Object.values(arrayLikeObj1)); // ['a', 'b', 'c']\n\n// Array-like object with random key ordering\n// When using numeric keys, the values are returned in the keys' numerical order\nconst arrayLikeObj2 = { 100: \"a\", 2: \"b\", 7: \"c\" };\nconsole.log(Object.values(arrayLikeObj2)); // ['b', 'c', 'a']\n\n// getFoo is a non-enumerable property\nconst myObj = Object.create(\n  {},\n  {\n    getFoo: {\n      value() {\n        return this.foo;\n      },\n    },\n  },\n);\nmyObj.foo = \"bar\";\nconsole.log(Object.values(myObj)); // ['bar']\n```\n\n### Using Object.values() on primitives\n\nNon-object arguments are [coerced to objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#object_coercion). [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) and [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) cannot be coerced to objects and throw a {{jsxref(\"TypeError\")}} upfront. Only strings may have own enumerable properties, while all other primitives return an empty array.\n\n```js\n// Strings have indices as enumerable own properties\nconsole.log(Object.values(\"foo\")); // ['f', 'o', 'o']\n\n// Other primitives except undefined and null have no own properties\nconsole.log(Object.values(100)); // []\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Object.values` in `core-js`](https://github.com/zloirock/core-js#ecmascript-object)\n- [Enumerability and ownership of properties](/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties)\n- {{jsxref(\"Object.keys()\")}}\n- {{jsxref(\"Object.entries()\")}}\n- {{jsxref(\"Object.prototype.propertyIsEnumerable()\")}}\n- {{jsxref(\"Object.create()\")}}\n- {{jsxref(\"Object.getOwnPropertyNames()\")}}\n- {{jsxref(\"Map.prototype.values()\")}}\n"
    }
  },
  "parsefloat": {
    "index.md": "---\ntitle: parseFloat()\nslug: Web/JavaScript/Reference/Global_Objects/parseFloat\npage-type: javascript-function\nbrowser-compat: javascript.builtins.parseFloat\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`parseFloat()`** function parses a string argument and returns a floating point number.\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-parsefloat.html\")}}\n\n## Syntax\n\n```js-nolint\nparseFloat(string)\n```\n\n### Parameters\n\n- `string`\n  - : The value to parse, [coerced to a string](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). Leading {{Glossary(\"whitespace\")}} in this argument is ignored.\n\n### Return value\n\nA floating point number parsed from the given `string`, or {{jsxref(\"NaN\")}} when the first non-whitespace character cannot be converted to a number.\n\n> **Note:** JavaScript does not have the distinction of \"floating point numbers\" and \"integers\" on the language level. [`parseInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) and `parseFloat()` only differ in their parsing behavior, but not necessarily their return values. For example, `parseInt(\"42\")` and `parseFloat(\"42\")` would return the same value: a {{jsxref(\"Number\")}} 42.\n\n## Description\n\nThe `parseFloat` function converts its first argument to a string, parses that string as a decimal number literal, then returns a number or `NaN`. The number syntax it accepts can be summarized as:\n\n- The characters accepted by `parseFloat()` are plus sign (`+`), minus sign (`-` U+002D HYPHEN-MINUS), decimal digits (`0` – `9`), decimal point (`.`), exponent indicator (`e` or `E`), and the `\"Infinity\"` literal.\n- The `+`/`-` signs can only appear strictly at the beginning of the string, or immediately following the `e`/`E` character. The decimal point can only appear once, and only before the `e`/`E` character. The `e`/`E` character can only appear once, and only if there is at least one digit before it.\n- Leading spaces in the argument are trimmed and ignored.\n- `parseFloat()` can also parse and return {{jsxref(\"Infinity\")}} or `-Infinity` if the string starts with `\"Infinity\"` or `\"-Infinity\"` preceded by none or more white spaces.\n- `parseFloat()` picks the longest substring starting from the beginning that generates a valid number literal. If it encounters an invalid character, it returns the number represented up to that point, ignoring the invalid character and all characters following it.\n- If the argument's first character can't start a legal number literal per the syntax above, `parseFloat` returns {{jsxref(\"NaN\")}}.\n\nSyntax-wise, `parseFloat()` parses a subset of the syntax that the [`Number()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number) function accepts. Namely, `parseFloat()` does not support non-decimal literals with `0x`, `0b`, or `0o` prefixes but supports everything else. However, `parseFloat()` is more lenient than `Number()` because it ignores trailing invalid characters, which would cause `Number()` to return `NaN`.\n\nSimilar to number literals and `Number()`, the number returned from `parseFloat()` may not be exactly equal to the number represented by the string, due to floating point range and inaccuracy. For numbers outside the `-1.7976931348623158e+308` – `1.7976931348623158e+308` range (see {{jsxref(\"Number.MAX_VALUE\")}}), `-Infinity` or `Infinity` is returned.\n\n## Examples\n\n### Using parseFloat()\n\nThe following examples all return `3.14`:\n\n```js\nparseFloat(3.14);\nparseFloat(\"3.14\");\nparseFloat(\"  3.14  \");\nparseFloat(\"314e-2\");\nparseFloat(\"0.0314E+2\");\nparseFloat(\"3.14some non-digit characters\");\nparseFloat({\n  toString() {\n    return \"3.14\";\n  },\n});\n```\n\n### parseFloat() returning NaN\n\nThe following example returns `NaN`:\n\n```js\nparseFloat(\"FF2\");\n```\n\nAnecdotally, because the string `NaN` itself is invalid syntax as accepted by `parseFloat()`, passing `\"NaN\"` returns `NaN` as well.\n\n```js\nparseFloat(\"NaN\"); // NaN\n```\n\n### Returning Infinity\n\nInfinity values are returned when the number is outside the double-precision 64-bit IEEE 754-2019 format range:\n\n```js\nparseFloat(\"1.7976931348623159e+308\"); // Infinity\nparseFloat(\"-1.7976931348623159e+308\"); // -Infinity\n```\n\nInfinity is also returned when the string starts with `\"Infinity\"` or `\"-Infinity\"`:\n\n```js\nparseFloat(\"Infinity\"); // Infinity\nparseFloat(\"-Infinity\"); // -Infinity\n```\n\n### Interaction with BigInt values\n\n`parseFloat()` does not handle {{jsxref(\"BigInt\")}} values. It stops at the `n` character, and treats the preceding string as a normal integer, with possible loss of precision. If a BigInt value is passed to `parseFloat()`, it will be converted to a string, and the string will be parsed as a floating-point number, which may result in loss of precision as well.\n\n```js example-bad\nparseFloat(900719925474099267n); // 900719925474099300\nparseFloat(\"900719925474099267n\"); // 900719925474099300\n```\n\nYou should pass the string to the [`BigInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function instead, without the trailing `n` character.\n\n```js example-good\nBigInt(\"900719925474099267\");\n// 900719925474099267n\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"parseInt()\")}}\n- {{jsxref(\"Number.parseFloat()\")}}\n- {{jsxref(\"Number.parseInt()\")}}\n- {{jsxref(\"Number.prototype.toFixed()\")}}\n"
  },
  "parseint": {
    "index.md": "---\ntitle: parseInt()\nslug: Web/JavaScript/Reference/Global_Objects/parseInt\npage-type: javascript-function\nbrowser-compat: javascript.builtins.parseInt\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`parseInt()`** function parses a string argument and returns an integer of the specified [radix](https://en.wikipedia.org/wiki/Radix) (the base in mathematical numeral systems).\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-parseint.html\")}}\n\n## Syntax\n\n```js-nolint\nparseInt(string)\nparseInt(string, radix)\n```\n\n### Parameters\n\n- `string`\n  - : A string starting with an integer. Leading {{Glossary(\"whitespace\")}} in this argument is ignored.\n- `radix` {{optional_inline}}\n\n  - : An integer between `2` and `36` that represents the _radix_ (the base in mathematical numeral systems) of the `string`. It is converted to a [32-bit integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion); if it's nonzero and outside the range of \\[2, 36] after conversion, the function will always return `NaN`. If `0` or not provided, the radix will be inferred based on `string`'s value. Be careful — this does _not_ always default to `10`! The [description below](#description) explains in more detail what happens when `radix` is not provided.\n\n### Return value\n\nAn integer parsed from the given `string`, or {{jsxref(\"NaN\")}} when\n\n- the `radix` as a 32-bit integer is smaller than `2` or bigger than `36`, or\n- the first non-whitespace character cannot be converted to a number.\n\n> **Note:** JavaScript does not have the distinction of \"floating point numbers\" and \"integers\" on the language level. `parseInt()` and [`parseFloat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) only differ in their parsing behavior, but not necessarily their return values. For example, `parseInt(\"42\")` and `parseFloat(\"42\")` would return the same value: a {{jsxref(\"Number\")}} 42.\n\n## Description\n\nThe `parseInt` function [converts its first argument to a string](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), parses that string, then returns an integer or `NaN`.\n\nIf not `NaN`, the return value will be the integer that is the first argument taken as a number in the specified `radix`. (For example, a `radix` of `10` converts from a decimal number, `8` converts from octal, `16` from hexadecimal, and so on.)\n\nThe `radix` argument is [converted to a number](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion). If it's unprovided, or if the value becomes 0, `NaN` or `Infinity` (`undefined` is coerced to `NaN`), JavaScript assumes the following:\n\n1. If the input `string`, with leading whitespace and possible `+`/`-` signs removed, begins with `0x` or `0X` (a zero, followed by lowercase or uppercase X), `radix` is assumed to be `16` and the rest of the string is parsed as a hexadecimal number.\n2. If the input `string` begins with any other value, the radix is `10` (decimal).\n\n> **Note:** Other prefixes like `0b`, which are valid in [number literals](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#binary), are treated as normal digits by `parseInt()`. `parseInt()` does _not_ treat strings beginning with a `0` character as octal values either. The only prefix that `parseInt()` recognizes is `0x` or `0X` for hexadecimal values — everything else is parsed as a decimal value if `radix` is missing. [`Number()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number) or [`BigInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) can be used instead to parse these prefixes.\n\nIf the radix is `16`, `parseInt()` allows the string to be optionally prefixed by `0x` or `0X` after the optional sign character (`+`/`-`).\n\nIf the radix value (coerced if necessary) is not in range \\[2, 36] (inclusive) `parseInt` returns `NaN`.\n\nFor radices above `10`, letters of the English alphabet indicate numerals greater than `9`. For example, for hexadecimal numbers (base `16`), `A` through `F` are used. The letters are case-insensitive.\n\n`parseInt` understands exactly two signs: `+` for positive, and `-` for negative. It is done as an initial step in the parsing after whitespace is removed. If no signs are found, the algorithm moves to the following step; otherwise, it removes the sign and runs the number-parsing on the rest of the string.\n\nIf `parseInt` encounters a character that is not a numeral in the specified `radix`, it ignores it and all succeeding characters and returns the integer value parsed up to that point. For example, although `1e3` technically encodes an integer (and will be correctly parsed to the integer `1000` by [`parseFloat()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)), `parseInt(\"1e3\", 10)` returns `1`, because `e` is not a valid numeral in base 10. Because `.` is not a numeral either, the return value will always be an integer.\n\nIf the first character cannot be converted to a number with the radix in use, `parseInt` returns `NaN`. Leading whitespace is allowed.\n\nFor arithmetic purposes, the `NaN` value is not a number in any radix. You can call the [`Number.isNaN`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) function to determine if the result of `parseInt` is `NaN`. If `NaN` is passed on to arithmetic operations, the operation result will also be `NaN`.\n\nBecause large numbers use the `e` character in their string representation (e.g. `6.022e23` for 6.022 × 10<sup>23</sup>), using `parseInt` to truncate numbers will produce unexpected results when used on very large or very small numbers. `parseInt` should _not_ be used as a substitute for {{jsxref(\"Math.trunc()\")}}.\n\nTo convert a number to its string literal in a particular radix, use [`thatNumber.toString(radix)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString).\n\nBecause `parseInt()` returns a number, it may suffer from loss of precision if the integer represented by the string is [outside the safe range](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger). The [`BigInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function supports parsing integers of arbitrary length accurately, by returning a {{jsxref(\"BigInt\")}}.\n\n## Examples\n\n### Using parseInt()\n\nThe following examples all return `15`:\n\n```js\nparseInt(\"0xF\", 16);\nparseInt(\"F\", 16);\nparseInt(\"17\", 8);\nparseInt(\"015\", 10); // but `parseInt('015', 8)` will return 13\nparseInt(\"15,123\", 10);\nparseInt(\"FXX123\", 16);\nparseInt(\"1111\", 2);\nparseInt(\"15 * 3\", 10);\nparseInt(\"15e2\", 10);\nparseInt(\"15px\", 10);\nparseInt(\"12\", 13);\n```\n\nThe following examples all return `NaN`:\n\n```js\nparseInt(\"Hello\", 8); // Not a number at all\nparseInt(\"546\", 2); // Digits other than 0 or 1 are invalid for binary radix\n```\n\nThe following examples all return `-15`:\n\n```js\nparseInt(\"-F\", 16);\nparseInt(\"-0F\", 16);\nparseInt(\"-0XF\", 16);\nparseInt(\"-17\", 8);\nparseInt(\"-15\", 10);\nparseInt(\"-1111\", 2);\nparseInt(\"-15e1\", 10);\nparseInt(\"-12\", 13);\n```\n\nThe following example returns `224`:\n\n```js\nparseInt(\"0e0\", 16);\n```\n\n`parseInt()` does not handle {{jsxref(\"BigInt\")}} values. It stops at the `n` character, and treats the preceding string as a normal integer, with possible loss of precision.\n\n```js example-bad\nparseInt(\"900719925474099267n\");\n// 900719925474099300\n```\n\nYou should pass the string to the [`BigInt()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt) function instead, without the trailing `n` character.\n\n```js example-good\nBigInt(\"900719925474099267\");\n// 900719925474099267n\n```\n\n`parseInt` doesn't work with [numeric separators](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_separators):\n\n```js example-bad\nparseInt(\"123_456\"); // 123\n```\n\n### Using parseInt() on non-strings\n\n`parseInt()` can have interesting results when working on non-strings combined with a high radix; for example, `36` (which makes all alphanumeric characters valid numeric digits).\n\n```js\nparseInt(null, 36); // 1112745: The string \"null\" is 1112745 in base 36\nparseInt(undefined, 36); // 86464843759093: The string \"undefined\" is 86464843759093 in base 36\n```\n\nIn general, it's a bad idea to use `parseInt()` on non-strings, especially to use it as a substitution for {{jsxref(\"Math.trunc()\")}}. It may work on small numbers:\n\n```js\nparseInt(15.99, 10); // 15\nparseInt(-15.1, 10); // -15\n```\n\nHowever, it only happens to work because the string representation of these numbers uses basic fractional notation (`\"15.99\"`, `\"-15.1\"`), where `parseInt()` stops at the decimal point. Numbers greater than or equal to 1e+21 or less than or equal to 1e-7 use exponential notation (`\"1.5e+22\"`, `\"1.51e-8\"`) in their string representation, and `parseInt()` will stop at the `e` character or decimal point, which always comes after the first digit. This means for large and small numbers, `parseInt()` will return a one-digit integer:\n\n```js example-bad\nparseInt(4.7 * 1e22, 10); // Very large number becomes 4\nparseInt(0.00000000000434, 10); // Very small number becomes 4\n\nparseInt(0.0000001, 10); // 1\nparseInt(0.000000123, 10); // 1\nparseInt(1e-7, 10); // 1\nparseInt(1000000000000000000000, 10); // 1\nparseInt(123000000000000000000000, 10); // 1\nparseInt(1e21, 10); // 1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"parseFloat()\")}}\n- [`Number()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number)\n- {{jsxref(\"Number.parseFloat()\")}}\n- {{jsxref(\"Number.parseInt()\")}}\n- {{jsxref(\"isNaN()\")}}\n- {{jsxref(\"Number.prototype.toString()\")}}\n- {{jsxref(\"Object.prototype.valueOf()\")}}\n- [`BigInt()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt)\n"
  },
  "promise": {
    "@@species": {
      "index.md": "---\ntitle: Promise[@@species]\nslug: Web/JavaScript/Reference/Global_Objects/Promise/@@species\npage-type: javascript-static-accessor-property\nbrowser-compat: javascript.builtins.Promise.@@species\n---\n\n{{JSRef}}\n\nThe **`Promise[@@species]`** static accessor property returns the constructor used to construct return values from promise methods.\n\n> **Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible.\n\n## Syntax\n\n```js-nolint\nPromise[Symbol.species]\n```\n\n### Return value\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct return values from promise chaining methods that create new promises.\n\n## Description\n\nThe `@@species` accessor property returns the default constructor for `Promise` objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically:\n\n```js\n// Hypothetical underlying implementation for illustration\nclass Promise {\n  static get [Symbol.species]() {\n    return this;\n  }\n}\n```\n\nBecause of this polymorphic implementation, `@@species` of derived subclasses would also return the constructor itself by default.\n\n```js\nclass SubPromise extends Promise {}\nSubPromise[Symbol.species] === SubPromise; // true\n```\n\nPromise chaining methods — [`then()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then), [`catch()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch), and [`finally()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally) — return new promise objects. They get the constructor to construct the new promise through `this.constructor[@@species]`. If `this.constructor` is `undefined`, or if `this.constructor[@@species]` is `undefined` or `null`, the default {{jsxref(\"Promise/Promise\", \"Promise()\")}} constructor is used. Otherwise, the constructor returned by `this.constructor[@@species]` is used to construct the new promise object.\n\n## Examples\n\n### Species in ordinary objects\n\nThe `Symbol.species` property returns the default constructor function, which is the `Promise` constructor for `Promise`.\n\n```js\nPromise[Symbol.species]; // [Function: Promise]\n```\n\n### Species in derived objects\n\nIn an instance of a custom `Promise` subclass, such as `MyPromise`, the `MyPromise` species is the `MyPromise` constructor. However, you might want to override this, in order to return parent `Promise` objects in your derived class methods.\n\n```js\nclass MyPromise extends Promise {\n  // Override MyPromise species to the parent Promise constructor\n  static get [Symbol.species]() {\n    return Promise;\n  }\n}\n```\n\nBy default, promise methods would return promises with the type of the subclass.\n\n```js\nclass MyPromise extends Promise {\n  someValue = 1;\n}\n\nconsole.log(MyPromise.resolve(1).then(() => {}).someValue); // 1\n```\n\nBy overriding `@@species`, the promise methods will return the base `Promise` type.\n\n```js\nclass MyPromise extends Promise {\n  someValue = 1;\n  static get [Symbol.species]() {\n    return Promise;\n  }\n}\n\nconsole.log(MyPromise.resolve(1).then(() => {}).someValue); // undefined\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Promise\")}}\n- {{jsxref(\"Symbol.species\")}}\n"
    },
    "all": {
      "index.md": "---\ntitle: Promise.all()\nslug: Web/JavaScript/Reference/Global_Objects/Promise/all\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Promise.all\n---\n\n{{JSRef}}\n\nThe **`Promise.all()`** static method takes an iterable of promises as input and returns a single {{jsxref(\"Promise\")}}. This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable is passed), with an array of the fulfillment values. It rejects when any of the input's promises rejects, with this first rejection reason.\n\n{{EmbedInteractiveExample(\"pages/js/promise-all.html\")}}\n\n## Syntax\n\n```js-nolint\nPromise.all(iterable)\n```\n\n### Parameters\n\n- `iterable`\n  - : An [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an {{jsxref(\"Array\")}}) of promises.\n\n### Return value\n\nA {{jsxref(\"Promise\")}} that is:\n\n- **Already fulfilled**, if the `iterable` passed is empty.\n- **Asynchronously fulfilled**, when all the promises in the given `iterable` fulfill. The fulfillment value is an array of fulfillment values, in the order of the promises passed, regardless of completion order. If the `iterable` passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) fulfilled.\n- **Asynchronously rejected**, when any of the promises in the given `iterable` rejects. The rejection reason is the rejection reason of the first promise that was rejected.\n\n## Description\n\nThe `Promise.all()` method is one of the [promise concurrency](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) methods. It can be useful for aggregating the results of multiple promises. It is typically used when there are multiple related asynchronous tasks that the overall code relies on to work successfully — all of whom we want to fulfill before the code execution continues.\n\n`Promise.all()` will reject immediately upon **any** of the input promises rejecting. In comparison, the promise returned by {{jsxref(\"Promise.allSettled()\")}} will wait for all input promises to complete, regardless of whether or not one rejects. Use `allSettled()` if you need the final result of every promise in the input iterable.\n\n## Examples\n\n### Using Promise.all()\n\n`Promise.all` waits for all fulfillments (or the first rejection).\n\n```js\nconst p1 = Promise.resolve(3);\nconst p2 = 1337;\nconst p3 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"foo\");\n  }, 100);\n});\n\nPromise.all([p1, p2, p3]).then((values) => {\n  console.log(values); // [3, 1337, \"foo\"]\n});\n```\n\nIf the `iterable` contains non-promise values, they will be ignored, but still counted in the returned promise array value (if the promise is fulfilled):\n\n```js\n// All values are non-promises, so the returned promise gets fulfilled\nconst p = Promise.all([1, 2, 3]);\n// The only input promise is already fulfilled,\n// so the returned promise gets fulfilled\nconst p2 = Promise.all([1, 2, 3, Promise.resolve(444)]);\n// One (and the only) input promise is rejected,\n// so the returned promise gets rejected\nconst p3 = Promise.all([1, 2, 3, Promise.reject(555)]);\n\n// Using setTimeout, we can execute code after the queue is empty\nsetTimeout(() => {\n  console.log(p);\n  console.log(p2);\n  console.log(p3);\n});\n\n// Logs:\n// Promise { <state>: \"fulfilled\", <value>: Array[3] }\n// Promise { <state>: \"fulfilled\", <value>: Array[4] }\n// Promise { <state>: \"rejected\", <reason>: 555 }\n```\n\n### Asynchronicity or synchronicity of Promise.all\n\nThis following example demonstrates the asynchronicity of `Promise.all` when a non-empty `iterable` is passed:\n\n```js\n// Passing an array of promises that are already resolved,\n// to trigger Promise.all as soon as possible\nconst resolvedPromisesArray = [Promise.resolve(33), Promise.resolve(44)];\n\nconst p = Promise.all(resolvedPromisesArray);\n// Immediately logging the value of p\nconsole.log(p);\n\n// Using setTimeout, we can execute code after the queue is empty\nsetTimeout(() => {\n  console.log(\"the queue is now empty\");\n  console.log(p);\n});\n\n// Logs, in order:\n// Promise { <state>: \"pending\" }\n// the queue is now empty\n// Promise { <state>: \"fulfilled\", <value>: Array[2] }\n```\n\nThe same thing happens if `Promise.all` rejects:\n\n```js\nconst mixedPromisesArray = [Promise.resolve(33), Promise.reject(44)];\nconst p = Promise.all(mixedPromisesArray);\nconsole.log(p);\nsetTimeout(() => {\n  console.log(\"the queue is now empty\");\n  console.log(p);\n});\n\n// Logs:\n// Promise { <state>: \"pending\" }\n// the queue is now empty\n// Promise { <state>: \"rejected\", <reason>: 44 }\n```\n\n`Promise.all` resolves synchronously if and only if the `iterable` passed is empty:\n\n```js\nconst p = Promise.all([]); // Will be immediately resolved\nconst p2 = Promise.all([1337, \"hi\"]); // Non-promise values are ignored, but the evaluation is done asynchronously\nconsole.log(p);\nconsole.log(p2);\nsetTimeout(() => {\n  console.log(\"the queue is now empty\");\n  console.log(p2);\n});\n\n// Logs:\n// Promise { <state>: \"fulfilled\", <value>: Array[0] }\n// Promise { <state>: \"pending\" }\n// the queue is now empty\n// Promise { <state>: \"fulfilled\", <value>: Array[2] }\n```\n\n### Using Promise.all() with async functions\n\nWithin [async functions](/en-US/docs/Web/JavaScript/Reference/Statements/async_function), it's very common to \"over-await\" your code. For example, given the following functions:\n\n```js\nfunction promptForDishChoice() {\n  return new Promise((resolve, reject) => {\n    const dialog = document.createElement(\"dialog\");\n    dialog.innerHTML = `\n<form method=\"dialog\">\n  <p>What would you like to eat?</p>\n  <select>\n    <option value=\"pizza\">Pizza</option>\n    <option value=\"pasta\">Pasta</option>\n    <option value=\"salad\">Salad</option>\n  </select>\n  <menu>\n    <li><button value=\"cancel\">Cancel</button></li>\n    <li><button type=\"submit\" value=\"ok\">OK</button></li>\n  </menu>\n</form>\n    `;\n    dialog.addEventListener(\"close\", () => {\n      if (dialog.returnValue === \"ok\") {\n        resolve(dialog.querySelector(\"select\").value);\n      } else {\n        reject(new Error(\"User cancelled dialog\"));\n      }\n    });\n    document.body.appendChild(dialog);\n    dialog.showModal();\n  });\n}\n\nasync function fetchPrices() {\n  const response = await fetch(\"/prices\");\n  return await response.json();\n}\n```\n\nYou may write a function like this:\n\n```js example-bad\nasync function getPrice() {\n  const choice = await promptForDishChoice();\n  const prices = await fetchPrices();\n  return prices[choice];\n}\n```\n\nHowever, note that the execution of `promptForDishChoice` and `fetchPrices` don't depend on the result of each other. While the user is choosing their dish, it's fine for the prices to be fetched in the background, but in the code above, the [`await`](/en-US/docs/Web/JavaScript/Reference/Operators/await) operator causes the async function to pause until the choice is made, and then again until the prices are fetched. We can use `Promise.all` to run them concurrently, so that the user doesn't have to wait for the prices to be fetched before the result is given:\n\n```js example-good\nasync function getPrice() {\n  const [choice, prices] = await Promise.all([\n    promptForDishChoice(),\n    fetchPrices(),\n  ]);\n  return prices[choice];\n}\n```\n\n`Promise.all` is the best choice of [concurrency method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) here, because error handling is intuitive — if any of the promises reject, the result is no longer available, so the whole `await` expression throws.\n\n`Promise.all` accepts an iterable of promises, so if you are using it to run several async functions concurrently, you need to call the async functions and use the returned promises. Directly passing the functions to `Promise.all` does not work, since they are not promises.\n\n```js example-bad\nasync function getPrice() {\n  const [choice, prices] = await Promise.all([\n    promptForDishChoice,\n    fetchPrices,\n  ]);\n  // `choice` and `prices` are still the original async functions;\n  // Promise.all() does nothing to non-promises\n}\n```\n\n### Promise.all fail-fast behavior\n\n`Promise.all` is rejected if any of the elements are rejected. For example, if you pass in four promises that resolve after a timeout and one promise that rejects immediately, then `Promise.all` will reject immediately.\n\n```js\nconst p1 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"one\"), 1000);\n});\nconst p2 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"two\"), 2000);\n});\nconst p3 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"three\"), 3000);\n});\nconst p4 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"four\"), 4000);\n});\nconst p5 = new Promise((resolve, reject) => {\n  reject(new Error(\"reject\"));\n});\n\n// Using .catch:\nPromise.all([p1, p2, p3, p4, p5])\n  .then((values) => {\n    console.log(values);\n  })\n  .catch((error) => {\n    console.error(error.message);\n  });\n\n// Logs:\n// \"reject\"\n```\n\nIt is possible to change this behavior by handling possible rejections:\n\n```js\nconst p1 = new Promise((resolve, reject) => {\n  setTimeout(() => resolve(\"p1_delayed_resolution\"), 1000);\n});\n\nconst p2 = new Promise((resolve, reject) => {\n  reject(new Error(\"p2_immediate_rejection\"));\n});\n\nPromise.all([p1.catch((error) => error), p2.catch((error) => error)]).then(\n  (values) => {\n    console.log(values[0]); // \"p1_delayed_resolution\"\n    console.error(values[1]); // \"Error: p2_immediate_rejection\"\n  },\n);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Promise\")}}\n- {{jsxref(\"Promise.allSettled()\")}}\n- {{jsxref(\"Promise.any()\")}}\n- {{jsxref(\"Promise.race()\")}}\n"
    },
    "allsettled": {
      "index.md": "---\ntitle: Promise.allSettled()\nslug: Web/JavaScript/Reference/Global_Objects/Promise/allSettled\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Promise.allSettled\n---\n\n{{JSRef}}\n\nThe **`Promise.allSettled()`** static method takes an iterable of promises as input and returns a single {{jsxref(\"Promise\")}}. This returned promise fulfills when all of the input's promises settle (including when an empty iterable is passed), with an array of objects that describe the outcome of each promise.\n\n{{EmbedInteractiveExample(\"pages/js/promise-allsettled.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nPromise.allSettled(iterable)\n```\n\n### Parameters\n\n- `iterable`\n  - : An [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an {{jsxref(\"Array\")}}) of promises.\n\n### Return value\n\nA {{jsxref(\"Promise\")}} that is:\n\n- **Already fulfilled**, if the `iterable` passed is empty.\n- **Asynchronously fulfilled**, when all promises in the given `iterable` have settled (either fulfilled or rejected). The fulfillment value is an array of objects, each describing the outcome of one promise in the `iterable`, in the order of the promises passed, regardless of completion order. Each outcome object has the following properties:\n\n  - `status`\n    - : A string, either `\"fulfilled\"` or `\"rejected\"`, indicating the eventual state of the promise.\n  - `value`\n    - : Only present if `status` is `\"fulfilled\"`. The value that the promise was fulfilled with.\n  - `reason`\n    - : Only present if `status` is `\"rejected\"`. The reason that the promise was rejected with.\n\n  If the `iterable` passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) fulfilled.\n\n## Description\n\nThe `Promise.allSettled()` method is one of the [promise concurrency](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) methods. `Promise.allSettled()` is typically used when you have multiple asynchronous tasks that are not dependent on one another to complete successfully, or you'd always like to know the result of each promise.\n\nIn comparison, the Promise returned by {{jsxref(\"Promise.all()\")}} may be more appropriate if the tasks are dependent on each other, or if you'd like to immediately reject upon any of them rejecting.\n\n## Examples\n\n### Using Promise.allSettled()\n\n```js\nPromise.allSettled([\n  Promise.resolve(33),\n  new Promise((resolve) => setTimeout(() => resolve(66), 0)),\n  99,\n  Promise.reject(new Error(\"an error\")),\n]).then((values) => console.log(values));\n\n// [\n//   { status: 'fulfilled', value: 33 },\n//   { status: 'fulfilled', value: 66 },\n//   { status: 'fulfilled', value: 99 },\n//   { status: 'rejected', reason: Error: an error }\n// ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Promise.allSettled` in `core-js`](https://github.com/zloirock/core-js#ecmascript-promise)\n- [Using promises](/en-US/docs/Web/JavaScript/Guide/Using_promises) guide\n- [Graceful asynchronous programming with promises](/en-US/docs/Learn/JavaScript/Asynchronous/Promises)\n- {{jsxref(\"Promise\")}}\n- {{jsxref(\"Promise.all()\")}}\n- {{jsxref(\"Promise.any()\")}}\n- {{jsxref(\"Promise.race()\")}}\n"
    },
    "any": {
      "index.md": "---\ntitle: Promise.any()\nslug: Web/JavaScript/Reference/Global_Objects/Promise/any\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Promise.any\n---\n\n{{JSRef}}\n\nThe **`Promise.any()`** static method takes an iterable of promises as input and returns a single {{jsxref(\"Promise\")}}. This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value. It rejects when all of the input's promises reject (including when an empty iterable is passed), with an {{jsxref(\"AggregateError\")}} containing an array of rejection reasons.\n\n{{EmbedInteractiveExample(\"pages/js/promise-any.html\")}}\n\n## Syntax\n\n```js-nolint\nPromise.any(iterable)\n```\n\n### Parameters\n\n- `iterable`\n  - : An [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an {{jsxref(\"Array\")}}) of promises.\n\n### Return value\n\nA {{jsxref(\"Promise\")}} that is:\n\n- **Already rejected**, if the `iterable` passed is empty.\n- **Asynchronously fulfilled**, when any of the promises in the given `iterable` fulfills. The fulfillment value is the fulfillment value of the first promise that was fulfilled.\n- **Asynchronously rejected**, when all of the promises in the given `iterable` reject. The rejection reason is an {{jsxref(\"AggregateError\")}} containing an array of rejection reasons in its `errors` property. The errors are in the order of the promises passed, regardless of completion order. If the `iterable` passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) rejected.\n\n## Description\n\nThe `Promise.any()` method is one of the [promise concurrency](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) methods. This method is useful for returning the first promise that fulfills. It short-circuits after a promise fulfills, so it does not wait for the other promises to complete once it finds one.\n\nUnlike {{jsxref(\"Promise.all()\")}}, which returns an _array_ of fulfillment values, we only get one fulfillment value (assuming at least one promise fulfills). This can be beneficial if we need only one promise to fulfill but we do not care which one does. Note another difference: this method rejects upon receiving an _empty iterable_, since, truthfully, the iterable contains no items that fulfill. You may compare `Promise.any()` and `Promise.all()` with {{jsxref(\"Array.prototype.some()\")}} and {{jsxref(\"Array.prototype.every()\")}}.\n\nAlso, unlike {{jsxref(\"Promise.race()\")}}, which returns the first _settled_ value (either fulfillment or rejection), this method returns the first _fulfilled_ value. This method ignores all rejected promises up until the first promise that fulfills.\n\n## Examples\n\n### Using Promise.any()\n\n`Promise.any()` fulfills with the first promise to fulfill, even if a promise rejects first. This is in contrast to {{jsxref(\"Promise.race()\")}}, which fulfills or rejects with the first promise to settle.\n\n```js\nconst pErr = new Promise((resolve, reject) => {\n  reject(\"Always fails\");\n});\n\nconst pSlow = new Promise((resolve, reject) => {\n  setTimeout(resolve, 500, \"Done eventually\");\n});\n\nconst pFast = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, \"Done quick\");\n});\n\nPromise.any([pErr, pSlow, pFast]).then((value) => {\n  console.log(value);\n  // pFast fulfills first\n});\n// Logs:\n// Done quick\n```\n\n### Rejections with AggregateError\n\n`Promise.any()` rejects with an {{jsxref(\"AggregateError\")}} if no promise fulfills.\n\n```js\nconst failure = new Promise((resolve, reject) => {\n  reject(\"Always fails\");\n});\n\nPromise.any([failure]).catch((err) => {\n  console.log(err);\n});\n// AggregateError: No Promise in Promise.any was resolved\n```\n\n### Displaying the first image loaded\n\nIn this example, we have a function that fetches an image and returns a blob. We use `Promise.any()` to fetch a couple of images and display the first one available (i.e. whose promise has resolved).\n\n```js\nasync function fetchAndDecode(url, description) {\n  const res = await fetch(url);\n  if (!res.ok) {\n    throw new Error(`HTTP error! status: ${res.status}`);\n  }\n  const data = await res.blob();\n  return [data, description];\n}\n\nconst coffee = fetchAndDecode(\"coffee.jpg\", \"Coffee\");\nconst tea = fetchAndDecode(\"tea.jpg\", \"Tea\");\n\nPromise.any([coffee, tea])\n  .then(([blob, description]) => {\n    const objectURL = URL.createObjectURL(blob);\n    const image = document.createElement(\"img\");\n    image.src = objectURL;\n    image.alt = description;\n    document.body.appendChild(image);\n  })\n  .catch((e) => {\n    console.error(e);\n  });\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Promise.any` in `core-js`](https://github.com/zloirock/core-js#ecmascript-promise)\n- {{jsxref(\"Promise\")}}\n- {{jsxref(\"Promise.all()\")}}\n- {{jsxref(\"Promise.allSettled()\")}}\n- {{jsxref(\"Promise.race()\")}}\n"
    },
    "catch": {
      "index.md": "---\ntitle: Promise.prototype.catch()\nslug: Web/JavaScript/Reference/Global_Objects/Promise/catch\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Promise.catch\n---\n\n{{JSRef}}\n\nThe **`catch()`** method of {{jsxref(\"Promise\")}} instances schedules a function to be called when the promise is rejected. It immediately returns an equivalent {{jsxref(\"Promise\")}} object, allowing you to [chain](/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining) calls to other promise methods. It is a shortcut for {{jsxref(\"Promise/then\", \"Promise.prototype.then(undefined, onRejected)\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/promise-catch.html\")}}\n\n## Syntax\n\n```js-nolint\npromiseInstance.catch(onRejected)\n```\n\n### Parameters\n\n- `onRejected`\n  - : A function to asynchronously execute when this promise becomes rejected. Its return value becomes the fulfillment value of the promise returned by `catch()`. The function is called with the following arguments:\n    - `reason`\n      - : The value that the promise was rejected with.\n\n### Return value\n\nReturns a new {{jsxref(\"Promise\")}}. This new promise is always pending when returned, regardless of the current promise's status. If `onRejected` is called, the returned promise will resolve based on the return value of this call, or reject with the thrown error from this call. If the current promise fulfills, `onRejected` is not called and the returned promise fulfills to the same value.\n\n## Description\n\nThe `catch` method is used for error handling in promise composition. Since it returns a {{jsxref(\"Promise\")}}, it [can be chained](/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining_after_a_catch) in the same way as its sister method, {{jsxref(\"Promise/then\", \"then()\")}}.\n\nIf a promise becomes rejected, and there are no rejection handlers to call (a handler can be attached through any of {{jsxref(\"Promise/then\", \"then()\")}}, {{jsxref(\"Promise/catch\", \"catch()\")}}, or {{jsxref(\"Promise/finally\", \"finally()\")}}), then the rejection event is surfaced by the host. In the browser, this results in an [`unhandledrejection`](/en-US/docs/Web/API/Window/unhandledrejection_event) event. If a handler is attached to a rejected promise whose rejection has already caused an unhandled rejection event, then another [`rejectionhandled`](/en-US/docs/Web/API/Window/rejectionhandled_event) event is fired.\n\n`catch()` internally calls `then()` on the object upon which it was called, passing `undefined` and `onRejected` as arguments. The value of that call is directly returned. This is observable if you wrap the methods.\n\n```js\n// overriding original Promise.prototype.then/catch just to add some logs\n((Promise) => {\n  const originalThen = Promise.prototype.then;\n  const originalCatch = Promise.prototype.catch;\n\n  Promise.prototype.then = function (...args) {\n    console.log(\"Called .then on %o with arguments: %o\", this, args);\n    return originalThen.apply(this, args);\n  };\n  Promise.prototype.catch = function (...args) {\n    console.error(\"Called .catch on %o with arguments: %o\", this, args);\n    return originalCatch.apply(this, args);\n  };\n})(Promise);\n\n// calling catch on an already resolved promise\nPromise.resolve().catch(function XXX() {});\n\n// Logs:\n// Called .catch on Promise{} with arguments: Arguments{1} [0: function XXX()]\n// Called .then on Promise{} with arguments: Arguments{2} [0: undefined, 1: function XXX()]\n```\n\nThis means that passing `undefined` still causes the returned promise to be rejected, and you have to pass a function to prevent the final promise from being rejected.\n\nBecause `catch()` just calls `then()`, it supports subclassing.\n\n> **Note:** The examples below are throwing instances of [`Error`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error). As with synchronous [`throw`](/en-US/docs/Web/JavaScript/Reference/Statements/throw) statements, this is considered a good practice; otherwise, the part doing the catching would have to perform checks to see if the argument was a string or an error, and you might lose valuable information such as stack traces.\n\n## Examples\n\n### Using and chaining the catch() method\n\n```js\nconst p1 = new Promise((resolve, reject) => {\n  resolve(\"Success\");\n});\n\np1.then((value) => {\n  console.log(value); // \"Success!\"\n  throw new Error(\"oh, no!\");\n})\n  .catch((e) => {\n    console.error(e.message); // \"oh, no!\"\n  })\n  .then(\n    () => console.log(\"after a catch the chain is restored\"), // \"after a catch the chain is restored\"\n    () => console.log(\"Not fired due to the catch\"),\n  );\n\n// The following behaves the same as above\np1.then((value) => {\n  console.log(value); // \"Success!\"\n  return Promise.reject(\"oh, no!\");\n})\n  .catch((e) => {\n    console.error(e); // \"oh, no!\"\n  })\n  .then(\n    () => console.log(\"after a catch the chain is restored\"), // \"after a catch the chain is restored\"\n    () => console.log(\"Not fired due to the catch\"),\n  );\n```\n\n### Gotchas when throwing errors\n\nThrowing an error will call the `catch()` method most of the time:\n\n```js\nconst p1 = new Promise((resolve, reject) => {\n  throw new Error(\"Uh-oh!\");\n});\n\np1.catch((e) => {\n  console.error(e); // \"Uh-oh!\"\n});\n```\n\nErrors thrown inside asynchronous functions will act like uncaught errors:\n\n```js\nconst p2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    throw new Error(\"Uncaught Exception!\");\n  }, 1000);\n});\n\np2.catch((e) => {\n  console.error(e); // This is never called\n});\n```\n\nErrors thrown after `resolve` is called will be silenced:\n\n```js\nconst p3 = new Promise((resolve, reject) => {\n  resolve();\n  throw new Error(\"Silenced Exception!\");\n});\n\np3.catch((e) => {\n  console.error(e); // This is never called\n});\n```\n\n### catch() is not called if the promise is fulfilled\n\n```js\n// Create a promise which would not call onReject\nconst p1 = Promise.resolve(\"calling next\");\n\nconst p2 = p1.catch((reason) => {\n  // This is never called\n  console.error(\"catch p1!\");\n  console.error(reason);\n});\n\np2.then(\n  (value) => {\n    console.log(\"next promise's onFulfilled\");\n    console.log(value); // calling next\n  },\n  (reason) => {\n    console.log(\"next promise's onRejected\");\n    console.log(reason);\n  },\n);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Promise\")}}\n- {{jsxref(\"Promise.prototype.then()\")}}\n- {{jsxref(\"Promise.prototype.finally()\")}}\n"
    },
    "finally": {
      "index.md": "---\ntitle: Promise.prototype.finally()\nslug: Web/JavaScript/Reference/Global_Objects/Promise/finally\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Promise.finally\n---\n\n{{JSRef}}\n\nThe **`finally()`** method of {{jsxref(\"Promise\")}} instances schedules a function to be called when the promise is settled (either fulfilled or rejected). It immediately returns an equivalent {{jsxref(\"Promise\")}} object, allowing you to [chain](/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining) calls to other promise methods.\n\nThis lets you avoid duplicating code in both the promise's {{jsxref(\"Promise/then\", \"then()\")}} and {{jsxref(\"Promise/catch\", \"catch()\")}} handlers.\n\n{{EmbedInteractiveExample(\"pages/js/promise-finally.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\npromiseInstance.finally(onFinally)\n```\n\n### Parameters\n\n- `onFinally`\n  - : A function to asynchronously execute when this promise becomes settled. Its return value is ignored unless the returned value is a rejected promise. The function is called with no arguments.\n\n### Return value\n\nReturns an equivalent {{jsxref(\"Promise\")}}. If the handler throws an error or returns a rejected promise, the promise returned by `finally()` will be rejected with that value instead. Otherwise, the return value of the handler does not affect the state of the original promise.\n\n## Description\n\nThe `finally()` method can be useful if you want to do some processing or cleanup once the promise is settled, regardless of its outcome.\n\nThe `finally()` method is very similar to calling {{jsxref(\"Promise/then\", \"then(onFinally, onFinally)\")}}. However, there are a couple of differences:\n\n- When creating a function inline, you can pass it once, instead of being forced to either declare it twice, or create a variable for it.\n- The `onFinally` callback does not receive any argument. This use case is for precisely when you _do not care_ about the rejection reason or the fulfillment value, and so there's no need to provide it.\n- A `finally()` call is usually transparent and does not change the eventual state of the original promise. So for example:\n  - Unlike `Promise.resolve(2).then(() => 77, () => {})`, which returns a promise eventually fulfilled with the value `77`, `Promise.resolve(2).finally(() => 77)` returns a promise eventually fulfilled with the value `2`.\n  - Similarly, unlike `Promise.reject(3).then(() => {}, () => 88)`, which returns a promise eventually fulfilled with the value `88`, `Promise.reject(3).finally(() => 88)` returns a promise eventually rejected with the reason `3`.\n\n> **Note:** A `throw` (or returning a rejected promise) in the `finally` callback still rejects the returned promise. For example, both `Promise.reject(3).finally(() => { throw 99; })` and `Promise.reject(3).finally(() => Promise.reject(99))` reject the returned promise with the reason `99`.\n\nLike {{jsxref(\"Promise/catch\", \"catch()\")}}, `finally()` internally calls the `then` method on the object upon which it was called. If `onFinally` is not a function, `then()` is called with `onFinally` as both arguments — which, for {{jsxref(\"Promise.prototype.then()\")}}, means that no useful handler is attached. Otherwise, `then()` is called with two internally created functions, which behave like the following:\n\n> **Warning:** This is only for demonstration purposes and is not a polyfill.\n\n```js\npromise.then(\n  (value) => Promise.resolve(onFinally()).then(() => value),\n  (reason) =>\n    Promise.resolve(onFinally()).then(() => {\n      throw reason;\n    }),\n);\n```\n\nBecause `finally()` calls `then()`, it supports subclassing. Moreover, notice the {{jsxref(\"Promise.resolve()\")}} call above — in reality, `onFinally()`'s return value is resolved using the same algorithm as `Promise.resolve()`, but the actual constructor used to construct the resolved promise will be the subclass. `finally()` gets this constructor through [`promise.constructor[@@species]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/@@species).\n\n## Examples\n\n### Using finally()\n\n```js\nlet isLoading = true;\n\nfetch(myRequest)\n  .then((response) => {\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType && contentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    throw new TypeError(\"Oops, we haven't got JSON!\");\n  })\n  .then((json) => {\n    /* process your JSON further */\n  })\n  .catch((error) => {\n    console.error(error); // this line can also throw, e.g. when console = {}\n  })\n  .finally(() => {\n    isLoading = false;\n  });\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Promise.prototype.finally` in `core-js`](https://github.com/zloirock/core-js#ecmascript-promise)\n- {{jsxref(\"Promise\")}}\n- {{jsxref(\"Promise.prototype.then()\")}}\n- {{jsxref(\"Promise.prototype.catch()\")}}\n"
    },
    "index.md": "---\ntitle: Promise\nslug: Web/JavaScript/Reference/Global_Objects/Promise\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Promise\n---\n\n{{JSRef}}\n\nThe **`Promise`** object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.\n\nTo learn about the way promises work and how you can use them, we advise you to read [Using promises](/en-US/docs/Web/JavaScript/Guide/Using_promises) first.\n\n## Description\n\nA **`Promise`** is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a _promise_ to supply the value at some point in the future.\n\nA `Promise` is in one of these states:\n\n- _pending_: initial state, neither fulfilled nor rejected.\n- _fulfilled_: meaning that the operation was completed successfully.\n- _rejected_: meaning that the operation failed.\n\nThe _eventual state_ of a pending promise can either be _fulfilled_ with a value or _rejected_ with a reason (error).\nWhen either of these options occur, the associated handlers queued up by a promise's `then` method are called. If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached.\n\nA promise is said to be _settled_ if it is either fulfilled or rejected, but not pending.\n\n![Flowchart showing how the Promise state transitions between pending, fulfilled, and rejected via then/catch handlers. A pending promise can become either fulfilled or rejected. If fulfilled, the \"on fulfillment\" handler, or first parameter of the then() method, is executed and carries out further asynchronous actions. If rejected, the error handler, either passed as the second parameter of the then() method or as the sole parameter of the catch() method, gets executed.](promises.png)\n\nYou will also hear the term _resolved_ used with promises — this means that the promise is settled or \"locked-in\" to match the eventual state of another promise, and further resolving or rejecting it has no effect. The [States and fates](https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md) document from the original Promise proposal contains more details about promise terminology. Colloquially, \"resolved\" promises are often equivalent to \"fulfilled\" promises, but as illustrated in \"States and fates\", resolved promises can be pending or rejected as well. For example:\n\n```js\nnew Promise((resolveOuter) => {\n  resolveOuter(\n    new Promise((resolveInner) => {\n      setTimeout(resolveInner, 1000);\n    }),\n  );\n});\n```\n\nThis promise is already _resolved_ at the time when it's created (because the `resolveOuter` is called synchronously), but it is resolved with another promise, and therefore won't be _fulfilled_ until 1 second later, when the inner promise fulfills. In practice, the \"resolution\" is often done behind the scenes and not observable, and only its fulfillment or rejection are.\n\n> **Note:** Several other languages have mechanisms for lazy evaluation and deferring a computation, which they also call \"promises\", e.g. Scheme. Promises in JavaScript represent processes that are already happening, which can be chained with callback functions. If you are looking to lazily evaluate an expression, consider using a function with no arguments e.g. `f = () => expression` to create the lazily-evaluated expression, and `f()` to evaluate the expression immediately.\n\n### Chained Promises\n\nThe methods {{jsxref(\"Promise.prototype.then()\")}}, {{jsxref(\"Promise.prototype.catch()\")}}, and {{jsxref(\"Promise.prototype.finally()\")}} are used to associate further action with a promise that becomes settled. As these methods return promises, they can be chained.\n\nThe `.then()` method takes up to two arguments; the first argument is a callback function for the fulfilled case of the promise, and the second argument is a callback function for the rejected case. Each `.then()` returns a newly generated promise object, which can optionally be used for chaining; for example:\n\n```js\nconst myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"foo\");\n  }, 300);\n});\n\nmyPromise\n  .then(handleFulfilledA, handleRejectedA)\n  .then(handleFulfilledB, handleRejectedB)\n  .then(handleFulfilledC, handleRejectedC);\n```\n\nProcessing continues to the next link of the chain even when a `.then()` lacks a callback function. Therefore, a chain can safely omit every _rejection_ callback function until the final `.catch()`.\n\nHandling a rejected promise in each `.then()` has consequences further down the promise chain. Sometimes there is no choice, because an error must be handled immediately. In such cases we must throw an error of some type to maintain error state down the chain. On the other hand, in the absence of an immediate need, it is simpler to leave out error handling until a final `.catch()` statement. A `.catch()` is really just a `.then()` without a slot for a callback function for the case when the promise is fulfilled.\n\n```js\nmyPromise\n  .then(handleFulfilledA)\n  .then(handleFulfilledB)\n  .then(handleFulfilledC)\n  .catch(handleRejectedAny);\n```\n\nUsing [arrow functions](/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) for the callback functions, implementation of the promise chain might look something like this:\n\n```js\nmyPromise\n  .then((value) => `${value} and bar`)\n  .then((value) => `${value} and bar again`)\n  .then((value) => `${value} and again`)\n  .then((value) => `${value} and again`)\n  .then((value) => {\n    console.log(value);\n  })\n  .catch((err) => {\n    console.error(err);\n  });\n```\n\n> **Note:** For faster execution, all synchronous actions should preferably be done within one handler, otherwise it would take several ticks to execute all handlers in sequence.\n\nThe termination condition of a promise determines the \"settled\" state of the next promise in the chain. A \"fulfilled\" state indicates a successful completion of the promise, while a \"rejected\" state indicates a lack of success. The return value of each fulfilled promise in the chain is passed along to the next `.then()`, while the reason for rejection is passed along to the next rejection-handler function in the chain.\n\nThe promises of a chain are nested in one another, but get popped like the top of a stack. The first promise in the chain is most deeply nested and is the first to pop.\n\n```plain\n(promise D, (promise C, (promise B, (promise A) ) ) )\n```\n\nWhen a `nextValue` is a promise, the effect is a dynamic replacement. The `return` causes a promise to be popped, but the `nextValue` promise is pushed into its place. For the nesting shown above, suppose the `.then()` associated with \"promise B\" returns a `nextValue` of \"promise X\". The resulting nesting would look like this:\n\n```plain\n(promise D, (promise C, (promise X) ) )\n```\n\nA promise can participate in more than one nesting. For the following code, the transition of `promiseA` into a \"settled\" state will cause both instances of `.then()` to be invoked.\n\n```js\nconst promiseA = new Promise(myExecutorFunc);\nconst promiseB = promiseA.then(handleFulfilled1, handleRejected1);\nconst promiseC = promiseA.then(handleFulfilled2, handleRejected2);\n```\n\nAn action can be assigned to an already \"settled\" promise. In that case, the action (if appropriate) will be performed at the first asynchronous opportunity. Note that promises are guaranteed to be asynchronous. Therefore, an action for an already \"settled\" promise will occur only after the stack has cleared and a clock-tick has passed. The effect is much like that of `setTimeout(action, 0)`.\n\n```js\nconst promiseA = new Promise((resolve, reject) => {\n  resolve(777);\n});\n// At this point, \"promiseA\" is already settled.\npromiseA.then((val) => console.log(\"asynchronous logging has val:\", val));\nconsole.log(\"immediate logging\");\n\n// produces output in this order:\n// immediate logging\n// asynchronous logging has val: 777\n```\n\n### Thenables\n\nThe JavaScript ecosystem had made multiple Promise implementations long before it became part of the language. Despite being represented differently internally, at the minimum, all Promise-like objects implement the _Thenable_ interface. A thenable implements the [`.then()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) method, which is called with two callbacks: one for when the promise is fulfilled, one for when it's rejected. Promises are thenables as well.\n\nTo interoperate with the existing Promise implementations, the language allows using thenables in place of promises. For example, [`Promise.resolve`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve) will not only resolve promises, but also trace thenables.\n\n```js\nconst aThenable = {\n  then(onFulfilled, onRejected) {\n    onFulfilled({\n      // The thenable is fulfilled with another thenable\n      then(onFulfilled, onRejected) {\n        onFulfilled(42);\n      },\n    });\n  },\n};\n\nPromise.resolve(aThenable); // A promise fulfilled with 42\n```\n\n### Promise concurrency\n\nThe `Promise` class offers four static methods to facilitate async task [concurrency](https://en.wikipedia.org/wiki/Concurrent_computing):\n\n- {{jsxref(\"Promise.all()\")}}\n  - : Fulfills when **all** of the promises fulfill; rejects when **any** of the promises rejects.\n- {{jsxref(\"Promise.allSettled()\")}}\n  - : Fulfills when **all** promises settle.\n- {{jsxref(\"Promise.any()\")}}\n  - : Fulfills when **any** of the promises fulfills; rejects when **all** of the promises reject.\n- {{jsxref(\"Promise.race()\")}}\n  - : Settles when **any** of the promises settles. In other words, fulfills when any of the promises fulfills; rejects when any of the promises rejects.\n\nAll these methods take an [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) of promises ([thenables](#thenables), to be exact) and return a new promise. They all support subclassing, which means they can be called on subclasses of `Promise`, and the result will be a promise of the subclass type. To do so, the subclass's constructor must implement the same signature as the [`Promise()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor — accepting a single `executor` function that can be called with the `resolve` and `reject` callbacks as parameters. The subclass must also have a `resolve` static method that can be called like {{jsxref(\"Promise.resolve()\")}} to resolve values to promises.\n\nNote that JavaScript is [single-threaded](/en-US/docs/Glossary/Thread) by nature, so at a given instant, only one task will be executing, although control can shift between different promises, making execution of the promises appear concurrent. [Parallel execution](https://en.wikipedia.org/wiki/Parallel_computing) in JavaScript can only be achieved through [worker threads](/en-US/docs/Web/API/Web_Workers_API).\n\n## Constructor\n\n- {{jsxref(\"Promise/Promise\", \"Promise()\")}}\n  - : Creates a new `Promise` object. The constructor is primarily used to wrap functions that do not already support promises.\n\n## Static properties\n\n- {{jsxref(\"Promise/@@species\", \"Promise[@@species]\")}}\n  - : Returns the constructor used to construct return values from promise methods.\n\n## Static methods\n\n- {{jsxref(\"Promise.all()\")}}\n  - : Takes an iterable of promises as input and returns a single `Promise`. This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable is passed), with an array of the fulfillment values. It rejects when any of the input's promises reject, with this first rejection reason.\n- {{jsxref(\"Promise.allSettled()\")}}\n  - : Takes an iterable of promises as input and returns a single `Promise`. This returned promise fulfills when all of the input's promises settle (including when an empty iterable is passed), with an array of objects that describe the outcome of each promise.\n- {{jsxref(\"Promise.any()\")}}\n  - : Takes an iterable of promises as input and returns a single `Promise`. This returned promise fulfills when any of the input's promises fulfill, with this first fulfillment value. It rejects when all of the input's promises reject (including when an empty iterable is passed), with an {{jsxref(\"AggregateError\")}} containing an array of rejection reasons.\n- {{jsxref(\"Promise.race()\")}}\n  - : Takes an iterable of promises as input and returns a single `Promise`. This returned promise settles with the eventual state of the first promise that settles.\n- {{jsxref(\"Promise.reject()\")}}\n  - : Returns a new `Promise` object that is rejected with the given reason.\n- {{jsxref(\"Promise.resolve()\")}}\n  - : Returns a `Promise` object that is resolved with the given value. If the value is a thenable (i.e. has a `then` method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise, the returned promise will be fulfilled with the value.\n- {{jsxref(\"Promise.withResolvers()\")}}\n  - : Returns an object containing a new `Promise` object and two functions to resolve or reject it, corresponding to the two parameters passed to the executor of the {{jsxref(\"Promise/Promise\", \"Promise()\")}} constructor.\n\n## Instance properties\n\nThese properties are defined on `Promise.prototype` and shared by all `Promise` instances.\n\n- {{jsxref(\"Object/constructor\", \"Promise.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Promise` instances, the initial value is the {{jsxref(\"Promise/Promise\", \"Promise\")}} constructor.\n- `Promise.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Promise\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Promise.prototype.catch()\")}}\n  - : Appends a rejection handler callback to the promise, and returns a new promise resolving to the return value of the callback if it is called, or to its original fulfillment value if the promise is instead fulfilled.\n- {{jsxref(\"Promise.prototype.finally()\")}}\n  - : Appends a handler to the promise, and returns a new promise that is resolved when the original promise is resolved. The handler is called when the promise is settled, whether fulfilled or rejected.\n- {{jsxref(\"Promise.prototype.then()\")}}\n  - : Appends fulfillment and rejection handlers to the promise, and returns a new promise resolving to the return value of the called handler, or to its original settled value if the promise was not handled (i.e. if the relevant handler `onFulfilled` or `onRejected` is not a function).\n\n## Examples\n\n### Basic Example\n\n```js\nconst myFirstPromise = new Promise((resolve, reject) => {\n  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.\n  // In this example, we use setTimeout(...) to simulate async code.\n  // In reality, you will probably be using something like XHR or an HTML API.\n  setTimeout(() => {\n    resolve(\"Success!\"); // Yay! Everything went well!\n  }, 250);\n});\n\nmyFirstPromise.then((successMessage) => {\n  // successMessage is whatever we passed in the resolve(...) function above.\n  // It doesn't have to be a string, but if it is only a succeed message, it probably will be.\n  console.log(`Yay! ${successMessage}`);\n});\n```\n\n### Example with diverse situations\n\nThis example shows diverse techniques for using Promise capabilities and diverse situations that can occur. To understand this, start by scrolling to the bottom of the code block, and examine the promise chain. Upon provision of an initial promise, a chain of promises can follow. The chain is composed of `.then()` calls, and typically (but not necessarily) has a single `.catch()` at the end, optionally followed by `.finally()`. In this example, the promise chain is initiated by a custom-written `new Promise()` construct; but in actual practice, promise chains more typically start with an API function (written by someone else) that returns a promise.\n\nThe example function `tetheredGetNumber()` shows that a promise generator will utilize `reject()` while setting up an asynchronous call, or within the call-back, or both. The function `promiseGetWord()` illustrates how an API function might generate and return a promise in a self-contained manner.\n\nNote that the function `troubleWithGetNumber()` ends with a `throw`. That is forced because a promise chain goes through all the `.then()` promises, even after an error, and without the `throw`, the error would seem \"fixed\". This is a hassle, and for this reason, it is common to omit `onRejected` throughout the chain of `.then()` promises, and just have a single `onRejected` in the final `catch()`.\n\nThis code can be run under NodeJS. Comprehension is enhanced by seeing the errors actually occur. To force more errors, change the `threshold` values.\n\n```js\n// To experiment with error handling, \"threshold\" values cause errors randomly\nconst THRESHOLD_A = 8; // can use zero 0 to guarantee error\n\nfunction tetheredGetNumber(resolve, reject) {\n  setTimeout(() => {\n    const randomInt = Date.now();\n    const value = randomInt % 10;\n    if (value < THRESHOLD_A) {\n      resolve(value);\n    } else {\n      reject(`Too large: ${value}`);\n    }\n  }, 500);\n}\n\nfunction determineParity(value) {\n  const isOdd = value % 2 === 1;\n  return { value, isOdd };\n}\n\nfunction troubleWithGetNumber(reason) {\n  const err = new Error(\"Trouble getting number\", { cause: reason });\n  console.error(err);\n  throw err;\n}\n\nfunction promiseGetWord(parityInfo) {\n  return new Promise((resolve, reject) => {\n    const { value, isOdd } = parityInfo;\n    if (value >= THRESHOLD_A - 1) {\n      reject(`Still too large: ${value}`);\n    } else {\n      parityInfo.wordEvenOdd = isOdd ? \"odd\" : \"even\";\n      resolve(parityInfo);\n    }\n  });\n}\n\nnew Promise(tetheredGetNumber)\n  .then(determineParity, troubleWithGetNumber)\n  .then(promiseGetWord)\n  .then((info) => {\n    console.log(`Got: ${info.value}, ${info.wordEvenOdd}`);\n    return info;\n  })\n  .catch((reason) => {\n    if (reason.cause) {\n      console.error(\"Had previously handled error\");\n    } else {\n      console.error(`Trouble with promiseGetWord(): ${reason}`);\n    }\n  })\n  .finally((info) => console.log(\"All done\"));\n```\n\n### Advanced Example\n\nThis small example shows the mechanism of a `Promise`. The `testPromise()` method is called each time the {{HTMLElement(\"button\")}} is clicked. It creates a promise that will be fulfilled, using {{domxref(\"setTimeout()\")}}, to the promise count (number starting from 1) every 1-3 seconds, at random. The `Promise()` constructor is used to create the promise.\n\nThe fulfillment of the promise is logged, via a fulfill callback set using {{jsxref(\"Promise/then\", \"p1.then()\")}}. A few logs show how the synchronous part of the method is decoupled from the asynchronous completion of the promise.\n\nBy clicking the button several times in a short amount of time, you'll even see the different promises being fulfilled one after another.\n\n#### HTML\n\n```html\n<button id=\"make-promise\">Make a promise!</button>\n<div id=\"log\"></div>\n```\n\n#### JavaScript\n\n```js\n\"use strict\";\n\nlet promiseCount = 0;\n\nfunction testPromise() {\n  const thisPromiseCount = ++promiseCount;\n  const log = document.getElementById(\"log\");\n  // begin\n  log.insertAdjacentHTML(\"beforeend\", `${thisPromiseCount}) Started<br>`);\n  // We make a new promise: we promise a numeric count of this promise,\n  // starting from 1 (after waiting 3s)\n  const p1 = new Promise((resolve, reject) => {\n    // The executor function is called with the ability\n    // to resolve or reject the promise\n    log.insertAdjacentHTML(\n      \"beforeend\",\n      `${thisPromiseCount}) Promise constructor<br>`,\n    );\n    // This is only an example to create asynchronism\n    setTimeout(\n      () => {\n        // We fulfill the promise\n        resolve(thisPromiseCount);\n      },\n      Math.random() * 2000 + 1000,\n    );\n  });\n\n  // We define what to do when the promise is resolved with the then() call,\n  // and what to do when the promise is rejected with the catch() call\n  p1.then((val) => {\n    // Log the fulfillment value\n    log.insertAdjacentHTML(\"beforeend\", `${val}) Promise fulfilled<br>`);\n  }).catch((reason) => {\n    // Log the rejection reason\n    console.log(`Handle rejected promise (${reason}) here.`);\n  });\n  // end\n  log.insertAdjacentHTML(\"beforeend\", `${thisPromiseCount}) Promise made<br>`);\n}\n\nconst btn = document.getElementById(\"make-promise\");\nbtn.addEventListener(\"click\", testPromise);\n```\n\n#### Result\n\n{{EmbedLiveSample(\"Advanced_Example\", \"500\", \"200\")}}\n\n### Loading an image with XHR\n\nAnother simple example using `Promise` and {{domxref(\"XMLHttpRequest\")}} to load an image is available at the MDN GitHub [js-examples](https://github.com/mdn/js-examples/tree/main/promises-test) repository. You can also [see it in action](https://mdn.github.io/js-examples/promises-test/). Each step is commented on and allows you to follow the Promise and XHR architecture closely.\n\n### Incumbent settings object tracking\n\nA settings object is an [environment](https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object) that provides additional information when JavaScript code is running. This includes the realm and module map, as well as HTML specific information such as the origin. The incumbent settings object is tracked in order to ensure that the browser knows which one to use for a given piece of user code.\n\nTo better picture this, we can take a closer look at how the realm might be an issue. A **realm** can be roughly thought of as the global object. What is unique about realms is that they hold all of the necessary information to run JavaScript code. This includes objects like [`Array`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) and [`Error`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error). Each settings object has its own \"copy\" of these and they are not shared. That can cause some unexpected behavior in relation to promises. In order to get around this, we track something called the **incumbent settings object**. This represents information specific to the context of the user code responsible for a certain function call.\n\nTo illustrate this a bit further we can take a look at how an [`<iframe>`](/en-US/docs/Web/HTML/Element/iframe) embedded in a document communicates with its host. Since all web APIs are aware of the incumbent settings object, the following will work in all browsers:\n\n```html\n<!doctype html> <iframe></iframe>\n<!-- we have a realm here -->\n<script>\n  // we have a realm here as well\n  const bound = frames[0].postMessage.bind(frames[0], \"some data\", \"*\");\n  // bound is a built-in function — there is no user\n  // code on the stack, so which realm do we use?\n  setTimeout(bound);\n  // this still works, because we use the youngest\n  // realm (the incumbent) on the stack\n</script>\n```\n\nThe same concept applies to promises. If we modify the above example a little bit, we get this:\n\n```html\n<!doctype html> <iframe></iframe>\n<!-- we have a realm here -->\n<script>\n  // we have a realm here as well\n  const bound = frames[0].postMessage.bind(frames[0], \"some data\", \"*\");\n  // bound is a built in function — there is no user\n  // code on the stack — which realm do we use?\n  Promise.resolve(undefined).then(bound);\n  // this still works, because we use the youngest\n  // realm (the incumbent) on the stack\n</script>\n```\n\nIf we change this so that the `<iframe>` in the document is listening to post messages, we can observe the effect of the incumbent settings object:\n\n```html\n<!-- y.html -->\n<!doctype html>\n<iframe src=\"x.html\"></iframe>\n<script>\n  const bound = frames[0].postMessage.bind(frames[0], \"some data\", \"*\");\n  Promise.resolve(undefined).then(bound);\n</script>\n```\n\n```html\n<!-- x.html -->\n<!doctype html>\n<script>\n  window.addEventListener(\n    \"message\",\n    (event) => {\n      document.querySelector(\"#text\").textContent = \"hello\";\n      // this code will only run in browsers that track the incumbent settings object\n      console.log(event);\n    },\n    false,\n  );\n</script>\n```\n\nIn the above example, the inner text of the `<iframe>` will be updated only if the incumbent settings object is tracked. This is because without tracking the incumbent, we may end up using the wrong environment to send the message.\n\n> **Note:** Currently, incumbent realm tracking is fully implemented in Firefox, and has partial implementations in Chrome and Safari.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Promise` in `core-js`](https://github.com/zloirock/core-js#ecmascript-promise)\n- [Using promises](/en-US/docs/Web/JavaScript/Guide/Using_promises) guide\n- [Promises/A+ specification](https://promisesaplus.com/)\n- [JavaScript Promises: an introduction](https://web.dev/articles/promises) on web.dev (2013)\n- [Callbacks, Promises, and Coroutines: Asynchronous Programming Patterns in JavaScript](https://www.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript) slide show by Domenic Denicola (2011)\n",
    "promise": {
      "index.md": "---\ntitle: Promise() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Promise/Promise\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Promise.Promise\n---\n\n{{JSRef}}\n\nThe **`Promise()`** constructor creates {{jsxref(\"Promise\")}} objects. It is primarily used to wrap callback-based APIs that do not already support promises.\n\n{{EmbedInteractiveExample(\"pages/js/promise-constructor.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Promise(executor)\n```\n\n> **Note:** `Promise()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `executor`\n  - : A {{jsxref(\"function\")}} to be executed by the constructor. It receives two functions as parameters: `resolveFunc` and `rejectFunc`. Any errors thrown in the `executor` will cause the promise to be rejected, and the return value will be neglected. The semantics of `executor` are detailed below.\n\n### Return value\n\nWhen called via `new`, the `Promise` constructor returns a promise object. The promise object will become _resolved_ when either of the functions `resolveFunc` or `rejectFunc` are invoked. Note that if you call `resolveFunc` or `rejectFunc` and pass another `Promise` object as an argument, it can be said to be \"resolved\", but still not \"settled\". See the [Promise description](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#description) for more explanation.\n\n## Description\n\nTraditionally (before promises), asynchronous tasks were designed as callbacks.\n\n```js\nreadFile(\"./data.txt\", (error, result) => {\n  // This callback will be called when the task is done, with the\n  // final `error` or `result`. Any operation dependent on the\n  // result must be defined within this callback.\n});\n// Code here is immediately executed after the `readFile` request\n// is fired. It does not wait for the callback to be called, hence\n// making `readFile` \"asynchronous\".\n```\n\nTo take advantage of the readability improvement and language features offered by promises, the `Promise()` constructor allows one to transform the callback-based API to a promise-based one.\n\n> **Note:** If your task is already promise-based, you likely do not need the `Promise()` constructor.\n\nThe `executor` is custom code that ties an outcome in a callback to a promise. You, the programmer, write the `executor`. Its signature is expected to be:\n\n```js\nfunction executor(resolveFunc, rejectFunc) {\n  // Typically, some asynchronous operation that accepts a callback,\n  // like the `readFile` function above\n}\n```\n\n`resolveFunc` and `rejectFunc` are also functions, and you can give them whatever actual names you want. Their signatures are simple: they accept a single parameter of any type.\n\n```js\nresolveFunc(value); // call on resolved\nrejectFunc(reason); // call on rejected\n```\n\nThe `value` parameter passed to `resolveFunc` can be another promise object, in which case the newly constructed promise's state will be \"locked in\" to the promise passed (as part of the [resolution](#the_resolve_function) promise). The `rejectFunc` has semantics close to the [`throw`](/en-US/docs/Web/JavaScript/Reference/Statements/throw) statement, so `reason` is typically an [`Error`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) instance. If either `value` or `reason` is omitted, the promise is fulfilled/rejected with `undefined`.\n\nThe `executor`'s completion state has limited effect on the promise's state:\n\n- The `executor` return value is ignored. `return` statements within the `executor` merely impact control flow and alter whether a part of the function is executed, but do not have any impact on the promise's fulfillment value. If `executor` exits and it's impossible for `resolveFunc` or `rejectFunc` to be called in the future (for example, there are no async tasks scheduled), then the promise remains pending forever.\n- If an error is thrown in the `executor`, the promise is rejected, unless `resolveFunc` or `rejectFunc` has already been called.\n\n> **Note:** The existence of pending promises does not prevent the program from exiting. If the event loop is empty, the program exits despite any pending promises (because those are necessarily forever-pending).\n\nHere's a summary of the typical flow:\n\n1. At the time when the constructor generates the new `Promise` object, it also generates a corresponding pair of functions for `resolveFunc` and `rejectFunc`; these are \"tethered\" to the `Promise` object.\n2. `executor` typically wraps some asynchronous operation which provides a callback-based API. The callback (the one passed to the original callback-based API) is defined within the `executor` code, so it has access to the `resolveFunc` and `rejectFunc`.\n3. The `executor` is called synchronously (as soon as the `Promise` is constructed) with the `resolveFunc` and `rejectFunc` functions as arguments.\n4. The code within the `executor` has the opportunity to perform some operation. The eventual completion of the asynchronous task is communicated with the promise instance via the side effect caused by `resolveFunc` or `rejectFunc`. The side effect is that the `Promise` object becomes \"resolved\".\n   - If `resolveFunc` is called first, the value passed will be [resolved](#the_resolve_function). The promise may stay pending (in case another [thenable](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) is passed), become fulfilled (in most cases where a non-thenable value is passed), or become rejected (in case of an invalid resolution value).\n   - If `rejectFunc` is called first, the promise instantly becomes rejected.\n   - Once one of the resolving functions (`resolveFunc` or `rejectFunc`) is called, the promise stays resolved. Only the first call to `resolveFunc` or `rejectFunc` affects the promise's eventual state, and subsequent calls to either function can neither change the fulfillment value/rejection reason nor toggle its eventual state from \"fulfilled\" to \"rejected\" or opposite.\n   - If `executor` exits by throwing an error, then the promise is rejected. However, the error is ignored if one of the resolving functions has already been called (so that the promise is already resolved).\n   - Resolving the promise does not necessarily cause the promise to become fulfilled or rejected (i.e. settled). The promise may still be pending because it's resolved with another thenable, but its eventual state will match that of the resolved thenable.\n5. Once the promise settles, it (asynchronously) invokes any further handlers associated through {{jsxref(\"Promise/then\", \"then()\")}}, {{jsxref(\"Promise/catch\", \"catch()\")}}, or {{jsxref(\"Promise/finally\", \"finally()\")}}. The eventual fulfillment value or rejection reason is passed to the invocation of fulfillment and rejection handlers as an input parameter (see [Chained Promises](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#chained_promises)).\n\nFor example, the callback-based `readFile` API above can be transformed into a promise-based one.\n\n```js\nconst readFilePromise = (path) =>\n  new Promise((resolve, reject) => {\n    readFile(path, (error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n\nreadFilePromise(\"./data.txt\")\n  .then((result) => console.log(result))\n  .catch((error) => console.error(\"Failed to read data\"));\n```\n\nThe `resolve` and `reject` callbacks are only available within the scope of the executor function, which means you can't access them after the promise is constructed. If you want to construct the promise before deciding how to resolve it, you can use the {{jsxref(\"Promise.withResolvers()\")}} method instead, which exposes the `resolve` and `reject` functions.\n\n### The resolve function\n\nThe `resolve` function has the following behaviors:\n\n- If it's called with the same value as the newly created promise (the promise it's \"tethered to\"), the promise is rejected with a {{jsxref(\"TypeError\")}}.\n- If it's called with a non-[thenable](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) value (a primitive, or an object whose `then` property is not callable, including when the property is not present), the promise is immediately fulfilled with that value.\n- If it's called with a thenable value (including another `Promise` instance), then the thenable's `then` method is saved and called in the future (it's always called asynchronously). The `then` method will be called with two callbacks, which are two new functions with the exact same behaviors as the `resolveFunc` and `rejectFunc` passed to the `executor` function. If calling the `then` method throws, then the current promise is rejected with the thrown error.\n\nIn the last case, it means code like:\n\n```js\nnew Promise((resolve, reject) => {\n  resolve(thenable);\n});\n```\n\nIs roughly equivalent to:\n\n```js\nnew Promise((resolve, reject) => {\n  try {\n    thenable.then(\n      (value) => resolve(value),\n      (reason) => reject(reason),\n    );\n  } catch (e) {\n    reject(e);\n  }\n});\n```\n\nExcept that in the `resolve(thenable)` case:\n\n1. `resolve` is called synchronously, so that calling `resolve` or `reject` again has no effect, even when the handlers attached through `anotherPromise.then()` are not called yet.\n2. The `then` method is called asynchronously, so that the promise will never be instantly resolved if a thenable is passed.\n\nBecause `resolve` is called again with whatever `thenable.then()` passes to it as `value`, the resolver function is able to flatten nested thenables, where a thenable calls its `onFulfilled` handler with another thenable. The effect is that the fulfillment handler of a real promise will never receive a thenable as its fulfillment value.\n\n## Examples\n\n### Turning a callback-based API into a promise-based one\n\nTo provide a function with promise functionality, have it return a promise by calling the `resolve` and `reject` functions at the correct times.\n\n```js\nfunction myAsyncFunction(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url);\n    xhr.onload = () => resolve(xhr.responseText);\n    xhr.onerror = () => reject(xhr.statusText);\n    xhr.send();\n  });\n}\n```\n\n### Effect of calling resolveFunc\n\nCalling `resolveFunc` causes the promise to become resolved, so that calling `resolveFunc` or `rejectFunc` again has no effect. However, the promise may be in any of the states: pending, fulfilled, or rejected.\n\nThis `pendingResolved` promise is resolved the time it's created, because it has already been \"locked in\" to match the eventual state of the inner promise, and calling `resolveOuter` or `rejectOuter` or throwing an error later in the executor has no effect on its eventual state. However, the inner promise is still pending until 100ms later, so the outer promise is also pending:\n\n```js\nconst pendingResolved = new Promise((resolveOuter, rejectOuter) => {\n  resolveOuter(\n    new Promise((resolveInner) => {\n      setTimeout(() => {\n        resolveInner(\"inner\");\n      }, 100);\n    }),\n  );\n});\n```\n\nThis `fulfilledResolved` promise becomes fulfilled the moment it's resolved, because it's resolved with a non-thenable value. However, when it's created, it's unresolved, because neither `resolve` nor `reject` has been called yet. An unresolved promise is necessarily pending:\n\n```js\nconst fulfilledResolved = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"outer\");\n  }, 100);\n});\n```\n\nCalling `rejectFunc` obviously causes the promise to reject. However, there are also two ways to cause the promise to instantly become rejected even when the `resolveFunc` callback is called.\n\n```js\n// 1. Resolving with the promise itself\nconst rejectedResolved1 = new Promise((resolve) => {\n  // Note: resolve has to be called asynchronously,\n  // so that the rejectedResolved1 variable is initialized\n  setTimeout(() => resolve(rejectedResolved1)); // TypeError: Chaining cycle detected for promise #<Promise>\n});\n\n// 2. Resolving with an object which throws when accessing the `then` property\nconst rejectedResolved2 = new Promise((resolve) => {\n  resolve({\n    get then() {\n      throw new Error(\"Can't get then property\");\n    },\n  });\n});\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Promise` in `core-js`](https://github.com/zloirock/core-js#ecmascript-promise)\n- [Using promises](/en-US/docs/Web/JavaScript/Guide/Using_promises) guide\n- {{jsxref(\"Promise.withResolvers()\")}}\n"
    },
    "promises.png": "�PNG\r\n\u001a\n\u0000\u0000\u0000\rIHDR\u0000\u0000\u0003!\u0000\u0000\u0001)\b\u0003\u0000\u0000\u0000��݅\u0000\u0000\u0000\u0004gAMA\u0000\u0000��\u000b�a\u0005\u0000\u0000\u0000\u0001sRGB\u0000��\u001c�\u0000\u0000\u0003\u0000PLTE���\t\t\t  \u001f���\u0010\u0010\u0010���*'t\u0000\u0000\u0000��{���\u0019\u0019\u0019\u0006\u0004\u0005��i-,,������\u0014\u0014\u0014��w\f\f\f��񂂂���������'&&\"-���������212%(z&%s������������988���|1\u000e�����ߍ�����\u0001\u0003\u0012[[[FFF���qqqTTT���~~}������KJJvvv��֠��jjj��4���zzz���\u0000\u0000\u0007E\u0012>��q���``_��������ꛛ����'\u000f;������\u0017T����NNN������BCC�����������\u0011/�eee������QQQ���������؇0���<<<��������.������u#������*;����#\u0003\u0012@@@���!\u0012P\u0005\r-%\u000e\u0002\\\u0017\u001d9��469\u000fD���������F#\f����<���آdU����p��������l��9\u0017\n�޹\u0004\u0016:&x�F\u00115���\u0010D�.\u000e\u0003���͍S���\u000e\u001bd�|G����5 �i\u001f������\u000e8�\u001ba�\u0010%u�}/�X\u0017=���ɊG\u001b����E���.\"f����[#\u0003\u0013RS\u001a:\u0001\u0007C�7\r���U��'Y��R>\u0013,XXX��f#4`�����օm#,�v2�܍.\r,\u00170Y�ڬ\u00177i\u001fAoc��\u001el��߽���\u0015\u0003\u00034\u0019U�up���ɓ���Y\u0010\u0004\u000e2F\u0012\"���F�����=\u001bSr�ܺ��N~�������I\u001fQU7\u0013���*\u0019Vj����@\u0018���|>X��s�_8������KB�,g�߷��c^���C\u000e(A��vK��뀋�D�Ȱ��}�ӫ��s��Wxu���gX��DEfW��|`G&���d�|ڸ�������u�a9\u00157��Ϗ����h���ye��ӖV:m)R�>\u0000\u0000\u001aaIDATx��yXT�\u0019���\\�uXd\u0013�\u0000ꈢA\u0002��Q\u0014)\b\u0011A\u0010\u0014#�������� .�X�`\u00017ą��ш��\u0016Mܣ���5���\u0018MZ��<�\u001f=w\u0019`�\u0019'\u0003���{��c���{��}���s�C\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@[#icpǁ�\u0019bԗ\u0003\u0000�\u0000\u0000C\u0000�!\u0000�\u0010\u0018\u0002`\b\f\u00010\u0004�\u0000\u0018\u0002C\u0000�!\u0000�\u0010\u0000`\b\u00000\u0004\u0000\u0018\u0002\u0000\f\u0001��2�u��U'\u001b\u0018\u0002`�ZC6~+�!�M1��\nɑ;$c�\u0019�\rQ�'�����&��Q��I�`��G��p�Ւ�\u0007�l���?%f�H��d\u0018\u0002�ѐ��ͱ��**�>��gQeYt�,�lʆM�\u0012�\u000fFn^*��V7�o�YV��Ob�e'\t#��a\b0FC��薶�HZ��\"^�7P~���\u0004bgZ�^�`��vS\u000e��ۜ!OS�JIL��\u001fi�\u001f\fC�1\u001a���z��\"i�g�/O�_�R.535'f�����Q?$�o�Y�FR\u000b������0\u0004\u0018�!L��{��Hz�\u0006sJ6�=x�,�\b��)W�\u000b�)�C��v�\u0018�R.\u0018�\u001f�\u0004C��\u0019\"\n.[~J���r��R�,��+��\u0004C��\"/n��qC9�o�\u0016�i\u001drP�Cx���a\b0�,+U�s�%�a\u0015����\u001c\u0019\r\u000e�!�\u000bV��Z?�ogTlo0�ŏ\u0014\u000e�!�\b\r\u0011p\u0017J���\u0006\u0019X�C��\u0019�/\u0007��\u0019�\u0013~�_\u001b^\u000e\u0000�2�����\u0006C\u0000\f1��\u0001\u0000C\u0000�!\u0000�\u0010\u0000`\b\f\u00010\u0004�\u0000\u0018\u0002C\u0000\f�!\u0000�\u0010\u0000`\b\u00000\u0004\u0000\u0018\u0002\u0000\f\u0001@�\f�~�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�Ɛ��A���0\u001ew\u0003��t���\u0004�ĭ\u0000�9��f\u0005q��\u0000�\u0019�\u0003탨 }q'\u0000h�\u0010gq�P\"��>�{\u0001@c\u000exZ�c�s��{�\u0019\u00004½�ɸ8��x�\r\u0000\u001a�im=M�\u0016w\u0003\u0018 �\u0003=�kP\u0017��.&�l+����q&=�q���\u0019BZ�\u0010�~\u0016��́���q�����\u000b9�5�Z��DR���#�&�+gd��\u001a{~��\u0015;w��\u0006\u0006h\b�Yyޕ\u0013��ˢ�b�жb�8�j�!#��\u0003'�^\u0003�4�۬<8;��\u0014��\f��;֟T\u0010��-4�] \u001c�;\r\f\u0014n���!b�8�XiH���z�\u0013�iY\u001d�/\u0010\u0002`���\u0007\u000f���w��1�kG�8�(\u0017\b\u00010PD�f�1{��\u001eJ�q��V��\u001a\"��:�Z�:�~�\u0010\u0000C�߬\\tn^ȱ\u001d$�b�����\\\u0016�f�\u001e��Ր\u0006\u000b�\u0000\u0018M�Ŵ҉�@\b�z�@\b�z�@\b�z�@\b�z�@\b�z�@\b�z�@\b�z�@\b�\u0006�@\b�z�@\b�z�@\b�z�@\b\f\u0014�+\b�FC��j\u0000�\u0010\u0000`\b\u00000\u0004\u0000\u0018\u0002C\u0000\f�!\u0000��\u0010\u0000C`\b\u00000\u0004\u0000\u0018\u0002\u0000\f\u0001\u0000�\u0000\u0000C\u0000�!\u0000�\u0010\u0018\u0002`\b\f\u00010\u0004�\u0000\u0018��W\u0013�y+>&\u0000CԒV���x)��\u001f��\u0017��!�\u0003=�L͛�\u0002_�P�#�\u0012��͕�N\r�☶�࿝l�\u001b�=�U����N7\u001d\r�Yr���-��G\u0013b��\u0006�\u0018�+C�l�L��\\\u0018\u001f\u001f�ѩΐ�?\u0014o�V�JC�|!�\u0013�>�\u0019}J�L��v�S�\\@g���\u001a�Q-�z��o3\n\u0016:���\u000b9���M^͵Rf9�\u0016,����'l�b�\b��܊\r\u001dO�K��b����3��}��$�Ӱ����I'C��L���`�#?�E�Ɏo.�%�/���\u0006�^����-�!S6lZ�\u0018�w�D���h��V���\u001c�$v[v����\u0010\u001aC�Vu�LٹQV�c��b����\u0013��&�dH�lq؏I��_�S�]�/\u0012�q1�w�+��x��=�(�%�LO v]\u001c���IN��k����J\u0010�\f���He\u000fW��Ԫ1d�$Q�IŜ�\u00175:\r5$皟N���<|���}�Gv�%�\u0017�� W���%yg�P\u0003\u0019�\u001e/�ܯ�z�\\�ha\u001db֥4=D,\u0016g\u0015s-S�-���,s#��ʞ��'�����\u0018bj.J_�\u001a�z\u001a�\u0010:�ސ��G���v\u0013S�o�\r{hr伂�[��&J)W��=nS��n��8��!��£f��\u0015�{Վ\u000b��\u001ei4Go�!��4b��+�7��!/�u�(�,�2Q�!��ibH��\u001e�}lM��\u001f\u001b���f\u0018��U\u0013�����K��z�!9WvF=[kފ������g��!��\u0018�\u001f�\u000fw�\u0018��X���_[&��3\bh��T\u0016%�nn*�\u0015���\u0006\u0006\u0004\u001ch֐�/�\u0016�\u0005Cb���=�h�|�o%��B\u001d�b�Y��S2\r�4:M���,k�(����n#=�:j���_�qR����#�l(��D\u0013��Z�\u0010�on\u001eZ�ZDYEn^*��\f�;�\"/.���!���2lv���\\�G��\u0004��G�;;��71$�RnF��\u0007�!�s�B�� £�V�ʹ,\u0015C���)�i�zCTOCOR?�5�w����w�\b'\f����&�ꝰٟ(�\\Ѫ��u$�3��RD��?� V�9C��5'\u00154n�\u0010�N]�_�Ox\u0017s��ug�z\u001a<��l�+ӬQ���\u000e��h��E�\u001cmk �<���4�Z�\u0013�V��\u001c\u0017�m�N�!T�\fY�J\u0011��k�\u0017�����R�c\u0010�,�N]�҃�&�\u0015��gW5gi\u0018�J\u0006͊�K$\u0012KK�P-\ri�b�+ڬ\u0018��\u0015�;��\u0013�^��H��9.���6�!�4,�\u001a�\u0010���\u0010�\u0018�ߩ+_z$\u00116����P=��]�|�{��.��\u0010����\u0010����Nt�\u001bk�S's�9�u\u0011�\u000b�\b\u0018�9.�p��\u000f�\\��b?��zC�\u0007�\u000e��ԕ/=�\\<�ˮh�Ь����.��{:�K:̎'Z\u001b��h}��\u0001\u0011A��.}\u001d2���ü\\a�&\u0004*E\u0014�\u0010<���\u0010�Q�V�\"0nC�!ueD|�!%V�\u001c9=�5��|��}-\\\u0006G��U��~p>�C\u0004�3�p�յm>�\"-\nG��i~\"\r�o��\b�\u0015�ٳH�1�\u001a��pq7�^�\u0011�&��-zf��\u0010��\u0010�Ʌ\u0013�is��\u0010b�jkF�2\u0005\u001e~�N]��C�`�\u00047�z�\u0018��Y����\r��x�(bh��U�w/��&�S}#��ooC����*�}�N]�\u001eLe\u0007�]\u0001j~6�{�`\u0017���\u0006�v{�\u0012�4��c���nb�Σ>��g0��O�ʖ\u001e��7ܚ+;\u0002z\u000e��\u001e�û-�ٶ5�\u000f'�c�\u0019fb;�w�\u0017v�6\u0016C^C���V\f��ܐ���O\u0015�\u000b̌o�g����&�p2[l����\u0011x\n���ה��\b2�� k�~�q\u0007��m��\r\b}�?\u0013�>�=��7��MsJ���>޳���;��6�*�_��l��REV#�J\u0004�,ˑ%�^�b�Ɗ\u001f�ROl�ر\u0015l�\u0011\r��\u000e\t�1\"`J���niE\u0003�i3\u0013�L\u0003��L\u001b\u0006&�2��\u0013\b�\f�\u0006�0@h\u0019\u001e��\u0019\u001e�ڕ,�ZY��vW:�\u0019G���^������ܣs0̦�h��|�\u0016��\r蔺�u!��Uv\t\u0014��\u0013��f��`�z#tI\u0001a\u001cPy�r�=&�>�Cisf��K�É=m8Ye�\u000e\u0013���\\�b\u0016'6�E]U��TGp�g�N��\u001b��g�(-\u0014���I<�\u0012��\u001fu��\u0015��\u001e�*��⳴����x�\u001d2�\u0013��Y\u0004����+}lz4���\u0015#�A!<��F\u0002��6�.Xm�\n?͠�\\����\u0012�\f?d��@;����\u001e�`٭�\u001aj\u0019��?����Br\b$��b�x\u0005\u000b\u000f;k�e�a�`q#\u0001��\u000b$�;ǒ�\n�ީ������Q�\u001b\t(�fu܊�J~�%e��\f�����H@!U�QE�v��\u0014�FRh��ξ\u0014(�\u001c��d�(��\u0004\u0000�T�4\u001e�\u001f%��\u0000��J�ƃ��U�\u001b\t\u0000\n�di\"�\u00005��\\\t�� L�|���\u000f\n\u0011�B�����@~�\u0010��\u0015�;�X�aeA!@U�!l\t���_�\u0010��\u0015@\f�I)@!\u0000�C�&\u0010Ctb#P\b�I�&r4>�r��\u001c�&��A!�\u0013��B\u0000N\u0015�/��\\?����,4\u0019Le\u0014\"[#�\u0018̲\u0000N\u0015�\u0018���ІO?��\u001b��[�\f��\u0018r���[���1\u0018qݖ�hQ\u000fX#�\u0018��\u0001�\u0015R���G7\u001c<#��1�!�Tȋ���\u001b��2c0�-#Ҁ���\u0000�^�\u001c됏��w���Y�S\u0019�)�<y�-��1\u0018qޖ*\\b��r�\u0019`�\u0010�z\f�Is39)ٰ�>-�<���TH���=r�}�`�y[�ip\\IX��u\u0006� �N�e�\u0000J^��\u0012\nI�\"���Ko�.5�g\fFy��.��3\r�?������y�-�S%�\u000f�d���BҲȧ\u0014��'��u��\u0010c0�-��B$#3\u0002���z��\u0003�\u001fq�?�\\\u0004KQ�r\u0016��1dǩ�-\u0017�3\u0006#�۲S�+垒:æ��UGғ1���*�7�\u0007��i)a���.q�)��®E�*$��z��!��?�\\\fKȹ�Rڠ��@!�J���\u0007Pc݅��'N�\u0017Ay��N������o�-�Bx�\u0000�%�\b��\fK*l�\f�\u0014�\u0000�+;O\u001fk�����{~���\u001cC��½{˩\u0010��\u001f@v�3{�\u0007N��kn@%oH\u000bm]���u�:�&����7�����o��6}���\u0016�wRf��g�(�!E\u0012\r�=�|��K�?�ڙ�'��`�J�]\u000eIZz�jT�����B|�)��k\t���I?��}\u0017+����?\u0004Аe-��w���ףG��Ѓ/���}���w��y�Y?����{\u0011ҥ�ة�1䙓m荿n��+�bB!���\u0014\"��*�\u000fx�/?<F6��\u001f~}�����\u001f̺g��^΄m���BϬ�+ҴU�B(��\r;����۞=~���6=~/}�(D\u0010�,PHyJ뾩���\u0013g�\\}�����;GIul�m��&��n��\\�}H�\u0005,��q\u0017��jV\b����-��`Ӗ�����\u000e�:{;q�(D\u0010+uP\b�skr����kW�\u000f<����C\u001b���T\u0007��\u0013����=y\u001a'\u001drb���z�2�\u0007h��!�2Α ��B���X0��#q~@j��ߗ�����ɑ�v�ɶ�?�^O��ѿߍܫc�\u0019��&E��Z!\\k0��\u0010v\f�P�G����\u0014\"��\u001c����އ7�֑����{���G�ԑ��\u0001Ք�_�騒�����K�:\u0011�B(G����H��\u0019ǯ�\u000e�����|��\"�Y˶�ֺ\u0019�\u001b���o~�\u0013mv��\u0005s���EG����>�����˻�\u0006��F\u0012&��%����߮�\u0015r���d|�u��\u0011��Z�\u0018�g+;�f�\u0014�I\"��\u0012Մ��'&�\u001cuO��u����ȭ�{�\tv&�z�B�.\u0007\n�J!\u000f? K�GZW�\u001c�;�\u0005+����Ú�\u0016\u0014kU�w\"\\��Ǫ�l7Ħ��1�\nJ!v\"y\u0013�\u001ak��\r�'��\u0016�����Ԓ�}S��>�\u000bb�\u0000��\u0005\u000b�]I%�rT\t\n�[!���R񑒑��\u001d���\u0010_��\u00019���~����.�톑�F_\u001fs\u0005�K�YH�ļ�9z�����~-���\u001dC\u0012K\u000e\u0019�o�c~ʤ[D�\b�cX{\nY��D\u001f��wT�S��z��}^��F�X�5=�4��R�\n\u001c5z��\u0005s\u0013�\f��m��\"�����v�\b���<�\u000b��\u0014���#1G����-B!�\u0017i0��8R��($�d� �\rb��M��4���Ե�yG\t�9:�\u001a�z�%d�|굧���H�\u0011��z���\u0002mYx���}>���\u001c벦p�#gN��\nA���M�+9����'�_��򢫳ã���<s%�nP\u0011�XK\u000ecK�\u0010�ʹ\u001dCY1E��+a\u000ef�%�0�c�\u001a�\r0Is�̔d�9M!K#���Wr��3�OL�\u0016�ۋ����l���\u001e�`\u0011�s^��T�\u0018�\u001f����r�LH�aJ�9K�����\u0017�\u0015�Ż�EB��*i�C��\"\r����f\u0014\"\u0002����n+K̈́\u0003+�}�\u001e�k�]����v\u0018�\u00040͐=�e\r[\b[KWy\u001bQ\u001b��`èf\u0014\"2�\u0007�5#��?��C�ů!l�\u0019�?n�:NH��\u001d1\t֯7��Q���\u001fe�\u0019m�k��J�\u001d��\u0014N�\u0019�8\"��'\u001f��vB>�����iOgT�;�R�\u0012m�5h\u0011 \u0016x�\u0018g\f\u000bv��ak=�)\u001b\b�x_���i\u00190wuT�B:\f�V�j`\u000e:������4\u0018�o�Q;\u0002}&�\u0002�jL^�C�\u001f�Gb�����\u000e�\u0015b�\u001dQ\u001c�-\u0018���\u0010\u0001�?�A��d��>42%'\u001a���u�\f{��v�\u000e\nq\fi�Q&�(t5�\"T�Gc�g�2��/��\u0012�����vkxr�\u001cd��G�*��\u0014�e\u001f°!{\u0017�2�̌�\"�1j��5i��Bc�\u000b8������t�\u0007UFlX^\u0015\u0012mq�\t[ί�\u0003@Y��2\u000f��\u0017_�o\\C��\u000e�R�\u0017���Y�2�8o\n1.�\u000e+Ff��V�\u0000f���i���wR���9*xS��Um耦\u0001\u0004�se�#HC\u0007\u0000�tJV��\u0003�\u0000��!$#�*(\u0004\u0000҇\u0010e��k�\u0005�\u0000��\u001cͣ�z3~�\u00115��\u0018Y)6�B\u0000��\u000f}�\u00195��\u0018Y�\u0010@�\nIĸB\u001e��\bS���)\u001dA���UR�,P\b n��e��q�\u0019�3(�^̄�JDТ�f�\u0014#\u000b\u0014\u0002�[!\u0013�B�\u0018WA�\b�\b����2&�f�\u0014#\u000bV��gYt��q}�3��T�+&jVI1�@!��\u0015BǸR\u001a�l8\u0015�\ty��Q�J��\u0005\n\u0001Į\u0010��q��\u0012�D�,�t9jVI1�@!��ǐ\u001c����F^1�@!@U+dUԬ4�\u0005\n\u0001�[!�-\r\u0000@!\u0000\u0000\n\u0001\u0000P\b\u0000�B@!\u0000(\u0004\u0014\u0002�B@!\u0000(\u0004\u0014\u0002\u0000�\u0010\u0000X�ϊ#K\u0005\u0000�\u000b�_��O�BM\u0000\u0000\u001b��^i�:\u0002\u0015\u0001\u0000l,�}rbh,\u00045\u0001\u0000l�z�\n��\u0003��\u0000��\u000e��0a�\fBM\u0000\u0000\u001bA��е�C\u0016B\u0000`CkP�+��2\u0007\u0000؉�\ra\u001a��(�\u0004\u0000�a��J��_\n\u0000�1N;4��\u0005v\u0014\u0001��f}��_m\u000030\u0000��\u0014�鈀\u001dv\u0014\u0001�������@^O\u0000`�ã2)\u0016ð�\b\u0000���\u0001B����{\u000bi2\n\u00008~t�ss^6�\u0012��դ�2�.�@k����\b��2\u0011/���X�,4L��jB��\u0015�],*�\u001b�Ѕ�\u001e��\u001e�\bz�Ǿo�Wlm�o����\u0007�����?gg\u0007�eV\u0002�#.1z�v�ln\u0014\u0001��,�\b�ɨ��J\u0000��۳L�p>7��_�J\u0016�\u0004\u0016�y�6/w'�o�W�Fl�Q<�Ȳ\u0000�?�r�1%)O\u0019�ג\b�)')�ؠ�(\u0006\u0006�\b�-N�QL]�W�\f��D\u0000\u001f��\u0015\u001bC�ϰ�\b�����\u0010=�\u0000��X��H\"��@�\u001d$Ģ\r�X�Z\u0000��\u001a�D/Z��R\u0000>�\u0004\u0000\u0000\u0000\u0000\u0000\u0000�&��$\u001c�BT�v\u0000�\u0000\u0014\u0002P\b@!\u0014\u0002\n�\u0010P\b��B(\u0004�\u0010�B\u0000\n\u0001(\u0004�\u0010�B\u0000�\u0016\u0012\u001cd�9�k��$;>�43�B@!>�\n9�9�B��B4\u0017��n\u000e\u000bsUO�;��knM�z�\u001cVJ�\f}�o�\u0017�v�K?�J\u0004W��F�u_^��\u0010e�����P%�@u��<��\u0018�/0W�+?W�=s�i�(�i�\n�>~j��`�>�\u0018˷�G&�`�uD)�5g�?h�vS\bTW�.��T��L7�n\u0010ңٜ\u001f&\n�Ρ�)K����}\u001c[1p0�9\n�;6i\u0013�Z�\u0010�\\�M7J!P_!��YZ���9� �'��#V�w:��sHp|dEOh�K�\u0010y\u0014����(1���]s}�\\6����B2�M#wE��\u0010�\u001e�3ݳ�̇o�i�\u0010�=�5'�!�=\u0004j<�\u0014^��Z\u0014�.D(�\u0010�B�\u000fܶ6��j0�琳#\u001e�\u0018�9�@��h�5e�8'�B4��<\n)�&O|k}�A�.��\u000b�B���\u001f\t\u0006\n��\n�E7�i���wb�hQ\u0001��(d�L��;Nv�(\u0004\u0014�S����KO\u0005��B���\u0001\u0014\u0002P\b@!\u0000�P\b(�B@!\u0014\u0002\n�\u0010�B\u0000\n\u0001(\u0004�\u0010�B�iV\b��\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��_Θ����~6\u0000\u0000\u0000\u0000IEND�B`�",
    "race": {
      "index.md": "---\ntitle: Promise.race()\nslug: Web/JavaScript/Reference/Global_Objects/Promise/race\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Promise.race\n---\n\n{{JSRef}}\n\nThe **`Promise.race()`** static method takes an iterable of promises as input and returns a single {{jsxref(\"Promise\")}}. This returned promise settles with the eventual state of the first promise that settles.\n\n{{EmbedInteractiveExample(\"pages/js/promise-race.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nPromise.race(iterable)\n```\n\n### Parameters\n\n- `iterable`\n  - : An [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) (such as an {{jsxref(\"Array\")}}) of promises.\n\n### Return value\n\nA {{jsxref(\"Promise\")}} that **asynchronously settles** with the eventual state of the first promise in the `iterable` to settle. In other words, it fulfills if the first promise to settle is fulfilled, and rejects if the first promise to settle is rejected. The returned promise remains pending forever if the `iterable` passed is empty. If the `iterable` passed is non-empty but contains no pending promises, the returned promise is still asynchronously (instead of synchronously) settled.\n\n## Description\n\nThe `Promise.race()` method is one of the [promise concurrency](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) methods. It's useful when you want the first async task to complete, but do not care about its eventual state (i.e. it can either succeed or fail).\n\nIf the iterable contains one or more non-promise values and/or an already settled promise, then `Promise.race()` will settle to the first of these values found in the iterable.\n\n## Examples\n\n### Using Promise.race()\n\nThis example shows how `Promise.race()` can be used to race several timers implemented with [`setTimeout()`](/en-US/docs/Web/API/setTimeout). The timer with the shortest time always wins the race and becomes the resulting promise's state.\n\n```js\nfunction sleep(time, value, state) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (state === \"fulfill\") {\n        return resolve(value);\n      } else {\n        return reject(new Error(value));\n      }\n    }, time);\n  });\n}\n\nconst p1 = sleep(500, \"one\", \"fulfill\");\nconst p2 = sleep(100, \"two\", \"fulfill\");\n\nPromise.race([p1, p2]).then((value) => {\n  console.log(value); // \"two\"\n  // Both fulfill, but p2 is faster\n});\n\nconst p3 = sleep(100, \"three\", \"fulfill\");\nconst p4 = sleep(500, \"four\", \"reject\");\n\nPromise.race([p3, p4]).then(\n  (value) => {\n    console.log(value); // \"three\"\n    // p3 is faster, so it fulfills\n  },\n  (error) => {\n    // Not called\n  },\n);\n\nconst p5 = sleep(500, \"five\", \"fulfill\");\nconst p6 = sleep(100, \"six\", \"reject\");\n\nPromise.race([p5, p6]).then(\n  (value) => {\n    // Not called\n  },\n  (error) => {\n    console.error(error.message); // \"six\"\n    // p6 is faster, so it rejects\n  },\n);\n```\n\n### Asynchronicity of Promise.race\n\nThis following example demonstrates the asynchronicity of `Promise.race`. Unlike other promise concurrency methods, `Promise.race` is always asynchronous: it never settles synchronously, even when the `iterable` is empty.\n\n```js\n// Passing an array of promises that are already resolved,\n// to trigger Promise.race as soon as possible\nconst resolvedPromisesArray = [Promise.resolve(33), Promise.resolve(44)];\n\nconst p = Promise.race(resolvedPromisesArray);\n// Immediately logging the value of p\nconsole.log(p);\n\n// Using setTimeout, we can execute code after the stack is empty\nsetTimeout(() => {\n  console.log(\"the stack is now empty\");\n  console.log(p);\n});\n\n// Logs, in order:\n// Promise { <state>: \"pending\" }\n// the stack is now empty\n// Promise { <state>: \"fulfilled\", <value>: 33 }\n```\n\nAn empty iterable causes the returned promise to be forever pending:\n\n```js\nconst foreverPendingPromise = Promise.race([]);\nconsole.log(foreverPendingPromise);\nsetTimeout(() => {\n  console.log(\"the stack is now empty\");\n  console.log(foreverPendingPromise);\n});\n\n// Logs, in order:\n// Promise { <state>: \"pending\" }\n// the stack is now empty\n// Promise { <state>: \"pending\" }\n```\n\nIf the iterable contains one or more non-promise value and/or an already settled promise, then `Promise.race` will settle to the first of these values found in the array:\n\n```js\nconst foreverPendingPromise = Promise.race([]);\nconst alreadyFulfilledProm = Promise.resolve(100);\n\nconst arr = [foreverPendingPromise, alreadyFulfilledProm, \"non-Promise value\"];\nconst arr2 = [foreverPendingPromise, \"non-Promise value\", Promise.resolve(100)];\nconst p = Promise.race(arr);\nconst p2 = Promise.race(arr2);\n\nconsole.log(p);\nconsole.log(p2);\nsetTimeout(() => {\n  console.log(\"the stack is now empty\");\n  console.log(p);\n  console.log(p2);\n});\n\n// Logs, in order:\n// Promise { <state>: \"pending\" }\n// Promise { <state>: \"pending\" }\n// the stack is now empty\n// Promise { <state>: \"fulfilled\", <value>: 100 }\n// Promise { <state>: \"fulfilled\", <value>: \"non-Promise value\" }\n```\n\n### Using Promise.race() to implement request timeout\n\nYou can race a potentially long-lasting request with a timer that rejects, so that when the time limit has elapsed, the resulting promise automatically rejects.\n\n```js\nconst data = Promise.race([\n  fetch(\"/api\"),\n  new Promise((resolve, reject) => {\n    // Reject after 5 seconds\n    setTimeout(() => reject(new Error(\"Request timed out\")), 5000);\n  }),\n])\n  .then((res) => res.json())\n  .catch((err) => displayError(err));\n```\n\nIf the `data` promise fulfills, it will contain the data fetched from `/api`; otherwise, it will reject if `fetch` remains pending for 5 seconds and loses the race with the `setTimeout` timer.\n\n### Using Promise.race() to detect the status of a promise\n\nBecause `Promise.race()` resolves to the first non-pending promise in the iterable, we can check a promise's state, including if it's pending. This example is adapted from [`promise-status-async`](https://github.com/kudla/promise-status-async/blob/master/lib/promiseState.js).\n\n```js\nfunction promiseState(promise) {\n  const pendingState = { status: \"pending\" };\n\n  return Promise.race([promise, pendingState]).then(\n    (value) =>\n      value === pendingState ? value : { status: \"fulfilled\", value },\n    (reason) => ({ status: \"rejected\", reason }),\n  );\n}\n```\n\nIn this function, if `promise` is pending, the second value, `pendingState`, which is a non-promise, becomes the result of the race; otherwise, if `promise` is already settled, we may know its state through the `onFulfilled` and `onRejected` handlers. For example:\n\n```js\nconst p1 = new Promise((res) => setTimeout(() => res(100), 100));\nconst p2 = new Promise((res) => setTimeout(() => res(200), 200));\nconst p3 = new Promise((res, rej) => setTimeout(() => rej(300), 100));\n\nasync function getStates() {\n  console.log(await promiseState(p1));\n  console.log(await promiseState(p2));\n  console.log(await promiseState(p3));\n}\n\nconsole.log(\"Immediately after initiation:\");\ngetStates();\nsetTimeout(() => {\n  console.log(\"After waiting for 100ms:\");\n  getStates();\n}, 100);\n\n// Logs:\n// Immediately after initiation:\n// { status: 'pending' }\n// { status: 'pending' }\n// { status: 'pending' }\n// After waiting for 100ms:\n// { status: 'fulfilled', value: 100 }\n// { status: 'pending' }\n// { status: 'rejected', reason: 300 }\n```\n\n> **Note:** The `promiseState` function still runs asynchronously, because there is no way to synchronously get a promise's value (i.e. without `then()` or `await`), even when it is already settled. However, `promiseState()` always fulfills within one tick and never actually waits for any promise's settlement.\n\n### Comparison with Promise.any()\n\n`Promise.race` takes the first settled {{jsxref(\"Promise\")}}.\n\n```js\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 500, \"one\");\n});\n\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(reject, 100, \"two\");\n});\n\nPromise.race([promise1, promise2])\n  .then((value) => {\n    console.log(\"succeeded with value:\", value);\n  })\n  .catch((reason) => {\n    // Only promise1 is fulfilled, but promise2 is faster\n    console.error(\"failed with reason:\", reason);\n  });\n// failed with reason: two\n```\n\n{{jsxref(\"Promise.any\")}} takes the first fulfilled {{jsxref(\"Promise\")}}.\n\n```js\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 500, \"one\");\n});\n\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(reject, 100, \"two\");\n});\n\nPromise.any([promise1, promise2])\n  .then((value) => {\n    // Only promise1 is fulfilled, even though promise2 settled sooner\n    console.log(\"succeeded with value:\", value);\n  })\n  .catch((reason) => {\n    console.error(\"failed with reason:\", reason);\n  });\n// succeeded with value: one\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Promise\")}}\n- {{jsxref(\"Promise.all()\")}}\n- {{jsxref(\"Promise.allSettled()\")}}\n- {{jsxref(\"Promise.any()\")}}\n"
    },
    "reject": {
      "index.md": "---\ntitle: Promise.reject()\nslug: Web/JavaScript/Reference/Global_Objects/Promise/reject\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Promise.reject\n---\n\n{{JSRef}}\n\nThe **`Promise.reject()`** static method returns a `Promise` object that is rejected with a given reason.\n\n{{EmbedInteractiveExample(\"pages/js/promise-reject.html\")}}\n\n## Syntax\n\n```js-nolint\nPromise.reject(reason)\n```\n\n### Parameters\n\n- `reason`\n  - : Reason why this `Promise` rejected.\n\n### Return value\n\nA {{jsxref(\"Promise\")}} that is rejected with the given reason.\n\n## Description\n\nThe static `Promise.reject` function returns a `Promise` that is rejected. For debugging purposes and selective error catching, it is useful to make `reason` an `instanceof` {{jsxref(\"Error\")}}.\n\n`Promise.reject()` is generic and supports subclassing, which means it can be called on subclasses of `Promise`, and the result will be a promise of the subclass type. To do so, the subclass's constructor must implement the same signature as the [`Promise()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor — accepting a single `executor` function that can be called with the `resolve` and `reject` callbacks as parameters. `Promise.reject()` is essentially a shorthand for `new Promise((resolve, reject) => reject(reason))`.\n\nUnlike {{jsxref(\"Promise.resolve()\")}}, `Promise.reject()` always wraps `reason` in a new `Promise` object, even when `reason` is already a `Promise`.\n\n## Examples\n\n### Using the static Promise.reject() method\n\n```js\nPromise.reject(new Error(\"fail\")).then(\n  () => {\n    // not called\n  },\n  (error) => {\n    console.error(error); // Stacktrace\n  },\n);\n```\n\n### Rejecting with a promise\n\nUnlike {{jsxref(\"Promise.resolve\")}}, the `Promise.reject` method does not reuse existing `Promise` instances. It always returns a new `Promise` instance that wraps `reason`.\n\n```js\nconst p = Promise.resolve(1);\nconst rejected = Promise.reject(p);\nconsole.log(rejected === p); // false\nrejected.catch((v) => {\n  console.log(v === p); // true\n});\n```\n\n### Calling reject() on a non-Promise constructor\n\n`Promise.reject()` is a generic method. It can be called on any constructor that implements the same signature as the `Promise()` constructor. For example, we can call it on a constructor that passes it `console.log` as `reject`:\n\n```js\nclass NotPromise {\n  constructor(executor) {\n    // The \"resolve\" and \"reject\" functions behave nothing like the\n    // native promise's, but Promise.reject() calls them in the same way.\n    executor(\n      (value) => console.log(\"Resolved\", value),\n      (reason) => console.log(\"Rejected\", reason),\n    );\n  }\n}\n\nPromise.reject.call(NotPromise, \"foo\"); // Logs \"Rejected foo\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Promise\")}}\n"
    },
    "resolve": {
      "index.md": "---\ntitle: Promise.resolve()\nslug: Web/JavaScript/Reference/Global_Objects/Promise/resolve\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Promise.resolve\n---\n\n{{JSRef}}\n\nThe **`Promise.resolve()`** static method \"resolves\" a given value to a {{jsxref(\"Promise\")}}. If the value is a promise, that promise is returned; if the value is a [thenable](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables), `Promise.resolve()` will call the `then()` method with two callbacks it prepared; otherwise the returned promise will be fulfilled with the value.\n\nThis function flattens nested layers of promise-like objects (e.g. a promise that fulfills to a promise that fulfills to something) into a single layer — a promise that fulfills to a non-thenable value.\n\n{{EmbedInteractiveExample(\"pages/js/promise-resolve.html\")}}\n\n## Syntax\n\n```js-nolint\nPromise.resolve(value)\n```\n\n### Parameters\n\n- `value`\n  - : Argument to be resolved by this `Promise`. Can also be a `Promise` or a thenable to resolve.\n\n### Return value\n\nA {{jsxref(\"Promise\")}} that is resolved with the given value, or the promise passed as value, if the value was a promise object. A resolved promise can be in any of the states — fulfilled, rejected, or pending. For example, resolving a rejected promise will still result in a rejected promise.\n\n## Description\n\n`Promise.resolve()` _resolves_ a promise, which is not the same as fulfilling or rejecting the promise. See [Promise description](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#description) for definitions of the terminology. In brief, `Promise.resolve()` returns a promise whose eventual state depends on another promise, thenable object, or other value.\n\n`Promise.resolve()` is generic and supports subclassing, which means it can be called on subclasses of `Promise`, and the result will be a promise of the subclass type. To do so, the subclass's constructor must implement the same signature as the [`Promise()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor — accepting a single `executor` function that can be called with the `resolve` and `reject` callbacks as parameters.\n\n`Promise.resolve()` special-cases native `Promise` instances. If `value` belongs to `Promise` or a subclass, and `value.constructor === Promise`, then `value` is directly returned by `Promise.resolve()`, without creating a new `Promise` instance. Otherwise, `Promise.resolve()` is essentially a shorthand for `new Promise((resolve) => resolve(value))`.\n\nThe bulk of the resolving logic is actually implemented by [the `resolve` function](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise#the_resolve_function) passed by the `Promise()` constructor. In summary:\n\n- If a non-[thenable](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) value is passed, the returned promise is already fulfilled with that value.\n- If a thenable is passed, the returned promise will adopt the state of that thenable by calling the `then` method and passing a pair of resolving functions as arguments. (But because native promises directly pass through `Promise.resolve()` without creating a wrapper, the `then` method is not called on native promises.) If the `resolve` function receives another thenable object, it will be resolved again, so that the eventual fulfillment value of the promise will never be thenable.\n\n## Examples\n\n### Using the static Promise.resolve method\n\n```js\nPromise.resolve(\"Success\").then(\n  (value) => {\n    console.log(value); // \"Success\"\n  },\n  (reason) => {\n    // not called\n  },\n);\n```\n\n### Resolving an array\n\n```js\nconst p = Promise.resolve([1, 2, 3]);\np.then((v) => {\n  console.log(v[0]); // 1\n});\n```\n\n### Resolving another Promise\n\n`Promise.resolve()` reuses existing `Promise` instances. If it's resolving a native promise, it returns the same promise instance without creating a wrapper.\n\n```js\nconst original = Promise.resolve(33);\nconst cast = Promise.resolve(original);\ncast.then((value) => {\n  console.log(`value: ${value}`);\n});\nconsole.log(`original === cast ? ${original === cast}`);\n\n// Logs, in order:\n// original === cast ? true\n// value: 33\n```\n\nThe inverted order of the logs is due to the fact that the `then` handlers are called asynchronously. See the {{jsxref(\"Promise/then\", \"then()\")}} reference for more information.\n\n### Resolving thenables and throwing Errors\n\n```js\n// Resolving a thenable object\nconst p1 = Promise.resolve({\n  then(onFulfill, onReject) {\n    onFulfill(\"fulfilled!\");\n  },\n});\nconsole.log(p1 instanceof Promise); // true, object casted to a Promise\n\np1.then(\n  (v) => {\n    console.log(v); // \"fulfilled!\"\n  },\n  (e) => {\n    // not called\n  },\n);\n\n// Thenable throws\n// Promise rejects\nconst p2 = Promise.resolve({\n  then() {\n    throw new TypeError(\"Throwing\");\n  },\n});\np2.then(\n  (v) => {\n    // not called\n  },\n  (e) => {\n    console.error(e); // TypeError: Throwing\n  },\n);\n\n// Thenable throws after callback\n// Promise resolves\nconst p3 = Promise.resolve({\n  then(onFulfilled) {\n    onFulfilled(\"Resolving\");\n    throw new TypeError(\"Throwing\");\n  },\n});\np3.then(\n  (v) => {\n    console.log(v); // \"Resolving\"\n  },\n  (e) => {\n    // not called\n  },\n);\n```\n\nNested thenables will be \"deeply flattened\" to a single promise.\n\n```js\nconst thenable = {\n  then(onFulfilled, onRejected) {\n    onFulfilled({\n      // The thenable is fulfilled with another thenable\n      then(onFulfilled, onRejected) {\n        onFulfilled(42);\n      },\n    });\n  },\n};\n\nPromise.resolve(thenable).then((v) => {\n  console.log(v); // 42\n});\n```\n\n> **Warning:** Do not call `Promise.resolve()` on a thenable that resolves to itself. That leads to infinite recursion, because it attempts to flatten an infinitely-nested promise.\n\n```js example-bad\nconst thenable = {\n  then(onFulfilled, onRejected) {\n    onFulfilled(thenable);\n  },\n};\n\nPromise.resolve(thenable); // Will lead to infinite recursion.\n```\n\n### Calling resolve() on a non-Promise constructor\n\n`Promise.resolve()` is a generic method. It can be called on any constructor that implements the same signature as the `Promise()` constructor. For example, we can call it on a constructor that passes it `console.log` as `resolve`:\n\n```js\nclass NotPromise {\n  constructor(executor) {\n    // The \"resolve\" and \"reject\" functions behave nothing like the\n    // native promise's, but Promise.resolve() calls them in the same way.\n    executor(\n      (value) => console.log(\"Resolved\", value),\n      (reason) => console.log(\"Rejected\", reason),\n    );\n  }\n}\n\nPromise.resolve.call(NotPromise, \"foo\"); // Logs \"Resolved foo\"\n```\n\nThe ability to flatten nested thenables is implemented by the `resolve` function of the `Promise()` constructor, so if you call it on another constructor, nested thenables may not be flattened, depending on how that constructor implements its `resolve` function.\n\n```js\nconst thenable = {\n  then(onFulfilled, onRejected) {\n    onFulfilled({\n      // The thenable is fulfilled with another thenable\n      then(onFulfilled, onRejected) {\n        onFulfilled(42);\n      },\n    });\n  },\n};\n\nPromise.resolve.call(NotPromise, thenable); // Logs \"Resolved { then: [Function: then] }\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Promise\")}}\n"
    },
    "then": {
      "index.md": "---\ntitle: Promise.prototype.then()\nslug: Web/JavaScript/Reference/Global_Objects/Promise/then\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Promise.then\n---\n\n{{JSRef}}\n\nThe **`then()`** method of {{jsxref(\"Promise\")}} instances takes up to two arguments: callback functions for the fulfilled and rejected cases of the `Promise`. It immediately returns an equivalent {{jsxref(\"Promise\")}} object, allowing you to [chain](/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining) calls to other promise methods.\n\n{{EmbedInteractiveExample(\"pages/js/promise-then.html\")}}\n\n## Syntax\n\n```js-nolint\nthen(onFulfilled)\nthen(onFulfilled, onRejected)\n```\n\n### Parameters\n\n- `onFulfilled`\n\n  - : A function to asynchronously execute when this promise becomes fulfilled. Its return value becomes the fulfillment value of the promise returned by `then()`. The function is called with the following arguments:\n\n    - `value`\n      - : The value that the promise was fulfilled with.\n\n    If it is not a function, it is internally replaced with an _identity_ function (`(x) => x`) which simply passes the fulfillment value forward.\n\n- `onRejected` {{optional_inline}}\n\n  - : A function to asynchronously execute when this promise becomes rejected. Its return value becomes the fulfillment value of the promise returned by `then()`. The function is called with the following arguments:\n\n    - `reason`\n      - : The value that the promise was rejected with.\n\n    If it is not a function, it is internally replaced with a _thrower_ function (`(x) => { throw x; }`) which throws the rejection reason it received.\n\n### Return value\n\nReturns a new {{jsxref(\"Promise\")}} immediately. This new promise is always pending when returned, regardless of the current promise's status.\n\nOne of the `onFulfilled` and `onRejected` handlers will be executed to handle the current promise's fulfillment or rejection. The call always happens asynchronously, even when the current promise is already settled. The behavior of the returned promise (call it `p`) depends on the handler's execution result, following a specific set of rules. If the handler function:\n\n- returns a value: `p` gets fulfilled with the returned value as its value.\n- doesn't return anything: `p` gets fulfilled with `undefined` as its value.\n- throws an error: `p` gets rejected with the thrown error as its value.\n- returns an already fulfilled promise: `p` gets fulfilled with that promise's value as its value.\n- returns an already rejected promise: `p` gets rejected with that promise's value as its value.\n- returns another pending promise: `p` is pending and becomes fulfilled/rejected with that promise's value as its value immediately after that promise becomes fulfilled/rejected.\n\n## Description\n\nThe `then()` method schedules callback functions for the eventual completion of a Promise — either fulfillment or rejection. It is the primitive method of promises: the [thenable](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) protocol expects all promise-like objects to expose a `then()` method, and the {{jsxref(\"Promise/catch\", \"catch()\")}} and {{jsxref(\"Promise/finally\", \"finally()\")}} methods both work by invoking the object's `then()` method.\n\nFor more information about the `onRejected` handler, see the {{jsxref(\"Promise/catch\", \"catch()\")}} reference.\n\n`then()` returns a new promise object. If you call the `then()` method twice on the same promise object (instead of chaining), then this promise object will have two pairs of settlement handlers. All handlers attached to the same promise object are always called in the order they were added. Moreover, the two promises returned by each call of `then()` start separate chains and do not wait for each other's settlement.\n\n[Thenable](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) objects that arise along the `then()` chain are always [resolved](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise#the_resolve_function) — the `onFulfilled` handler never receives a thenable object, and any thenable returned by either handler are always resolved before being passed to the next handler. This is because when constructing the new promise, the `resolve` and `reject` functions passed by the `executor` are saved, and when the current promise settles, the respective function will be called with the fulfillment value or rejection reason. The resolving logic comes from the `resolve` function passed by the {{jsxref(\"Promise/Promise\", \"Promise()\")}} constructor.\n\n`then()` supports subclassing, which means it can be called on instances of subclasses of `Promise`, and the result will be a promise of the subclass type. You can customize the type of the return value through the [`@@species`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/@@species) property.\n\n## Examples\n\n### Using the then() method\n\n```js\nconst p1 = new Promise((resolve, reject) => {\n  resolve(\"Success!\");\n  // or\n  // reject(new Error(\"Error!\"));\n});\n\np1.then(\n  (value) => {\n    console.log(value); // Success!\n  },\n  (reason) => {\n    console.error(reason); // Error!\n  },\n);\n```\n\n### Having a non-function as either parameter\n\n```js\nPromise.resolve(1).then(2).then(console.log); // 1\nPromise.reject(1).then(2, 2).then(console.log, console.log); // 1\n```\n\n### Chaining\n\nThe `then` method returns a new `Promise`, which allows for method chaining.\n\nIf the function passed as handler to `then` returns a `Promise`, an equivalent `Promise` will be exposed to the subsequent `then` in the method chain. The below snippet simulates asynchronous code with the `setTimeout` function.\n\n```js\nPromise.resolve(\"foo\")\n  // 1. Receive \"foo\", concatenate \"bar\" to it, and resolve that to the next then\n  .then(\n    (string) =>\n      new Promise((resolve, reject) => {\n        setTimeout(() => {\n          string += \"bar\";\n          resolve(string);\n        }, 1);\n      }),\n  )\n  // 2. receive \"foobar\", register a callback function to work on that string\n  // and print it to the console, but not before returning the unworked on\n  // string to the next then\n  .then((string) => {\n    setTimeout(() => {\n      string += \"baz\";\n      console.log(string); // foobarbaz\n    }, 1);\n    return string;\n  })\n  // 3. print helpful messages about how the code in this section will be run\n  // before the string is actually processed by the mocked asynchronous code in the\n  // previous then block.\n  .then((string) => {\n    console.log(\n      \"Last Then: oops... didn't bother to instantiate and return a promise in the prior then so the sequence may be a bit surprising\",\n    );\n\n    // Note that `string` will not have the 'baz' bit of it at this point. This\n    // is because we mocked that to happen asynchronously with a setTimeout function\n    console.log(string); // foobar\n  });\n\n// Logs, in order:\n// Last Then: oops... didn't bother to instantiate and return a promise in the prior then so the sequence may be a bit surprising\n// foobar\n// foobarbaz\n```\n\nThe value returned from `then()` is resolved in the same way as {{jsxref(\"Promise.resolve()\")}}. This means [thenable objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables) are supported, and if the return value is not a promise, it's implicitly wrapped in a `Promise` and then resolved.\n\n```js\nconst p2 = new Promise((resolve, reject) => {\n  resolve(1);\n});\n\np2.then((value) => {\n  console.log(value); // 1\n  return value + 1;\n}).then((value) => {\n  console.log(value, \"- A synchronous value works\"); // 2 - A synchronous value works\n});\n\np2.then((value) => {\n  console.log(value); // 1\n});\n```\n\nA `then` call returns a promise that eventually rejects if the function throws an error or returns a rejected Promise.\n\n```js\nPromise.resolve()\n  .then(() => {\n    // Makes .then() return a rejected promise\n    throw new Error(\"Oh no!\");\n  })\n  .then(\n    () => {\n      console.log(\"Not called.\");\n    },\n    (error) => {\n      console.error(`onRejected function called: ${error.message}`);\n    },\n  );\n```\n\nIn practice, it is often desirable to [`catch()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) rejected promises rather than `then()`'s two-case syntax, as demonstrated below.\n\n```js\nPromise.resolve()\n  .then(() => {\n    // Makes .then() return a rejected promise\n    throw new Error(\"Oh no!\");\n  })\n  .catch((error) => {\n    console.error(`onRejected function called: ${error.message}`);\n  })\n  .then(() => {\n    console.log(\"I am always called even if the prior then's promise rejects\");\n  });\n```\n\nIn all other cases, the returned promise eventually fulfills. In the following example, the first `then()` returns `42` wrapped in a fulfilled Promise, even though the previous Promise in the chain was rejected.\n\n```js\nPromise.reject()\n  .then(\n    () => 99,\n    () => 42,\n  ) // onRejected returns 42 which is wrapped in a fulfilled Promise\n  .then((solution) => console.log(`Resolved with ${solution}`)); // Fulfilled with 42\n```\n\nIf `onFulfilled` returns a promise, the return value of `then` will be fulfilled/rejected based on the eventual state of that promise.\n\n```js\nfunction resolveLater(resolve, reject) {\n  setTimeout(() => {\n    resolve(10);\n  }, 1000);\n}\nfunction rejectLater(resolve, reject) {\n  setTimeout(() => {\n    reject(new Error(\"Error\"));\n  }, 1000);\n}\n\nconst p1 = Promise.resolve(\"foo\");\nconst p2 = p1.then(() => {\n  // Return promise here, that will be resolved to 10 after 1 second\n  return new Promise(resolveLater);\n});\np2.then(\n  (v) => {\n    console.log(\"resolved\", v); // \"resolved\", 10\n  },\n  (e) => {\n    // not called\n    console.error(\"rejected\", e);\n  },\n);\n\nconst p3 = p1.then(() => {\n  // Return promise here, that will be rejected with 'Error' after 1 second\n  return new Promise(rejectLater);\n});\np3.then(\n  (v) => {\n    // not called\n    console.log(\"resolved\", v);\n  },\n  (e) => {\n    console.error(\"rejected\", e); // \"rejected\", 'Error'\n  },\n);\n```\n\nYou can use chaining to implement one function with a Promise-based API on top of another such function.\n\n```js\nfunction fetchCurrentData() {\n  // The fetch() API returns a Promise. This function\n  // exposes a similar API, except the fulfillment\n  // value of this function's Promise has had more\n  // work done on it.\n  return fetch(\"current-data.json\").then((response) => {\n    if (response.headers.get(\"content-type\") !== \"application/json\") {\n      throw new TypeError();\n    }\n    const j = response.json();\n    // maybe do something with j\n\n    // fulfillment value given to user of\n    // fetchCurrentData().then()\n    return j;\n  });\n}\n```\n\n### Asynchronicity of then()\n\nThe following is an example to demonstrate the asynchronicity of the `then` method.\n\n```js\n// Using a resolved promise 'resolvedProm' for example,\n// the function call 'resolvedProm.then(...)' returns a new promise immediately,\n// but its handler '(value) => {...}' will get called asynchronously as demonstrated by the console.logs.\n// the new promise is assigned to 'thenProm',\n// and thenProm will be resolved with the value returned by handler\nconst resolvedProm = Promise.resolve(33);\nconsole.log(resolvedProm);\n\nconst thenProm = resolvedProm.then((value) => {\n  console.log(\n    `this gets called after the end of the main stack. the value received is: ${value}, the value returned is: ${\n      value + 1\n    }`,\n  );\n  return value + 1;\n});\nconsole.log(thenProm);\n\n// Using setTimeout, we can postpone the execution of a function to the moment the stack is empty\nsetTimeout(() => {\n  console.log(thenProm);\n});\n\n// Logs, in order:\n// Promise {[[PromiseStatus]]: \"resolved\", [[PromiseResult]]: 33}\n// Promise {[[PromiseStatus]]: \"pending\", [[PromiseResult]]: undefined}\n// \"this gets called after the end of the main stack. the value received is: 33, the value returned is: 34\"\n// Promise {[[PromiseStatus]]: \"resolved\", [[PromiseResult]]: 34}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Promise\")}}\n- {{jsxref(\"Promise.prototype.catch()\")}}\n"
    },
    "withresolvers": {
      "index.md": "---\ntitle: Promise.withResolvers()\nslug: Web/JavaScript/Reference/Global_Objects/Promise/withResolvers\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Promise.withResolvers\n---\n\n{{JSRef}}\n\nThe **`Promise.withResolvers()`** static method returns an object containing a new {{jsxref(\"Promise\")}} object and two functions to resolve or reject it, corresponding to the two parameters passed to the executor of the {{jsxref(\"Promise/Promise\", \"Promise()\")}} constructor.\n\n## Syntax\n\n```js-nolint\nPromise.withResolvers()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA plain object containing the following properties:\n\n- `promise`\n  - : A {{jsxref(\"Promise\")}} object.\n- `resolve`\n  - : A function that resolves the promise. For its semantics, see the {{jsxref(\"Promise/Promise\", \"Promise()\")}} constructor reference.\n- `reject`\n  - : A function that rejects the promise. For its semantics, see the {{jsxref(\"Promise/Promise\", \"Promise()\")}} constructor reference.\n\n## Description\n\n`Promise.withResolvers()` is exactly equivalent to the following code:\n\n```js\nlet resolve, reject;\nconst promise = new Promise((res, rej) => {\n  resolve = res;\n  reject = rej;\n});\n```\n\nExcept that it is more concise and does not require the use of {{jsxref(\"Statements/let\", \"let\")}}.\n\nThe key difference when using `Promise.withResolvers()` is that the resolution and rejection functions now live in the same scope as the promise itself, instead of being created and used once within the executor. This may enable some more advanced use cases, such as when reusing them for recurring events, particularly with streams and queues. This also generally results in less nesting than wrapping a lot of logic within the executor.\n\n`Promise.withResolvers()` is generic and supports subclassing, which means it can be called on subclasses of `Promise`, and the result will contain a promise of the subclass type. To do so, the subclass's constructor must implement the same signature as the [`Promise()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise) constructor — accepting a single `executor` function that can be called with the `resolve` and `reject` callbacks as parameters.\n\n## Examples\n\n### Transforming a stream to an async iterable\n\nThe use case of `Promise.withResolvers()` is when you have a promise that should be resolved or rejected by some event listener that cannot be wrapped inside the promise executor. The following example transforms a Node.js [readable stream](https://nodejs.org/api/stream.html#class-streamreadable) to an [async iterable](/en-US/docs/Web/JavaScript/Reference/Statements/async_function*). Each `promise` here represents a single batch of data available, and each time the current batch is read, a new promise is created for the next batch. Note how the event listeners are only attached once, but actually call a different version of the `resolve` and `reject` functions each time.\n\n```js\nasync function* readableToAsyncIterable(stream) {\n  let { promise, resolve, reject } = Promise.withResolvers();\n  stream.on(\"error\", (error) => reject(error));\n  stream.on(\"end\", () => resolve());\n  stream.on(\"readable\", () => resolve());\n\n  while (stream.readable) {\n    await promise;\n    let chunk;\n    while ((chunk = stream.read())) {\n      yield chunk;\n    }\n    ({ promise, resolve, reject } = Promise.withResolvers());\n  }\n}\n```\n\n### Calling withResolvers() on a non-Promise constructor\n\n`Promise.withResolvers()` is a generic method. It can be called on any constructor that implements the same signature as the `Promise()` constructor. For example, we can call it on a constructor that passes `console.log` as the `resolve` and `reject` functions to `executor`:\n\n```js\nclass NotPromise {\n  constructor(executor) {\n    // The \"resolve\" and \"reject\" functions behave nothing like the native\n    // promise's, but Promise.withResolvers() just returns them, as is.\n    executor(\n      (value) => console.log(\"Resolved\", value),\n      (reason) => console.log(\"Rejected\", reason),\n    );\n  }\n}\n\nconst { promise, resolve, reject } = Promise.withResolvers.call(NotPromise);\nresolve(\"hello\");\n// Logs: Resolved hello\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Promise.withResolvers` in `core-js`](https://github.com/zloirock/core-js#promisewithresolvers)\n- [Using promises](/en-US/docs/Web/JavaScript/Guide/Using_promises) guide\n- {{jsxref(\"Promise\")}}\n- [`Promise()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise)\n"
    }
  },
  "proxy": {
    "index.md": "---\ntitle: Proxy\nslug: Web/JavaScript/Reference/Global_Objects/Proxy\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Proxy\n---\n\n{{JSRef}}\n\nThe **`Proxy`** object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.\n\n## Description\n\nThe `Proxy` object allows you to create an object that can be used in place of the original object, but which may redefine fundamental `Object` operations like getting, setting, and defining properties. Proxy objects are commonly used to log property accesses, validate, format, or sanitize inputs, and so on.\n\nYou create a `Proxy` with two parameters:\n\n- `target`: the original object which you want to proxy\n- `handler`: an object that defines which operations will be intercepted and how to redefine intercepted operations.\n\nFor example, this code creates a proxy for the `target` object.\n\n```js\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\",\n};\n\nconst handler1 = {};\n\nconst proxy1 = new Proxy(target, handler1);\n```\n\nBecause the handler is empty, this proxy behaves just like the original target:\n\n```js\nconsole.log(proxy1.message1); // hello\nconsole.log(proxy1.message2); // everyone\n```\n\nTo customize the proxy, we define functions on the handler object:\n\n```js\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\",\n};\n\nconst handler2 = {\n  get(target, prop, receiver) {\n    return \"world\";\n  },\n};\n\nconst proxy2 = new Proxy(target, handler2);\n```\n\nHere we've provided an implementation of the {{jsxref(\"Proxy/Proxy/get\", \"get()\")}} handler, which intercepts attempts to access properties in the target.\n\nHandler functions are sometimes called _traps_, presumably because they trap calls to the target object. The very simple trap in `handler2` above redefines all property accessors:\n\n```js\nconsole.log(proxy2.message1); // world\nconsole.log(proxy2.message2); // world\n```\n\nProxies are often used with the {{jsxref(\"Reflect\")}} object, which provides some methods with the same names as the `Proxy` traps. The `Reflect` methods provide the reflective semantics for invoking the corresponding [object internal methods](#object_internal_methods). For example, we can call `Reflect.get` if we don't wish to redefine the object's behavior:\n\n```js\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\",\n};\n\nconst handler3 = {\n  get(target, prop, receiver) {\n    if (prop === \"message2\") {\n      return \"world\";\n    }\n    return Reflect.get(...arguments);\n  },\n};\n\nconst proxy3 = new Proxy(target, handler3);\n\nconsole.log(proxy3.message1); // hello\nconsole.log(proxy3.message2); // world\n```\n\nThe `Reflect` method still interacts with the object through object internal methods — it doesn't \"de-proxify\" the proxy if it's invoked on a proxy. If you use `Reflect` methods within a proxy trap, and the `Reflect` method call gets intercepted by the trap again, there may be infinite recursion.\n\n### Terminology\n\nThe following terms are used when talking about the functionality of proxies.\n\n- [handler](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#handler_functions)\n  - : The object passed as the second argument to the `Proxy` constructor. It contains the traps which define the behavior of the proxy.\n- trap\n  - : The function that define the behavior for the corresponding [object internal method](#object_internal_methods). (This is analogous to the concept of _traps_ in operating systems.)\n- target\n  - : Object which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants (semantics that remain unchanged) regarding object non-extensibility or non-configurable properties are verified against the target.\n- invariants\n  - : Semantics that remain unchanged when implementing custom operations. If your trap implementation violates the invariants of a handler, a {{jsxref(\"TypeError\")}} will be thrown.\n\n### Object internal methods\n\n[Objects](/en-US/docs/Web/JavaScript/Data_structures#objects) are collections of properties. However, the language doesn't provide any machinery to _directly_ manipulate data stored in the object — rather, the object defines some internal methods specifying how it can be interacted with. For example, when you read `obj.x`, you may expect the following to happen:\n\n- The `x` property is searched up the [prototype chain](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain) until it is found.\n- If `x` is a data property, the property descriptor's `value` attribute is returned.\n- If `x` is an accessor property, the getter is invoked, and the return value of the getter is returned.\n\nThere isn't anything special about this process in the language — it's just because ordinary objects, by default, have a `[[Get]]` internal method that is defined with this behavior. The `obj.x` property access syntax simply invokes the `[[Get]]` method on the object, and the object uses its own internal method implementation to determine what to return.\n\nAs another example, [arrays](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) differ from normal objects, because they have a magic [`length`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) property that, when modified, automatically allocates empty slots or removes elements from the array. Similarly, adding array elements automatically changes the `length` property. This is because arrays have a `[[DefineOwnProperty]]` internal method that knows to update `length` when an integer index is written to, or update the array contents when `length` is written to. Such objects whose internal methods have different implementations from ordinary objects are called _exotic objects_. `Proxy` enable developers to define their own exotic objects with full capacity.\n\nAll objects have the following internal methods:\n\n| Internal method         | Corresponding trap                                                               |\n| ----------------------- | -------------------------------------------------------------------------------- |\n| `[[GetPrototypeOf]]`    | {{jsxref(\"Proxy/Proxy/getPrototypeOf\", \"getPrototypeOf()\")}}                     |\n| `[[SetPrototypeOf]]`    | {{jsxref(\"Proxy/Proxy/setPrototypeOf\", \"setPrototypeOf()\")}}                     |\n| `[[IsExtensible]]`      | {{jsxref(\"Proxy/Proxy/isExtensible\", \"isExtensible()\")}}                         |\n| `[[PreventExtensions]]` | {{jsxref(\"Proxy/Proxy/preventExtensions\", \"preventExtensions()\")}}               |\n| `[[GetOwnProperty]]`    | {{jsxref(\"Proxy/Proxy/getOwnPropertyDescriptor\", \"getOwnPropertyDescriptor()\")}} |\n| `[[DefineOwnProperty]]` | {{jsxref(\"Proxy/Proxy/defineProperty\", \"defineProperty()\")}}                     |\n| `[[HasProperty]]`       | {{jsxref(\"Proxy/Proxy/has\", \"has()\")}}                                           |\n| `[[Get]]`               | {{jsxref(\"Proxy/Proxy/get\", \"get()\")}}                                           |\n| `[[Set]]`               | {{jsxref(\"Proxy/Proxy/set\", \"set()\")}}                                           |\n| `[[Delete]]`            | {{jsxref(\"Proxy/Proxy/deleteProperty\", \"deleteProperty()\")}}                     |\n| `[[OwnPropertyKeys]]`   | {{jsxref(\"Proxy/Proxy/ownKeys\", \"ownKeys()\")}}                                   |\n\nFunction objects also have the following internal methods:\n\n| Internal method | Corresponding trap                                 |\n| --------------- | -------------------------------------------------- |\n| `[[Call]]`      | {{jsxref(\"Proxy/Proxy/apply\", \"apply()\")}}         |\n| `[[Construct]]` | {{jsxref(\"Proxy/Proxy/construct\", \"construct()\")}} |\n\nIt's important to realize that all interactions with an object eventually boils down to the invocation of one of these internal methods, and that they are all customizable through proxies. This means almost no behavior (except certain critical invariants) is guaranteed in the language — everything is defined by the object itself. When you run [`delete obj.x`](/en-US/docs/Web/JavaScript/Reference/Operators/delete), there's no guarantee that [`\"x\" in obj`](/en-US/docs/Web/JavaScript/Reference/Operators/in) returns `false` afterwards — it depends on the object's implementations of `[[Delete]]` and `[[HasProperty]]`. A `delete obj.x` may log things to the console, modify some global state, or even define a new property instead of deleting the existing one, although these semantics should be avoided in your own code.\n\nAll internal methods are called by the language itself, and are not directly accessible in JavaScript code. The {{jsxref(\"Reflect\")}} namespace offers methods that do little more than call the internal methods, besides some input normalization/validation. In each trap's page, we list several typical situations when the trap is invoked, but these internal methods are called in _a lot_ of places. For example, array methods read and write to array through these internal methods, so methods like [`push()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) would also invoke `get()` and `set()` traps.\n\nMost of the internal methods are straightforward in what they do. The only two that may be confusable are `[[Set]]` and `[[DefineOwnProperty]]`. For normal objects, the former invokes setters; the latter doesn't. (And `[[Set]]` calls `[[DefineOwnProperty]]` internally if there's no existing property or the property is a data property.) While you may know that the `obj.x = 1` syntax uses `[[Set]]`, and {{jsxref(\"Object.defineProperty()\")}} uses `[[DefineOwnProperty]]`, it's not immediately apparent what semantics other built-in methods and syntaxes use. For example, [class fields](/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) use the `[[DefineOwnProperty]]` semantic, which is why setters defined in the superclass are not invoked when a field is declared on the derived class.\n\n## Constructor\n\n- {{jsxref(\"Proxy/Proxy\", \"Proxy()\")}}\n  - : Creates a new `Proxy` object.\n\n> **Note:** There's no `Proxy.prototype` property, so `Proxy` instances do not have any special properties or methods.\n\n## Static methods\n\n- {{jsxref(\"Proxy.revocable()\")}}\n  - : Creates a revocable `Proxy` object.\n\n## Examples\n\n### Basic example\n\nIn this simple example, the number `37` gets returned as the default value when the property name is not in the object. It is using the {{jsxref(\"Proxy/Proxy/get\", \"get()\")}} handler.\n\n```js\nconst handler = {\n  get(obj, prop) {\n    return prop in obj ? obj[prop] : 37;\n  },\n};\n\nconst p = new Proxy({}, handler);\np.a = 1;\np.b = undefined;\n\nconsole.log(p.a, p.b); // 1, undefined\n\nconsole.log(\"c\" in p, p.c); // false, 37\n```\n\n### No-op forwarding proxy\n\nIn this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it.\n\n```js\nconst target = {};\nconst p = new Proxy(target, {});\n\np.a = 37; // Operation forwarded to the target\n\nconsole.log(target.a); // 37 (The operation has been properly forwarded!)\n```\n\nNote that while this \"no-op\" works for plain JavaScript objects, it does not work for native objects, such as DOM elements, [`Map`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects, or anything that has internal slots. See [no private property forwarding](#no_private_property_forwarding) for more information.\n\n### No private property forwarding\n\nA proxy is still another object with a different identity — it's a _proxy_ that operates between the wrapped object and the outside. As such, the proxy does not have direct access to the original object's [private properties](/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties).\n\n```js\nclass Secret {\n  #secret;\n  constructor(secret) {\n    this.#secret = secret;\n  }\n  get secret() {\n    return this.#secret.replace(/\\d+/, \"[REDACTED]\");\n  }\n}\n\nconst aSecret = new Secret(\"123456\");\nconsole.log(aSecret.secret); // [REDACTED]\n// Looks like a no-op forwarding...\nconst proxy = new Proxy(aSecret, {});\nconsole.log(proxy.secret); // TypeError: Cannot read private member #secret from an object whose class did not declare it\n```\n\nThis is because when the proxy's `get` trap is invoked, the `this` value is the `proxy` instead of the original `secret`, so `#secret` is not accessible. To fix this, use the original `secret` as `this`:\n\n```js\nconst proxy = new Proxy(aSecret, {\n  get(target, prop, receiver) {\n    // By default, it looks like Reflect.get(target, prop, receiver)\n    // which has a different value of `this`\n    return target[prop];\n  },\n});\nconsole.log(proxy.secret);\n```\n\nFor methods, this means you have to redirect the method's `this` value to the original object as well:\n\n```js\nclass Secret {\n  #x = 1;\n  x() {\n    return this.#x;\n  }\n}\n\nconst aSecret = new Secret();\nconst proxy = new Proxy(aSecret, {\n  get(target, prop, receiver) {\n    const value = target[prop];\n    if (value instanceof Function) {\n      return function (...args) {\n        return value.apply(this === receiver ? target : this, args);\n      };\n    }\n    return value;\n  },\n});\nconsole.log(proxy.x());\n```\n\nSome native JavaScript objects have properties called _[internal slots](https://tc39.es/ecma262/multipage/ecmascript-data-types-and-values.html#sec-object-internal-methods-and-internal-slots)_, which are not accessible from JavaScript code. For example, [`Map`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects have an internal slot called `[[MapData]]`, which stores the key-value pairs of the map. As such, you cannot trivially create a forwarding proxy for a map:\n\n```js\nconst proxy = new Proxy(new Map(), {});\nconsole.log(proxy.size); // TypeError: get size method called on incompatible Proxy\n```\n\nYou have to use the \"`this`-recovering\" proxy illustrated above to work around this.\n\n### Validation\n\nWith a `Proxy`, you can easily validate the passed value for an object. This example uses the {{jsxref(\"Proxy/Proxy/set\", \"set()\")}} handler.\n\n```js\nconst validator = {\n  set(obj, prop, value) {\n    if (prop === \"age\") {\n      if (!Number.isInteger(value)) {\n        throw new TypeError(\"The age is not an integer\");\n      }\n      if (value > 200) {\n        throw new RangeError(\"The age seems invalid\");\n      }\n    }\n\n    // The default behavior to store the value\n    obj[prop] = value;\n\n    // Indicate success\n    return true;\n  },\n};\n\nconst person = new Proxy({}, validator);\n\nperson.age = 100;\nconsole.log(person.age); // 100\nperson.age = \"young\"; // Throws an exception\nperson.age = 300; // Throws an exception\n```\n\n### Manipulating DOM nodes\n\nIn this example we use `Proxy` to toggle an attribute of two different elements: so when we set the attribute on one element, the attribute is unset on the other one.\n\nWe create a `view` object which is a proxy for an object with a `selected` property. The proxy handler defines the {{jsxref(\"Proxy/Proxy/set\", \"set()\")}} handler.\n\nWhen we assign an HTML element to `view.selected`, the element's `'aria-selected'` attribute is set to `true`. If we then assign a different element to `view.selected`, this element's `'aria-selected'` attribute is set to `true` and the previous element's `'aria-selected'` attribute is automatically set to `false`.\n\n```js\nconst view = new Proxy(\n  {\n    selected: null,\n  },\n  {\n    set(obj, prop, newval) {\n      const oldval = obj[prop];\n\n      if (prop === \"selected\") {\n        if (oldval) {\n          oldval.setAttribute(\"aria-selected\", \"false\");\n        }\n        if (newval) {\n          newval.setAttribute(\"aria-selected\", \"true\");\n        }\n      }\n\n      // The default behavior to store the value\n      obj[prop] = newval;\n\n      // Indicate success\n      return true;\n    },\n  },\n);\n\nconst item1 = document.getElementById(\"item-1\");\nconst item2 = document.getElementById(\"item-2\");\n\n// select item1:\nview.selected = item1;\n\nconsole.log(`item1: ${item1.getAttribute(\"aria-selected\")}`);\n// item1: true\n\n// selecting item2 de-selects item1:\nview.selected = item2;\n\nconsole.log(`item1: ${item1.getAttribute(\"aria-selected\")}`);\n// item1: false\n\nconsole.log(`item2: ${item2.getAttribute(\"aria-selected\")}`);\n// item2: true\n```\n\n### Value correction and an extra property\n\nThe `products` proxy object evaluates the passed value and converts it to an array if needed. The object also supports an extra property called `latestBrowser` both as a getter and a setter.\n\n```js\nconst products = new Proxy(\n  {\n    browsers: [\"Firefox\", \"Chrome\"],\n  },\n  {\n    get(obj, prop) {\n      // An extra property\n      if (prop === \"latestBrowser\") {\n        return obj.browsers[obj.browsers.length - 1];\n      }\n\n      // The default behavior to return the value\n      return obj[prop];\n    },\n    set(obj, prop, value) {\n      // An extra property\n      if (prop === \"latestBrowser\") {\n        obj.browsers.push(value);\n        return true;\n      }\n\n      // Convert the value if it is not an array\n      if (typeof value === \"string\") {\n        value = [value];\n      }\n\n      // The default behavior to store the value\n      obj[prop] = value;\n\n      // Indicate success\n      return true;\n    },\n  },\n);\n\nconsole.log(products.browsers);\n//  ['Firefox', 'Chrome']\n\nproducts.browsers = \"Safari\";\n//  pass a string (by mistake)\n\nconsole.log(products.browsers);\n//  ['Safari'] <- no problem, the value is an array\n\nproducts.latestBrowser = \"Edge\";\n\nconsole.log(products.browsers);\n//  ['Safari', 'Edge']\n\nconsole.log(products.latestBrowser);\n//  'Edge'\n```\n\n### A complete traps list example\n\nNow in order to create a complete sample `traps` list, for didactic purposes, we will try to proxify a _non-native_ object that is particularly suited to this type of operation: the `docCookies` global object created by [a simple cookie framework](https://reference.codeproject.com/dom/document/cookie/simple_document.cookie_framework).\n\n```js\n/*\n  const docCookies = ... get the \"docCookies\" object here:\n  https://reference.codeproject.com/dom/document/cookie/simple_document.cookie_framework\n*/\n\nconst docCookies = new Proxy(docCookies, {\n  get(target, key) {\n    return target[key] ?? target.getItem(key) ?? undefined;\n  },\n  set(target, key, value) {\n    if (key in target) {\n      return false;\n    }\n    return target.setItem(key, value);\n  },\n  deleteProperty(target, key) {\n    if (!(key in target)) {\n      return false;\n    }\n    return target.removeItem(key);\n  },\n  ownKeys(target) {\n    return target.keys();\n  },\n  has(target, key) {\n    return key in target || target.hasItem(key);\n  },\n  defineProperty(target, key, descriptor) {\n    if (descriptor && \"value\" in descriptor) {\n      target.setItem(key, descriptor.value);\n    }\n    return target;\n  },\n  getOwnPropertyDescriptor(target, key) {\n    const value = target.getItem(key);\n    return value\n      ? {\n          value,\n          writable: true,\n          enumerable: true,\n          configurable: false,\n        }\n      : undefined;\n  },\n});\n\n/* Cookies test */\n\nconsole.log((docCookies.myCookie1 = \"First value\"));\nconsole.log(docCookies.getItem(\"myCookie1\"));\n\ndocCookies.setItem(\"myCookie1\", \"Changed value\");\nconsole.log(docCookies.myCookie1);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Proxies are awesome](https://youtu.be/sClk6aB_CPk) presentation by Brendan Eich at JSConf (2014)\n",
    "proxy": {
      "apply": {
        "index.md": "---\ntitle: handler.apply()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/apply\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.apply\n---\n\n{{JSRef}}\n\nThe **`handler.apply()`** method is a trap for the `[[Call]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as function calls.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-apply.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  apply(target, thisArg, argumentsList) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameters are passed to the `apply()` method. `this` is bound to the handler.\n\n- `target`\n  - : The target callable object.\n- `thisArg`\n  - : The `this` argument for the call.\n- `argumentsList`\n  - : The list of arguments for the call.\n\n### Return value\n\nThe `apply()` method can return any value.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- Function call: `proxy(...args)`\n- {{jsxref(\"Function.prototype.apply()\")}} and {{jsxref(\"Function.prototype.call()\")}}\n- {{jsxref(\"Reflect.apply()\")}}\n\nOr any other operation that invokes the `[[Call]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- The `target` must be a callable itself. That is, it must be a function object.\n\n## Examples\n\n### Trapping a function call\n\nThe following code traps a function call.\n\n```js\nconst p = new Proxy(function () {}, {\n  apply(target, thisArg, argumentsList) {\n    console.log(`called: ${argumentsList}`);\n    return argumentsList[0] + argumentsList[1] + argumentsList[2];\n  },\n});\n\nconsole.log(p(1, 2, 3)); // \"called: 1,2,3\"\n// 6\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Function.prototype.apply()\")}}\n- {{jsxref(\"Function.prototype.call()\")}}\n- {{jsxref(\"Reflect.apply()\")}}\n"
      },
      "construct": {
        "index.md": "---\ntitle: handler.construct()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/construct\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.construct\n---\n\n{{JSRef}}\n\nThe **`handler.construct()`** method is a trap for the `[[Construct]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as the {{jsxref(\"Operators/new\", \"new\")}} operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself be a valid constructor.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-construct.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  construct(target, argumentsList, newTarget) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameters are passed to the `construct()` method. `this` is bound to the handler.\n\n- `target`\n  - : The target object.\n- `argumentsList`\n  - : The list of arguments for the constructor.\n- `newTarget`\n  - : The constructor that was originally called.\n\n### Return value\n\nThe `construct` method must return an object.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- The [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator: `new myFunction(...args)`\n- {{jsxref(\"Reflect.construct()\")}}\n\nOr any other operation that invokes the `[[Construct]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- The result must be an `Object`.\n\n## Examples\n\n### Trapping the new operator\n\nThe following code traps the {{jsxref(\"Operators/new\", \"new\")}} operator.\n\n```js\nconst p = new Proxy(function () {}, {\n  construct(target, argumentsList, newTarget) {\n    console.log(`called: ${argumentsList}`);\n    return { value: argumentsList[0] * 10 };\n  },\n});\n\nconsole.log(new p(1).value); // \"called: 1\"\n// 10\n```\n\nThe following code violates the invariant.\n\n```js example-bad\nconst p = new Proxy(function () {}, {\n  construct(target, argumentsList, newTarget) {\n    return 1;\n  },\n});\n\nnew p(); // TypeError is thrown\n```\n\nThe following code improperly initializes the proxy. The `target` in Proxy initialization must itself be a valid constructor for the {{jsxref(\"Operators/new\", \"new\")}} operator.\n\n```js example-bad\nconst p = new Proxy(\n  {},\n  {\n    construct(target, argumentsList, newTarget) {\n      return {};\n    },\n  },\n);\n\nnew p(); // TypeError is thrown, \"p\" is not a constructor\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Operators/new\", \"new\")}}\n- {{jsxref(\"Reflect.construct()\")}}\n"
      },
      "defineproperty": {
        "index.md": "---\ntitle: handler.defineProperty()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.defineProperty\n---\n\n{{JSRef}}\n\nThe **`handler.defineProperty()`** method is a trap for the `[[DefineOwnProperty]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as {{jsxref(\"Object.defineProperty()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-defineproperty.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  defineProperty(target, property, descriptor) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameters are passed to the `defineProperty()` method.\n`this` is bound to the handler.\n\n- `target`\n  - : The target object.\n- `property`\n  - : The name or {{jsxref(\"Symbol\")}} of the property whose description is to be\n    retrieved.\n- `descriptor`\n  - : The descriptor for the property being defined or modified.\n\n### Return value\n\nThe `defineProperty()` method must return a {{jsxref(\"Boolean\")}} indicating\nwhether or not the property has been successfully defined.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- {{jsxref(\"Object.defineProperty()\")}}, {{jsxref(\"Object.defineProperties()\")}}\n- {{jsxref(\"Reflect.defineProperty()\")}}\n\nOr any other operation that invokes the `[[DefineOwnProperty]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- A property cannot be added, if the target object is not extensible.\n- A property cannot be added as or modified to be non-configurable, if it does not\n  exists as a non-configurable own property of the target object.\n- A property may not be non-configurable, if a corresponding configurable property of\n  the target object exists.\n- If a property has a corresponding target object property then\n  `Object.defineProperty(target, prop, descriptor)`\n  will not throw an exception.\n- In strict mode, a `false` return value from the\n  `defineProperty()` handler will throw a {{jsxref(\"TypeError\")}} exception.\n\n## Examples\n\n### Trapping of defineProperty\n\nThe following code traps {{jsxref(\"Object.defineProperty()\")}}.\n\n```js\nconst p = new Proxy(\n  {},\n  {\n    defineProperty(target, prop, descriptor) {\n      console.log(`called: ${prop}`);\n      return true;\n    },\n  },\n);\n\nconst desc = { configurable: true, enumerable: true, value: 10 };\nObject.defineProperty(p, \"a\", desc); // \"called: a\"\n```\n\nWhen calling {{jsxref(\"Object.defineProperty()\")}} or\n{{jsxref(\"Reflect.defineProperty()\")}}, the `descriptor` passed to\n`defineProperty()` trap has one restriction—only following properties are\nusable (non-standard properties will be ignored):\n\n- `enumerable`\n- `configurable`\n- `writable`\n- `value`\n- `get`\n- `set`\n\n```js\nconst p = new Proxy(\n  {},\n  {\n    defineProperty(target, prop, descriptor) {\n      console.log(descriptor);\n      return Reflect.defineProperty(target, prop, descriptor);\n    },\n  },\n);\n\nObject.defineProperty(p, \"name\", {\n  value: \"proxy\",\n  type: \"custom\",\n}); // { value: 'proxy' }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Object.defineProperty()\")}}\n- {{jsxref(\"Reflect.defineProperty()\")}}\n"
      },
      "deleteproperty": {
        "index.md": "---\ntitle: handler.deleteProperty()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.deleteProperty\n---\n\n{{JSRef}}\n\nThe **`handler.deleteProperty()`** method is a trap for the `[[Delete]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as the {{jsxref(\"Operators/delete\", \"delete\")}} operator.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-deleteproperty.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  deleteProperty(target, property) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameters are passed to the `deleteProperty()` method.\n`this` is bound to the handler.\n\n- `target`\n  - : The target object.\n- `property`\n  - : The name or {{jsxref(\"Symbol\")}} of the property to delete.\n\n### Return value\n\nThe `deleteProperty()` method must return a boolean value indicating\nwhether or not the property has been successfully deleted.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- The [`delete`](/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator: `delete proxy[foo]` and\n  `delete proxy.foo`\n- {{jsxref(\"Reflect.deleteProperty()\")}}\n\nOr any other operation that invokes the `[[Delete]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- A property cannot be deleted, if it exists as a non-configurable own property of the\n  target object.\n\n## Examples\n\n### Trapping the delete operator\n\nThe following code traps the {{jsxref(\"Operators/delete\", \"delete\")}} operator.\n\n```js\nconst p = new Proxy(\n  {},\n  {\n    deleteProperty(target, prop) {\n      if (!(prop in target)) {\n        console.log(`property not found: ${prop}`);\n        return false;\n      }\n      delete target[prop];\n      console.log(`property removed: ${prop}`);\n      return true;\n    },\n  },\n);\n\np.a = 10;\nconsole.log(\"a\" in p); // true\n\nconst result1 = delete p.a; // \"property removed: a\"\nconsole.log(result1); // true\nconsole.log(\"a\" in p); // false\n\nconst result2 = delete p.a; // \"property not found: a\"\nconsole.log(result2); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Operators/delete\", \"delete\")}}\n- {{jsxref(\"Reflect.deleteProperty()\")}}\n"
      },
      "get": {
        "index.md": "---\ntitle: handler.get()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.get\n---\n\n{{JSRef}}\n\nThe **`handler.get()`** method is a trap for the `[[Get]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as [property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors).\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-get.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  get(target, property, receiver) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameters are passed to the `get()` method. `this`\nis bound to the handler.\n\n- `target`\n  - : The target object.\n- `property`\n  - : The name or {{jsxref(\"Symbol\")}} of the property to get.\n- `receiver`\n  - : Either the proxy or an object that inherits from the proxy.\n\n### Return value\n\nThe `get()` method can return any value.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- Property access: `proxy[foo]` and `proxy.bar`\n- {{jsxref(\"Reflect.get()\")}}\n\nOr any other operation that invokes the `[[Get]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- The value reported for a property must be the same as the value of the corresponding\n  target object property if the target object property is a non-writable,\n  non-configurable own data property.\n- The value reported for a property must be undefined if the corresponding target\n  object property is a non-configurable own accessor property that has\n  `undefined` as its `[[Get]]` attribute.\n\n## Examples\n\n### Trap for getting a property value\n\nThe following code traps getting a property value.\n\n```js\nconst p = new Proxy(\n  {},\n  {\n    get(target, property, receiver) {\n      console.log(`called: ${property}`);\n      return 10;\n    },\n  },\n);\n\nconsole.log(p.a);\n// \"called: a\"\n// 10\n```\n\nThe following code violates an invariant.\n\n```js\nconst obj = {};\nObject.defineProperty(obj, \"a\", {\n  configurable: false,\n  enumerable: false,\n  value: 10,\n  writable: false,\n});\n\nconst p = new Proxy(obj, {\n  get(target, property) {\n    return 20;\n  },\n});\n\np.a; // TypeError is thrown\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Reflect.get()\")}}\n"
      },
      "getownpropertydescriptor": {
        "index.md": "---\ntitle: handler.getOwnPropertyDescriptor()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.getOwnPropertyDescriptor\n---\n\n{{JSRef}}\n\nThe **`handler.getOwnPropertyDescriptor()`** method is a trap for the `[[GetOwnProperty]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-getownpropertydescriptor.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  getOwnPropertyDescriptor(target, prop) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameters are passed to the `getOwnPropertyDescriptor()` method. `this` is bound to the handler.\n\n- `target`\n  - : The target object.\n- `prop`\n  - : The name of the property whose description should be retrieved.\n\n### Return value\n\nThe `getOwnPropertyDescriptor()` method must return an object or `undefined`.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}\n- {{jsxref(\"Reflect.getOwnPropertyDescriptor()\")}}\n\nOr any other operation that invokes the `[[GetOwnProperty]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- `getOwnPropertyDescriptor()` must return an object or `undefined`.\n- A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.\n- A property cannot be reported as non-existent, if it exists as an own property of the target object and the target object is not extensible.\n- A property cannot be reported as existent, if it does not exists as an own property of the target object and the target object is not extensible.\n- A property cannot be reported as non-configurable, if it does not exists as an own property of the target object or if it exists as a configurable own property of the target object.\n- The result of `Object.getOwnPropertyDescriptor(target)` can be applied to the target object using `Object.defineProperty()` and will not throw an exception.\n\n## Examples\n\n### Trapping of getOwnPropertyDescriptor\n\nThe following code traps {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}.\n\n```js\nconst p = new Proxy(\n  { a: 20 },\n  {\n    getOwnPropertyDescriptor(target, prop) {\n      console.log(`called: ${prop}`);\n      return { configurable: true, enumerable: true, value: 10 };\n    },\n  },\n);\n\nconsole.log(Object.getOwnPropertyDescriptor(p, \"a\").value);\n// \"called: a\"\n// 10\n```\n\nThe following code violates an invariant.\n\n```js example-bad\nconst obj = { a: 10 };\nObject.preventExtensions(obj);\nconst p = new Proxy(obj, {\n  getOwnPropertyDescriptor(target, prop) {\n    return undefined;\n  },\n});\n\nObject.getOwnPropertyDescriptor(p, \"a\"); // TypeError is thrown\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}\n- {{jsxref(\"Reflect.getOwnPropertyDescriptor()\")}}\n"
      },
      "getprototypeof": {
        "index.md": "---\ntitle: handler.getPrototypeOf()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getPrototypeOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.getPrototypeOf\n---\n\n{{JSRef}}\n\nThe **`handler.getPrototypeOf()`** method is a trap for the `[[GetPrototypeOf]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as {{jsxref(\"Object.getPrototypeOf()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-getprototypeof.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(obj, {\n  getPrototypeOf(target) {\n    // …\n  }\n});\n```\n\n### Parameters\n\nThe following parameter is passed to the `getPrototypeOf()` method.\n`this` is bound to the handler.\n\n- `target`\n  - : The target object.\n\n### Return value\n\nThe `getPrototypeOf()` method must return an object or `null`.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- {{jsxref(\"Object.getPrototypeOf()\")}}\n- {{jsxref(\"Reflect.getPrototypeOf()\")}}\n- [`__proto__`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto)\n- {{jsxref(\"Object.prototype.isPrototypeOf()\")}}\n- {{jsxref(\"Operators/instanceof\", \"instanceof\")}}\n\nOr any other operation that invokes the `[[GetPrototypeOf]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- `getPrototypeOf()` method must return an object or `null`.\n- If `target` is not extensible,\n  `Object.getPrototypeOf(proxy)` method must return the same\n  value as `Object.getPrototypeOf(target)`.\n\n## Examples\n\n### Basic usage\n\n```js\nconst obj = {};\nconst proto = {};\nconst handler = {\n  getPrototypeOf(target) {\n    console.log(target === obj); // true\n    console.log(this === handler); // true\n    return proto;\n  },\n};\n\nconst p = new Proxy(obj, handler);\nconsole.log(Object.getPrototypeOf(p) === proto); // true\n```\n\n### Five ways to trigger the getPrototypeOf trap\n\n```js\nconst obj = {};\nconst p = new Proxy(obj, {\n  getPrototypeOf(target) {\n    return Array.prototype;\n  },\n});\nconsole.log(\n  Object.getPrototypeOf(p) === Array.prototype, // true\n  Reflect.getPrototypeOf(p) === Array.prototype, // true\n  p.__proto__ === Array.prototype, // true\n  Array.prototype.isPrototypeOf(p), // true\n  p instanceof Array, // true\n);\n```\n\n### Two kinds of exceptions\n\n```js example-bad\nconst obj = {};\nconst p = new Proxy(obj, {\n  getPrototypeOf(target) {\n    return \"foo\";\n  },\n});\nObject.getPrototypeOf(p); // TypeError: \"foo\" is not an object or null\n\nconst obj2 = Object.preventExtensions({});\nconst p2 = new Proxy(obj2, {\n  getPrototypeOf(target) {\n    return {};\n  },\n});\nObject.getPrototypeOf(p2); // TypeError: expected same prototype value\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Object.getPrototypeOf()\")}}\n- {{jsxref(\"Reflect.getPrototypeOf()\")}}\n"
      },
      "has": {
        "index.md": "---\ntitle: handler.has()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/has\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.has\n---\n\n{{JSRef}}\n\nThe **`handler.has()`** method is a trap for the `[[HasProperty]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as the {{jsxref(\"Operators/in\", \"in\")}} operator.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-has.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  has(target, prop) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameters are passed to `has()` method. `this` is\nbound to the handler.\n\n- `target`\n  - : The target object.\n- `prop`\n  - : The name or {{jsxref(\"Symbol\")}} of the property to check for existence.\n\n### Return value\n\nThe `has()` method must return a boolean value.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- The [`in`](/en-US/docs/Web/JavaScript/Reference/Operators/in) operator: `foo in proxy`\n- [`with`](/en-US/docs/Web/JavaScript/Reference/Statements/with) check: `with(proxy) { (foo); }`\n- {{jsxref(\"Reflect.has()\")}}\n\nOr any other operation that invokes the `[[HasProperty]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- A property cannot be reported as non-existent, if it exists as a non-configurable\n  own property of the target object.\n- A property cannot be reported as non-existent, if it exists as an own property of\n  the target object and the target object is not extensible.\n\n## Examples\n\n### Trapping the in operator\n\nThe following code traps the {{jsxref(\"Operators/in\", \"in\")}} operator.\n\n```js\nconst p = new Proxy(\n  {},\n  {\n    has(target, prop) {\n      console.log(`called: ${prop}`);\n      return true;\n    },\n  },\n);\n\nconsole.log(\"a\" in p);\n// \"called: a\"\n// true\n```\n\nThe following code violates an invariant.\n\n```js example-bad\nconst obj = { a: 10 };\nObject.preventExtensions(obj);\n\nconst p = new Proxy(obj, {\n  has(target, prop) {\n    return false;\n  },\n});\n\n\"a\" in p; // TypeError is thrown\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Operators/in\", \"in\")}}\n- {{jsxref(\"Reflect.has()\")}}\n"
      },
      "index.md": "---\ntitle: Proxy() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Proxy.Proxy\n---\n\n{{JSRef}}\n\nThe **`Proxy()`** constructor creates {{jsxref(\"Proxy\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, handler)\n```\n\n> **Note:** `Proxy()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `target`\n  - : A target object to wrap with `Proxy`. It can be any sort of object,\n    including a native array, a function, or even another proxy.\n- `handler`\n  - : An object whose properties are functions that define the behavior of the proxy when\n    an operation is performed on it.\n\n## Description\n\nUse the `Proxy()` constructor to create a new `Proxy` object.\nThis constructor takes two mandatory arguments:\n\n- `target` is the object for which you want to create the proxy\n- `handler` is the object that defines the custom behavior of the proxy.\n\nAn empty handler will create a proxy that behaves, in almost all respects, exactly like\nthe target. By defining any of a set group of functions on the `handler`\nobject, you can customize specific aspects of the proxy's behavior. For example, by\ndefining `get()` you can provide a customized version of the target's\n[property accessor](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors).\n\n### Handler functions\n\nThis section lists all the handler functions you can define. Handler functions are\nsometimes called _traps_, because they trap calls to the underlying target\nobject.\n\n- {{jsxref(\"Proxy/Proxy/apply\", \"handler.apply()\")}}\n  - : A trap for a function call.\n- {{jsxref(\"Proxy/Proxy/construct\", \"handler.construct()\")}}\n  - : A trap for the {{jsxref(\"Operators/new\", \"new\")}} operator.\n- {{jsxref(\"Proxy/Proxy/defineProperty\", \"handler.defineProperty()\")}}\n  - : A trap for {{jsxref(\"Object.defineProperty\")}}.\n- {{jsxref(\"Proxy/Proxy/deleteProperty\", \"handler.deleteProperty()\")}}\n  - : A trap for the {{jsxref(\"Operators/delete\", \"delete\")}} operator.\n- {{jsxref(\"Proxy/Proxy/get\", \"handler.get()\")}}\n  - : A trap for getting property values.\n- {{jsxref(\"Proxy/Proxy/getOwnPropertyDescriptor\", \"handler.getOwnPropertyDescriptor()\")}}\n  - : A trap for {{jsxref(\"Object.getOwnPropertyDescriptor\")}}.\n- {{jsxref(\"Proxy/Proxy/getPrototypeOf\", \"handler.getPrototypeOf()\")}}\n  - : A trap for {{jsxref(\"Object.getPrototypeOf\")}}.\n- {{jsxref(\"Proxy/Proxy/has\", \"handler.has()\")}}\n  - : A trap for the {{jsxref(\"Operators/in\", \"in\")}} operator.\n- {{jsxref(\"Proxy/Proxy/isExtensible\", \"handler.isExtensible()\")}}\n  - : A trap for {{jsxref(\"Object.isExtensible\")}}.\n- {{jsxref(\"Proxy/Proxy/ownKeys\", \"handler.ownKeys()\")}}\n  - : A trap for {{jsxref(\"Object.getOwnPropertyNames\")}} and\n    {{jsxref(\"Object.getOwnPropertySymbols\")}}.\n- {{jsxref(\"Proxy/Proxy/preventExtensions\", \"handler.preventExtensions()\")}}\n  - : A trap for {{jsxref(\"Object.preventExtensions\")}}.\n- {{jsxref(\"Proxy/Proxy/set\", \"handler.set()\")}}\n  - : A trap for setting property values.\n- {{jsxref(\"Proxy/Proxy/setPrototypeOf\", \"handler.setPrototypeOf()\")}}\n  - : A trap for {{jsxref(\"Object.setPrototypeOf\")}}.\n\n## Examples\n\n### Selectively proxy property accessors\n\nIn this example the target has two properties, `notProxied` and\n`proxied`. We define a handler that returns a different value for\n`proxied`, and lets any other accesses through to the target.\n\n```js\nconst target = {\n  notProxied: \"original value\",\n  proxied: \"original value\",\n};\n\nconst handler = {\n  get(target, prop, receiver) {\n    if (prop === \"proxied\") {\n      return \"replaced value\";\n    }\n    return Reflect.get(...arguments);\n  },\n};\n\nconst proxy = new Proxy(target, handler);\n\nconsole.log(proxy.notProxied); // \"original value\"\nconsole.log(proxy.proxied); // \"replaced value\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Meta programming](/en-US/docs/Web/JavaScript/Guide/Meta_programming) guide\n- {{jsxref(\"Reflect\")}}\n",
      "isextensible": {
        "index.md": "---\ntitle: handler.isExtensible()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/isExtensible\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.isExtensible\n---\n\n{{JSRef}}\n\nThe **`handler.isExtensible()`** method is a trap for the `[[IsExtensible]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as {{jsxref(\"Object.isExtensible()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-isextensible.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  isExtensible(target) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameter is passed to the `isExtensible()` method.\n`this` is bound to the handler.\n\n- `target`\n  - : The target object.\n\n### Return value\n\nThe `isExtensible()` method must return a boolean value.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- {{jsxref(\"Object.isExtensible()\")}}\n- {{jsxref(\"Reflect.isExtensible()\")}}\n\nOr any other operation that invokes the `[[IsExtensible]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- `Object.isExtensible(proxy)` must return the same value as\n  `Object.isExtensible(target)`.\n\n## Examples\n\n### Trapping of isExtensible\n\nThe following code traps {{jsxref(\"Object.isExtensible()\")}}.\n\n```js\nconst p = new Proxy(\n  {},\n  {\n    isExtensible(target) {\n      console.log(\"called\");\n      return true;\n    },\n  },\n);\n\nconsole.log(Object.isExtensible(p));\n// \"called\"\n// true\n```\n\nThe following code violates the invariant.\n\n```js example-bad\nconst p = new Proxy(\n  {},\n  {\n    isExtensible(target) {\n      return false;\n    },\n  },\n);\n\nObject.isExtensible(p); // TypeError is thrown\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Object.isExtensible()\")}}\n- {{jsxref(\"Reflect.isExtensible()\")}}\n- {{jsxref(\"Reflect.preventExtensions()\")}}\n"
      },
      "ownkeys": {
        "index.md": "---\ntitle: handler.ownKeys()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.ownKeys\n---\n\n{{JSRef}}\n\nThe **`handler.ownKeys()`** method is a trap for the `[[OwnPropertyKeys]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as {{jsxref(\"Object.keys()\")}}, {{jsxref(\"Reflect.ownKeys()\")}}, etc.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-ownkeys.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  ownKeys(target) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameter is passed to the `ownKeys()` method.\n`this` is bound to the handler.\n\n- `target`\n  - : The target object.\n\n### Return value\n\nThe `ownKeys()` method must return an enumerable object.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- {{jsxref(\"Object.getOwnPropertyNames()\")}}\n- {{jsxref(\"Object.getOwnPropertySymbols()\")}}\n- {{jsxref(\"Object.keys()\")}}\n- {{jsxref(\"Reflect.ownKeys()\")}}\n\nOr any other operation that invokes the `[[OwnPropertyKeys]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- The result of `ownKeys()` must be an array.\n- The type of each array element is either a {{jsxref(\"String\")}} or a\n  {{jsxref(\"Symbol\")}}.\n- The result List must contain the keys of all non-configurable own properties of the\n  target object.\n- If the target object is not extensible, then the result List must contain all the\n  keys of the own properties of the target object and no other values.\n\n## Examples\n\n### Trapping of getOwnPropertyNames\n\nThe following code traps {{jsxref(\"Object.getOwnPropertyNames()\")}}.\n\n```js\nconst p = new Proxy(\n  {},\n  {\n    ownKeys(target) {\n      console.log(\"called\");\n      return [\"a\", \"b\", \"c\"];\n    },\n  },\n);\n\nconsole.log(Object.getOwnPropertyNames(p));\n// \"called\"\n// [ 'a', 'b', 'c' ]\n```\n\nThe following code violates an invariant.\n\n```js example-bad\nconst obj = {};\nObject.defineProperty(obj, \"a\", {\n  configurable: false,\n  enumerable: true,\n  value: 10,\n});\n\nconst p = new Proxy(obj, {\n  ownKeys(target) {\n    return [123, 12.5, true, false, undefined, null, {}, []];\n  },\n});\n\nconsole.log(Object.getOwnPropertyNames(p));\n\n// TypeError: proxy [[OwnPropertyKeys]] must return an array\n// with only string and symbol elements\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Object.getOwnPropertyNames()\")}}\n- {{jsxref(\"Reflect.ownKeys()\")}}\n"
      },
      "preventextensions": {
        "index.md": "---\ntitle: handler.preventExtensions()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/preventExtensions\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.preventExtensions\n---\n\n{{JSRef}}\n\nThe **`handler.preventExtensions()`** method is a trap for the `[[PreventExtensions]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as {{jsxref(\"Object.preventExtensions()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-preventextensions.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  preventExtensions(target) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameter is passed to the `preventExtensions()` method. `this` is bound to the handler.\n\n- `target`\n  - : The target object.\n\n### Return value\n\nThe `preventExtensions()` method must return a boolean value.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- {{jsxref(\"Object.preventExtensions()\")}}\n- {{jsxref(\"Reflect.preventExtensions()\")}}\n- {{jsxref(\"Object.seal()\")}}\n- {{jsxref(\"Object.freeze()\")}}\n\nOr any other operation that invokes the `[[PreventExtensions]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- `Object.preventExtensions(proxy)` only returns `true` if `Object.isExtensible(proxy)` is `false`.\n\n## Examples\n\n### Trapping of preventExtensions\n\nThe following code traps {{jsxref(\"Object.preventExtensions()\")}}.\n\n```js\nconst p = new Proxy(\n  {},\n  {\n    preventExtensions(target) {\n      console.log(\"called\");\n      Object.preventExtensions(target);\n      return true;\n    },\n  },\n);\n\nconsole.log(Object.preventExtensions(p));\n// \"called\"\n// false\n```\n\nThe following code violates the invariant.\n\n```js example-bad\nconst p = new Proxy(\n  {},\n  {\n    preventExtensions(target) {\n      return true;\n    },\n  },\n);\n\nObject.preventExtensions(p); // TypeError is thrown\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Object.preventExtensions()\")}}\n- {{jsxref(\"Reflect.preventExtensions()\")}}\n"
      },
      "set": {
        "index.md": "---\ntitle: handler.set()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.set\n---\n\n{{JSRef}}\n\nThe **`handler.set()`** method is a trap for the `[[Set]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as using [property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) to set a property's value.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-set.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  set(target, property, value, receiver) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameters are passed to the `set()` method. `this`\nis bound to the handler.\n\n- `target`\n  - : The target object.\n- `property`\n  - : The name or {{jsxref(\"Symbol\")}} of the property to set.\n- `value`\n  - : The new value of the property to set.\n- `receiver`\n\n  - : The object to which the assignment was originally directed. This is usually the\n    proxy itself. But a `set()` handler can also be called indirectly, via\n    the prototype chain or various other ways.\n\n    For example, suppose a script does\n    `obj.name = \"jen\"`, and `obj` is not a\n    proxy, and has no own property `.name`, but it has a proxy on its\n    prototype chain. That proxy's `set()` handler will be called, and\n    `obj` will be passed as the receiver.\n\n### Return value\n\nThe `set()` method should return a boolean value.\n\n- Return `true` to indicate that assignment succeeded.\n- If the `set()` method returns `false`, and the assignment\n  happened in strict-mode code, a {{jsxref(\"TypeError\")}} will be thrown.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- Property assignment: `proxy[foo] = bar` and `proxy.foo = bar`\n- {{jsxref(\"Reflect.set()\")}}\n\nOr any other operation that invokes the `[[Set]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- Cannot change the value of a property to be different from the value of the\n  corresponding target object property if the corresponding target object property is a\n  non-writable, non-configurable data property.\n- Cannot set the value of a property if the corresponding target object property is a\n  non-configurable accessor property that has `undefined` as its\n  `[[Set]]` attribute.\n- In strict mode, a `false` return value from the `set()`\n  handler will throw a {{jsxref(\"TypeError\")}} exception.\n\n## Examples\n\n### Trap setting of a property value\n\nThe following code traps setting a property value.\n\n```js\nconst p = new Proxy(\n  {},\n  {\n    set(target, prop, value, receiver) {\n      target[prop] = value;\n      console.log(`property set: ${prop} = ${value}`);\n      return true;\n    },\n  },\n);\n\nconsole.log(\"a\" in p); // false\n\np.a = 10; // \"property set: a = 10\"\nconsole.log(\"a\" in p); // true\nconsole.log(p.a); // 10\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Reflect.set()\")}}\n"
      },
      "setprototypeof": {
        "index.md": "---\ntitle: handler.setPrototypeOf()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/setPrototypeOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Proxy.handler.setPrototypeOf\n---\n\n{{JSRef}}\n\nThe **`handler.setPrototypeOf()`** method is a trap for the `[[SetPrototypeOf]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods), which is used by operations such as {{jsxref(\"Object.setPrototypeOf()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/proxyhandler-setprototypeof.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnew Proxy(target, {\n  setPrototypeOf(target, prototype) {\n  }\n});\n```\n\n### Parameters\n\nThe following parameters are passed to the `setPrototypeOf()` method.\n`this` is bound to the handler.\n\n- `target`\n  - : The target object.\n- `prototype`\n  - : The object's new prototype or `null`.\n\n### Return value\n\nThe `setPrototypeOf()` method returns `true` if the\n`[[Prototype]]` was successfully changed, otherwise `false`.\n\n## Description\n\n### Interceptions\n\nThis trap can intercept these operations:\n\n- {{jsxref(\"Object.setPrototypeOf()\")}}\n- {{jsxref(\"Reflect.setPrototypeOf()\")}}\n\nOr any other operation that invokes the `[[SetPrototypeOf]]` [internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods).\n\n### Invariants\n\nIf the following invariants are violated, the trap throws a {{jsxref(\"TypeError\")}} when invoked.\n\n- If `target` is not extensible, the `prototype`\n  parameter must be the same value as\n  `Object.getPrototypeOf(target)`.\n\n## Examples\n\nIf you want to disallow setting a new prototype for your object, your handler's\n`setPrototypeOf()` method can either return `false`, or it can\nthrow an exception.\n\n### Approach 1: Returning false\n\nThis approach means that any mutating operation that throws an exception on failure to\nmutate, must create the exception itself.\n\nFor example, {{jsxref(\"Object.setPrototypeOf()\")}} will create and throw a\n{{jsxref(\"TypeError\")}} itself. If the mutation is performed by an operation that\n_doesn't_ ordinarily throw in case of failure, such as\n{{jsxref(\"Reflect.setPrototypeOf()\")}}, no exception will be thrown.\n\n```js\nconst handlerReturnsFalse = {\n  setPrototypeOf(target, newProto) {\n    return false;\n  },\n};\n\nconst newProto = {},\n  target = {};\n\nconst p1 = new Proxy(target, handlerReturnsFalse);\nObject.setPrototypeOf(p1, newProto); // throws a TypeError\nReflect.setPrototypeOf(p1, newProto); // returns false\n```\n\n### Approach 2: Throwing an Exception\n\nThe latter approach will cause _any_ operation that attempts to mutate, to\nthrow. This approach is best if you want even non-throwing operations to throw on\nfailure, or you want to throw a custom exception value.\n\n```js\nconst handlerThrows = {\n  setPrototypeOf(target, newProto) {\n    throw new Error(\"custom error\");\n  },\n};\n\nconst newProto = {},\n  target = {};\n\nconst p2 = new Proxy(target, handlerThrows);\nObject.setPrototypeOf(p2, newProto); // throws new Error(\"custom error\")\nReflect.setPrototypeOf(p2, newProto); // throws new Error(\"custom error\")\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n- [`Proxy()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy)\n- {{jsxref(\"Object.setPrototypeOf()\")}}\n- {{jsxref(\"Reflect.setPrototypeOf()\")}}\n"
      }
    },
    "revocable": {
      "index.md": "---\ntitle: Proxy.revocable()\nslug: Web/JavaScript/Reference/Global_Objects/Proxy/revocable\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Proxy.revocable\n---\n\n{{JSRef}}\n\nThe **`Proxy.revocable()`** static method creates a revocable {{jsxref(\"Proxy\")}} object.\n\n## Syntax\n\n```js-nolint\nProxy.revocable(target, handler)\n```\n\n### Parameters\n\n- `target`\n  - : A target object to wrap with `Proxy`. It can be any sort of object, including a native array, a function, or even another proxy.\n- `handler`\n  - : An object whose properties are functions defining the behavior of `proxy` when an operation is performed on it.\n\n### Return value\n\nA plain object with the following two properties:\n\n- `proxy`\n  - : A Proxy object exactly the same as one created with a [`new Proxy(target, handler)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy) call.\n- `revoke`\n  - : A function with no parameters to revoke (switch off) the `proxy`.\n\n## Description\n\nThe `Proxy.revocable()` factory function is the same as the [`Proxy()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy) constructor, except that in addition to creating a proxy object, it also creates a `revoke` function that can be called to disable the proxy. The proxy object and the `revoke` function are wrapped in a plain object.\n\nThe `revoke` function does not take any parameters, nor does it rely on the `this` value. The created `proxy` object is attached to the `revoke` function as a [private property](/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties) that the `revoke` function accesses on itself when called (the existence of the private property is not observable from the outside, but it has implications on how garbage collection happens). The `proxy` object is _not_ captured within the [closure](/en-US/docs/Web/JavaScript/Closures) of the `revoke` function (which will make garbage collection of `proxy` impossible if `revoke` is still alive).\n\nAfter the `revoke()` function gets called, the proxy becomes unusable: any trap to a handler throws a {{jsxref(\"TypeError\")}}. Once a proxy is revoked, it remains revoked, and calling `revoke()` again has no effect — in fact, the call to `revoke()` detaches the `proxy` object from the `revoke` function, so the `revoke` function will not be able to access the proxy again at all. If the proxy is not referenced elsewhere, it will then be eligible for garbage collection. The `revoke` function also detaches `target` and `handler` from the `proxy`, so if `target` is not referenced elsewhere, it will also be eligible for garbage collection, even when its proxy is still alive, since there's no longer a way to meaningfully interact with the target object.\n\nLetting users interact with an object through a revocable proxy allows you to [control the lifetime](/en-US/docs/Web/JavaScript/Memory_management) of the object exposed to the user — you can make the object garbage-collectable even when the user is still holding a reference to its proxy.\n\n## Examples\n\n### Using Proxy.revocable()\n\n```js\nconst revocable = Proxy.revocable(\n  {},\n  {\n    get(target, name) {\n      return `[[${name}]]`;\n    },\n  },\n);\nconst proxy = revocable.proxy;\nconsole.log(proxy.foo); // \"[[foo]]\"\n\nrevocable.revoke();\n\nconsole.log(proxy.foo); // TypeError is thrown\nproxy.foo = 1; // TypeError again\ndelete proxy.foo; // still TypeError\ntypeof proxy; // \"object\", typeof doesn't trigger any trap\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n"
    }
  },
  "rangeerror": {
    "index.md": "---\ntitle: RangeError\nslug: Web/JavaScript/Reference/Global_Objects/RangeError\npage-type: javascript-class\nbrowser-compat: javascript.builtins.RangeError\n---\n\n{{JSRef}}\n\nThe **`RangeError`** object indicates an error when a value is not in the set or range of allowed values.\n\n## Description\n\nA `RangeError` is thrown when trying to pass a value as an argument to a function that does not allow a range that includes the value.\n\nThis can be encountered when:\n\n- passing a value that is not one of the allowed string values to {{jsxref(\"String.prototype.normalize()\")}}, or\n- when attempting to create an array of an illegal length with the {{jsxref(\"Array\")}} constructor, or\n- when passing bad values to the numeric methods {{jsxref(\"Number.prototype.toExponential()\")}}, {{jsxref(\"Number.prototype.toFixed()\")}} or {{jsxref(\"Number.prototype.toPrecision()\")}}.\n\n`RangeError` is a {{Glossary(\"serializable object\")}}, so it can be cloned with {{domxref(\"structuredClone()\")}} or copied between [Workers](/en-US/docs/Web/API/Worker) using {{domxref(\"Worker/postMessage()\", \"postMessage()\")}}.\n\n`RangeError` is a subclass of {{jsxref(\"Error\")}}.\n\n## Constructor\n\n- {{jsxref(\"RangeError/RangeError\", \"RangeError()\")}}\n  - : Creates a new `RangeError` object.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"Error\")}}_.\n\nThese properties are defined on `RangeError.prototype` and shared by all `RangeError` instances.\n\n- {{jsxref(\"Object/constructor\", \"RangeError.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `RangeError` instances, the initial value is the {{jsxref(\"RangeError/RangeError\", \"RangeError\")}} constructor.\n- {{jsxref(\"Error/name\", \"RangeError.prototype.name\")}}\n  - : Represents the name for the type of error. For `RangeError.prototype.name`, the initial value is `\"RangeError\"`.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"Error\")}}_.\n\n## Examples\n\n### Using RangeError (for numeric values)\n\n```js\nfunction check(n) {\n  if (!(n >= -500 && n <= 500)) {\n    throw new RangeError(\"The argument must be between -500 and 500.\");\n  }\n}\n\ntry {\n  check(2000);\n} catch (error) {\n  if (error instanceof RangeError) {\n    // Handle the error\n  }\n}\n```\n\n### Using RangeError (for non-numeric values)\n\n```js\nfunction check(value) {\n  if (![\"apple\", \"banana\", \"carrot\"].includes(value)) {\n    throw new RangeError(\n      'The argument must be an \"apple\", \"banana\", or \"carrot\".',\n    );\n  }\n}\n\ntry {\n  check(\"cabbage\");\n} catch (error) {\n  if (error instanceof RangeError) {\n    // Handle the error\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Number.prototype.toExponential()\")}}\n- {{jsxref(\"Number.prototype.toFixed()\")}}\n- {{jsxref(\"Number.prototype.toPrecision()\")}}\n- {{jsxref(\"String.prototype.normalize()\")}}\n",
    "rangeerror": {
      "index.md": "---\ntitle: RangeError() constructor\nslug: Web/JavaScript/Reference/Global_Objects/RangeError/RangeError\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.RangeError.RangeError\n---\n\n{{JSRef}}\n\nThe **`RangeError()`** constructor creates {{jsxref(\"RangeError\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew RangeError()\nnew RangeError(message)\nnew RangeError(message, options)\nnew RangeError(message, fileName)\nnew RangeError(message, fileName, lineNumber)\n\nRangeError()\nRangeError(message)\nRangeError(message, options)\nRangeError(message, fileName)\nRangeError(message, fileName, lineNumber)\n```\n\n> **Note:** `RangeError()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `RangeError` instance.\n\n### Parameters\n\n- `message` {{optional_inline}}\n  - : Human-readable description of the error.\n- `options` {{optional_inline}}\n  - : An object that has the following properties:\n    - `cause` {{optional_inline}}\n      - : A property indicating the specific cause of the error.\n        When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n- `fileName` {{optional_inline}} {{non-standard_inline}}\n  - : The name of the file containing the code that caused the exception\n- `lineNumber` {{optional_inline}} {{non-standard_inline}}\n  - : The line number of the code that caused the exception\n\n## Examples\n\n### Using RangeError (for numeric values)\n\n```js\nfunction check(n) {\n  if (!(n >= -500 && n <= 500)) {\n    throw new RangeError(\"The argument must be between -500 and 500.\");\n  }\n}\n\ntry {\n  check(2000);\n} catch (error) {\n  if (error instanceof RangeError) {\n    // Handle the error\n  }\n}\n```\n\n### Using RangeError (for non-numeric values)\n\n```js\nfunction check(value) {\n  if (![\"apple\", \"banana\", \"carrot\"].includes(value)) {\n    throw new RangeError(\n      'The argument must be an \"apple\", \"banana\", or \"carrot\".',\n    );\n  }\n}\n\ntry {\n  check(\"cabbage\");\n} catch (error) {\n  if (error instanceof RangeError) {\n    // Handle the error\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n- {{jsxref(\"Array\")}}\n- {{jsxref(\"Number.prototype.toExponential()\")}}\n- {{jsxref(\"Number.prototype.toFixed()\")}}\n- {{jsxref(\"Number.prototype.toPrecision()\")}}\n- {{jsxref(\"String.prototype.normalize()\")}}\n"
    }
  },
  "referenceerror": {
    "index.md": "---\ntitle: ReferenceError\nslug: Web/JavaScript/Reference/Global_Objects/ReferenceError\npage-type: javascript-class\nbrowser-compat: javascript.builtins.ReferenceError\n---\n\n{{JSRef}}\n\nThe **`ReferenceError`** object represents an error when a variable that doesn't exist (or hasn't yet been initialized) in the current scope is referenced.\n\n`ReferenceError` is a {{Glossary(\"serializable object\")}}, so it can be cloned with {{domxref(\"structuredClone()\")}} or copied between [Workers](/en-US/docs/Web/API/Worker) using {{domxref(\"Worker/postMessage()\", \"postMessage()\")}}.\n\n`ReferenceError` is a subclass of {{jsxref(\"Error\")}}.\n\n## Constructor\n\n- {{jsxref(\"ReferenceError/ReferenceError\", \"ReferenceError()\")}}\n  - : Creates a new `ReferenceError` object.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"Error\")}}_.\n\nThese properties are defined on `ReferenceError.prototype` and shared by all `ReferenceError` instances.\n\n- {{jsxref(\"Object/constructor\", \"ReferenceError.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `ReferenceError` instances, the initial value is the {{jsxref(\"ReferenceError/ReferenceError\", \"ReferenceError\")}} constructor.\n- {{jsxref(\"Error/name\", \"ReferenceError.prototype.name\")}}\n  - : Represents the name for the type of error. For `ReferenceError.prototype.name`, the initial value is `\"ReferenceError\"`.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"Error\")}}_.\n\n## Examples\n\n### Catching a ReferenceError\n\n```js\ntry {\n  let a = undefinedVariable;\n} catch (e) {\n  console.log(e instanceof ReferenceError); // true\n  console.log(e.message); // \"undefinedVariable is not defined\"\n  console.log(e.name); // \"ReferenceError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### Creating a ReferenceError\n\n```js\ntry {\n  throw new ReferenceError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof ReferenceError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"ReferenceError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n",
    "referenceerror": {
      "index.md": "---\ntitle: ReferenceError() constructor\nslug: Web/JavaScript/Reference/Global_Objects/ReferenceError/ReferenceError\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.ReferenceError.ReferenceError\n---\n\n{{JSRef}}\n\nThe **`ReferenceError()`** constructor creates {{jsxref(\"ReferenceError\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew ReferenceError()\nnew ReferenceError(message)\nnew ReferenceError(message, options)\nnew ReferenceError(message, fileName)\nnew ReferenceError(message, fileName, lineNumber)\n\nReferenceError()\nReferenceError(message)\nReferenceError(message, options)\nReferenceError(message, fileName)\nReferenceError(message, fileName, lineNumber)\n```\n\n> **Note:** `ReferenceError()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `ReferenceError` instance.\n\n### Parameters\n\n- `message` {{optional_inline}}\n  - : Human-readable description of the error.\n- `options` {{optional_inline}}\n  - : An object that has the following properties:\n    - `cause` {{optional_inline}}\n      - : A property indicating the specific cause of the error.\n        When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n- `fileName` {{optional_inline}} {{non-standard_inline}}\n  - : The name of the file containing the code that caused the exception.\n- `lineNumber` {{optional_inline}} {{non-standard_inline}}\n  - : The line number of the code that caused the exception\n\n## Examples\n\n### Catching a ReferenceError\n\n```js\ntry {\n  let a = undefinedVariable;\n} catch (e) {\n  console.log(e instanceof ReferenceError); // true\n  console.log(e.message); // \"undefinedVariable is not defined\"\n  console.log(e.name); // \"ReferenceError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### Creating a ReferenceError\n\n```js\ntry {\n  throw new ReferenceError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof ReferenceError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"ReferenceError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n"
    }
  },
  "reflect": {
    "apply": {
      "index.md": "---\ntitle: Reflect.apply()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/apply\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.apply\n---\n\n{{JSRef}}\n\nThe **`Reflect.apply()`** static method calls a target function with arguments as specified.\n\n{{EmbedInteractiveExample(\"pages/js/reflect-apply.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nReflect.apply(target, thisArgument, argumentsList)\n```\n\n### Parameters\n\n- `target`\n  - : The target function to call.\n- `thisArgument`\n  - : The value of `this` provided for the call to `target`.\n- `argumentsList`\n  - : An [array-like object](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects) specifying the arguments with which `target` should be called.\n\n### Return value\n\nThe result of calling the given `target` function with the specified `this` value and arguments.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not a function or `argumentsList` is not an object.\n\n## Description\n\n`Reflect.apply()` provides the reflective semantic of a function call. That is, `Reflect.apply(target, thisArgument, argumentsList)` is semantically equivalent to:\n\n```js\nMath.floor.apply(null, [1.75]);\nReflect.apply(Math.floor, null, [1.75]);\n```\n\nThe only differences are:\n\n- `Reflect.apply()` takes the function to call as the `target` parameter instead of the `this` context.\n- `Reflect.apply()` throws if `argumentsList` is omitted instead of defaulting to calling with no parameters.\n\n`Reflect.apply()` invokes the `[[Call]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.apply()\n\n```js\nReflect.apply(Math.floor, undefined, [1.75]);\n// 1;\n\nReflect.apply(String.fromCharCode, undefined, [104, 101, 108, 108, 111]);\n// \"hello\"\n\nReflect.apply(RegExp.prototype.exec, /ab/, [\"confabulation\"]).index;\n// 4\n\nReflect.apply(\"\".charAt, \"ponies\", [3]);\n// \"i\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.apply` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- {{jsxref(\"Function.prototype.apply()\")}}\n- [`handler.apply()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/apply)\n"
    },
    "construct": {
      "index.md": "---\ntitle: Reflect.construct()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/construct\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.construct\n---\n\n{{JSRef}}\n\nThe **`Reflect.construct()`** static method is like the {{jsxref(\"Operators/new\", \"new\")}} operator, but as a function. It is equivalent to calling `new target(...args)`. It gives also the added option to specify a different [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target) value.\n\n{{EmbedInteractiveExample(\"pages/js/reflect-construct.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nReflect.construct(target, argumentsList)\nReflect.construct(target, argumentsList, newTarget)\n```\n\n### Parameters\n\n- `target`\n  - : The target function to call.\n- `argumentsList`\n  - : An [array-like object](/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects) specifying the arguments with which `target` should be called.\n- `newTarget` {{optional_inline}}\n  - : The value of [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target) operator, which usually specifies the prototype of the returned object. If `newTarget` is not present, its value defaults to `target`.\n\n### Return value\n\nA new instance of `target` (or `newTarget`, if present), initialized by `target` as a constructor with the given `argumentsList`.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` or `newTarget` is not a constructor, or if `argumentsList` is not an object.\n\n## Description\n\n`Reflect.apply()` provides the reflective semantic of a constructor call. That is, `Reflect.construct(target, argumentsList, newTarget)` is semantically equivalent to:\n\n```js\nnew target(...argumentsList);\n```\n\nNote that when using the `new` operator, `target` and `newTarget` are always the same constructor — but `Reflect.construct()` allows you to pass a different [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target) value. Conceptually, `newTarget` is the function on which `new` was called, and `newTarget.prototype` will become the constructed object's prototype, while `target` is the constructor that is actually executed to initialize the object. For example, `new.target` may also be different from the currently executed constructor in class inheritance.\n\n```js\nclass A {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\nclass B extends A {}\n\nnew B(); // \"B\"\n```\n\n`Reflect.construct()` allows you to invoke a constructor with a variable number of arguments. (This is also possible with the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) in a normal constructor call.)\n\n```js\nconst obj = new Foo(...args);\nconst obj = Reflect.construct(Foo, args);\n```\n\n`Reflect.construct()` invokes the `[[Construct]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.construct()\n\n```js\nconst d = Reflect.construct(Date, [1776, 6, 4]);\nd instanceof Date; // true\nd.getFullYear(); // 1776\n```\n\n### Reflect.construct() vs. Object.create()\n\nPrior to the introduction of `Reflect`, objects could be constructed using an arbitrary combination of constructors and prototypes using {{jsxref(\"Object.create()\")}}.\n\n```js\nfunction OneClass() {\n  this.name = \"one\";\n}\n\nfunction OtherClass() {\n  this.name = \"other\";\n}\n\nconst obj2 = Object.create(OtherClass.prototype);\nOneClass.apply(obj2, args);\n\nconsole.log(obj1.name); // 'one'\nconsole.log(obj2.name); // 'one'\n\nconsole.log(obj1 instanceof OneClass); // false\nconsole.log(obj2 instanceof OneClass); // false\n\nconsole.log(obj1 instanceof OtherClass); // true\nconsole.log(obj2 instanceof OtherClass); // true\n\n// Another example to demonstrate below:\n\nfunction func1(a, b, c, d) {\n  console.log(arguments[3]);\n}\n\nfunction func2(d, e, f, g) {\n  console.log(arguments[3]);\n}\n\nconst obj1 = Reflect.construct(func1, [\"I\", \"Love\", \"my\", \"country\"]);\n```\n\nHowever, while the end result is the same, there is one important difference in the process. When using `Object.create()` and {{jsxref(\"Function.prototype.apply()\")}}, the `new.target` operator will point to `undefined` within the function used as the constructor, since the `new` keyword is not being used to create the object. (In fact, it uses the [`apply`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply) semantic, not `construct`, although normal functions happen to operate nearly the same.)\n\nWhen invoking `Reflect.construct()`, on the other hand, the `new.target` operator will point to the `newTarget` parameter if supplied, or `target` if not.\n\n```js\nfunction OneClass() {\n  console.log(\"OneClass\");\n  console.log(new.target);\n}\nfunction OtherClass() {\n  console.log(\"OtherClass\");\n  console.log(new.target);\n}\n\nconst obj1 = Reflect.construct(OneClass, args);\n// Logs:\n// OneClass\n// function OneClass { ... }\n\nconst obj2 = Reflect.construct(OneClass, args, OtherClass);\n// Logs:\n// OneClass\n// function OtherClass { ... }\n\nconst obj3 = Object.create(OtherClass.prototype);\nOneClass.apply(obj3, args);\n// Output:\n//     OneClass\n//     undefined\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.construct` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- {{jsxref(\"Operators/new\", \"new\")}}\n- [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target)\n- [`handler.construct()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/construct)\n"
    },
    "defineproperty": {
      "index.md": "---\ntitle: Reflect.defineProperty()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.defineProperty\n---\n\n{{JSRef}}\n\nThe **`Reflect.defineProperty()`** static method is like {{jsxref(\"Object.defineProperty()\")}} but returns a {{jsxref(\"Boolean\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/reflect-defineproperty.html\")}}\n\n## Syntax\n\n```js-nolint\nReflect.defineProperty(target, propertyKey, attributes)\n```\n\n### Parameters\n\n- `target`\n  - : The target object on which to define the property.\n- `propertyKey`\n  - : The name of the property to be defined or modified.\n- `attributes`\n  - : The attributes for the property being defined or modified.\n\n### Return value\n\nA boolean indicating whether or not the property was successfully defined.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` or `attributes` is not an object.\n\n## Description\n\n`Reflect.defineProperty()` provides the reflective semantic of defining an own property on an object. At the very low level, defining a property returns a boolean (as is the case with [the proxy handler](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty)). {{jsxref(\"Object.defineProperty()\")}} provides nearly the same semantic, but it throws a {{jsxref(\"TypeError\")}} if the status is `false` (the operation was unsuccessful), while `Reflect.defineProperty()` directly returns the status.\n\nMany built-in operations would also define own properties on objects. The most significant difference between defining properties and [setting](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set) them is that [setters](/en-US/docs/Web/JavaScript/Reference/Functions/set) aren't invoked. For example, [class fields](/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields) directly define properties on the instance without invoking setters.\n\n```js\nclass B extends class A {\n  set a(v) {\n    console.log(\"Setter called\");\n  }\n} {\n  a = 1; // Nothing logged\n}\n```\n\n`Reflect.defineProperty()` invokes the `[[DefineOwnProperty]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.defineProperty()\n\n```js\nconst obj = {};\nReflect.defineProperty(obj, \"x\", { value: 7 }); // true\nconsole.log(obj.x); // 7\n```\n\n### Checking if property definition has been successful\n\nWith {{jsxref(\"Object.defineProperty()\")}}, which returns an object if successful, or throws a {{jsxref(\"TypeError\")}} otherwise, you would use a [`try...catch`](/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) block to catch any error that occurred while defining a property.\n\nBecause `Reflect.defineProperty()` returns a Boolean success status, you can just use an [`if...else`](/en-US/docs/Web/JavaScript/Reference/Statements/if...else) block here:\n\n```js\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.defineProperty` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- {{jsxref(\"Object.defineProperty()\")}}\n- [`handler.defineProperty()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty)\n"
    },
    "deleteproperty": {
      "index.md": "---\ntitle: Reflect.deleteProperty()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.deleteProperty\n---\n\n{{JSRef}}\n\nThe **`Reflect.deleteProperty()`** static method is like the {{jsxref(\"Operators/delete\", \"delete\")}} operator, but as a function. It deletes a property from an object.\n\n{{EmbedInteractiveExample(\"pages/js/reflect-deleteproperty.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nReflect.deleteProperty(target, propertyKey)\n```\n\n### Parameters\n\n- `target`\n  - : The target object on which to delete the property.\n- `propertyKey`\n  - : The name of the property to be deleted.\n\n### Return value\n\nA boolean indicating whether or not the property was successfully deleted.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not an object.\n\n## Description\n\n`Reflect.deleteProperty()` provides the reflective semantic of the [`delete`](/en-US/docs/Web/JavaScript/Reference/Operators/delete) operator. That is, `Reflect.deleteProperty(target, propertyKey)` is semantically equivalent to:\n\n```js\ndelete target.propertyKey;\n```\n\nAt the very low level, deleting a property returns a boolean (as is the case with [the proxy handler](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty)). `Reflect.deleteProperty()` directly returns the status, while `delete` would throw a {{jsxref(\"TypeError\")}} in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode) if the status is `false`. In non-strict mode, `delete` and `Reflect.deleteProperty()` have the same behavior.\n\n`Reflect.deleteProperty()` invokes the `[[Delete]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.deleteProperty()\n\n```js\nconst obj = { x: 1, y: 2 };\nReflect.deleteProperty(obj, \"x\"); // true\nconsole.log(obj); // { y: 2 }\n\nconst arr = [1, 2, 3, 4, 5];\nReflect.deleteProperty(arr, \"3\"); // true\nconsole.log(arr); // [1, 2, 3, undefined, 5]\n\n// Returns true if no such property exists\nReflect.deleteProperty({}, \"foo\"); // true\n\n// Returns false if a property is unconfigurable\nReflect.deleteProperty(Object.freeze({ foo: 1 }), \"foo\"); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.deleteProperty` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- [`delete`](/en-US/docs/Web/JavaScript/Reference/Operators/delete)\n- [`handler.deleteProperty()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty)\n"
    },
    "get": {
      "index.md": "---\ntitle: Reflect.get()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/get\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.get\n---\n\n{{JSRef}}\n\nThe **`Reflect.get()`** static method is like the [property accessor](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) syntax, but as a function.\n\n{{EmbedInteractiveExample(\"pages/js/reflect-get.html\")}}\n\n## Syntax\n\n```js-nolint\nReflect.get(target, propertyKey)\nReflect.get(target, propertyKey, receiver)\n```\n\n### Parameters\n\n- `target`\n  - : The target object on which to get the property.\n- `propertyKey`\n  - : The name of the property to get.\n- `receiver` {{optional_inline}}\n  - : The value of `this` provided for the call to `target` if a getter is encountered.\n\n### Return value\n\nThe value of the property.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not an object.\n\n## Description\n\n`Reflect.get()` provides the reflective semantic of a [property access](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). That is, `Reflect.get(target, propertyKey, receiver)` is semantically equivalent to:\n\n```js\ntarget[propertyKey];\n```\n\nNote that in a normal property access, `target` and `receiver` would observably be the same object.\n\n`Reflect.get()` invokes the `[[Get]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.get()\n\n```js\n// Object\nconst obj1 = { x: 1, y: 2 };\nReflect.get(obj1, \"x\"); // 1\n\n// Array\nReflect.get([\"zero\", \"one\"], 1); // \"one\"\n\n// Proxy with a get handler\nconst obj2 = new Proxy(\n  { p: 1 },\n  {\n    get(t, k, r) {\n      return k + \"bar\";\n    },\n  },\n);\nReflect.get(obj2, \"foo\"); // \"foobar\"\n\n// Proxy with get handler and receiver\nconst obj3 = new Proxy(\n  { p: 1, foo: 2 },\n  {\n    get(t, prop, receiver) {\n      return receiver[prop] + \"bar\";\n    },\n  },\n);\nReflect.get(obj3, \"foo\", { foo: 3 }); // \"3bar\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.get` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- [Property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors)\n- [`handler.get()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get)\n"
    },
    "getownpropertydescriptor": {
      "index.md": "---\ntitle: Reflect.getOwnPropertyDescriptor()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.getOwnPropertyDescriptor\n---\n\n{{JSRef}}\n\nThe **`Reflect.getOwnPropertyDescriptor()`** static method is like {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}. It returns a property descriptor of the given property if it exists on the object, {{jsxref(\"undefined\")}} otherwise.\n\n{{EmbedInteractiveExample(\"pages/js/reflect-getownpropertydescriptor.html\")}}\n\n## Syntax\n\n```js-nolint\nReflect.getOwnPropertyDescriptor(target, propertyKey)\n```\n\n### Parameters\n\n- `target`\n  - : The target object in which to look for the property.\n- `propertyKey`\n  - : The name of the property to get an own property descriptor for.\n\n### Return value\n\nA property descriptor object if the property exists as an own property of `target`; otherwise, {{jsxref(\"undefined\")}}.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not an object.\n\n## Description\n\n`Reflect.getOwnPropertyDescriptor()` provides the reflective semantic of retrieving the property descriptor of an object. The only difference with {{jsxref(\"Object.getOwnPropertyDescriptor()\")}} is how non-object targets are handled. `Reflect.getOwnPropertyDescriptor()` throws a {{jsxref(\"TypeError\")}} if the target is not an object, while `Object.getOwnPropertyDescriptor()` coerces it to an object.\n\n`Reflect.getOwnPropertyDescriptor()` invokes the `[[GetOwnProperty]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.getOwnPropertyDescriptor()\n\n```js\nReflect.getOwnPropertyDescriptor({ x: \"hello\" }, \"x\");\n// {value: \"hello\", writable: true, enumerable: true, configurable: true}\n\nReflect.getOwnPropertyDescriptor({ x: \"hello\" }, \"y\");\n// undefined\n\nReflect.getOwnPropertyDescriptor([], \"length\");\n// {value: 0, writable: true, enumerable: false, configurable: false}\n```\n\n### Difference with Object.getOwnPropertyDescriptor()\n\nIf the `target` argument to this method is not an object (a primitive), then it will cause a {{jsxref(\"TypeError\")}}. With {{jsxref(\"Object.getOwnPropertyDescriptor\")}}, a non-object first argument will be coerced to an object at first.\n\n```js\nReflect.getOwnPropertyDescriptor(\"foo\", 0);\n// TypeError: \"foo\" is not non-null object\n\nObject.getOwnPropertyDescriptor(\"foo\", 0);\n// { value: \"f\", writable: false, enumerable: true, configurable: false }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.getOwnPropertyDescriptor` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}\n- [`handler.getOwnPropertyDescriptor()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor)\n"
    },
    "getprototypeof": {
      "index.md": "---\ntitle: Reflect.getPrototypeOf()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.getPrototypeOf\n---\n\n{{JSRef}}\n\nThe **`Reflect.getPrototypeOf()`** static method is like {{jsxref(\"Object.getPrototypeOf()\")}}. It returns the prototype of the specified object.\n\n{{EmbedInteractiveExample(\"pages/js/reflect-getprototypeof.html\")}}\n\n## Syntax\n\n```js-nolint\nReflect.getPrototypeOf(target)\n```\n\n### Parameters\n\n- `target`\n  - : The target object of which to get the prototype.\n\n### Return value\n\nThe prototype of the given object, which may be an object or `null`.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not an object.\n\n## Description\n\n`Reflect.getPrototypeOf()` provides the reflective semantic of retrieving the prototype of an object. The only difference with {{jsxref(\"Object.getPrototypeOf()\")}} is how non-object targets are handled. `Reflect.getPrototypeOf()` throws a {{jsxref(\"TypeError\")}} if the target is not an object, while `Object.getPrototypeOf()` coerces it to an object.\n\n`Reflect.getPrototypeOf()` invokes the `[[GetPrototypeOf]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.getPrototypeOf()\n\n```js\nReflect.getPrototypeOf({}); // Object.prototype\nReflect.getPrototypeOf(Object.prototype); // null\nReflect.getPrototypeOf(Object.create(null)); // null\n```\n\n### Difference with Object.getPrototypeOf()\n\n```js\n// Same result for Objects\nObject.getPrototypeOf({}); // Object.prototype\nReflect.getPrototypeOf({}); // Object.prototype\n\n// Both throw in ES5 for non-Objects\nObject.getPrototypeOf(\"foo\"); // Throws TypeError\nReflect.getPrototypeOf(\"foo\"); // Throws TypeError\n\n// In ES2015 only Reflect throws, Object coerces non-Objects\nObject.getPrototypeOf(\"foo\"); // String.prototype\nReflect.getPrototypeOf(\"foo\"); // Throws TypeError\n\n// To mimic the Object ES2015 behavior you need to coerce\nReflect.getPrototypeOf(Object(\"foo\")); // String.prototype\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.getPrototypeOf` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- {{jsxref(\"Object.getPrototypeOf()\")}}\n- [`handler.getPrototypeOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getPrototypeOf)\n"
    },
    "has": {
      "index.md": "---\ntitle: Reflect.has()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/has\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.has\n---\n\n{{JSRef}}\n\nThe **`Reflect.has()`** static method is like the [`in`](/en-US/docs/Web/JavaScript/Reference/Operators/in) operator, but\nas a function.\n\n{{EmbedInteractiveExample(\"pages/js/reflect-has.html\")}}\n\n## Syntax\n\n```js-nolint\nReflect.has(target, propertyKey)\n```\n\n### Parameters\n\n- `target`\n  - : The target object in which to look for the property.\n- `propertyKey`\n  - : The name of the property to check.\n\n### Return value\n\nA {{jsxref(\"Boolean\")}} indicating whether or not the `target` has the property.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not an object.\n\n## Description\n\n`Reflect.has()` provides the reflective semantic of checking if a property is in an object. That is, `Reflect.has(target, propertyKey)` is semantically equivalent to:\n\n```js\npropertyKey in target;\n```\n\n`Reflect.has()` invokes the `[[HasProperty]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.has()\n\n```js\nReflect.has({ x: 0 }, \"x\"); // true\nReflect.has({ x: 0 }, \"y\"); // false\n\n// returns true for properties in the prototype chain\nReflect.has({ x: 0 }, \"toString\");\n\n// Proxy with .has() handler method\nobj = new Proxy(\n  {},\n  {\n    has(t, k) {\n      return k.startsWith(\"door\");\n    },\n  },\n);\nReflect.has(obj, \"doorbell\"); // true\nReflect.has(obj, \"dormitory\"); // false\n```\n\n`Reflect.has` returns `true` for any inherited properties, like the [`in`](/en-US/docs/Web/JavaScript/Reference/Operators/in) operator:\n\n```js\nconst a = { foo: 123 };\nconst b = { __proto__: a };\nconst c = { __proto__: b };\n// The prototype chain is: c -> b -> a\nReflect.has(c, \"foo\"); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.has` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- [`in`](/en-US/docs/Web/JavaScript/Reference/Operators/in)\n- [`handler.has()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/has)\n"
    },
    "index.md": "---\ntitle: Reflect\nslug: Web/JavaScript/Reference/Global_Objects/Reflect\npage-type: javascript-namespace\nbrowser-compat: javascript.builtins.Reflect\n---\n\n{{JSRef}}\n\nThe **`Reflect`** namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of [proxy handlers](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy).\n\n## Description\n\nUnlike most global objects, `Reflect` is not a constructor. You cannot use it with the [`new` operator](/en-US/docs/Web/JavaScript/Reference/Operators/new) or invoke the `Reflect` object as a function. All properties and methods of `Reflect` are static (just like the {{jsxref(\"Math\")}} object).\n\nThe `Reflect` object provides a collection of static functions which have the same names as the [proxy handler methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy).\n\nThe major use case of `Reflect` is to provide default forwarding behavior in `Proxy` handler traps. A [trap](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#terminology) is used to intercept an operation on an object — it provides a custom implementation for an [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods). The `Reflect` API is used to invoke the corresponding internal method. For example, the code below creates a proxy `p` with a [`deleteProperty`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty) trap that intercepts the `[[Delete]]` internal method. `Reflect.deleteProperty()` is used to invoke the default `[[Delete]]` behavior on `targetObject` directly. You can replace it with [`delete`](/en-US/docs/Web/JavaScript/Reference/Operators/delete), but using `Reflect` saves you from having to remember the syntax that each internal method corresponds to.\n\n```js\nconst p = new Proxy(\n  {},\n  {\n    deleteProperty(targetObject, property) {\n      // Custom functionality: log the deletion\n      console.log(\"Deleting property:\", property);\n\n      // Execute the default introspection behavior\n      return Reflect.deleteProperty(targetObject, property);\n    },\n  },\n);\n```\n\nThe `Reflect` methods also allow finer control of how the internal method is invoked. For example, {{jsxref(\"Reflect.construct()\")}} is the only way to construct a target function with a specific [`new.target`](/en-US/docs/Web/JavaScript/Reference/Operators/new.target) value. If you use the [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new) operator to invoke a function, the `new.target` value is always the function itself. This has important effects with [subclassing](/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_using_reflect.construct). For another example, {{jsxref(\"Reflect.get()\")}} allows you to run a [getter](/en-US/docs/Web/JavaScript/Reference/Functions/get) with a custom `this` value, while [property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) always use the current object as the `this` value.\n\nNearly every `Reflect` method's behavior can be done with some other syntax or method. Some of these methods have corresponding static methods of the same name on {{jsxref(\"Object\")}}, although they do have some subtle differences. For the exact differences, see the description for each `Reflect` method.\n\n## Static properties\n\n- `Reflect[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Reflect\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Static methods\n\n- {{jsxref(\"Reflect.apply()\")}}\n  - : Calls a `target` function with arguments as specified by the `argumentsList` parameter. See also {{jsxref(\"Function.prototype.apply()\")}}.\n- {{jsxref(\"Reflect.construct()\")}}\n  - : The [`new` operator](/en-US/docs/Web/JavaScript/Reference/Operators/new) as a function. Equivalent to calling `new target(...argumentsList)`. Also provides the option to specify a different prototype.\n- {{jsxref(\"Reflect.defineProperty()\")}}\n  - : Similar to {{jsxref(\"Object.defineProperty()\")}}. Returns a boolean that is `true` if the property was successfully defined.\n- {{jsxref(\"Reflect.deleteProperty()\")}}\n  - : The [`delete` operator](/en-US/docs/Web/JavaScript/Reference/Operators/delete) as a function. Equivalent to calling `delete target[propertyKey]`.\n- {{jsxref(\"Reflect.get()\")}}\n  - : Returns the value of the property. Works like getting a property from an object (`target[propertyKey]`) as a function.\n- {{jsxref(\"Reflect.getOwnPropertyDescriptor()\")}}\n  - : Similar to {{jsxref(\"Object.getOwnPropertyDescriptor()\")}}. Returns a property descriptor of the given property if it exists on the object, {{jsxref(\"undefined\")}} otherwise.\n- {{jsxref(\"Reflect.getPrototypeOf()\")}}\n  - : Same as {{jsxref(\"Object.getPrototypeOf()\")}}.\n- {{jsxref(\"Reflect.has()\")}}\n  - : Returns a boolean indicating whether the target has the property. Either as own or inherited. Works like the [`in` operator](/en-US/docs/Web/JavaScript/Reference/Operators/in) as a function.\n- {{jsxref(\"Reflect.isExtensible()\")}}\n  - : Same as {{jsxref(\"Object.isExtensible()\")}}. Returns a boolean that is `true` if the target is extensible.\n- {{jsxref(\"Reflect.ownKeys()\")}}\n  - : Returns an array of the target object's own (not inherited) property keys.\n- {{jsxref(\"Reflect.preventExtensions()\")}}\n  - : Similar to {{jsxref(\"Object.preventExtensions()\")}}. Returns a boolean that is `true` if the update was successful.\n- {{jsxref(\"Reflect.set()\")}}\n  - : A function that assigns values to properties. Returns a boolean that is `true` if the update was successful.\n- {{jsxref(\"Reflect.setPrototypeOf()\")}}\n  - : A function that sets the prototype of an object. Returns a boolean that is `true` if the update was successful.\n\n## Examples\n\n### Detecting whether an object contains certain properties\n\n```js\nconst duck = {\n  name: \"Maurice\",\n  color: \"white\",\n  greeting() {\n    console.log(`Quaaaack! My name is ${this.name}`);\n  },\n};\n\nReflect.has(duck, \"color\");\n// true\nReflect.has(duck, \"haircut\");\n// false\n```\n\n### Returning the object's own keys\n\n```js\nReflect.ownKeys(duck);\n// [ \"name\", \"color\", \"greeting\" ]\n```\n\n### Adding a new property to the object\n\n```js\nReflect.set(duck, \"eyes\", \"black\");\n// returns \"true\" if successful\n// \"duck\" now contains the property \"eyes: 'black'\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Proxy\")}}\n",
    "isextensible": {
      "index.md": "---\ntitle: Reflect.isExtensible()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.isExtensible\n---\n\n{{JSRef}}\n\nThe **`Reflect.isExtensible()`** static method is like {{jsxref(\"Object.isExtensible()\")}}. It determines if an object is extensible (whether it can have new properties added to it).\n\n{{EmbedInteractiveExample(\"pages/js/reflect-isextensible.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nReflect.isExtensible(target)\n```\n\n### Parameters\n\n- `target`\n  - : The target object which to check if it is extensible.\n\n### Return value\n\nA {{jsxref(\"Boolean\")}} indicating whether or not the target is extensible.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not an object.\n\n## Description\n\n`Reflect.isExtensible()` provides the reflective semantic of checking if an object is extensible. The only difference with {{jsxref(\"Object.isExtensible()\")}} is how non-object targets are handled. `Reflect.isExtensible()` throws a {{jsxref(\"TypeError\")}} if the target is not an object, while `Object.isExtensible()` always returns `false` for non-object targets.\n\n`Reflect.isExtensible()` invokes the `[[IsExtensible]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.isExtensible()\n\nSee also {{jsxref(\"Object.isExtensible()\")}}.\n\n```js\n// New objects are extensible.\nconst empty = {};\nReflect.isExtensible(empty); // true\n\n// ...but that can be changed.\nReflect.preventExtensions(empty);\nReflect.isExtensible(empty); // false\n\n// Sealed objects are by definition non-extensible.\nconst sealed = Object.seal({});\nReflect.isExtensible(sealed); // false\n\n// Frozen objects are also by definition non-extensible.\nconst frozen = Object.freeze({});\nReflect.isExtensible(frozen); // false\n```\n\n### Difference with Object.isExtensible()\n\nIf the `target` argument to this method is not an object (a primitive), then it will cause a {{jsxref(\"TypeError\")}}. With {{jsxref(\"Object.isExtensible()\")}}, a non-object `target` will return false without any errors.\n\n```js\nReflect.isExtensible(1);\n// TypeError: 1 is not an object\n\nObject.isExtensible(1);\n// false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.isExtensible` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- {{jsxref(\"Object.isExtensible()\")}}\n- [`handler.isExtensible()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/isExtensible)\n"
    },
    "ownkeys": {
      "index.md": "---\ntitle: Reflect.ownKeys()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.ownKeys\n---\n\n{{JSRef}}\n\nThe **`Reflect.ownKeys()`** static method returns an array of the `target` object's own property keys.\n\n{{EmbedInteractiveExample(\"pages/js/reflect-ownkeys.html\")}}\n\n## Syntax\n\n```js-nolint\nReflect.ownKeys(target)\n```\n\n### Parameters\n\n- `target`\n  - : The target object from which to get the own keys.\n\n### Return value\n\nAn {{jsxref(\"Array\")}} of the `target` object's own property keys, including strings and symbols. For most objects, the array will be in the order of:\n\n1. Non-negative integer indexes in increasing numeric order (but as strings)\n2. Other string keys in the order of property creation\n3. Symbol keys in the order of property creation.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not an object.\n\n## Description\n\n`Reflect.ownKeys()` provides the reflective semantic of retrieving all property keys of an object. It is the only way to get all own properties – enumerable and not enumerable, strings and symbols — in one call, without extra filtering logic. For example, {{jsxref(\"Object.getOwnPropertyNames()\")}} takes the return value of `Reflect.ownKeys()` and filters to only string values, while {{jsxref(\"Object.getOwnPropertySymbols()\")}} filters to only symbol values. Because normal objects implement `[[OwnPropertyKeys]]` to return all string keys before symbol keys, `Reflect.ownKeys(target)` is usually equivalent to `Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))`. However, if the object has a custom `[[OwnPropertyKeys]]` method (such as through a proxy's [`ownKeys`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys) handler), the order of the keys may be different.\n\n`Reflect.ownKeys()` invokes the `[[OwnPropertyKeys]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.ownKeys()\n\n```js\nReflect.ownKeys({ z: 3, y: 2, x: 1 }); // [ \"z\", \"y\", \"x\" ]\nReflect.ownKeys([]); // [\"length\"]\n\nconst sym = Symbol.for(\"comet\");\nconst sym2 = Symbol.for(\"meteor\");\nconst obj = {\n  [sym]: 0,\n  str: 0,\n  773: 0,\n  0: 0,\n  [sym2]: 0,\n  \"-1\": 0,\n  8: 0,\n  \"second str\": 0,\n};\nReflect.ownKeys(obj);\n// [ \"0\", \"8\", \"773\", \"str\", \"-1\", \"second str\", Symbol(comet), Symbol(meteor) ]\n// Indexes in numeric order,\n// strings in insertion order,\n// symbols in insertion order\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.ownKeys` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- {{jsxref(\"Object.getOwnPropertyNames()\")}}\n- {{jsxref(\"Object.getOwnPropertySymbols()\")}}\n- [`handler.ownKeys()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys)\n"
    },
    "preventextensions": {
      "index.md": "---\ntitle: Reflect.preventExtensions()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.preventExtensions\n---\n\n{{JSRef}}\n\nThe **`Reflect.preventExtensions()`** static method is like {{jsxref(\"Object.preventExtensions()\")}}. It prevents new properties from ever being added to an object (i.e., prevents future extensions to the object).\n\n{{EmbedInteractiveExample(\"pages/js/reflect-preventextensions.html\")}}\n\n## Syntax\n\n```js-nolint\nReflect.preventExtensions(target)\n```\n\n### Parameters\n\n- `target`\n  - : The target object on which to prevent extensions.\n\n### Return value\n\nA {{jsxref(\"Boolean\")}} indicating whether or not the target was successfully set to prevent extensions.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not an object.\n\n## Description\n\n`Reflect.preventExtensions()` provides the reflective semantic of preventing extensions of an object. The differences with {{jsxref(\"Object.preventExtensions()\")}} are:\n\n- `Reflect.preventExtensions()` throws a {{jsxref(\"TypeError\")}} if the target is not an object, while `Object.preventExtensions()` always returns non-object targets as-is.\n- `Reflect.preventExtensions()` returns a {{jsxref(\"Boolean\")}} indicating whether or not the target was successfully set to prevent extensions, while `Object.preventExtensions()` returns the target object.\n\n`Reflect.preventExtensions()` invokes the `[[PreventExtensions]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.preventExtensions()\n\nSee also {{jsxref(\"Object.preventExtensions()\")}}.\n\n```js\n// Objects are extensible by default.\nconst empty = {};\nReflect.isExtensible(empty); // true\n\n// ...but that can be changed.\nReflect.preventExtensions(empty);\nReflect.isExtensible(empty); // false\n```\n\n### Difference with Object.preventExtensions()\n\nIf the `target` argument to this method is not an object (a primitive), then it will cause a {{jsxref(\"TypeError\")}}. With {{jsxref(\"Object.preventExtensions()\")}}, a non-object `target` will be returned as-is without any errors.\n\n```js\nReflect.preventExtensions(1);\n// TypeError: 1 is not an object\n\nObject.preventExtensions(1);\n// 1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.preventExtensions` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- {{jsxref(\"Object.preventExtensions()\")}}\n- [`handler.preventExtensions()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/preventExtensions)\n"
    },
    "set": {
      "index.md": "---\ntitle: Reflect.set()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/set\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.set\n---\n\n{{JSRef}}\n\nThe **`Reflect.set()`** static method is like the [property accessor](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) and [assignment](/en-US/docs/Web/JavaScript/Reference/Operators/Assignment) syntax, but as a function.\n\n{{EmbedInteractiveExample(\"pages/js/reflect-set.html\")}}\n\n## Syntax\n\n```js-nolint\nReflect.set(target, propertyKey, value)\nReflect.set(target, propertyKey, value, receiver)\n```\n\n### Parameters\n\n- `target`\n  - : The target object on which to set the property.\n- `propertyKey`\n  - : The name of the property to set.\n- `value`\n  - : The value to set.\n- `receiver` {{optional_inline}}\n  - : The value of `this` provided for the call to the setter for `propertyKey` on `target`. If provided and `target` does not have a setter for `propertyKey`, the property will be set on `receiver` instead.\n\n### Return value\n\nA {{jsxref(\"Boolean\")}} indicating whether or not setting the property was successful.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not an object.\n\n## Description\n\n`Reflect.set()` provides the reflective semantic of a [property access](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors). That is, `Reflect.set(target, propertyKey, value, receiver)` is semantically equivalent to:\n\n```js\ntarget[propertyKey] = value;\n```\n\nNote that in a normal property access, `target` and `receiver` would observably be the same object.\n\n`Reflect.set()` invokes the `[[Set]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.set()\n\n```js\n// Object\nconst obj = {};\nReflect.set(obj, \"prop\", \"value\"); // true\nobj.prop; // \"value\"\n\n// Array\nconst arr = [\"duck\", \"duck\", \"duck\"];\nReflect.set(arr, 2, \"goose\"); // true\narr[2]; // \"goose\"\n\n// It can truncate an array.\nReflect.set(arr, \"length\", 1); // true\narr; // [\"duck\"]\n\n// With just one argument, propertyKey and value are \"undefined\".\nReflect.set(obj); // true\nReflect.getOwnPropertyDescriptor(obj, \"undefined\");\n// { value: undefined, writable: true, enumerable: true, configurable: true }\n```\n\n### Different target and receiver\n\nWhen the `target` and `receiver` are different, `Reflect.set` will use the property descriptor of `target` (to find the setter or determine if the property is writable), but set the property on `receiver`.\n\n```js\nconst target = {};\nconst receiver = {};\nReflect.set(target, \"a\", 2, receiver); // true\n// target is {}; receiver is { a: 2 }\n\nconst target = { a: 1 };\nconst receiver = {};\nReflect.set(target, \"a\", 2, receiver); // true\n// target is { a: 1 }; receiver is { a: 2 }\n\nconst target = {\n  set a(v) {\n    this.b = v;\n  },\n};\nconst receiver = {};\nReflect.set(target, \"a\", 2, receiver); // true\n// target is { a: [Setter] }; receiver is { b: 2 }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.set` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- [Property accessors](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors)\n- [`handler.set()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set)\n"
    },
    "setprototypeof": {
      "index.md": "---\ntitle: Reflect.setPrototypeOf()\nslug: Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Reflect.setPrototypeOf\n---\n\n{{JSRef}}\n\nThe **`Reflect.setPrototypeOf()`** static method is like {{jsxref(\"Object.setPrototypeOf()\")}} but returns a {{jsxref(\"Boolean\")}}. It sets the prototype (i.e., the internal `[[Prototype]]` property) of a specified object.\n\n{{EmbedInteractiveExample(\"pages/js/reflect-setprototypeof.html\")}}\n\n## Syntax\n\n```js-nolint\nReflect.setPrototypeOf(target, prototype)\n```\n\n### Parameters\n\n- `target`\n  - : The target object of which to set the prototype.\n- `prototype`\n  - : The object's new prototype (an object or [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null)).\n\n### Return value\n\nA {{jsxref(\"Boolean\")}} indicating whether or not the prototype was successfully set.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not an object or if `prototype` is neither an object nor [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null).\n\n## Description\n\n`Reflect.setPrototypeOf()` provides the reflective semantic of setting the prototype of an object. At the very low level, setting the prototype returns a boolean (as is the case with [the proxy handler](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/setPrototypeOf)). {{jsxref(\"Object.setPrototypeOf()\")}} provides nearly the same semantic, but it throws a {{jsxref(\"TypeError\")}} if the status is `false` (the operation was unsuccessful), while `Reflect.setPrototypeOf()` directly returns the status.\n\n`Reflect.setPrototypeOf()` invokes the `[[SetPrototypeOf]]` [object internal method](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#object_internal_methods) of `target`.\n\n## Examples\n\n### Using Reflect.setPrototypeOf()\n\n```js\nReflect.setPrototypeOf({}, Object.prototype); // true\n\n// It can change an object's [[Prototype]] to null.\nReflect.setPrototypeOf({}, null); // true\n\n// Returns false if target is not extensible.\nReflect.setPrototypeOf(Object.freeze({}), null); // false\n\n// Returns false if it cause a prototype chain cycle.\nconst target = {};\nconst proto = Object.create(target);\nReflect.setPrototypeOf(target, proto); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Reflect.setPrototypeOf` in `core-js`](https://github.com/zloirock/core-js#ecmascript-reflect)\n- {{jsxref(\"Reflect\")}}\n- {{jsxref(\"Object.setPrototypeOf()\")}}\n- [`handler.setPrototypeOf()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/setPrototypeOf)\n"
    }
  },
  "regexp": {
    "@@match": {
      "index.md": "---\ntitle: RegExp.prototype[@@match]()\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/@@match\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.RegExp.@@match\n---\n\n{{JSRef}}\n\nThe **`[@@match]()`** method of {{jsxref(\"RegExp\")}} instances specifies how [`String.prototype.match()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) should behave. In addition, its presence (or absence) can influence whether an object is regarded as a regular expression.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-@@match.html\")}}\n\n## Syntax\n\n```js-nolint\nregexp[Symbol.match](str)\n```\n\n### Parameters\n\n- `str`\n  - : A {{jsxref(\"String\")}} that is a target of the match.\n\n### Return value\n\nAn {{jsxref(\"Array\")}} whose contents depend on the presence or absence of the global (`g`) flag, or [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) if no matches are found.\n\n- If the `g` flag is used, all results matching the complete regular expression will be returned, but capturing groups are not included.\n- If the `g` flag is not used, only the first complete match and its related capturing groups are returned. In this case, `match()` will return the same result as {{jsxref(\"RegExp.prototype.exec()\")}} (an array with some extra properties).\n\n## Description\n\nThis method is called internally in {{jsxref(\"String.prototype.match()\")}}.\n\nFor example, the following two examples return same result.\n\n```js\n\"abc\".match(/a/);\n\n/a/[Symbol.match](\"abc\");\n```\n\nIf the regex is global (with the `g` flag), the regex's [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method will be repeatedly called until `exec()` returns `null`. Otherwise, `exec()` would only be called once and its result becomes the return value of `@@match`.\n\nBecause `@@match` would keep calling `exec()` until it returns `null`, and `exec()` would automatically reset the regex's [`lastIndex`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) to 0 when the last match fails, `@@match` would typically not have side effects when it exits. However, when the regex is [sticky](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) but not global, `lastIndex` would not be reset. In this case, each call to `match()` may return a different result.\n\n```js\nconst re = /[abc]/y;\nfor (let i = 0; i < 5; i++) {\n  console.log(\"abc\".match(re), re.lastIndex);\n}\n// [ 'a' ] 1\n// [ 'b' ] 2\n// [ 'c' ] 3\n// null 0\n// [ 'a' ] 1\n```\n\nWhen the regex is sticky and global, it would still perform sticky matches — i.e. it would fail to match any occurrences beyond the `lastIndex`.\n\n```js\nconsole.log(\"ab-c\".match(/[abc]/gy)); // [ 'a', 'b' ]\n```\n\nIf the current match is an empty string, the `lastIndex` would still be advanced — if the regex is [Unicode-aware](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), it would advance by one Unicode code point; otherwise, it advances by one UTF-16 code unit.\n\n```js\nconsole.log(\"😄\".match(/(?:)/g)); // [ '', '', '' ]\nconsole.log(\"😄\".match(/(?:)/gu)); // [ '', '' ]\n```\n\nThis method exists for customizing match behavior within `RegExp` subclasses.\n\nIn addition, the `@@match` property is used to check [whether an object is a regular expression](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes).\n\n## Examples\n\n### Direct call\n\nThis method can be used in _almost_ the same way as {{jsxref(\"String.prototype.match()\")}}, except the different `this` and the different arguments order.\n\n```js\nconst re = /[0-9]+/g;\nconst str = \"2016-01-02\";\nconst result = re[Symbol.match](str);\nconsole.log(result); // [\"2016\", \"01\", \"02\"]\n```\n\n### Using @@match in subclasses\n\nSubclasses of {{jsxref(\"RegExp\")}} can override the `[@@match]()` method to modify the default behavior.\n\n```js\nclass MyRegExp extends RegExp {\n  [Symbol.match](str) {\n    const result = RegExp.prototype[Symbol.match].call(this, str);\n    if (!result) return null;\n    return {\n      group(n) {\n        return result[n];\n      },\n    };\n  }\n}\n\nconst re = new MyRegExp(\"([0-9]+)-([0-9]+)-([0-9]+)\");\nconst str = \"2016-01-02\";\nconst result = str.match(re); // String.prototype.match calls re[@@match].\nconsole.log(result.group(1)); // 2016\nconsole.log(result.group(2)); // 01\nconsole.log(result.group(3)); // 02\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `RegExp.prototype[@@match]` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.match()\")}}\n- [`RegExp.prototype[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)\n- [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)\n- [`RegExp.prototype[@@search]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search)\n- [`RegExp.prototype[@@split]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split)\n- {{jsxref(\"RegExp.prototype.exec()\")}}\n- {{jsxref(\"RegExp.prototype.test()\")}}\n- {{jsxref(\"Symbol.match\")}}\n"
    },
    "@@matchall": {
      "index.md": "---\ntitle: RegExp.prototype[@@matchAll]()\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.RegExp.@@matchAll\n---\n\n{{JSRef}}\n\nThe **`[@@matchAll]()`** method of {{jsxref(\"RegExp\")}} instances specifies how [`String.prototype.matchAll`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) should behave.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-@@matchall.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nregexp[Symbol.matchAll](str)\n```\n\n### Parameters\n\n- `str`\n  - : A {{jsxref(\"String\")}} that is a target of the match.\n\n### Return value\n\nAn [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) (which is not restartable) of matches. Each match is an array with the same shape as the return value of {{jsxref(\"RegExp.prototype.exec()\")}}.\n\n## Description\n\nThis method is called internally in {{jsxref(\"String.prototype.matchAll()\")}}. For example, the following two examples return the same result.\n\n```js\n\"abc\".matchAll(/a/g);\n\n/a/g[Symbol.matchAll](\"abc\");\n```\n\nLike [`@@split`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split), `@@matchAll` starts by using [`@@species`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species) to construct a new regex, thus avoiding mutating the original regexp in any way. [`lastIndex`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) starts as the original regex's value.\n\n```js\nconst regexp = /[a-c]/g;\nregexp.lastIndex = 1;\nconst str = \"abc\";\nArray.from(str.matchAll(regexp), (m) => `${regexp.lastIndex} ${m[0]}`);\n// [ \"1 b\", \"1 c\" ]\n```\n\nThe validation that the input is a global regex happens in [`String.prototype.matchAll()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll). `@@matchAll` does not validate the input. If the regex is not global, the returned iterator yields the [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) result once and then returns `undefined`. If the regexp is global, each time the returned iterator's `next()` method is called, the regex's [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) is called and the result is yielded.\n\nWhen the regex is sticky and global, it will still perform sticky matches — i.e. it will not match any occurrences beyond the `lastIndex`.\n\n```js\nconsole.log(Array.from(\"ab-c\".matchAll(/[abc]/gy)));\n// [ [ \"a\" ], [ \"b\" ] ]\n```\n\nIf the current match is an empty string, the [`lastIndex`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) will still be advanced. If the regex has the [`u`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode) flag, it advances by one Unicode code point; otherwise, it advances by one UTF-16 code point.\n\n```js\nconsole.log(Array.from(\"😄\".matchAll(/(?:)/g)));\n// [ [ \"\" ], [ \"\" ], [ \"\" ] ]\n\nconsole.log(Array.from(\"😄\".matchAll(/(?:)/gu)));\n// [ [ \"\" ], [ \"\" ] ]\n```\n\nThis method exists for customizing the behavior of `matchAll()` in {{jsxref(\"RegExp\")}} subclasses.\n\n## Examples\n\n### Direct call\n\nThis method can be used in almost the same way as {{jsxref(\"String.prototype.matchAll()\")}}, except for the different value of `this` and the different order of arguments.\n\n```js\nconst re = /[0-9]+/g;\nconst str = \"2016-01-02\";\nconst result = re[Symbol.matchAll](str);\n\nconsole.log(Array.from(result, (x) => x[0]));\n// [ \"2016\", \"01\", \"02\" ]\n```\n\n### Using @@matchAll in subclasses\n\nSubclasses of {{jsxref(\"RegExp\")}} can override the `[@@matchAll]()` method to modify the default behavior.\n\nFor example, to return an {{jsxref(\"Array\")}} instead of an [iterator](/en-US/docs/Web/JavaScript/Guide/Iterators_and_generators):\n\n```js\nclass MyRegExp extends RegExp {\n  [Symbol.matchAll](str) {\n    const result = RegExp.prototype[Symbol.matchAll].call(this, str);\n    return result ? Array.from(result) : null;\n  }\n}\n\nconst re = new MyRegExp(\"([0-9]+)-([0-9]+)-([0-9]+)\", \"g\");\nconst str = \"2016-01-02|2019-03-07\";\nconst result = str.matchAll(re);\n\nconsole.log(result[0]);\n// [ \"2016-01-02\", \"2016\", \"01\", \"02\" ]\n\nconsole.log(result[1]);\n// [ \"2019-03-07\", \"2019\", \"03\", \"07\" ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `RegExp.prototype[@@matchAll]` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.matchAll()\")}}\n- [`RegExp.prototype[@@match]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match)\n- [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)\n- [`RegExp.prototype[@@search]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search)\n- [`RegExp.prototype[@@split]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split)\n- {{jsxref(\"Symbol.matchAll\")}}\n"
    },
    "@@replace": {
      "index.md": "---\ntitle: RegExp.prototype[@@replace]()\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.RegExp.@@replace\n---\n\n{{JSRef}}\n\nThe **`[@@replace]()`** method of {{jsxref(\"RegExp\")}} instances specifies how [`String.prototype.replace()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) and [`String.prototype.replaceAll()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) should behave when the regular expression is passed in as the pattern.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-@@replace.html\")}}\n\n## Syntax\n\n```js-nolint\nregexp[Symbol.replace](str, replacement)\n```\n\n### Parameters\n\n- `str`\n  - : A {{jsxref(\"String\")}} that is a target of the replacement.\n- `replacement`\n  - : Can be a string or a function.\n    - If it's a string, it will replace the substring matched by the current regexp. A number of special replacement patterns are supported; see the [Specifying a string as the replacement](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_string_as_the_replacement) section of `String.prototype.replace`.\n    - If it's a function, it will be invoked for every match and the return value is used as the replacement text. The arguments supplied to this function are described in the [Specifying a function as the replacement](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_the_replacement) section of `String.prototype.replace`.\n\n### Return value\n\nA new string, with one, some, or all matches of the pattern replaced by the specified replacement.\n\n## Description\n\nThis method is called internally in {{jsxref(\"String.prototype.replace()\")}} and {{jsxref(\"String.prototype.replaceAll()\")}} if the `pattern` argument is a {{jsxref(\"RegExp\")}} object. For example, the following two examples return the same result.\n\n```js\n\"abc\".replace(/a/, \"A\");\n\n/a/[Symbol.replace](\"abc\", \"A\");\n```\n\nIf the regex is global (with the `g` flag), the regex's [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method will be repeatedly called until `exec()` returns `null`. Otherwise, `exec()` would only be called once. For each `exec()` result, the substitution will be prepared based on the description in [`String.prototype.replace()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#description).\n\nBecause `@@replace` would keep calling `exec()` until it returns `null`, and `exec()` would automatically reset the regex's [`lastIndex`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) to 0 when the last match fails, `@@replace` would typically not have side effects when it exits. However, when the regex is [sticky](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) but not global, `lastIndex` would not be reset. In this case, each call to `replace()` may return a different result.\n\n```js\nconst re = /a/y;\n\nfor (let i = 0; i < 5; i++) {\n  console.log(\"aaa\".replace(re, \"b\"), re.lastIndex);\n}\n\n// baa 1\n// aba 2\n// aab 3\n// aaa 0\n// baa 1\n```\n\nWhen the regex is sticky and global, it would still perform sticky matches — i.e. it would fail to match any occurrences beyond the `lastIndex`.\n\n```js\nconsole.log(\"aa-a\".replace(/a/gy, \"b\")); // \"bb-a\"\n```\n\nIf the current match is an empty string, the `lastIndex` would still be advanced — if the regex is [Unicode-aware](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), it would advance by one Unicode code point; otherwise, it advances by one UTF-16 code unit.\n\n```js\nconsole.log(\"😄\".replace(/(?:)/g, \" \")); // \" \\ud83d \\ude04 \"\nconsole.log(\"😄\".replace(/(?:)/gu, \" \")); // \" 😄 \"\n```\n\nThis method exists for customizing replace behavior in `RegExp` subclasses.\n\n## Examples\n\n### Direct call\n\nThis method can be used in almost the same way as {{jsxref(\"String.prototype.replace()\")}}, except the different `this` and the different arguments order.\n\n```js\nconst re = /-/g;\nconst str = \"2016-01-01\";\nconst newstr = re[Symbol.replace](str, \".\");\nconsole.log(newstr); // 2016.01.01\n```\n\n### Using @@replace in subclasses\n\nSubclasses of {{jsxref(\"RegExp\")}} can override the `[@@replace]()` method to modify the default behavior.\n\n```js\nclass MyRegExp extends RegExp {\n  constructor(pattern, flags, count) {\n    super(pattern, flags);\n    this.count = count;\n  }\n  [Symbol.replace](str, replacement) {\n    // Perform @@replace |count| times.\n    let result = str;\n    for (let i = 0; i < this.count; i++) {\n      result = RegExp.prototype[Symbol.replace].call(this, result, replacement);\n    }\n    return result;\n  }\n}\n\nconst re = new MyRegExp(\"\\\\d\", \"\", 3);\nconst str = \"01234567\";\nconst newstr = str.replace(re, \"#\"); // String.prototype.replace calls re[@@replace].\nconsole.log(newstr); // ###34567\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `RegExp.prototype[@@replace]` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.replace()\")}}\n- {{jsxref(\"String.prototype.replaceAll()\")}}\n- [`RegExp.prototype[@@match]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match)\n- [`RegExp.prototype[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)\n- [`RegExp.prototype[@@search]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search)\n- [`RegExp.prototype[@@split]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split)\n- {{jsxref(\"RegExp.prototype.exec()\")}}\n- {{jsxref(\"RegExp.prototype.test()\")}}\n- {{jsxref(\"Symbol.replace\")}}\n"
    },
    "@@search": {
      "index.md": "---\ntitle: RegExp.prototype[@@search]()\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/@@search\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.RegExp.@@search\n---\n\n{{JSRef}}\n\nThe **`[@@search]()`** method of {{jsxref(\"RegExp\")}} instances specifies how [`String.prototype.search`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search) should behave.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-@@search.html\")}}\n\n## Syntax\n\n```js-nolint\nregexp[Symbol.search](str)\n```\n\n### Parameters\n\n- `str`\n  - : A {{jsxref(\"String\")}} that is a target of the search.\n\n### Return value\n\nThe index of the first match between the regular expression and the given string, or `-1` if no match was found.\n\n## Description\n\nThis method is called internally in {{jsxref(\"String.prototype.search()\")}}. For example, the following two examples return the same result.\n\n```js\n\"abc\".search(/a/);\n\n/a/[Symbol.search](\"abc\");\n```\n\nThis method does not copy the regular expression, unlike [`@@split`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split) or [`@@matchAll`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll). However, unlike [`@@match`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match) or [`@@replace`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace), it will set [`lastIndex`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) to 0 when execution starts and restore it to the previous value when it exits, therefore generally avoiding side effects. This means that the `g` flag has no effect with this method, and it always returns the first match in the string even when `lastIndex` is non-zero. This also means sticky regexps will always search strictly at the beginning of the string.\n\n```js\nconst re = /[abc]/g;\nre.lastIndex = 2;\nconsole.log(\"abc\".search(re)); // 0\n\nconst re2 = /[bc]/y;\nre2.lastIndex = 1;\nconsole.log(\"abc\".search(re2)); // -1\nconsole.log(\"abc\".match(re2)); // [ 'b' ]\n```\n\n`@@search` always calls the regex's [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method exactly once, and returns the `index` property of the result, or `-1` if the result is `null`.\n\nThis method exists for customizing the search behavior in `RegExp` subclasses.\n\n## Examples\n\n### Direct call\n\nThis method can be used in almost the same way as {{jsxref(\"String.prototype.search()\")}}, except for the different value of `this` and the different arguments order.\n\n```js\nconst re = /-/g;\nconst str = \"2016-01-02\";\nconst result = re[Symbol.search](str);\nconsole.log(result); // 4\n```\n\n### Using @@search in subclasses\n\nSubclasses of {{jsxref(\"RegExp\")}} can override `[@@search]()` method to modify the behavior.\n\n```js\nclass MyRegExp extends RegExp {\n  constructor(str) {\n    super(str);\n    this.pattern = str;\n  }\n  [Symbol.search](str) {\n    return str.indexOf(this.pattern);\n  }\n}\n\nconst re = new MyRegExp(\"a+b\");\nconst str = \"ab a+b\";\nconst result = str.search(re); // String.prototype.search calls re[@@search].\nconsole.log(result); // 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `RegExp.prototype[@@search]` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.search()\")}}\n- [`RegExp.prototype[@@match]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match)\n- [`RegExp.prototype[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)\n- [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)\n- [`RegExp.prototype[@@split]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split)\n- {{jsxref(\"RegExp.prototype.exec()\")}}\n- {{jsxref(\"RegExp.prototype.test()\")}}\n- {{jsxref(\"Symbol.search\")}}\n"
    },
    "@@species": {
      "index.md": "---\ntitle: RegExp[@@species]\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/@@species\npage-type: javascript-static-accessor-property\nbrowser-compat: javascript.builtins.RegExp.@@species\n---\n\n{{JSRef}}\n\nThe **`RegExp[@@species]`** static accessor property returns the constructor used to construct copied regular expressions in certain `RegExp` methods.\n\n> **Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-getregexp-@@species.html\")}}\n\n## Syntax\n\n```js-nolint\nRegExp[Symbol.species]\n```\n\n### Return value\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct copied `RegExp` instances.\n\n## Description\n\nThe `@@species` accessor property returns the default constructor for `RegExp` objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically:\n\n```js\n// Hypothetical underlying implementation for illustration\nclass RegExp {\n  static get [Symbol.species]() {\n    return this;\n  }\n}\n```\n\nBecause of this polymorphic implementation, `@@species` of derived subclasses would also return the constructor itself by default.\n\n```js\nclass SubRegExp extends SubRegExp {}\nSubRegExp[Symbol.species] === SubRegExp; // true\n```\n\nSome `RegExp` methods create a copy of the current regex instance before running {{jsxref(\"RegExp/exec\", \"exec()\")}}, so that side effects such as changes to {{jsxref(\"RegExp/lastIndex\", \"lastIndex\")}} are not retained. The `@@species` property is used to determine the constructor of the new instance. The methods that copy the current regex instance are:\n\n- [`[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)\n- [`[@@split]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split)\n\n## Examples\n\n### Species in ordinary objects\n\nThe `@@species` property returns the default constructor function, which is the `RegExp` constructor for `RegExp` objects:\n\n```js\nRegExp[Symbol.species]; // function RegExp()\n```\n\n### Species in derived objects\n\nIn an instance of a custom `RegExp` subclass, such as `MyRegExp`, the `MyRegExp` species is the `MyRegExp` constructor. However, you might want to overwrite this, in order to return parent `RegExp` objects in your derived class methods:\n\n```js\nclass MyRegExp extends RegExp {\n  // Overwrite MyRegExp species to the parent RegExp constructor\n  static get [Symbol.species]() {\n    return RegExp;\n  }\n}\n```\n\nOr you can use this to observe the copying process:\n\n```js\nclass MyRegExp extends RegExp {\n  constructor(...args) {\n    console.log(\"Creating a new MyRegExp instance with args:\", args);\n    super(...args);\n  }\n  static get [Symbol.species]() {\n    console.log(\"Copying MyRegExp\");\n    return this;\n  }\n  exec(value) {\n    console.log(\"Executing with lastIndex:\", this.lastIndex);\n    return super.exec(value);\n  }\n}\n\nArray.from(\"aabbccdd\".matchAll(new MyRegExp(\"[ac]\", \"g\")));\n// Creating a new MyRegExp instance with args: [ '[ac]', 'g' ]\n// Copying MyRegExp\n// Creating a new MyRegExp instance with args: [ MyRegExp /[ac]/g, 'g' ]\n// Executing with lastIndex: 0\n// Executing with lastIndex: 1\n// Executing with lastIndex: 2\n// Executing with lastIndex: 5\n// Executing with lastIndex: 6\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp\")}}\n- {{jsxref(\"Symbol.species\")}}\n"
    },
    "@@split": {
      "index.md": "---\ntitle: RegExp.prototype[@@split]()\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/@@split\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.RegExp.@@split\n---\n\n{{JSRef}}\n\nThe **`[@@split]()`** method of {{jsxref(\"RegExp\")}} instances specifies how [`String.prototype.split`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) should behave when the regular expression is passed in as the separator.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-@@split.html\")}}\n\n## Syntax\n\n```js-nolint\nregexp[Symbol.split](str)\nregexp[Symbol.split](str, limit)\n```\n\n### Parameters\n\n- `str`\n  - : The target of the split operation.\n- `limit` {{optional_inline}}\n  - : Integer specifying a limit on the number of splits to be found. The `[@@split]()` method still splits on every match of `this` RegExp pattern (or, in the Syntax above, `regexp`), until the number of split items match the `limit` or the string falls short of `this` pattern.\n\n### Return value\n\nAn {{jsxref(\"Array\")}} containing substrings as its elements. Capturing groups are included.\n\n## Description\n\nThis method is called internally in {{jsxref(\"String.prototype.split()\")}} when a `RegExp` is passed as the separator. For example, the following two examples return the same result.\n\n```js\n\"a-b-c\".split(/-/);\n\n/-/[Symbol.split](\"a-b-c\");\n```\n\nThis method exists for customizing the behavior of `split()` in `RegExp` subclasses.\n\nThe `RegExp.prototype[@@split]()` base method exhibits the following behaviors:\n\n- It starts by using [`@@species`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species) to construct a new regexp, thus avoiding mutating the original regexp in any way.\n- The regexp's `g` (\"global\") flag is ignored, and the `y` (\"sticky\") flag is always applied even when it was not originally present.\n- If the target string is empty, and the regexp can match empty strings (for example, `/a?/`), an empty array is returned. Otherwise, if the regexp can't match an empty string, `[\"\"]` is returned.\n- The matching proceeds by continuously calling `this.exec()`. Since the regexp is always sticky, this will move along the string, each time yielding a matching string, index, and any capturing groups.\n- For each match, the substring between the last matched string's end and the current matched string's beginning is first appended to the result array. Then, the capturing groups' values are appended one-by-one.\n- If the current match is an empty string, or if the regexp doesn't match at the current position (since it's sticky), the `lastIndex` would still be advanced — if the regex is [Unicode-aware](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), it would advance by one Unicode code point; otherwise, it advances by one UTF-16 code unit.\n- If the regexp doesn't match the target string, the target string is returned as-is, wrapped in an array.\n- The returned array's length will never exceed the `limit` parameter, if provided, while trying to be as close as possible. Therefore, the last match and its capturing groups may not all be present in the returned array if the array is already filled.\n\n## Examples\n\n### Direct call\n\nThis method can be used in almost the same way as\n{{jsxref(\"String.prototype.split()\")}}, except the different `this` and the\ndifferent order of arguments.\n\n```js\nconst re = /-/g;\nconst str = \"2016-01-02\";\nconst result = re[Symbol.split](str);\nconsole.log(result); // [\"2016\", \"01\", \"02\"]\n```\n\n### Using @@split in subclasses\n\nSubclasses of {{jsxref(\"RegExp\")}} can override the `[@@split]()` method to\nmodify the default behavior.\n\n```js\nclass MyRegExp extends RegExp {\n  [Symbol.split](str, limit) {\n    const result = RegExp.prototype[Symbol.split].call(this, str, limit);\n    return result.map((x) => `(${x})`);\n  }\n}\n\nconst re = new MyRegExp(\"-\");\nconst str = \"2016-01-02\";\nconst result = str.split(re); // String.prototype.split calls re[@@split].\nconsole.log(result); // [\"(2016)\", \"(01)\", \"(02)\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `RegExp.prototype[@@split]` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.split()\")}}\n- [`RegExp.prototype[@@match]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match)\n- [`RegExp.prototype[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)\n- [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)\n- [`RegExp.prototype[@@search]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search)\n- {{jsxref(\"RegExp.prototype.exec()\")}}\n- {{jsxref(\"RegExp.prototype.test()\")}}\n- {{jsxref(\"Symbol.split\")}}\n"
    },
    "compile": {
      "index.md": "---\ntitle: RegExp.prototype.compile()\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/compile\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.RegExp.compile\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\n> **Note:** The `compile()` method is only specified for compatibility reasons. Using `compile()` causes the otherwise immutable regex source and flags to become mutable, which may break user expectations. You can use the [`RegExp()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor to construct a new regular expression object instead.\n\nThe **`compile()`** method of {{jsxref(\"RegExp\")}} instances is used to recompile a regular expression with new source and flags after the `RegExp` object has already been created.\n\n## Syntax\n\n```js-nolint\ncompile(pattern, flags)\n```\n\n### Parameters\n\n- `pattern`\n  - : The text of the regular expression.\n- `flags`\n  - : Any combination of [flag values](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp#flags).\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n## Examples\n\n### Using compile()\n\nThe following example shows how to recompile a regular expression with a new pattern and a new flag.\n\n```js\nconst regexObj = new RegExp(\"foo\", \"gi\");\nregexObj.compile(\"new foo\", \"g\");\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp\")}}\n"
    },
    "dotall": {
      "index.md": "---\ntitle: RegExp.prototype.dotAll\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.RegExp.dotAll\n---\n\n{{JSRef}}\n\nThe **`dotAll`** accessor property of {{jsxref(\"RegExp\")}} instances returns whether or not the `s` flag is used with this regular expression.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-dotall.html\")}}\n\n## Description\n\n`RegExp.prototype.dotAll` has the value `true` if the `s` flag was used; otherwise, `false`. The `s` flag indicates that the dot special character (`.`) should additionally match the following line terminator (\"newline\") characters in a string, which it would not match otherwise:\n\n- U+000A LINE FEED (LF) (`\\n`)\n- U+000D CARRIAGE RETURN (CR) (`\\r`)\n- U+2028 LINE SEPARATOR\n- U+2029 PARAGRAPH SEPARATOR\n\nThis effectively means the dot will match any character on the Unicode Basic Multilingual Plane (BMP). To allow it to match astral characters, the `u` (unicode) flag should be used. Using both flags in conjunction allows the dot to match any Unicode character, without exceptions.\n\nThe set accessor of `dotAll` is `undefined`. You cannot change this property directly.\n\n## Examples\n\n### Using dotAll\n\n```js\nconst str1 = \"bar\\nexample foo example\";\n\nconst regex1 = /bar.example/s;\n\nconsole.log(regex1.dotAll); // true\n\nconsole.log(str1.replace(regex1, \"\")); // foo example\n\nconst str2 = \"bar\\nexample foo example\";\n\nconst regex2 = /bar.example/;\n\nconsole.log(regex2.dotAll); // false\n\nconsole.log(str2.replace(regex2, \"\"));\n// bar\n// example foo example\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of the `dotAll` flag in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"RegExp.prototype.lastIndex\")}}\n- {{jsxref(\"RegExp.prototype.global\")}}\n- {{jsxref(\"RegExp.prototype.hasIndices\")}}\n- {{jsxref(\"RegExp.prototype.ignoreCase\")}}\n- {{jsxref(\"RegExp.prototype.multiline\")}}\n- {{jsxref(\"RegExp.prototype.source\")}}\n- {{jsxref(\"RegExp.prototype.sticky\")}}\n- {{jsxref(\"RegExp.prototype.unicode\")}}\n"
    },
    "exec": {
      "index.md": "---\ntitle: RegExp.prototype.exec()\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/exec\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.RegExp.exec\n---\n\n{{JSRef}}\n\nThe **`exec()`** method of {{jsxref(\"RegExp\")}} instances executes a search with this regular expression for a match in a specified string and returns a result array, or [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null).\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-exec.html\")}}\n\n## Syntax\n\n```js-nolint\nexec(str)\n```\n\n### Parameters\n\n- `str`\n  - : The string against which to match the regular expression. All values are [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `exec()` to search for the string `\"undefined\"`, which is rarely what you want.\n\n### Return value\n\nIf the match fails, the `exec()` method returns [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null), and sets the regex's [`lastIndex`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) to `0`.\n\nIf the match succeeds, the `exec()` method returns an array and updates the [`lastIndex`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) property of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing group of the matched text. The array also has the following additional properties:\n\n- `index`\n  - : The 0-based index of the match in the string.\n- `input`\n  - : The original string that was matched against.\n- `groups`\n  - : A [`null`-prototype object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) of named capturing groups, whose keys are the names, and values are the capturing groups, or {{jsxref(\"undefined\")}} if no named capturing groups were defined. See [capturing groups](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) for more information.\n- `indices` {{optional_inline}}\n\n  - : This property is only present when the [`d`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices) flag is set. It is an array where each entry represents the bounds of a substring match. The index of each element in this array corresponds to the index of the respective substring match in the array returned by `exec()`. In other words, the first `indices` entry represents the entire match, the second `indices` entry represents the first capturing group, etc. Each entry itself is a two-element array, where the first number represents the match's start index, and the second number, its end index.\n\n    The `indices` array additionally has a `groups` property, which holds a [`null`-prototype object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) of all named capturing groups. The keys are the names of the capturing groups, and each value is a two-element array, with the first number being the start index, and the second number being the end index of the capturing group. If the regular expression doesn't contain any named capturing groups, `groups` is `undefined`.\n\n## Description\n\nJavaScript {{jsxref(\"RegExp\")}} objects are _stateful_ when they have the [global](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) or [sticky](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) flags set (e.g. `/foo/g` or `/foo/y`). They store a [`lastIndex`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) from the previous match. Using this internally, `exec()` can be used to iterate over multiple matches in a string of text (with capture groups), as opposed to getting just the matching strings with {{jsxref(\"String.prototype.match()\")}}.\n\nWhen using `exec()`, the global flag has no effect when the sticky flag is set — the match is always sticky.\n\n`exec()` is the primitive method of regexps. Many other regexp methods call `exec()` internally — including those called by string methods, like [`@@replace`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace). While `exec()` itself is powerful (and is the most efficient), it often does not convey the intent most clearly.\n\n- If you only care whether the regex matches a string, but not what is actually being matched, use {{jsxref(\"RegExp.prototype.test()\")}} instead.\n- If you are finding all occurrences of a global regex and you don't care about information like capturing groups, use {{jsxref(\"String.prototype.match()\")}} instead. In addition, {{jsxref(\"String.prototype.matchAll()\")}} helps to simplify matching multiple parts of a string (with capture groups) by allowing you to iterate over the matches.\n- If you are executing a match to find its index position in the string, use the {{jsxref(\"String.prototype.search()\")}} method instead.\n\n## Examples\n\n### Using exec()\n\nConsider the following example:\n\n```js\n// Match \"quick brown\" followed by \"jumps\", ignoring characters in between\n// Remember \"brown\" and \"jumps\"\n// Ignore case\nconst re = /quick\\s(?<color>brown).+?(jumps)/dgi;\nconst result = re.exec(\"The Quick Brown Fox Jumps Over The Lazy Dog\");\n```\n\nThe following table shows the state of `result` after running this script:\n\n| Property  | Value                                                              |\n| --------- | ------------------------------------------------------------------ |\n| `[0]`     | `\"Quick Brown Fox Jumps\"`                                          |\n| `[1]`     | `\"Brown\"`                                                          |\n| `[2]`     | `\"Jumps\"`                                                          |\n| `index`   | `4`                                                                |\n| `indices` | `[[4, 25], [10, 15], [20, 25]]`<br />`groups: { color: [10, 15 ]}` |\n| `input`   | `\"The Quick Brown Fox Jumps Over The Lazy Dog\"`                    |\n| `groups`  | `{ color: \"brown\" }`                                               |\n\nIn addition, `re.lastIndex` will be set to `25`, due to this regex being global.\n\n### Finding successive matches\n\nIf your regular expression uses the [`g`](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) flag, you can use the `exec()` method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of `str` specified by the regular expression's {{jsxref(\"RegExp/lastIndex\", \"lastIndex\")}} property ({{jsxref(\"RegExp/test\", \"test()\")}} will also advance the {{jsxref(\"RegExp/lastIndex\", \"lastIndex\")}} property). Note that the {{jsxref(\"RegExp/lastIndex\", \"lastIndex\")}} property will not be reset when searching a different string, it will start its search at its existing {{jsxref(\"RegExp/lastIndex\", \"lastIndex\")}}.\n\nFor example, assume you have this script:\n\n```js\nconst myRe = /ab*/g;\nconst str = \"abbcdefabh\";\nlet myArray;\nwhile ((myArray = myRe.exec(str)) !== null) {\n  let msg = `Found ${myArray[0]}. `;\n  msg += `Next match starts at ${myRe.lastIndex}`;\n  console.log(msg);\n}\n```\n\nThis script displays the following text:\n\n```plain\nFound abb. Next match starts at 3\nFound ab. Next match starts at 9\n```\n\n> **Warning:** There are many pitfalls that can lead to this becoming an infinite loop!\n>\n> - Do _not_ place the regular expression literal (or {{jsxref(\"RegExp\")}} constructor) within the `while` condition — it will recreate the regex for every iteration and reset {{jsxref(\"RegExp/lastIndex\", \"lastIndex\")}}.\n> - Be sure that the [global (`g`) flag](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) is set, or `lastIndex` will never be advanced.\n> - If the regex may match zero-length characters (e.g. `/^/gm`), increase its {{jsxref(\"RegExp/lastIndex\", \"lastIndex\")}} manually each time to avoid being stuck in the same place.\n\nYou can usually replace this kind of code with {{jsxref(\"String.prototype.matchAll()\")}} to make it less error-prone.\n\n### Using exec() with RegExp literals\n\nYou can also use `exec()` without creating a {{jsxref(\"RegExp\")}} object\nexplicitly:\n\n```js\nconst matches = /(hello \\S+)/.exec(\"This is a hello world!\");\nconsole.log(matches[1]);\n```\n\nThis will log a message containing `'hello world!'`.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) guide\n- {{jsxref(\"RegExp\")}}\n"
    },
    "flags": {
      "index.md": "---\ntitle: RegExp.prototype.flags\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/flags\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.RegExp.flags\n---\n\n{{JSRef}}\n\nThe **`flags`** accessor property of {{jsxref(\"RegExp\")}} instances returns the [flags](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) of this regular expression.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-flags.html\")}}\n\n## Description\n\n`RegExp.prototype.flags` has a string as its value. Flags in the `flags` property are sorted alphabetically (from left to right, e.g. `\"dgimsuvy\"`). It actually invokes the other flag accessors ([`hasIndices`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices), [`global`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global), etc.) one-by-one and concatenates the results.\n\nAll built-in functions read the `flags` property instead of reading individual flag accessors.\n\nThe set accessor of `flags` is `undefined`. You cannot change this property directly.\n\n## Examples\n\n### Using flags\n\n```js-nolint\n/foo/ig.flags; // \"gi\"\n/bar/myu.flags; // \"muy\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `RegExp.prototype.flags` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [Advanced searching with flags](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) in the Regular expressions guide\n- {{jsxref(\"RegExp.prototype.source\")}}\n"
    },
    "global": {
      "index.md": "---\ntitle: RegExp.prototype.global\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/global\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.RegExp.global\n---\n\n{{JSRef}}\n\nThe **`global`** accessor property of {{jsxref(\"RegExp\")}} instances returns whether or not the `g` flag is used with this regular expression.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-global.html\")}}\n\n## Description\n\n`RegExp.prototype.global` has the value `true` if the `g` flag was used; otherwise, `false`. The `g` flag indicates that the regular expression should be tested against all possible matches in a string. Each call to [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) will update its [`lastIndex`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) property, so that the next call to `exec()` will start at the next character.\n\nSome methods, such as [`String.prototype.matchAll()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) and [`String.prototype.replaceAll()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll), will validate that, if the parameter is a regex, it is global. The regex's [`@@match`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match) and [`@@replace`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace) methods (called by [`String.prototype.match()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) and [`String.prototype.replace()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)) would also have different behaviors when the regex is global.\n\nThe set accessor of `global` is `undefined`. You cannot change this property directly.\n\n## Examples\n\n### Using global\n\n```js\nconst regex = /foo/g;\nconsole.log(regex.global); // true\n\nconst str = \"fooexamplefoo\";\nconst str1 = str.replace(regex, \"\");\nconsole.log(str1); // example\n\nconst regex1 = /foo/;\nconst str2 = str.replace(regex1, \"\");\nconsole.log(str2); // examplefoo\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp.prototype.lastIndex\")}}\n- {{jsxref(\"RegExp.prototype.dotAll\")}}\n- {{jsxref(\"RegExp.prototype.hasIndices\")}}\n- {{jsxref(\"RegExp.prototype.ignoreCase\")}}\n- {{jsxref(\"RegExp.prototype.multiline\")}}\n- {{jsxref(\"RegExp.prototype.source\")}}\n- {{jsxref(\"RegExp.prototype.sticky\")}}\n- {{jsxref(\"RegExp.prototype.unicode\")}}\n"
    },
    "hasindices": {
      "index.md": "---\ntitle: RegExp.prototype.hasIndices\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.RegExp.hasIndices\n---\n\n{{JSRef}}\n\nThe **`hasIndices`** accessor property of {{jsxref(\"RegExp\")}} instances returns whether or not the `d` flag is used with this regular expression.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-hasindices.html\")}}\n\n## Description\n\n`RegExp.prototype.hasIndices` has the value `true` if the `d` flag was used; otherwise, `false`. The `d` flag indicates that the result of a regular expression match should contain the start and end indices of the substrings of each capture group. It does not change the regex's interpretation or matching behavior in any way, but only provides additional information in the matching result.\n\nThis flag primarily affects the return value of [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec). If the `d` flag is present, the array returned by `exec()` has an additional `indices` property as described in the `exec()` method's [return value](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec#return_value). Because all other regex-related methods (such as {{jsxref(\"String.prototype.match()\")}}) call `exec()` internally, they will also return the indices if the regex has the `d` flag.\n\nThe set accessor of `hasIndices` is `undefined`. You cannot change this property directly.\n\n## Examples\n\nThere's a more detailed usage example at [Groups and backreferences > Using groups and match indices](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences#using_groups_and_match_indices).\n\n### Using hasIndices\n\n```js\nconst str1 = \"foo bar foo\";\n\nconst regex1 = /foo/dg;\n\nconsole.log(regex1.hasIndices); // true\n\nconsole.log(regex1.exec(str1).indices[0]); // [0, 3]\nconsole.log(regex1.exec(str1).indices[0]); // [8, 11]\n\nconst str2 = \"foo bar foo\";\n\nconst regex2 = /foo/;\n\nconsole.log(regex2.hasIndices); // false\n\nconsole.log(regex2.exec(str2).indices); // undefined\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp.prototype.lastIndex\")}}\n- {{jsxref(\"RegExp.prototype.exec()\")}}\n- {{jsxref(\"RegExp.prototype.dotAll\")}}\n- {{jsxref(\"RegExp.prototype.global\")}}\n- {{jsxref(\"RegExp.prototype.ignoreCase\")}}\n- {{jsxref(\"RegExp.prototype.multiline\")}}\n- {{jsxref(\"RegExp.prototype.source\")}}\n- {{jsxref(\"RegExp.prototype.sticky\")}}\n- {{jsxref(\"RegExp.prototype.unicode\")}}\n"
    },
    "ignorecase": {
      "index.md": "---\ntitle: RegExp.prototype.ignoreCase\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.RegExp.ignoreCase\n---\n\n{{JSRef}}\n\nThe **`ignoreCase`** accessor property of {{jsxref(\"RegExp\")}} instances returns whether or not the `i` flag is used with this regular expression.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-ignorecase.html\")}}\n\n## Description\n\n`RegExp.prototype.ignoreCase` has the value `true` if the `i` flag was used; otherwise, `false`. The `i` flag indicates that case should be ignored while attempting a match in a string. Case-insensitive matching is done by mapping both the expected character set and the matched string to the same casing.\n\nIf the regex is [Unicode-aware](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode), the case mapping happens through _simple case folding_ specified in [`CaseFolding.txt`](https://unicode.org/Public/UCD/latest/ucd/CaseFolding.txt). The mapping always maps to a single code point, so it does not map, for example, `ß` (U+00DF LATIN SMALL LETTER SHARP S) to `ss` (which is _full case folding_, not _simple case folding_). It may however map code points outside the Basic Latin block to code points within it — for example, `ſ` (U+017F LATIN SMALL LETTER LONG S) case-folds to `s` (U+0073 LATIN SMALL LETTER S) and `K` (U+212A KELVIN SIGN) case-folds to `k` (U+006B LATIN SMALL LETTER K). Therefore, `ſ` and `K` can be matched by `/[a-z]/ui`.\n\nIf the regex is Unicode-unaware, case mapping uses the [Unicode Default Case Conversion](https://unicode-org.github.io/icu/userguide/transforms/casemappings.html) — the same algorithm used in {{jsxref(\"String.prototype.toUpperCase()\")}}. For example, `Ω` (U+2126 OHM SIGN) and `Ω` (U+03A9 GREEK CAPITAL LETTER OMEGA) are both mapped by Default Case Conversion to themselves but by simple case folding to `ω` (U+03C9 GREEK SMALL LETTER OMEGA), so `\"ω\"` is matched by `/[\\u2126]/ui` and `/[\\u03a9]/ui` but not by `/[\\u2126]/i` or `/[\\u03a9]/i`. This algorithm prevents code points outside the Basic Latin block to be mapped to code points within it, so `ſ` and `K` mentioned previously are not matched by `/[a-z]/i`.\n\nThe set accessor of `ignoreCase` is `undefined`. You cannot change this property directly.\n\n## Examples\n\n### Using ignoreCase\n\n```js\nconst regex = /foo/i;\n\nconsole.log(regex.ignoreCase); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp.prototype.lastIndex\")}}\n- {{jsxref(\"RegExp.prototype.dotAll\")}}\n- {{jsxref(\"RegExp.prototype.global\")}}\n- {{jsxref(\"RegExp.prototype.hasIndices\")}}\n- {{jsxref(\"RegExp.prototype.multiline\")}}\n- {{jsxref(\"RegExp.prototype.source\")}}\n- {{jsxref(\"RegExp.prototype.sticky\")}}\n- {{jsxref(\"RegExp.prototype.unicode\")}}\n"
    },
    "index.md": "---\ntitle: RegExp\nslug: Web/JavaScript/Reference/Global_Objects/RegExp\npage-type: javascript-class\nbrowser-compat: javascript.builtins.RegExp\n---\n\n{{JSRef}}\n\nThe **`RegExp`** object is used for matching text with a pattern.\n\nFor an introduction to regular expressions, read the [Regular expressions chapter](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) in the JavaScript guide. For detailed information of regular expression syntax, read the [regular expression reference](/en-US/docs/Web/JavaScript/Reference/Regular_expressions).\n\n## Description\n\n### Literal notation and constructor\n\nThere are two ways to create a `RegExp` object: a _literal notation_ and a _constructor_.\n\n- The _literal notation_ takes a pattern between two slashes, followed by optional [flags](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags), after the second slash.\n- The _constructor function_ takes either a string or a `RegExp` object as its first parameter and a string of optional [flags](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) as its second parameter.\n\nThe following three expressions create the same regular expression object:\n\n```js\nconst re = /ab+c/i; // literal notation\n// OR\nconst re = new RegExp(\"ab+c\", \"i\"); // constructor with string pattern as first argument\n// OR\nconst re = new RegExp(/ab+c/, \"i\"); // constructor with regular expression literal as first argument\n```\n\nBefore regular expressions can be used, they have to be compiled. This process allows them to perform matches more efficiently. More about the process can be found in [dotnet docs](https://docs.microsoft.com/dotnet/standard/base-types/compilation-and-reuse-in-regular-expressions).\n\nThe literal notation results in compilation of the regular expression when the expression is evaluated. On the other hand, the constructor of the `RegExp` object, `new RegExp('ab+c')`, results in runtime compilation of the regular expression.\n\nUse a string as the first argument to the `RegExp()` constructor when you want to [build the regular expression from dynamic input](#building_a_regular_expression_from_dynamic_inputs).\n\n### Flags in constructor\n\nThe expression `new RegExp(/ab+c/, flags)` will create a new `RegExp` using the source of the first parameter and the [flags](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) provided by the second.\n\nWhen using the constructor function, the normal string escape rules (preceding special characters with `\\` when included in a string) are necessary.\n\nFor example, the following are equivalent:\n\n```js\nconst re = /\\w+/;\n// OR\nconst re = new RegExp(\"\\\\w+\");\n```\n\n### Special handling for regexes\n\n> **Note:** Whether something is a \"regex\" can be [duck-typed](https://en.wikipedia.org/wiki/Duck_typing). It doesn't have to be a `RegExp`!\n\nSome built-in methods would treat regexes specially. They decide whether `x` is a regex through [multiple steps](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-isregexp):\n\n1. `x` must be an object (not a primitive).\n2. If [`x[Symbol.match]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match) is not `undefined`, check if it's [truthy](/en-US/docs/Glossary/Truthy).\n3. Otherwise, if `x[Symbol.match]` is `undefined`, check if `x` had been created with the `RegExp` constructor. (This step should rarely happen, since if `x` is a `RegExp` object that have not been tampered with, it should have a `Symbol.match` property.)\n\nNote that in most cases, it would go through the `Symbol.match` check, which means:\n\n- An actual `RegExp` object whose `Symbol.match` property's value is [falsy](/en-US/docs/Glossary/Falsy) but not `undefined` (even with everything else intact, like [`exec`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) and [`@@replace`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)) can be used as if it's not a regex.\n- A non-`RegExp` object with a `Symbol.match` property will be treated as if it's a regex.\n\nThis choice was made because `@@match` is the most indicative property that something is intended to be used for matching. (`exec` could also be used, but because it's not a symbol property, there would be too many false positives.) The places that treat regexes specially include:\n\n- [`String.prototype.endsWith()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith), [`startsWith()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith), and [`includes()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes) throw a {{jsxref(\"TypeError\")}} if the first argument is a regex.\n- [`String.prototype.matchAll()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) and [`replaceAll()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) check whether the [global](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) flag is set if the first argument is a regex before invoking its [`@@matchAll`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll) or [`@@replace`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace) method.\n- The [`RegExp()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor directly returns the `pattern` argument only if `pattern` is a regex (among a few other conditions). If `pattern` is a regex, it would also interrogate `pattern`'s `source` and `flags` properties instead of coercing `pattern` to a string.\n\nFor example, [`String.prototype.endsWith()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith) would coerce all inputs to strings, but it would throw if the argument is a regex, because it's only designed to match strings, and using a regex is likely a developer mistake.\n\n```js\n\"foobar\".endsWith({ toString: () => \"bar\" }); // true\n\"foobar\".endsWith(/bar/); // TypeError: First argument to String.prototype.endsWith must not be a regular expression\n```\n\nYou can get around the check by setting `@@match` to a [falsy](/en-US/docs/Glossary/Falsy) value that's not `undefined`. This would mean that the regex cannot be used for `String.prototype.match()` (since without `@@match`, `match()` would construct a new `RegExp` object with the two enclosing slashes added by [`re.toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString)), but it can be used for virtually everything else.\n\n```js\nconst re = /bar/g;\nre[Symbol.match] = false;\n\"/bar/g\".endsWith(re); // true\nre.exec(\"bar\"); // [ 'bar', index: 0, input: 'bar', groups: undefined ]\n\"bar & bar\".replace(re, \"foo\"); // 'foo & foo'\n```\n\n### Perl-like RegExp properties\n\nNote that several of the {{jsxref(\"RegExp\")}} properties have both long and short (Perl-like) names. Both names always refer to the same value. (Perl is the programming language from which JavaScript modeled its regular expressions.) See also [deprecated `RegExp` properties](/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp).\n\n## Constructor\n\n- {{jsxref(\"RegExp/RegExp\", \"RegExp()\")}}\n  - : Creates a new `RegExp` object.\n\n## Static properties\n\n- {{jsxref(\"RegExp/n\", \"RegExp.$1, …, RegExp.$9\")}} {{deprecated_inline}}\n  - : Static read-only properties that contain parenthesized substring matches.\n- {{jsxref(\"RegExp/input\", \"RegExp.input ($_)\")}} {{deprecated_inline}}\n  - : A static property that contains the last string against which a regular expression was successfully matched.\n- {{jsxref(\"RegExp/lastMatch\", \"RegExp.lastMatch ($&)\")}} {{deprecated_inline}}\n  - : A static read-only property that contains the last matched substring.\n- {{jsxref(\"RegExp/lastParen\", \"RegExp.lastParen ($+)\")}} {{deprecated_inline}}\n  - : A static read-only property that contains the last parenthesized substring match.\n- {{jsxref(\"RegExp/leftContext\", \"RegExp.leftContext ($`)\")}} {{deprecated_inline}}\n  - : A static read-only property that contains the substring preceding the most recent match.\n- {{jsxref(\"RegExp/rightContext\", \"RegExp.rightContext ($')\")}} {{deprecated_inline}}\n  - : A static read-only property that contains the substring following the most recent match.\n- {{jsxref(\"RegExp/@@species\", \"RegExp[@@species]\")}}\n  - : The constructor function that is used to create derived objects.\n\n## Instance properties\n\nThese properties are defined on `RegExp.prototype` and shared by all `RegExp` instances.\n\n- {{jsxref(\"Object/constructor\", \"RegExp.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `RegExp` instances, the initial value is the {{jsxref(\"RegExp/RegExp\", \"RegExp\")}} constructor.\n- {{jsxref(\"RegExp.prototype.dotAll\")}}\n  - : Whether `.` matches newlines or not.\n- {{jsxref(\"RegExp.prototype.flags\")}}\n  - : A string that contains the flags of the `RegExp` object.\n- {{jsxref(\"RegExp.prototype.global\")}}\n  - : Whether to test the regular expression against all possible matches in a string, or only against the first.\n- {{jsxref(\"RegExp.prototype.hasIndices\")}}\n  - : Whether the regular expression result exposes the start and end indices of captured substrings.\n- {{jsxref(\"RegExp.prototype.ignoreCase\")}}\n  - : Whether to ignore case while attempting a match in a string.\n- {{jsxref(\"RegExp.prototype.multiline\")}}\n  - : Whether or not to search in strings across multiple lines.\n- {{jsxref(\"RegExp.prototype.source\")}}\n  - : The text of the pattern.\n- {{jsxref(\"RegExp.prototype.sticky\")}}\n  - : Whether or not the search is sticky.\n- {{jsxref(\"RegExp.prototype.unicode\")}}\n  - : Whether or not Unicode features are enabled.\n- {{jsxref(\"RegExp.prototype.unicodeSets\")}}\n  - : Whether or not the `v` flag, an upgrade to the `u` mode, is enabled.\n\nThese properties are own properties of each `RegExp` instance.\n\n- {{jsxref(\"RegExp/lastIndex\", \"lastIndex\")}}\n  - : The index at which to start the next match.\n\n## Instance methods\n\n- {{jsxref(\"RegExp.prototype.compile()\")}} {{deprecated_inline}}\n  - : (Re-)compiles a regular expression during execution of a script.\n- {{jsxref(\"RegExp.prototype.exec()\")}}\n  - : Executes a search for a match in its string parameter.\n- {{jsxref(\"RegExp.prototype.test()\")}}\n  - : Tests for a match in its string parameter.\n- {{jsxref(\"RegExp.prototype.toString()\")}}\n  - : Returns a string representing the specified object. Overrides the {{jsxref(\"Object.prototype.toString()\")}} method.\n- [`RegExp.prototype[@@match]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match)\n  - : Performs match to given string and returns match result.\n- [`RegExp.prototype[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)\n  - : Returns all matches of the regular expression against a string.\n- [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)\n  - : Replaces matches in given string with new substring.\n- [`RegExp.prototype[@@search]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search)\n  - : Searches the match in given string and returns the index the pattern found in the string.\n- [`RegExp.prototype[@@split]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split)\n  - : Splits given string into an array by separating the string into substrings.\n\n## Examples\n\n### Using a regular expression to change data format\n\nThe following script uses the {{jsxref(\"String.prototype.replace()\")}} method to match a name in the format _first last_ and output it in the format _last, first_.\n\nIn the replacement text, the script uses `$1` and `$2` to indicate the results of the corresponding matching parentheses in the regular expression pattern.\n\n```js\nconst re = /(\\w+)\\s(\\w+)/;\nconst str = \"Maria Cruz\";\nconst newstr = str.replace(re, \"$2, $1\");\nconsole.log(newstr);\n```\n\nThis displays `\"Cruz, Maria\"`.\n\n### Using regular expression to split lines with different line endings/ends of line/line breaks\n\nThe default line ending varies depending on the platform (Unix, Windows, etc.). The line splitting provided in this example works on all platforms.\n\n```js\nconst text = \"Some text\\nAnd some more\\r\\nAnd yet\\rThis is the end\";\nconst lines = text.split(/\\r\\n|\\r|\\n/);\nconsole.log(lines); // [ 'Some text', 'And some more', 'And yet', 'This is the end' ]\n```\n\nNote that the order of the patterns in the regular expression matters.\n\n### Using regular expression on multiple lines\n\n```js\nconst s = \"Please yes\\nmake my day!\";\n\ns.match(/yes.*day/);\n// Returns null\n\ns.match(/yes[^]*day/);\n// Returns [\"yes\\nmake my day\"]\n```\n\n### Using a regular expression with the sticky flag\n\nThe {{jsxref(\"RegExp/sticky\", \"sticky\")}} flag indicates that the regular expression performs sticky matching in the target string by attempting to match starting at {{jsxref(\"RegExp.prototype.lastIndex\")}}.\n\n```js\nconst str = \"#foo#\";\nconst regex = /foo/y;\n\nregex.lastIndex = 1;\nregex.test(str); // true\nregex.lastIndex = 5;\nregex.test(str); // false (lastIndex is taken into account with sticky flag)\nregex.lastIndex; // 0 (reset after match failure)\n```\n\n### The difference between the sticky flag and the global flag\n\nWith the sticky flag `y`, the next match has to happen at the `lastIndex` position, while with the global flag `g`, the match can happen at the `lastIndex` position or later:\n\n```js\nconst re = /\\d/y;\nlet r;\nwhile ((r = re.exec(\"123 456\"))) {\n  console.log(r, \"AND re.lastIndex\", re.lastIndex);\n}\n\n// [ '1', index: 0, input: '123 456', groups: undefined ] AND re.lastIndex 1\n// [ '2', index: 1, input: '123 456', groups: undefined ] AND re.lastIndex 2\n// [ '3', index: 2, input: '123 456', groups: undefined ] AND re.lastIndex 3\n//  … and no more match.\n```\n\nWith the global flag `g`, all 6 digits would be matched, not just 3.\n\n### Regular expression and Unicode characters\n\n`\\w` and `\\W` only matches ASCII based characters; for example, `a` to `z`, `A` to `Z`, `0` to `9`, and `_`.\n\nTo match characters from other languages such as Cyrillic or Hebrew, use `\\uhhhh`, where `hhhh` is the character's Unicode value in hexadecimal.\n\nThis example demonstrates how one can separate out Unicode characters from a word.\n\n```js\nconst text = \"Образец text на русском языке\";\nconst regex = /[\\u0400-\\u04FF]+/g;\n\nconst match = regex.exec(text);\nconsole.log(match[0]); // 'Образец'\nconsole.log(regex.lastIndex); // 7\n\nconst match2 = regex.exec(text);\nconsole.log(match2[0]); // 'на' (did not log 'text')\nconsole.log(regex.lastIndex); // 15\n\n// and so on\n```\n\nThe [Unicode property escapes](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) feature provides a simpler way to target particular Unicode ranges, by allowing for statements like `\\p{scx=Cyrl}` (to match any Cyrillic letter), or `\\p{L}/u` (to match a letter from any language).\n\n### Extracting subdomain name from URL\n\n```js\nconst url = \"http://xxx.domain.com\";\nconsole.log(/^https?:\\/\\/(.+?)\\./.exec(url)[1]); // 'xxx'\n```\n\n> **Note:** Instead of using regular expressions for parsing URLs, it is usually better to use the browsers built-in URL parser by using the [URL API](/en-US/docs/Web/API/URL_API).\n\n### Building a regular expression from dynamic inputs\n\n```js\nconst breakfasts = [\"bacon\", \"eggs\", \"oatmeal\", \"toast\", \"cereal\"];\nconst order = \"Let me get some bacon and eggs, please\";\n\norder.match(new RegExp(`\\\\b(${breakfasts.join(\"|\")})\\\\b`, \"g\"));\n// Returns ['bacon', 'eggs']\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n### Firefox-specific notes\n\nStarting with Firefox 34, in the case of a capturing group with quantifiers preventing its exercise, the matched text for a capturing group is now `undefined` instead of an empty string:\n\n```js\n// Firefox 33 or older\n\"x\".replace(/x(.)?/g, (m, group) => {\n  console.log(`group: ${JSON.stringify(group)}`);\n});\n// group: \"\"\n\n// Firefox 34 or newer\n\"x\".replace(/x(.)?/g, (m, group) => {\n  console.log(`group: ${group}`);\n});\n// group: undefined\n```\n\nNote that due to web compatibility, `RegExp.$N` will still return an empty string instead of `undefined` ([bug 1053944](https://bugzil.la/1053944)).\n\n## See also\n\n- [Polyfill of many modern `RegExp` features (`dotAll`, `sticky` flags, named capture groups, etc.) in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) guide\n- [Regular expressions](/en-US/docs/Web/JavaScript/Reference/Regular_expressions)\n- {{jsxref(\"String.prototype.match()\")}}\n- {{jsxref(\"String.prototype.replace()\")}}\n- {{jsxref(\"String.prototype.split()\")}}\n",
    "input": {
      "index.md": "---\ntitle: RegExp.input ($_)\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/input\npage-type: javascript-static-accessor-property\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.RegExp.input\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\n> **Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.input`** static accessor property returns the string against which a regular expression is matched. `RegExp.$_` is an alias for this property.\n\n## Description\n\nBecause `input` is a static property of {{jsxref(\"RegExp\")}}, you always use it as `RegExp.input` or `RegExp.$_`, rather than as a property of a `RegExp` object you created.\n\nThe value of `input` updates whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, `input` is an empty string. You can set the value of `input`, but this does not affect other behaviors of the regex, and the value will be overwritten again when the next successful match is made.\n\n## Examples\n\n### Using input and $\\_\n\n```js\nconst re = /hi/g;\nre.test(\"hi there!\");\nRegExp.input; // \"hi there!\"\nre.test(\"foo\"); // new test, non-matching\nRegExp.$_; // \"hi there!\"\nre.test(\"hi world!\"); // new test, matching\nRegExp.$_; // \"hi world!\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp/lastMatch\", \"RegExp.lastMatch ($&amp;)\")}}\n- {{jsxref(\"RegExp/lastParen\", \"RegExp.lastParen ($+)\")}}\n- {{jsxref(\"RegExp/leftContext\", \"RegExp.leftContext ($`)\")}}\n- {{jsxref(\"RegExp/rightContext\", \"RegExp.rightContext ($')\")}}\n- {{jsxref(\"RegExp/n\", \"RegExp.$1, …, RegExp.$9\")}}\n"
    },
    "lastindex": {
      "index.md": "---\ntitle: \"RegExp: lastIndex\"\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\npage-type: javascript-instance-data-property\nbrowser-compat: javascript.builtins.RegExp.lastIndex\n---\n\n{{JSRef}}\n\nThe **`lastIndex`** data property of a {{jsxref(\"RegExp\")}} instance specifies the index at which to start the next match.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-lastindex.html\")}}\n\n## Value\n\nA non-negative integer.\n\n{{js_property_attributes(1, 0, 0)}}\n\n## Description\n\nThis property is set only if the regular expression instance used the `g` flag to indicate a global search, or the `y` flag to indicate a sticky search. The following rules apply when {{jsxref(\"RegExp/exec\", \"exec()\")}} is called on a given input:\n\n- If `lastIndex` is greater than the length of the input, `exec()` will not find a match, and `lastIndex` will be set to 0.\n- If `lastIndex` is equal to or less than the length of the input, `exec()` will attempt to match the input starting from `lastIndex`.\n  - If `exec()` finds a match, then `lastIndex` will be set to the position of the end of the matched string in the input.\n  - If `exec()` does not find a match, then `lastIndex` will be set to 0.\n\nOther regex-related methods, such as {{jsxref(\"RegExp.prototype.test()\")}}, {{jsxref(\"String.prototype.match()\")}}, {{jsxref(\"String.prototype.replace()\")}}, etc., call `exec()` under the hood, so they have different effects on `lastIndex`. See their respective pages for details.\n\n## Examples\n\n### Using lastIndex\n\nConsider the following sequence of statements:\n\n```js\nconst re = /(hi)?/g;\n```\n\nMatches the empty string.\n\n```js\nconsole.log(re.exec(\"hi\"));\nconsole.log(re.lastIndex);\n```\n\nReturns `[\"hi\", \"hi\"]` with `lastIndex` equal to 2.\n\n```js\nconsole.log(re.exec(\"hi\"));\nconsole.log(re.lastIndex);\n```\n\nReturns `[\"\", undefined]`, an empty array whose zeroth element is the match string. In this case, the empty string because `lastIndex` was 2 (and still is 2) and `hi` has length 2.\n\n### Using lastIndex with sticky regexes\n\nThe `lastIndex` property is writable. You can set it to make the regex start its next search at a given index.\n\nThe `y` flag almost always requires setting `lastIndex`. It always matches strictly at `lastIndex` and does not attempt any later positions. This is usually useful for writing parsers, when you want to match tokens only at the current position.\n\n```js\nconst stringPattern = /\"[^\"]*\"/y;\nconst input = `const message = \"Hello world\";`;\n\nstringPattern.lastIndex = 6;\nconsole.log(stringPattern.exec(input)); // null\n\nstringPattern.lastIndex = 16;\nconsole.log(stringPattern.exec(input)); // ['\"Hello world\"']\n```\n\n### Rewinding lastIndex\n\nThe `g` flag also benefits from setting `lastIndex`. One common use case is when the string is modified in the middle of a global search. In this case, we may miss a particular match if the string is shortened. We can avoid this by rewinding `lastIndex`.\n\n```js\nconst mdLinkPattern = /\\[[^[\\]]+\\]\\((?<link>[^()\\s]+)\\)/dg;\n\nfunction resolveMDLink(line) {\n  let match;\n  let modifiedLine = line;\n  while ((match = mdLinkPattern.exec(modifiedLine))) {\n    const originalLink = match.groups.link;\n    const resolvedLink = originalLink.replaceAll(/^files|\\/index\\.md$/g, \"\");\n    modifiedLine =\n      modifiedLine.slice(0, match.indices.groups.link[0]) +\n      resolvedLink +\n      modifiedLine.slice(match.indices.groups.link[1]);\n    // Rewind the pattern to the end of the resolved link\n    mdLinkPattern.lastIndex += resolvedLink.length - originalLink.length;\n  }\n  return modifiedLine;\n}\n\nconsole.log(\n  resolveMDLink(\n    \"[`lastIndex`](files/en-us/web/javascript/reference/global_objects/regexp/lastindex/index.md)\",\n  ),\n); // [`lastIndex`](/en-us/web/javascript/reference/global_objects/regexp/lastindex)\nconsole.log(\n  resolveMDLink(\n    \"[`ServiceWorker`](files/en-us/web/api/serviceworker/index.md) and [`SharedWorker`](files/en-us/web/api/sharedworker/index.md)\",\n  ),\n); // [`ServiceWorker`](/en-us/web/api/serviceworker) and [`SharedWorker`](/en-us/web/api/sharedworker)\n```\n\nTry deleting the `mdLinkPattern.lastIndex += resolvedLink.length - originalLink.length` line and running the second example. You will find that the second link is not replaced correctly, because the `lastIndex` is already past the link's index after the string is shortened.\n\n> **Warning:** This example is for demonstration only. To deal with Markdown, you should probably use a parsing library instead of regex.\n\n### Optimizing searching\n\nYou can optimize searching by setting `lastIndex` to a point where previous possible occurrences can be ignored. For example, instead of this:\n\n```js\nconst stringPattern = /\"[^\"]*\"/g;\nconst input = `const message = \"Hello \" + \"world\";`;\n\n// Pretend we've already dealt with the previous parts of the string\nlet offset = 26;\nconst remainingInput = input.slice(offset);\nconst nextString = stringPattern.exec(remainingInput);\nconsole.log(nextString[0]); // \"world\"\noffset += nextString.index + nextString.length;\n```\n\nConsider this:\n\n```js\nstringPattern.lastIndex = offset;\nconst nextString = stringPattern.exec(remainingInput);\nconsole.log(nextString[0]); // \"world\"\noffset = stringPattern.lastIndex;\n```\n\nThis is potentially more performant because we avoid string slicing.\n\n### Avoiding side effects\n\nThe side effects caused by `exec()` can be confusing, especially if the input is different for each `exec()`.\n\n```js\nconst re = /foo/g;\nconsole.log(re.test(\"foo bar\")); // true\nconsole.log(re.test(\"foo baz\")); // false, because lastIndex is non-zero\n```\n\nThis is even more confusing when you are hand-modifying `lastIndex`. To contain the side effects, remember to reset `lastIndex` after each input is completely processed.\n\n```js\nconst re = /foo/g;\nconsole.log(re.test(\"foo bar\")); // true\nre.lastIndex = 0;\nconsole.log(re.test(\"foo baz\")); // true\n```\n\nWith some abstraction, you can require `lastIndex` to be set to a particular value before each `exec()` call.\n\n```js\nfunction createMatcher(pattern) {\n  // Create a copy, so that the original regex is never updated\n  const regex = new RegExp(pattern, \"g\");\n  return (input, offset) => {\n    regex.lastIndex = offset;\n    return regex.exec(input);\n  };\n}\n\nconst matchFoo = createMatcher(/foo/);\nconsole.log(matchFoo(\"foo bar\", 0)[0]); // \"foo\"\nconsole.log(matchFoo(\"foo baz\", 0)[0]); // \"foo\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp.prototype.dotAll\")}}\n- {{jsxref(\"RegExp.prototype.global\")}}\n- {{jsxref(\"RegExp.prototype.hasIndices\")}}\n- {{jsxref(\"RegExp.prototype.ignoreCase\")}}\n- {{jsxref(\"RegExp.prototype.multiline\")}}\n- {{jsxref(\"RegExp.prototype.source\")}}\n- {{jsxref(\"RegExp.prototype.sticky\")}}\n- {{jsxref(\"RegExp.prototype.unicode\")}}\n"
    },
    "lastmatch": {
      "index.md": "---\ntitle: RegExp.lastMatch ($&)\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\npage-type: javascript-static-accessor-property\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.RegExp.lastMatch\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\n> **Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.lastMatch`** static accessor property returns the last matched substring. `RegExp[\"$&\"]` is an alias for this property.\n\n## Description\n\nBecause `lastMatch` is a static property of {{jsxref(\"RegExp\")}}, you always use it as `RegExp.lastMatch` or `RegExp[\"$&\"]`, rather than as a property of a `RegExp` object you created.\n\nThe value of `lastMatch` updates whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, `lastMatch` is an empty string. The set accessor of `lastMatch` is `undefined`, so you cannot change this property directly.\n\nYou cannot use the shorthand alias with the dot property accessor (`RegExp.$&`), because `&` is not a valid identifier part, so this causes a {{jsxref(\"SyntaxError\")}}. Use the [bracket notation](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) instead.\n\n`$&` can also be used in the replacement string of {{jsxref(\"String.prototype.replace()\")}}, but that's unrelated to the `RegExp[\"$&\"]` legacy property.\n\n## Examples\n\n### Using lastMatch and $&\n\n```js\nconst re = /hi/g;\nre.test(\"hi there!\");\nRegExp.lastMatch; // \"hi\"\nRegExp[\"$&\"]; // \"hi\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp/input\", \"RegExp.input ($_)\")}}\n- {{jsxref(\"RegExp/lastParen\", \"RegExp.lastParen ($+)\")}}\n- {{jsxref(\"RegExp/leftContext\", \"RegExp.leftContext ($`)\")}}\n- {{jsxref(\"RegExp/rightContext\", \"RegExp.rightContext ($')\")}}\n- {{jsxref(\"RegExp/n\", \"RegExp.$1, …, RegExp.$9\")}}\n"
    },
    "lastparen": {
      "index.md": "---\ntitle: RegExp.lastParen ($+)\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/lastParen\npage-type: javascript-static-accessor-property\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.RegExp.lastParen\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\n> **Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.lastParen`** static accessor property returns the last parenthesized substring match, if any. `RegExp[\"$+\"]` is an alias for this property.\n\n## Description\n\nBecause `lastParen` is a static property of {{jsxref(\"RegExp\")}}, you always use it as `RegExp.lastParen` or `RegExp[\"$+\"]`, rather than as a property of a `RegExp` object you created.\n\nThe value of `lastParen` updates whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, or if the most recent regex execution contains no capturing groups, `lastParen` is an empty string. The set accessor of `lastParen` is `undefined`, so you cannot change this property directly.\n\nYou cannot use the shorthand alias with the dot property accessor (`RegExp.$+`), because `+` is not a valid identifier part, so this causes a {{jsxref(\"SyntaxError\")}}. Use the [bracket notation](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) instead.\n\n## Examples\n\n### Using lastParen and $+\n\n```js\nconst re = /(hi)/g;\nre.test(\"hi there!\");\nRegExp.lastParen; // \"hi\"\nRegExp[\"$+\"]; // \"hi\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp/input\", \"RegExp.input ($_)\")}}\n- {{jsxref(\"RegExp/lastMatch\", \"RegExp.lastMatch ($&amp;)\")}}\n- {{jsxref(\"RegExp/leftContext\", \"RegExp.leftContext ($`)\")}}\n- {{jsxref(\"RegExp/rightContext\", \"RegExp.rightContext ($')\")}}\n- {{jsxref(\"RegExp/n\", \"RegExp.$1, …, RegExp.$9\")}}\n"
    },
    "leftcontext": {
      "index.md": "---\ntitle: RegExp.leftContext ($`)\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/leftContext\npage-type: javascript-static-accessor-property\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.RegExp.leftContext\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\n> **Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.leftContext`** static accessor property returns the substring preceding the most recent match. ``RegExp[\"$`\"]`` is an alias for this property.\n\n## Description\n\nBecause `leftContext` is a static property of {{jsxref(\"RegExp\")}}, you always use it as `RegExp.leftContext` or ``RegExp[\"$`\"]``, rather than as a property of a `RegExp` object you created.\n\nThe value of `leftContext` updates whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, `leftContext` is an empty string. The set accessor of `leftContext` is `undefined`, so you cannot change this property directly.\n\nYou cannot use the shorthand alias with the dot property accessor (``RegExp.$` ``), because `` ` `` is not a valid identifier part, so this causes a {{jsxref(\"SyntaxError\")}}. Use the [bracket notation](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) instead.\n\n``$` `` can also be used in the replacement string of {{jsxref(\"String.prototype.replace()\")}}, but that's unrelated to the ``RegExp[\"$`\"]`` legacy property.\n\n## Examples\n\n### Using leftContext and $\\`\n\n```js\nconst re = /world/g;\nre.test(\"hello world!\");\nRegExp.leftContext; // \"hello \"\nRegExp[\"$`\"]; // \"hello \"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp/input\", \"RegExp.input ($_)\")}}\n- {{jsxref(\"RegExp/lastMatch\", \"RegExp.lastMatch ($&amp;)\")}}\n- {{jsxref(\"RegExp/lastParen\", \"RegExp.lastParen ($+)\")}}\n- {{jsxref(\"RegExp/rightContext\", \"RegExp.rightContext ($')\")}}\n- {{jsxref(\"RegExp/n\", \"RegExp.$1, …, RegExp.$9\")}}\n"
    },
    "multiline": {
      "index.md": "---\ntitle: RegExp.prototype.multiline\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/multiline\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.RegExp.multiline\n---\n\n{{JSRef}}\n\nThe **`multiline`** accessor property of {{jsxref(\"RegExp\")}} instances returns whether or not the `m` flag is used with this regular expression.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-multiline.html\", \"taller\")}}\n\n## Description\n\n`RegExp.prototype.multiline` has the value `true` if the `m` flag was used; otherwise, `false`. The `m` flag indicates that a multiline input string should be treated as multiple lines. For example, if `m` is used, `^` and `$` change from matching at only the start or end of the entire string to the start or end of any line within the string.\n\nThe set accessor of `multiline` is `undefined`. You cannot change this property directly.\n\n## Examples\n\n### Using multiline\n\n```js\nconst regex = /foo/m;\n\nconsole.log(regex.multiline); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp.prototype.lastIndex\")}}\n- {{jsxref(\"RegExp.prototype.dotAll\")}}\n- {{jsxref(\"RegExp.prototype.global\")}}\n- {{jsxref(\"RegExp.prototype.hasIndices\")}}\n- {{jsxref(\"RegExp.prototype.ignoreCase\")}}\n- {{jsxref(\"RegExp.prototype.source\")}}\n- {{jsxref(\"RegExp.prototype.sticky\")}}\n- {{jsxref(\"RegExp.prototype.unicode\")}}\n"
    },
    "n": {
      "index.md": "---\ntitle: RegExp.$1, …, RegExp.$9\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/n\npage-type: javascript-static-accessor-property\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.RegExp.n\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\n> **Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.$1, …, RegExp.$9`** static accessor properties return parenthesized substring matches.\n\n## Description\n\nBecause `$1`–`$9` are static properties of {{jsxref(\"RegExp\")}}, you always use them as `RegExp.$1`, `RegExp.$2`, etc., rather than as properties of a `RegExp` object you created.\n\nThe values of `$1, …, $9` update whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, or if the last match does not have the corresponding capturing group, the respective property is an empty string. The set accessor of each property is `undefined`, so you cannot change the properties directly.\n\nThe number of possible parenthesized substrings is unlimited, but the `RegExp` object can only hold the first nine. You can access all parenthesized substrings through the returned array's indexes.\n\n`$1, …, $9` can also be used in the replacement string of {{jsxref(\"String.prototype.replace()\")}}, but that's unrelated to the `RegExp.$n` legacy properties.\n\n## Examples\n\n### Using $n with RegExp.prototype.test()\n\nThe following script uses the {{jsxref(\"RegExp.prototype.test()\")}} method to grab a number in a generic string.\n\n```js\nconst str = \"Test 24\";\nconst number = /(\\d+)/.test(str) ? RegExp.$1 : \"0\";\nnumber; // \"24\"\n```\n\nPlease note that any operation involving the usage of other regular expressions between a `re.test(str)` call and the `RegExp.$n` property, might have side effects, so that accessing these special properties should be done instantly, otherwise the result might be unexpected.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp/input\", \"RegExp.input ($_)\")}}\n- {{jsxref(\"RegExp/lastMatch\", \"RegExp.lastMatch ($&amp;)\")}}\n- {{jsxref(\"RegExp/lastParen\", \"RegExp.lastParen ($+)\")}}\n- {{jsxref(\"RegExp/leftContext\", \"RegExp.leftContext ($`)\")}}\n- {{jsxref(\"RegExp/rightContext\", \"RegExp.rightContext ($')\")}}\n"
    },
    "regexp": {
      "index.md": "---\ntitle: RegExp() constructor\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/RegExp\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.RegExp.RegExp\n---\n\n{{JSRef}}\n\nThe **`RegExp()`** constructor creates {{jsxref(\"RegExp\")}} objects.\n\nFor an introduction to regular expressions, read the [Regular Expressions chapter](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) in the [JavaScript Guide](/en-US/docs/Web/JavaScript/Guide).\n\n{{EmbedInteractiveExample(\"pages/js/regexp-constructor.html\")}}\n\n## Syntax\n\n```js-nolint\nnew RegExp(pattern)\nnew RegExp(pattern, flags)\nRegExp(pattern)\nRegExp(pattern, flags)\n```\n\n> **Note:** `RegExp()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new), but sometimes with different effects. See [Return value](#return_value).\n\n### Parameters\n\n- `pattern`\n\n  - : The text of the regular expression. This can also be another `RegExp` object.\n\n- `flags` {{optional_inline}}\n\n  - : If specified, `flags` is a string that contains the flags to add. Alternatively, if a `RegExp` object is supplied for the `pattern`, the `flags` string will replace any of that object's flags (and `lastIndex` will be reset to `0`).\n\n    `flags` may contain any combination of the following characters:\n\n    - [`d` (indices)](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices)\n      - : Generate indices for substring matches.\n    - [`g` (global)](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global)\n      - : Find all matches rather than stopping after the first match.\n    - [`i` (ignore case)](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase)\n      - : When matching, casing differences are ignored.\n    - [`m` (multiline)](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline)\n      - : Treat beginning and end assertions (`^` and `$`) as working over multiple lines. In other words, match the beginning or end of _each_ line (delimited by `\\n` or `\\r`), not only the very beginning or end of the whole input string.\n    - [`s` (dotAll)](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll)\n      - : Allows `.` to match newlines.\n    - [`u` (unicode)](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode)\n      - : Treat `pattern` as a sequence of Unicode code points.\n    - [`v` (unicodeSets)](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets)\n      - : An upgrade to the `u` flag that enables set notation in character classes as well as properties of strings.\n    - [`y` (sticky)](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky)\n      - : Matches only from the index indicated by the `lastIndex` property of this regular expression in the target string. Does not attempt to match from any later indexes.\n\n### Return value\n\n`RegExp(pattern)` returns `pattern` directly if all of the following are true:\n\n- `RegExp()` is called without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new);\n- [`pattern` is a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes);\n- `pattern.constructor === RegExp` (usually meaning it's not a subclass);\n- `flags` is `undefined`.\n\nIn all other cases, calling `RegExp()` with or without `new` both create a new `RegExp` object. If `pattern` is a regex, the new object's [source](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source) is `pattern.source`; otherwise, its source is `pattern` [coerced to a string](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). If the `flags` parameter is not `undefined`, the new object's [`flags`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags) is the parameter's value; otherwise, its `flags` is `pattern.flags` (if `pattern` is a regex).\n\n### Exceptions\n\n- {{jsxref(\"SyntaxError\")}}\n  - : Thrown in one of the following cases:\n    - `pattern` cannot be parsed as a valid regular expression.\n    - `flags` contains repeated characters or any character outside of those allowed.\n\n## Examples\n\n### Literal notation and constructor\n\nThere are two ways to create a `RegExp` object: a _literal notation_ and a _constructor_.\n\n- The _literal notation_ takes a pattern between two slashes, followed by optional flags, after the second slash.\n- The _constructor function_ takes either a string or a `RegExp` object as its first parameter and a string of optional flags as its second parameter.\n\nThe following three expressions create the same regular expression:\n\n```js\n/ab+c/i;\nnew RegExp(/ab+c/, \"i\"); // literal notation\nnew RegExp(\"ab+c\", \"i\"); // constructor\n```\n\nBefore regular expressions can be used, they have to be compiled. This process allows them to perform matches more efficiently. There are two ways to compile and get a `RegExp` object.\n\nThe literal notation results in compilation of the regular expression when the expression is evaluated. On the other hand, the constructor of the `RegExp` object, `new RegExp('ab+c')`, results in runtime compilation of the regular expression.\n\nUse a string as the first argument to the `RegExp()` constructor when you want to [build the regular expression from dynamic input](#building_a_regular_expression_from_dynamic_inputs).\n\n### Building a regular expression from dynamic inputs\n\n```js\nconst breakfasts = [\"bacon\", \"eggs\", \"oatmeal\", \"toast\", \"cereal\"];\nconst order = \"Let me get some bacon and eggs, please\";\n\norder.match(new RegExp(`\\\\b(${breakfasts.join(\"|\")})\\\\b`, \"g\"));\n// Returns ['bacon', 'eggs']\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of many modern `RegExp` features (`dotAll`, `sticky` flags, named capture groups, etc.) in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) guide\n- {{jsxref(\"String.prototype.match()\")}}\n- {{jsxref(\"String.prototype.replace()\")}}\n"
    },
    "rightcontext": {
      "index.md": "---\ntitle: RegExp.rightContext ($')\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/rightContext\npage-type: javascript-static-accessor-property\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.RegExp.rightContext\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\n> **Note:** All `RegExp` static properties that expose the last match state globally are deprecated. See [deprecated RegExp features](/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp) for more information.\n\nThe **`RegExp.rightContext`** static accessor property returns the substring following the most recent match. `RegExp[\"$'\"]` is an alias for this property.\n\n## Description\n\nBecause `rightContext` is a static property of {{jsxref(\"RegExp\")}}, you always use it as `RegExp.rightContext` or `RegExp[\"$'\"]`, rather than as a property of a `RegExp` object you created.\n\nThe value of `rightContext` updates whenever a `RegExp` (but not a `RegExp` subclass) instance makes a successful match. If no matches have been made, `rightContext` is an empty string. The set accessor of `rightContext` is `undefined`, so you cannot change this property directly.\n\nYou cannot use the shorthand alias with the dot property accessor (`RegExp.$'`), because `'` is not a valid identifier part, so this causes a {{jsxref(\"SyntaxError\")}}. Use the [bracket notation](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors) instead.\n\n`$'` can also be used in the replacement string of {{jsxref(\"String.prototype.replace()\")}}, but that's unrelated to the `RegExp[\"$'\"]` legacy property.\n\n## Examples\n\n### Using rightContext and $'\n\n```js\nconst re = /hello/g;\nre.test(\"hello world!\");\nRegExp.rightContext; // \" world!\"\nRegExp[\"$'\"]; // \" world!\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp/input\", \"RegExp.input ($_)\")}}\n- {{jsxref(\"RegExp/lastMatch\", \"RegExp.lastMatch ($&amp;)\")}}\n- {{jsxref(\"RegExp/lastParen\", \"RegExp.lastParen ($+)\")}}\n- {{jsxref(\"RegExp/leftContext\", \"RegExp.leftContext ($`)\")}}\n- {{jsxref(\"RegExp/n\", \"RegExp.$1, …, RegExp.$9\")}}\n"
    },
    "source": {
      "index.md": "---\ntitle: RegExp.prototype.source\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/source\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.RegExp.source\n---\n\n{{JSRef}}\n\nThe **`source`** accessor property of {{jsxref(\"RegExp\")}} instances returns a string containing the source text of this regular expression, without the two forward slashes on both sides or any flags.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-source.html\")}}\n\n## Description\n\nConceptually, the `source` property is the text between the two forward slashes in the regular expression literal. The language requires the returned string to be properly escaped, so that when the `source` is concatenated with a forward slash on both ends, it would form a parsable regex literal. For example, for `new RegExp(\"/\")`, the `source` is `\\\\/`, because if it generates `/`, the resulting literal becomes `///`, which is a line comment. Similarly, all [line terminators](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators) will be escaped because line terminator _characters_ would break up the regex literal. There's no requirement for other characters, as long as the result is parsable. For empty regular expressions, the string `(?:)` is returned.\n\n## Examples\n\n### Using source\n\n```js\nconst regex = /fooBar/gi;\n\nconsole.log(regex.source); // \"fooBar\", doesn't contain /.../ and \"gi\".\n```\n\n### Empty regular expressions and escaping\n\n```js\nnew RegExp().source; // \"(?:)\"\n\nnew RegExp(\"\\n\").source === \"\\\\n\"; // true, starting with ES5\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp.prototype.flags\")}}\n"
    },
    "sticky": {
      "index.md": "---\ntitle: RegExp.prototype.sticky\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/sticky\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.RegExp.sticky\n---\n\n{{JSRef}}\n\nThe **`sticky`** accessor property of {{jsxref(\"RegExp\")}} instances returns whether or not the `y` flag is used with this regular expression.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-sticky.html\", \"taller\")}}\n\n## Description\n\n`RegExp.prototype.sticky` has the value `true` if the `y` flag was used; otherwise, `false`. The `y` flag indicates that the regex attempts to match the target string only from the index indicated by the {{jsxref(\"RegExp/lastIndex\", \"lastIndex\")}} property (and unlike a global regex, does not attempt to match from any later indexes).\n\nThe set accessor of `sticky` is `undefined`. You cannot change this property directly.\n\nFor both sticky regexes and [global](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) regexes:\n\n- They start matching at `lastIndex`.\n- When the match succeeds, `lastIndex` is advanced to the end of the match.\n- When `lastIndex` is out of bounds of the currently matched string, `lastIndex` is reset to 0.\n\nHowever, for the [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method, the behavior when matching fails is different:\n\n- When the [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method is called on a sticky regex, if the regex fails to match at `lastIndex`, the regex immediately returns `null` and resets `lastIndex` to 0.\n- When the [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method is called on a global regex, if the regex fails to match at `lastIndex`, it tries to match from the next character, and so on until a match is found or the end of the string is reached.\n\nFor the [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) method, a regex that's both sticky and global behaves the same as a sticky and non-global regex. Because [`test()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) is a simple wrapper around `exec()`, `test()` would ignore the global flag and perform sticky matches as well. However, due to many other methods special-casing the behavior of global regexes, the global flag is, in general, orthogonal to the sticky flag.\n\n- [`String.prototype.matchAll()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll) (which calls [`RegExp.prototype[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)): `y`, `g` and `gy` are all different.\n  - For `y` regexes: `matchAll()` throws; `[@@matchAll]()` yields the `exec()` result exactly once, without updating the regex's `lastIndex`.\n  - For `g` or `gy` regexes: returns an iterator that yields a sequence of `exec()` results.\n- [`String.prototype.match()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) (which calls [`RegExp.prototype[@@match]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match)): `y`, `g` and `gy` are all different.\n  - For `y` regexes: returns the `exec()` result and updates the regex's `lastIndex`.\n  - For `g` or `gy` regexes: returns an array of all `exec()` results.\n- [`String.prototype.search()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search) (which calls [`RegExp.prototype[@@search]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search)): the `g` flag is always irrelevant.\n  - For `y` or `gy` regexes: always returns `0` (if the very beginning of the string matches) or `-1` (if the beginning doesn't match), without updating the regex's `lastIndex` when it exits.\n  - For `g` regexes: returns the index of the first match in the string, or `-1` if no match is found.\n- [`String.prototype.split()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) (which calls [`RegExp.prototype[@@split]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split)): `y`, `g`, and `gy` all have the same behavior.\n- [`String.prototype.replace()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) (which calls [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)): `y`, `g` and `gy` are all different.\n  - For `y` regexes: replaces once at the current `lastIndex` and updates `lastIndex`.\n  - For `g` and `gy` regexes: replaces all occurrences matched by `exec()`.\n- [`String.prototype.replaceAll()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) (which calls [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)): `y`, `g` and `gy` are all different.\n  - For `y` regexes: `replaceAll()` throws.\n  - For `g` and `gy` regexes: replaces all occurrences matched by `exec()`.\n\n## Examples\n\n### Using a regular expression with the sticky flag\n\n```js\nconst str = \"#foo#\";\nconst regex = /foo/y;\n\nregex.lastIndex = 1;\nregex.test(str); // true\nregex.lastIndex = 5;\nregex.test(str); // false (lastIndex is taken into account with sticky flag)\nregex.lastIndex; // 0 (reset after match failure)\n```\n\n### Anchored sticky flag\n\nFor several versions, Firefox's SpiderMonkey engine had [a bug](https://bugzil.la/773687) with regard to the `^` assertion and the sticky flag which allowed expressions starting with the `^` assertion and using the sticky flag to match when they shouldn't. The bug was introduced some time after Firefox 3.6 (which had the sticky flag but not the bug) and fixed in 2015. Perhaps because of the bug, the specification [specifically calls out](https://tc39.es/ecma262/multipage/text-processing.html#sec-compileassertion) the fact that:\n\n> Even when the `y` flag is used with a pattern, `^` always matches only at the beginning of _Input_, or (if _rer_.[[Multiline]] is `true`) at the beginning of a line.\n\nExamples of correct behavior:\n\n```js\nconst regex = /^foo/y;\nregex.lastIndex = 2;\nregex.test(\"..foo\"); // false - index 2 is not the beginning of the string\n\nconst regex2 = /^foo/my;\nregex2.lastIndex = 2;\nregex2.test(\"..foo\"); // false - index 2 is not the beginning of the string or line\nregex2.lastIndex = 2;\nregex2.test(\".\\nfoo\"); // true - index 2 is the beginning of a line\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of the `sticky` flag in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"RegExp.prototype.lastIndex\")}}\n- {{jsxref(\"RegExp.prototype.dotAll\")}}\n- {{jsxref(\"RegExp.prototype.global\")}}\n- {{jsxref(\"RegExp.prototype.hasIndices\")}}\n- {{jsxref(\"RegExp.prototype.ignoreCase\")}}\n- {{jsxref(\"RegExp.prototype.multiline\")}}\n- {{jsxref(\"RegExp.prototype.source\")}}\n- {{jsxref(\"RegExp.prototype.unicode\")}}\n"
    },
    "test": {
      "index.md": "---\ntitle: RegExp.prototype.test()\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/test\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.RegExp.test\n---\n\n{{JSRef}}\n\nThe **`test()`** method of {{jsxref(\"RegExp\")}} instances executes a search with this regular expression for a match between a regular expression and a specified string. Returns `true` if there is a match; `false` otherwise.\n\nJavaScript {{jsxref(\"RegExp\")}} objects are **stateful** when they have\nthe {{jsxref(\"RegExp/global\", \"global\")}} or {{jsxref(\"RegExp/sticky\", \"sticky\")}} flags\nset (e.g., `/foo/g` or `/foo/y`). They store a\n{{jsxref(\"RegExp/lastIndex\", \"lastIndex\")}} from the previous match. Using this\ninternally, `test()` can be used to iterate over multiple matches in a string\nof text (with capture groups).\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-test.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\ntest(str)\n```\n\n### Parameters\n\n- `str`\n  - : The string against which to match the regular expression. All values are [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `test()` to search for the string `\"undefined\"`, which is rarely what you want.\n\n### Return value\n\n`true` if there is a match between the regular expression and the string\n`str`. Otherwise, `false`.\n\n## Description\n\nUse `test()` whenever you want to know whether a pattern is found in a\nstring. `test()` returns a boolean, unlike the\n{{jsxref(\"String.prototype.search()\")}} method (which returns the index of a match, or\n`-1` if not found).\n\nTo get more information (but with slower execution), use the\n{{jsxref(\"RegExp/exec\", \"exec()\")}} method. (This is similar to the\n{{jsxref(\"String.prototype.match()\")}} method.)\n\nAs with `exec()` (or in combination with it), `test()` called\nmultiple times on the same global regular expression instance will advance past the\nprevious match.\n\n## Examples\n\n### Using test()\n\nSimple example that tests if `\"hello\"` is contained at the very beginning of\na string, returning a boolean result.\n\n```js\nconst str = \"hello world!\";\nconst result = /^hello/.test(str);\n\nconsole.log(result); // true\n```\n\nThe following example logs a message which depends on the success of the test:\n\n```js\nfunction testInput(re, str) {\n  const midstring = re.test(str) ? \"contains\" : \"does not contain\";\n  console.log(`${str} ${midstring} ${re.source}`);\n}\n```\n\n### Using test() on a regex with the \"global\" flag\n\nWhen a regex has the [global flag](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) set,\n`test()` will advance the {{jsxref(\"RegExp/lastIndex\", \"lastIndex\")}} of the regex.\n({{jsxref(\"RegExp.prototype.exec()\")}} also advances the `lastIndex` property.)\n\nFurther calls to `test(str)` will resume searching\n`str` starting from `lastIndex`. The\n`lastIndex` property will continue to increase each time `test()`\nreturns `true`.\n\n> **Note:** As long as `test()` returns `true`,\n> `lastIndex` will _not_ reset—even when testing a different string!\n\nWhen `test()` returns `false`, the calling regex's\n`lastIndex` property will reset to `0`.\n\nThe following example demonstrates this behavior:\n\n```js\nconst regex = /foo/g; // the \"global\" flag is set\n\n// regex.lastIndex is at 0\nregex.test(\"foo\"); // true\n\n// regex.lastIndex is now at 3\nregex.test(\"foo\"); // false\n\n// regex.lastIndex is at 0\nregex.test(\"barfoo\"); // true\n\n// regex.lastIndex is at 6\nregex.test(\"foobar\"); // false\n\n// regex.lastIndex is at 0\nregex.test(\"foobarfoo\"); // true\n\n// regex.lastIndex is at 3\nregex.test(\"foobarfoo\"); // true\n\n// regex.lastIndex is at 9\nregex.test(\"foobarfoo\"); // false\n\n// regex.lastIndex is at 0\n// (...and so on)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) guide\n- {{jsxref(\"RegExp\")}}\n"
    },
    "tostring": {
      "index.md": "---\ntitle: RegExp.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.RegExp.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"RegExp\")}} instances returns a string representing this regular expression.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-tostring.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the given object.\n\n## Description\n\nThe {{jsxref(\"RegExp\")}} object overrides the `toString()` method of the {{jsxref(\"Object\")}} object; it does not inherit {{jsxref(\"Object.prototype.toString()\")}}. For {{jsxref(\"RegExp\")}} objects, the `toString()` method returns a string representation of the regular expression.\n\nIn practice, it reads the regex's [`source`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source) and [`flags`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags) properties and returns a string in the form `/source/flags`. The `toString()` return value is guaranteed to be a parsable regex literal, although it may not be the exact same text as what was originally specified for the regex (for example, the flags may be reordered).\n\n## Examples\n\n### Using toString()\n\nThe following example displays the string value of a {{jsxref(\"RegExp\")}} object:\n\n```js\nconst myExp = new RegExp(\"a+b+c\");\nconsole.log(myExp.toString()); // '/a+b+c/'\n\nconst foo = new RegExp(\"bar\", \"g\");\nconsole.log(foo.toString()); // '/bar/g'\n```\n\n### Empty regular expressions and escaping\n\nSince `toString()` accesses the [`source`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source) property, an empty regular expression returns the string `\"/(?:)/\"`, and line terminators such as `\\n` are escaped. This makes the returned value always a valid regex literal.\n\n```js\nnew RegExp().toString(); // \"/(?:)/\"\n\nnew RegExp(\"\\n\").toString() === \"/\\\\n/\"; // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.toString()\")}}\n"
    },
    "unicode": {
      "index.md": "---\ntitle: RegExp.prototype.unicode\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/unicode\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.RegExp.unicode\n---\n\n{{JSRef}}\n\nThe **`unicode`** accessor property of {{jsxref(\"RegExp\")}} instances returns whether or not the `u` flag is used with this regular expression.\n\n{{EmbedInteractiveExample(\"pages/js/regexp-prototype-unicode.html\", \"taller\")}}\n\n## Description\n\n`RegExp.prototype.unicode` has the value `true` if the `u` flag was used; otherwise, `false`. The `u` flag enables various Unicode-related features. With the \"u\" flag:\n\n- Any [Unicode code point escapes](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) (`\\u{xxxx}`, `\\p{UnicodePropertyValue}`) will be interpreted as such instead of identity escapes. For example `/\\u{61}/u` matches `\"a\"`, but `/\\u{61}/` (without `u` flag) matches `\"u\".repeat(61)`, where the `\\u` is equivalent to a single `u`.\n- Surrogate pairs will be interpreted as whole characters instead of two separate characters. For example, `/[😄]/u` would only match `\"😄\"` but not `\"\\ud83d\"`.\n- When [`lastIndex`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) is automatically advanced (such as when calling [`exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)), unicode regexes advance by Unicode code points instead of UTF-16 code units.\n\nThere are other changes to the parsing behavior that prevent possible syntax mistakes (which are analogous to [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode) for regex syntax). These syntaxes are all [deprecated and only kept for web compatibility](/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#regexp), and you should not rely on them.\n\nThe set accessor of `unicode` is `undefined`. You cannot change this property directly.\n\n### Unicode-aware mode\n\nWhen we refer to _Unicode-aware mode_, we mean the regex has either the `u` or the [`v`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets) flag, in which case the regex enables Unicode-related features (such as [Unicode character class escape](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape)) and has much stricter syntax rules. Because `u` and `v` interpret the same regex in incompatible ways, using both flags results in a {{jsxref(\"SyntaxError\")}}.\n\nSimilarly, a regex is _Unicode-unaware_ if it has neither the `u` nor the `v` flag. In this case, the regex is interpreted as a sequence of UTF-16 code units, and there are many legacy syntaxes that do not become syntax errors.\n\n## Examples\n\n### Using the unicode property\n\n```js\nconst regex = /\\u{61}/u;\n\nconsole.log(regex.unicode); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp.prototype.lastIndex\")}}\n- {{jsxref(\"RegExp.prototype.dotAll\")}}\n- {{jsxref(\"RegExp.prototype.global\")}}\n- {{jsxref(\"RegExp.prototype.hasIndices\")}}\n- {{jsxref(\"RegExp.prototype.ignoreCase\")}}\n- {{jsxref(\"RegExp.prototype.multiline\")}}\n- {{jsxref(\"RegExp.prototype.source\")}}\n- {{jsxref(\"RegExp.prototype.sticky\")}}\n"
    },
    "unicodesets": {
      "index.md": "---\ntitle: RegExp.prototype.unicodeSets\nslug: Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.RegExp.unicodeSets\n---\n\n{{JSRef}}\n\nThe **`unicodeSets`** accessor property of {{jsxref(\"RegExp\")}} instances returns whether or not the `v` flag is used with this regular expression.\n\n## Description\n\n`RegExp.prototype.unicodeSets` has the value `true` if the `v` flag was used; otherwise, `false`. The `v` flag is an \"upgrade\" to the [`u`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode) flag that enables more Unicode-related features. (\"v\" is the next letter after \"u\" in the alphabet.) Because `u` and `v` interpret the same regex in incompatible ways, using both flags results in a {{jsxref(\"SyntaxError\")}}. With the `v` flag, you get all features mentioned in the `u` flag description, plus:\n\n- The [`\\p`](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) escape sequence can be additionally used to match properties of strings, instead of just characters.\n- The [character class](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class) syntax is upgraded to allow intersection, union, and subtraction syntaxes, as well as matching multiple Unicode characters.\n- The character class complement syntax `[^...]` constructs a complement class instead of negating the match result, avoiding some confusing behaviors with case-insensitive matching. For more information, see [Complement classes and case-insensitive matching](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#complement_classes_and_case-insensitive_matching).\n\nSome valid `u`-mode regexes become invalid in `v`-mode. Specifically, the character class syntax is different and some characters can no longer appear literally. For more information, see [`v`-mode character class](/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class#v-mode_character_class).\n\n> **Note:** The `v` mode does not interpret grapheme clusters as single characters; they are still multiple code points. For example, `/[🇺🇳]/v` is still able to match `\"🇺\"`.\n\nThe set accessor of `unicodeSets` is `undefined`. You cannot change this property directly.\n\n## Examples\n\n### Using the unicodeSets property\n\n```js\nconst regex = /[\\p{Script_Extensions=Greek}&&\\p{Letter}]/v;\n\nconsole.log(regex.unicodeSets); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"RegExp.prototype.lastIndex\")}}\n- {{jsxref(\"RegExp.prototype.dotAll\")}}\n- {{jsxref(\"RegExp.prototype.global\")}}\n- {{jsxref(\"RegExp.prototype.hasIndices\")}}\n- {{jsxref(\"RegExp.prototype.ignoreCase\")}}\n- {{jsxref(\"RegExp.prototype.multiline\")}}\n- {{jsxref(\"RegExp.prototype.source\")}}\n- {{jsxref(\"RegExp.prototype.sticky\")}}\n- {{jsxref(\"RegExp.prototype.unicode\")}}\n- [RegExp v flag with set notation and properties of strings](https://v8.dev/features/regexp-v-flag) on v8.dev (2022)\n"
    }
  },
  "set": {
    "@@iterator": {
      "index.md": "---\ntitle: Set.prototype[@@iterator]()\nslug: Web/JavaScript/Reference/Global_Objects/Set/@@iterator\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.@@iterator\n---\n\n{{JSRef}}\n\nThe **`[@@iterator]()`** method of {{jsxref(\"Set\")}} instances implements the [iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows `Set` objects to be consumed by most syntaxes expecting iterables, such as the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and {{jsxref(\"Statements/for...of\", \"for...of\")}} loops. It returns a [set iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the values of the set in insertion order.\n\nThe initial value of this property is the same function object as the initial value of the {{jsxref(\"Set.prototype.values\")}} property.\n\n{{EmbedInteractiveExample(\"pages/js/set-prototype-@@iterator.html\")}}\n\n## Syntax\n\n```js-nolint\nset[Symbol.iterator]()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe same return value as {{jsxref(\"Set.prototype.values()\")}}: a new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the values of the set.\n\n## Examples\n\n### Iteration using for...of loop\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes `Set` objects [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```js\nconst mySet = new Set();\nmySet.add(\"0\");\nmySet.add(1);\nmySet.add({});\n\nfor (const v of mySet) {\n  console.log(v);\n}\n```\n\n### Manually hand-rolling the iterator\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```js\nconst mySet = new Set();\nmySet.add(\"0\");\nmySet.add(1);\nmySet.add({});\n\nconst setIter = mySet[Symbol.iterator]();\n\nconsole.log(setIter.next().value); // \"0\"\nconsole.log(setIter.next().value); // 1\nconsole.log(setIter.next().value); // {}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"Set.prototype.entries()\")}}\n- {{jsxref(\"Set.prototype.keys()\")}}\n- {{jsxref(\"Set.prototype.values()\")}}\n- {{jsxref(\"Symbol.iterator\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "@@species": {
      "index.md": "---\ntitle: Set[@@species]\nslug: Web/JavaScript/Reference/Global_Objects/Set/@@species\npage-type: javascript-static-accessor-property\nbrowser-compat: javascript.builtins.Set.@@species\n---\n\n{{JSRef}}\n\nThe **`Set[@@species]`** static accessor property is an unused accessor property specifying how to copy `Set` objects.\n\n## Syntax\n\n```js-nolint\nSet[Symbol.species]\n```\n\n### Return value\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct copied `Set` instances.\n\n## Description\n\nThe `@@species` accessor property returns the default constructor for `Set` objects. Subclass constructors may override it to change the constructor assignment.\n\n> **Note:** This property is currently unused by all `Set` methods.\n\n## Examples\n\n### Species in ordinary objects\n\nThe `@@species` property returns the default constructor function, which is the `Set` constructor for `Set`.\n\n```js\nSet[Symbol.species]; // function Set()\n```\n\n### Species in derived objects\n\nIn an instance of a custom `Set` subclass, such as `MySet`, the `MySet` species is the `MySet` constructor. However, you might want to overwrite this, in order to return parent `Set` objects in your derived class methods:\n\n```js\nclass MySet extends Set {\n  // Overwrite MySet species to the parent Set constructor\n  static get [Symbol.species]() {\n    return Set;\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"Symbol.species\")}}\n"
    },
    "add": {
      "index.md": "---\ntitle: Set.prototype.add()\nslug: Web/JavaScript/Reference/Global_Objects/Set/add\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.add\n---\n\n{{JSRef}}\n\nThe **`add()`** method of {{jsxref(\"Set\")}} instances inserts a new element with a specified value in to this set, if there isn't an element with the same value already in this set\n\n{{EmbedInteractiveExample(\"pages/js/set-prototype-add.html\")}}\n\n## Syntax\n\n```js-nolint\nadd(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value of the element to add to the `Set` object.\n\n### Return value\n\nThe `Set` object with added value.\n\n## Examples\n\n### Using the add() method\n\n```js\nconst mySet = new Set();\n\nmySet.add(1);\nmySet.add(5).add(\"some text\"); // chainable\n\nconsole.log(mySet);\n// Set [1, 5, \"some text\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"Set.prototype.delete()\")}}\n- {{jsxref(\"Set.prototype.has()\")}}\n"
    },
    "clear": {
      "index.md": "---\ntitle: Set.prototype.clear()\nslug: Web/JavaScript/Reference/Global_Objects/Set/clear\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.clear\n---\n\n{{JSRef}}\n\nThe **`clear()`** method of {{jsxref(\"Set\")}} instances removes all elements from this set.\n\n{{EmbedInteractiveExample(\"pages/js/set-prototype-clear.html\")}}\n\n## Syntax\n\n```js-nolint\nclear()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n## Examples\n\n### Using the clear() method\n\n```js\nconst mySet = new Set();\nmySet.add(1);\nmySet.add(\"foo\");\n\nconsole.log(mySet.size); // 2\nconsole.log(mySet.has(\"foo\")); // true\n\nmySet.clear();\n\nconsole.log(mySet.size); // 0\nconsole.log(mySet.has(\"foo\")); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"Set.prototype.delete()\")}}\n"
    },
    "delete": {
      "index.md": "---\ntitle: Set.prototype.delete()\nslug: Web/JavaScript/Reference/Global_Objects/Set/delete\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.delete\n---\n\n{{JSRef}}\n\nThe **`delete()`** method of {{jsxref(\"Set\")}} instances removes a specified value from this set, if it is in the set.\n\n{{EmbedInteractiveExample(\"pages/js/set-prototype-delete.html\")}}\n\n## Syntax\n\n```js-nolint\nsetInstance.delete(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value to remove from `Set`.\n\n### Return value\n\nReturns `true` if `value` was already in\n`Set`; otherwise `false`.\n\n## Examples\n\n### Using the delete() method\n\n```js\nconst mySet = new Set();\nmySet.add(\"foo\");\n\nconsole.log(mySet.delete(\"bar\")); // false; no \"bar\" element found to be deleted.\nconsole.log(mySet.delete(\"foo\")); // true; successfully removed.\n\nconsole.log(mySet.has(\"foo\")); // false; the \"foo\" element is no longer present.\n```\n\n### Deleting an object from a set\n\nBecause objects are compared by reference, you have to delete them by checking individual properties if you don't have a reference to the original object.\n\n```js\nconst setObj = new Set(); // Create a new set.\n\nsetObj.add({ x: 10, y: 20 }); // Add object in the set.\n\nsetObj.add({ x: 20, y: 30 }); // Add object in the set.\n\n// Delete any point with `x > 10`.\nsetObj.forEach((point) => {\n  if (point.x > 10) {\n    setObj.delete(point);\n  }\n});\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"Set.prototype.clear()\")}}\n"
    },
    "difference": {
      "diagram.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 200\" xml:space=\"preserve\"><style>.st1{fill:none;stroke:#231f20;stroke-miterlimit:10}</style><path d=\"M115 100c0-25.91 14.08-48.51 35-60.61A69.667 69.667 0 0 0 115 30c-38.66 0-70 31.34-70 70s31.34 70 70 70c12.75 0 24.7-3.43 35-9.39-20.92-12.1-35-34.7-35-60.61z\" style=\"fill:#39cac4\"/><circle class=\"st1\" cx=\"115\" cy=\"100\" r=\"70\"/><circle class=\"st1\" cx=\"185\" cy=\"100\" r=\"70\"/><text transform=\"translate(99.37 50.4)\">A</text><text transform=\"translate(190.014 50.4)\">B</text></svg>\n",
      "index.md": "---\ntitle: Set.prototype.difference()\nslug: Web/JavaScript/Reference/Global_Objects/Set/difference\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.difference\n---\n\n{{JSRef}}\n\nThe **`difference()`** method of {{jsxref(\"Set\")}} instances takes a set and returns a new set containing elements in this set but not in the given set.\n\n## Syntax\n\n```js-nolint\ndifference(other)\n```\n\n### Parameters\n\n- `other`\n  - : A {{jsxref(\"Set\")}} object, or [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### Return value\n\nA new {{jsxref(\"Set\")}} object containing elements in this set but not in the `other` set.\n\n## Description\n\nIn mathematical notation, _difference_ is defined as:\n\n<math display=\"block\"><semantics><mrow><mi>A</mi><mo>∖</mo><mi>B</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∊</mo><mi>A</mi><mo>∣</mo><mi>x</mi><mo>∉</mo><mi>B</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"TeX\">A\\setminus B = \\{x\\in A\\mid x\\notin B\\}</annotation></semantics></math>\n\nAnd using Venn diagram:\n\n![A Venn diagram where two circles overlap. The difference of A and B is the part of A that is not overlapping B.](diagram.svg)\n\n`difference()` accepts [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires {{jsxref(\"Operators/this\", \"this\")}} to be an actual {{jsxref(\"Set\")}} instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, its behavior depends on the sizes of `this` and `other`:\n\n- If there are more elements in `this` than `other.size`, then it iterates over `other` by calling its `keys()` method, and constructs a new set with all elements in `this` that are not seen in `other`.\n- Otherwise, it iterates over the elements in `this`, and constructs a new set with all elements `e` in `this` that cause `other.has(e)` to return a [falsy](/en-US/docs/Glossary/Falsy) value.\n\nThe order of elements in the returned set is the same as in `this`.\n\n## Examples\n\n### Using difference()\n\nThe following example computes the difference between the set of odd numbers (<10) and the set of perfect squares (<10). The result is the set of odd numbers that are not perfect squares.\n\n```js\nconst odds = new Set([1, 3, 5, 7, 9]);\nconst squares = new Set([1, 4, 9]);\nconsole.log(odds.difference(squares)); // Set(3) { 3, 5, 7 }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Set.prototype.difference` in `core-js`](https://github.com/zloirock/core-js#new-set-methods)\n- {{jsxref(\"Set.prototype.intersection()\")}}\n- {{jsxref(\"Set.prototype.isDisjointFrom()\")}}\n- {{jsxref(\"Set.prototype.isSubsetOf()\")}}\n- {{jsxref(\"Set.prototype.isSupersetOf()\")}}\n- {{jsxref(\"Set.prototype.symmetricDifference()\")}}\n- {{jsxref(\"Set.prototype.union()\")}}\n"
    },
    "entries": {
      "index.md": "---\ntitle: Set.prototype.entries()\nslug: Web/JavaScript/Reference/Global_Objects/Set/entries\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.entries\n---\n\n{{JSRef}}\n\nThe **`entries()`** method of {{jsxref(\"Set\")}} instances returns a new _[set iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains **an array of `[value, value]`** for each element in this set, in insertion order. For `Set` objects there is no `key` like in `Map` objects. However, to keep the API similar to the `Map` object, each _entry_ has the same value for its _key_ and _value_ here, so that an array `[value, value]` is returned.\n\n{{EmbedInteractiveExample(\"pages/js/set-prototype-entries.html\")}}\n\n## Syntax\n\n```js-nolint\nentries()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Examples\n\n### Using entries()\n\n```js\nconst mySet = new Set();\nmySet.add(\"foobar\");\nmySet.add(1);\nmySet.add(\"baz\");\n\nconst setIter = mySet.entries();\n\nconsole.log(setIter.next().value); // [\"foobar\", \"foobar\"]\nconsole.log(setIter.next().value); // [1, 1]\nconsole.log(setIter.next().value); // [\"baz\", \"baz\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Set.prototype.keys()\")}}\n- {{jsxref(\"Set.prototype.values()\")}}\n"
    },
    "foreach": {
      "index.md": "---\ntitle: Set.prototype.forEach()\nslug: Web/JavaScript/Reference/Global_Objects/Set/forEach\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.forEach\n---\n\n{{JSRef}}\n\nThe **`forEach()`** method of {{jsxref(\"Set\")}} instances executes a provided function once\nfor each value in this set, in insertion order.\n\n{{EmbedInteractiveExample(\"pages/js/set-prototype-foreach.html\")}}\n\n## Syntax\n\n```js-nolint\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callback`\n  - : A function to execute for each entry in the set. The function is called with the following arguments:\n    - `value`\n      - : Value of each iteration.\n    - `key`\n      - : Key of each iteration. This is always the same as `value`.\n    - `set`\n      - : The set being iterated.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`.\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n## Description\n\nThe `forEach()` method executes the provided\n`callback` once for each value which actually exists in the\n`Set` object. It is not invoked for values which have been deleted. However,\nit is executed for values which are present but have the value `undefined`.\n\n`callback` is invoked with **three arguments**:\n\n- the **element value**\n- the **element key**\n- the **`Set` object being traversed**\n\nThere are no keys in `Set` objects, however, so the first two arguments are\nboth **values** contained in the {{jsxref(\"Set\")}}. This is to make it\nconsistent with other `forEach()` methods for {{jsxref(\"Map/foreach\", \"Map\")}} and {{jsxref(\"Array/forEach\", \"Array\")}}.\n\nIf a `thisArg` parameter is provided to `forEach()`,\nit will be passed to `callback` when invoked, for use as its\n`this` value. Otherwise, the value `undefined` will be passed for\nuse as its `this` value. The `this` value ultimately observable by\n`callback` is determined according to\n[the usual rules for determining the `this` seen by a function](/en-US/docs/Web/JavaScript/Reference/Operators/this).\n\nEach value is visited once, except in the case when it was deleted and re-added before\n`forEach()` has finished. `callback` is not invoked for\nvalues deleted before being visited. New values added before `forEach()` has\nfinished will be visited.\n\n`forEach()` executes the `callback` function once for\neach element in the `Set` object; it does not return a value.\n\n## Examples\n\n### Logging the contents of a Set object\n\nThe following code logs a line for each element in a `Set` object:\n\n```js\nfunction logSetElements(value1, value2, set) {\n  console.log(`s[${value1}] = ${value2}`);\n}\n\nnew Set([\"foo\", \"bar\", undefined]).forEach(logSetElements);\n\n// Logs:\n// \"s[foo] = foo\"\n// \"s[bar] = bar\"\n// \"s[undefined] = undefined\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Array.prototype.forEach()\")}}\n- {{jsxref(\"Map.prototype.forEach()\")}}\n"
    },
    "has": {
      "index.md": "---\ntitle: Set.prototype.has()\nslug: Web/JavaScript/Reference/Global_Objects/Set/has\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.has\n---\n\n{{JSRef}}\n\nThe **`has()`** method of {{jsxref(\"Set\")}} instances returns a boolean indicating whether an\nelement with the specified value exists in this set or not.\n\n{{EmbedInteractiveExample(\"pages/js/set-prototype-has.html\")}}\n\n## Syntax\n\n```js-nolint\nhas(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value to test for presence in the `Set` object.\n\n### Return value\n\nReturns `true` if an element with the specified value exists in the `Set` object; otherwise `false`.\n\n## Examples\n\n### Using the has() method\n\n```js\nconst mySet = new Set();\nmySet.add(\"foo\");\n\nconsole.log(mySet.has(\"foo\")); // true\nconsole.log(mySet.has(\"bar\")); // false\n\nconst set1 = new Set();\nconst obj1 = { key1: 1 };\nset1.add(obj1);\n\nconsole.log(set1.has(obj1)); // true\nconsole.log(set1.has({ key1: 1 })); // false, because they are different object references\nconsole.log(set1.add({ key1: 1 })); // now set1 contains 2 entries\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"Set.prototype.add()\")}}\n- {{jsxref(\"Set.prototype.delete()\")}}\n"
    },
    "index.md": "---\ntitle: Set\nslug: Web/JavaScript/Reference/Global_Objects/Set\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Set\n---\n\n{{JSRef}}\n\nThe **`Set`** object lets you store unique values of any type, whether {{Glossary(\"Primitive\", \"primitive values\")}} or object references.\n\n## Description\n\n`Set` objects are collections of values. A value in the set **may only occur once**; it is unique in the set's collection. You can iterate through the elements of a set in insertion order. The _insertion order_ corresponds to the order in which each element was inserted into the set by the [`add()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add) method successfully (that is, there wasn't an identical element already in the set when `add()` was called).\n\nThe specification requires sets to be implemented \"that, on average, provide access times that are sublinear on the number of elements in the collection\". Therefore, it could be represented internally as a hash table (with O(1) lookup), a search tree (with O(log(N)) lookup), or any other data structure, as long as the complexity is better than O(N).\n\n### Value equality\n\nValue equality is based on the [SameValueZero](/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality) algorithm. (It used to use [SameValue](/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value_equality_using_object.is), which treated `0` and `-0` as different. Check [browser compatibility](#browser_compatibility).) This means {{jsxref(\"NaN\")}} is considered the same as `NaN` (even though `NaN !== NaN`) and all other values are considered equal according to the semantics of the `===` operator.\n\n### Performance\n\nThe [`has`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has) method checks if a value is in the set, using an approach that is, on average, quicker than testing most of the elements that have previously been added to the set. In particular, it is, on average, faster than the [`Array.prototype.includes`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) method when an array has a `length` equal to a set's `size`.\n\n### Set composition\n\nThe `Set` object provides some methods that allow you to compose sets like you would with mathematical operations. These methods include:\n\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\">Method</th>\n      <th scope=\"col\">Return type</th>\n      <th scope=\"col\">Mathematical equivalent</th>\n      <th scope=\"col\">Venn diagram</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>{{jsxref(\"Set/difference\", \"A.difference(B)\")}}</td>\n      <td><code>Set</code></td>\n      <td><math display=\"inline\"><semantics><mrow><mi>A</mi><mo>∖</mo><mi>B</mi></mrow><annotation encoding=\"TeX\">A\\setminus B</annotation></semantics></math></td>\n      <td style=\"margin:0;padding:0\"><img src=\"difference/diagram.svg\" alt=\"A Venn diagram where two circles overlap. The difference of A and B is the part of A that is not overlapping B.\" style=\"margin:0;border:0;border-radius:0\" width=\"200\" /></td>\n    </tr>\n    <tr>\n      <td>{{jsxref(\"Set/intersection\", \"A.intersection(B)\")}}</td>\n      <td><code>Set</code></td>\n      <td><math display=\"inline\"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding=\"TeX\">A\\cap B</annotation></semantics></math></td>\n      <td style=\"margin:0;padding:0\"><img src=\"intersection/diagram.svg\" alt=\"A Venn diagram where two circles overlap. The intersection of A and B is the part where they overlap.\" style=\"margin:0;border:0;border-radius:0\" width=\"200\" /></td>\n    </tr>\n    <tr>\n      <td>{{jsxref(\"Set/symmetricDifference\", \"A.symmetricDifference(B)\")}}</td>\n      <td><code>Set</code></td>\n      <td><math display=\"inline\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∖</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">(</mo><mi>B</mi><mo>∖</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"TeX\">(A\\setminus B)\\cup(B\\setminus A)</annotation></semantics></math></td>\n      <td style=\"margin:0;padding:0\"><img src=\"symmetricDifference/diagram.svg\" alt=\"A Venn diagram where two circles overlap. The symmetric difference of A and B is the region contained by either circle but not both.\" style=\"margin:0;border:0;border-radius:0\" width=\"200\" /></td>\n    </tr>\n    <tr>\n      <td>{{jsxref(\"Set/union\", \"A.union(B)\")}}</td>\n      <td><code>Set</code></td>\n      <td><math display=\"inline\"><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi></mrow><annotation encoding=\"TeX\">A\\cup B</annotation></semantics></math></td>\n      <td style=\"margin:0;padding:0\"><img src=\"union/diagram.svg\" alt=\"A Venn diagram where two circles overlap. The symmetric difference of A and B is the region contained by either or both circles.\" style=\"margin:0;border:0;border-radius:0\" width=\"200\" /></td>\n    </tr>\n    <tr>\n      <td>{{jsxref(\"Set/isDisjointFrom\", \"A.isDisjointFrom(B)\")}}</td>\n      <td><code>Boolean</code></td>\n      <td><math display=\"inline\"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi><mo>=</mo><mi>∅</mi></mrow><annotation encoding=\"TeX\">A\\cap B = \\empty</annotation></semantics></math></td>\n      <td style=\"margin:0;padding:0\"><img src=\"isDisjointFrom/diagram.svg\" alt=\"A Venn diagram with two circles. A and B are disjoint because the circles have no region of overlap.\" style=\"margin:0;border:0;border-radius:0\" width=\"200\" /></td>\n    </tr>\n    <tr>\n      <td>{{jsxref(\"Set/isSubsetOf\", \"A.isSubsetOf(B)\")}}</td>\n      <td><code>Boolean</code></td>\n      <td><math display=\"inline\"><semantics><mrow><mi>A</mi><mo>⊆</mo><mi>B</mi></mrow><annotation encoding=\"TeX\">A\\subseteq B</annotation></semantics></math></td>\n      <td style=\"margin:0;padding:0\"><img src=\"isSubsetOf/diagram.svg\" alt=\"A Venn diragram with two circles. A is a subset of B because A is completely contained in B.\" style=\"margin:0;border:0;border-radius:0\" width=\"200\" /></td>\n    </tr>\n    <tr>\n      <td>{{jsxref(\"Set/isSupersetOf\", \"A.isSupersetOf(B)\")}}</td>\n      <td><code>Boolean</code></td>\n      <td><math display=\"inline\"><semantics><mrow><mi>A</mi><mo>⊇</mo><mi>B</mi></mrow><annotation encoding=\"TeX\">A\\supseteq B</annotation></semantics></math></td>\n      <td style=\"margin:0;padding:0\"><img src=\"isSupersetOf/diagram.svg\" alt=\"A Venn diagram with two circles. A is a superset of B because B is completely contained in A.\" style=\"margin:0;border:0;border-radius:0\" width=\"200\" /></td>\n    </tr>\n  </tbody>\n</table>\n\nTo make them more generalizable, these methods don't just accept `Set` objects, but anything that's [set-like](#set-like_objects).\n\n### Set-like objects\n\nAll [set composition methods](#set_composition) require {{jsxref(\"Operators/this\", \"this\")}} to be an actual `Set` instance, but their arguments just need to be set-like. A _set-like object_ is an object that provides the following:\n\n- A {{jsxref(\"Set/size\", \"size\")}} property that contains a number.\n- A {{jsxref(\"Set/has\", \"has()\")}} method that takes an element and returns a boolean.\n- A {{jsxref(\"Set/keys\", \"keys()\")}} method that returns an [iterator](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) of the elements in the set.\n\nFor example, {{jsxref(\"Map\")}} objects are set-like because they also have {{jsxref(\"Map/size\", \"size\")}}, {{jsxref(\"Map/has\", \"has()\")}}, and {{jsxref(\"Map/keys\", \"keys()\")}}, so they behave just like sets of keys when used in set methods:\n\n```js\nconst a = new Set([1, 2, 3]);\nconst b = new Map([\n  [1, \"one\"],\n  [2, \"two\"],\n  [4, \"four\"],\n]);\nconsole.log(a.union(b)); // Set(4) {1, 2, 3, 4}\n```\n\n> **Note:** The set-like protocol invokes the `keys()` method instead of [`[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator) to produce elements. This is to make maps valid set-like objects, because for maps, the iterator produces _entries_ but the `has()` method takes _keys_.\n\n[Arrays](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) are not set-like because they don't have a `has()` method or the `size` property, and their `keys()` method produces indices instead of elements. {{jsxref(\"WeakSet\")}} objects are also not set-like because they don't have a `keys()` method.\n\n### Set-like browser APIs\n\nBrowser **`Set`-like objects** (or \"setlike objects\") are [Web API](/en-US/docs/Web/API) interfaces that behave in many ways like a `Set`.\n\nJust like `Set`, elements can be iterated in the same order that they were added to the object.\n`Set`-like objects and `Set` also have properties and methods that share the same name and behavior.\nHowever unlike `Set` they only allow a specific predefined type for each entry.\n\nThe allowed types are set in the specification IDL definition.\nFor example, {{domxref(\"GPUSupportedFeatures\")}} is a `Set`-like object that must use strings as the key/value.\nThis is defined in the specification IDL below:\n\n```webidl\ninterface GPUSupportedFeatures {\n  readonly setlike<DOMString>;\n};\n```\n\n`Set`-like objects are either read-only or read-writable (see the `readonly` keyword in the IDL above).\n\n- Read-only `Set`-like objects have the property [`size`](#set.prototype.size), and the methods: [`entries()`](#set.prototype.entries), [`forEach()`](#set.prototype.foreach), [`has()`](#set.prototype.has), [`keys()`](#set.prototype.keys), [`values()`](#set.prototype.values), and [`@@iterator`](#set.prototypeiterator).\n- Writeable `Set`-like objects additionally have the methods: [`clear()`](#set.prototype.clear), [`delete()`](#set.prototype.delete), and [`add()`](#set.prototype.add).\n\nThe methods and properties have the same behavior as the equivalent entities in `Set`, except for the restriction on the types of the entry.\n\nThe following are examples of read-only `Set`-like browser objects:\n\n- {{domxref(\"GPUSupportedFeatures\")}}\n- {{domxref(\"XRAnchorSet\")}}\n\nThe following are examples of writable `Set`-like browser objects:\n\n- {{domxref(\"CustomStateSet\")}}\n- {{domxref(\"FontFaceSet\")}}\n- {{domxref(\"Highlight\")}}\n\n## Constructor\n\n- {{jsxref(\"Set/Set\", \"Set()\")}}\n  - : Creates a new `Set` object.\n\n## Static properties\n\n- {{jsxref(\"Set/@@species\", \"Set[@@species]\")}}\n  - : The constructor function that is used to create derived objects.\n\n## Instance properties\n\nThese properties are defined on `Set.prototype` and shared by all `Set` instances.\n\n- {{jsxref(\"Object/constructor\", \"Set.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Set` instances, the initial value is the {{jsxref(\"Set/Set\", \"Set\")}} constructor.\n- {{jsxref(\"Set.prototype.size\")}}\n  - : Returns the number of values in the `Set` object.\n- `Set.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Set\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"Set.prototype.add()\")}}\n  - : Inserts a new element with a specified value in to a `Set` object, if there isn't an element with the same value already in the `Set`.\n- {{jsxref(\"Set.prototype.clear()\")}}\n  - : Removes all elements from the `Set` object.\n- {{jsxref(\"Set.prototype.delete()\")}}\n  - : Removes the element associated to the `value` and returns a boolean asserting whether an element was successfully removed or not. `Set.prototype.has(value)` will return `false` afterwards.\n- {{jsxref(\"Set.prototype.difference()\")}}\n  - : Takes a set and returns a new set containing elements in this set but not in the given set.\n- {{jsxref(\"Set.prototype.entries()\")}}\n  - : Returns a new iterator object that contains **an array of `[value, value]`** for each element in the `Set` object, in insertion order. This is similar to the {{jsxref(\"Map\")}} object, so that each entry's _key_ is the same as its _value_ for a `Set`.\n- {{jsxref(\"Set.prototype.forEach()\")}}\n  - : Calls `callbackFn` once for each value present in the `Set` object, in insertion order. If a `thisArg` parameter is provided, it will be used as the `this` value for each invocation of `callbackFn`.\n- {{jsxref(\"Set.prototype.has()\")}}\n  - : Returns a boolean asserting whether an element is present with the given value in the `Set` object or not.\n- {{jsxref(\"Set.prototype.intersection()\")}}\n  - : Takes a set and returns a new set containing elements in both this set and the given set.\n- {{jsxref(\"Set.prototype.isDisjointFrom()\")}}\n  - : Takes a set and returns a boolean indicating if this set has no elements in common with the given set.\n- {{jsxref(\"Set.prototype.isSubsetOf()\")}}\n  - : Takes a set and returns a boolean indicating if all elements of this set are in the given set.\n- {{jsxref(\"Set.prototype.isSupersetOf()\")}}\n  - : Takes a set and returns a boolean indicating if all elements of the given set are in this set.\n- {{jsxref(\"Set.prototype.keys()\")}}\n  - : An alias for {{jsxref(\"Set.prototype.values()\")}}.\n- {{jsxref(\"Set.prototype.symmetricDifference()\")}}\n  - : Takes a set and returns a new set containing elements which are in either this set or the given set, but not in both.\n- {{jsxref(\"Set.prototype.union()\")}}\n  - : Takes a set and returns a new set containing elements which are in either or both of this set and the given set.\n- {{jsxref(\"Set.prototype.values()\")}}\n  - : Returns a new iterator object that yields the **values** for each element in the `Set` object in insertion order.\n- [`Set.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator)\n  - : Returns a new iterator object that yields the **values** for each element in the `Set` object in insertion order.\n\n## Examples\n\n### Using the Set object\n\n```js\nconst mySet1 = new Set();\n\nmySet1.add(1); // Set(1) { 1 }\nmySet1.add(5); // Set(2) { 1, 5 }\nmySet1.add(5); // Set(2) { 1, 5 }\nmySet1.add(\"some text\"); // Set(3) { 1, 5, 'some text' }\nconst o = { a: 1, b: 2 };\nmySet1.add(o);\n\nmySet1.add({ a: 1, b: 2 }); // o is referencing a different object, so this is okay\n\nmySet1.has(1); // true\nmySet1.has(3); // false, since 3 has not been added to the set\nmySet1.has(5); // true\nmySet1.has(Math.sqrt(25)); // true\nmySet1.has(\"Some Text\".toLowerCase()); // true\nmySet1.has(o); // true\n\nmySet1.size; // 5\n\nmySet1.delete(5); // removes 5 from the set\nmySet1.has(5); // false, 5 has been removed\n\nmySet1.size; // 4, since we just removed one value\n\nmySet1.add(5); // Set(5) { 1, 'some text', {...}, {...}, 5 } - a previously deleted item will be added as a new item, it will not retain its original position before deletion\n\nconsole.log(mySet1); // Set(5) { 1, \"some text\", {…}, {…}, 5 }\n```\n\n### Iterating sets\n\nThe iteration over a set visits elements in insertion order.\n\n```js\nfor (const item of mySet1) {\n  console.log(item);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\nfor (const item of mySet1.keys()) {\n  console.log(item);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\nfor (const item of mySet1.values()) {\n  console.log(item);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\n// key and value are the same here\nfor (const [key, value] of mySet1.entries()) {\n  console.log(key);\n}\n// 1, \"some text\", { \"a\": 1, \"b\": 2 }, { \"a\": 1, \"b\": 2 }, 5\n\n// Convert Set object to an Array object, with Array.from\nconst myArr = Array.from(mySet1); // [1, \"some text\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}, 5]\n\n// the following will also work if run in an HTML document\nmySet1.add(document.body);\nmySet1.has(document.querySelector(\"body\")); // true\n\n// converting between Set and Array\nconst mySet2 = new Set([1, 2, 3, 4]);\nconsole.log(mySet2.size); // 4\nconsole.log([...mySet2]); // [1, 2, 3, 4]\n\n// intersect can be simulated via\nconst intersection = new Set([...mySet1].filter((x) => mySet2.has(x)));\n\n// difference can be simulated via\nconst difference = new Set([...mySet1].filter((x) => !mySet2.has(x)));\n\n// Iterate set entries with forEach()\nmySet2.forEach((value) => {\n  console.log(value);\n});\n// 1\n// 2\n// 3\n// 4\n```\n\n### Implementing basic set operations\n\n```js\nfunction isSuperset(set, subset) {\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction union(setA, setB) {\n  const _union = new Set(setA);\n  for (const elem of setB) {\n    _union.add(elem);\n  }\n  return _union;\n}\n\nfunction intersection(setA, setB) {\n  const _intersection = new Set();\n  for (const elem of setB) {\n    if (setA.has(elem)) {\n      _intersection.add(elem);\n    }\n  }\n  return _intersection;\n}\n\nfunction symmetricDifference(setA, setB) {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    if (_difference.has(elem)) {\n      _difference.delete(elem);\n    } else {\n      _difference.add(elem);\n    }\n  }\n  return _difference;\n}\n\nfunction difference(setA, setB) {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\n\n// Examples\nconst setA = new Set([1, 2, 3, 4]);\nconst setB = new Set([2, 3]);\nconst setC = new Set([3, 4, 5, 6]);\n\nisSuperset(setA, setB); // returns true\nunion(setA, setC); // returns Set {1, 2, 3, 4, 5, 6}\nintersection(setA, setC); // returns Set {3, 4}\nsymmetricDifference(setA, setC); // returns Set {1, 2, 5, 6}\ndifference(setA, setC); // returns Set {1, 2}\n```\n\n### Relation to arrays\n\n```js\nconst myArray = [\"value1\", \"value2\", \"value3\"];\n\n// Use the regular Set constructor to transform an Array into a Set\nconst mySet = new Set(myArray);\n\nmySet.has(\"value1\"); // returns true\n\n// Use the spread syntax to transform a set into an Array.\nconsole.log([...mySet]); // Will show you exactly the same Array as myArray\n```\n\n### Remove duplicate elements from an array\n\n```js\n// Use to remove duplicate elements from an array\nconst numbers = [2, 13, 4, 4, 2, 13, 13, 4, 4, 5, 5, 6, 6, 7, 5, 32, 13, 4, 5];\n\nconsole.log([...new Set(numbers)]); // [2, 13, 4, 5, 6, 7, 32]\n```\n\n### Relation to strings\n\n```js\n// Case sensitive (set will contain \"F\" and \"f\")\nnew Set(\"Firefox\"); // Set(7) [ \"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\" ]\n\n// Duplicate omission (\"f\" occurs twice in the string but set will contain only one)\nnew Set(\"firefox\"); // Set(6) [ \"f\", \"i\", \"r\", \"e\", \"o\", \"x\" ]\n```\n\n### Use a set to ensure the uniqueness of a list of values\n\n```js\nconst array = Array.from(document.querySelectorAll(\"[id]\")).map((e) => e.id);\n\nconst set = new Set(array);\nconsole.assert(set.size === array.length);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Set` in `core-js`](https://github.com/zloirock/core-js#set)\n- {{jsxref(\"Map\")}}\n- {{jsxref(\"WeakMap\")}}\n- {{jsxref(\"WeakSet\")}}\n",
    "intersection": {
      "diagram.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 200\" xml:space=\"preserve\"><style>.st1{fill:none;stroke:#231f20;stroke-miterlimit:10}</style><path d=\"M150 39.39c-20.92 12.1-35 34.71-35 60.61s14.08 48.51 35 60.61c20.92-12.1 35-34.71 35-60.61s-14.08-48.51-35-60.61z\" style=\"fill:#39cac4\"/><circle class=\"st1\" cx=\"115\" cy=\"100\" r=\"70\"/><circle class=\"st1\" cx=\"185\" cy=\"100\" r=\"70\"/><text transform=\"translate(99.37 50.4)\">A</text><text transform=\"translate(190.014 50.4)\">B</text></svg>",
      "index.md": "---\ntitle: Set.prototype.intersection()\nslug: Web/JavaScript/Reference/Global_Objects/Set/intersection\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.intersection\n---\n\n{{JSRef}}\n\nThe **`intersection()`** method of {{jsxref(\"Set\")}} instances takes a set and returns a new set containing elements in both this set and the given set.\n\n## Syntax\n\n```js-nolint\nintersection(other)\n```\n\n### Parameters\n\n- `other`\n  - : A {{jsxref(\"Set\")}} object, or [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### Return value\n\nA new {{jsxref(\"Set\")}} object containing elements in both this set and the `other` set.\n\n## Description\n\nIn mathematical notation, _intersection_ is defined as:\n\n<math display=\"block\"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∊</mo><mi>A</mi><mo>∣</mo><mi>x</mi><mo>∊</mo><mi>B</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"TeX\">A\\cap B = \\{x\\in A\\mid x\\in B\\}</annotation></semantics></math>\n\nAnd using Venn diagram:\n\n![A Venn diagram where two circles overlap. The intersection of A and B is the part where they overlap.](diagram.svg)\n\n`intersection()` accepts [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires {{jsxref(\"Operators/this\", \"this\")}} to be an actual {{jsxref(\"Set\")}} instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, its behavior depends on the sizes of `this` and `other`:\n\n- If there are more elements in `this` than `other.size`, then it iterates over `other` by calling its `keys()` method, and constructs a new set with all elements produced that are also present in `this`.\n- Otherwise, it iterates over the elements in `this`, and constructs a new set with all elements `e` in `this` that cause `other.has(e)` to return a [truthy](/en-US/docs/Glossary/Truthy) value.\n\nBecause of this implementation, the efficiency of `intersection()` mostly depends on the size of the smaller set between `this` and `other` (assuming sets can be accessed in sublinear time). The order of elements in the returned set is the same as that of the smaller of `this` and `other`.\n\n## Examples\n\n### Using intersection()\n\nThe following example computes the intersection between the set of odd numbers (<10) and the set of perfect squares (<10). The result is the set of odd numbers that are perfect squares.\n\n```js\nconst odds = new Set([1, 3, 5, 7, 9]);\nconst squares = new Set([1, 4, 9]);\nconsole.log(odds.intersection(squares)); // Set(2) { 1, 9 }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Set.prototype.intersection` in `core-js`](https://github.com/zloirock/core-js#new-set-methods)\n- {{jsxref(\"Set.prototype.difference()\")}}\n- {{jsxref(\"Set.prototype.isDisjointFrom()\")}}\n- {{jsxref(\"Set.prototype.isSubsetOf()\")}}\n- {{jsxref(\"Set.prototype.isSupersetOf()\")}}\n- {{jsxref(\"Set.prototype.symmetricDifference()\")}}\n- {{jsxref(\"Set.prototype.union()\")}}\n"
    },
    "isdisjointfrom": {
      "diagram.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 200\" xml:space=\"preserve\"><style>.st0{fill:none;stroke:#231f20;stroke-miterlimit:10}</style><circle class=\"st0\" cx=\"90\" cy=\"100\" r=\"50\"/><circle class=\"st0\" cx=\"210\" cy=\"100\" r=\"50\"/><text transform=\"translate(85.996 63.2)\">A</text><text transform=\"translate(205.998 63.2)\">B</text></svg>",
      "index.md": "---\ntitle: Set.prototype.isDisjointFrom()\nslug: Web/JavaScript/Reference/Global_Objects/Set/isDisjointFrom\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.isDisjointFrom\n---\n\n{{JSRef}}\n\nThe **`isDisjointFrom()`** method of {{jsxref(\"Set\")}} instances takes a set and returns a boolean indicating if this set has no elements in common with the given set.\n\n## Syntax\n\n```js-nolint\nisDisjointFrom(other)\n```\n\n### Parameters\n\n- `other`\n  - : A {{jsxref(\"Set\")}} object, or [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### Return value\n\n`true` if this set has no elements in common with the `other` set, and `false` otherwise.\n\n## Description\n\nTwo sets are _disjoint_ if they have no elements in common. In mathematical notation:\n\n<math display=\"block\"><semantics><mrow><mi>A</mi><mtext>&nbsp;is disjoint from&nbsp;</mtext><mi>B</mi><mo stretchy=\"false\">⇔</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo>=</mo><mi>∅</mi></mrow><annotation encoding=\"TeX\">A\\text{ is disjoint from }B \\Leftrightarrow A\\cap B = \\empty</annotation></semantics></math>\n\nAnd using Venn diagram:\n\n![A Venn diagram with two circles. A and B are disjoint because the circles have no region of overlap.](diagram.svg)\n\n`isDisjointFrom()` accepts [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires {{jsxref(\"Operators/this\", \"this\")}} to be an actual {{jsxref(\"Set\")}} instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, its behavior depends on the sizes of `this` and `other`:\n\n- If there are more elements in `this` than `other.size`, then it iterates over `other` by calling its `keys()` method, and if any element in `other` is present in `this`, it returns `false` (and closes the `keys()` iterator by calling its `return()` method). Otherwise, it returns `true`.\n- Otherwise, it iterates over the elements in `this`, and returns `false` if any element `e` in `this` causes `other.has(e)` to return a [truthy](/en-US/docs/Glossary/Truthy) value. Otherwise, it returns `true`.\n\nBecause of this implementation, the efficiency of `isDisjointFrom()` mostly depends on the size of the smaller set between `this` and `other` (assuming sets can be accessed in sublinear time).\n\n## Examples\n\n### Using isDisjointFrom()\n\nThe set of perfect squares (<20) is disjoint from the set of prime numbers (<20), because a perfect square is by definition decomposable into the product of two integers, while 1 is also not considered a prime number:\n\n```js\nconst primes = new Set([2, 3, 5, 7, 11, 13, 17, 19]);\nconst squares = new Set([1, 4, 9, 16]);\nconsole.log(primes.isDisjointFrom(squares)); // true\n```\n\nThe set of perfect squares (<20) is not disjoint from the set of composite numbers (<20), because all non-1 perfect squares are by definition composite numbers:\n\n```js\nconst composites = new Set([4, 6, 8, 9, 10, 12, 14, 15, 16, 18]);\nconst squares = new Set([1, 4, 9, 16]);\nconsole.log(composites.isDisjointFrom(squares)); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Set.prototype.isDisjointFrom` in `core-js`](https://github.com/zloirock/core-js#new-set-methods)\n- {{jsxref(\"Set.prototype.difference()\")}}\n- {{jsxref(\"Set.prototype.intersection()\")}}\n- {{jsxref(\"Set.prototype.isSubsetOf()\")}}\n- {{jsxref(\"Set.prototype.isSupersetOf()\")}}\n- {{jsxref(\"Set.prototype.symmetricDifference()\")}}\n- {{jsxref(\"Set.prototype.union()\")}}\n"
    },
    "issubsetof": {
      "diagram.svg": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" viewBox=\"0 0 300 200\" xml:space=\"preserve\"><style>.st0{fill:none;stroke:#231f20;stroke-miterlimit:10}</style><circle class=\"st0\" cx=\"150\" cy=\"100\" r=\"75\"/><circle class=\"st0\" cx=\"150\" cy=\"120\" r=\"50\"/><text transform=\"translate(144.361 94.51)\">A</text><text transform=\"translate(144.358 44.51)\">B</text></svg>",
      "index.md": "---\ntitle: Set.prototype.isSubsetOf()\nslug: Web/JavaScript/Reference/Global_Objects/Set/isSubsetOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.isSubsetOf\n---\n\n{{JSRef}}\n\nThe **`isSubsetOf()`** method of {{jsxref(\"Set\")}} instances takes a set and returns a boolean indicating if all elements of this set are in the given set.\n\n## Syntax\n\n```js-nolint\nisSubsetOf(other)\n```\n\n### Parameters\n\n- `other`\n  - : A {{jsxref(\"Set\")}} object, or [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### Return value\n\n`true` if all elements in this set are also in the `other` set, and `false` otherwise.\n\n## Description\n\nIn mathematical notation, _subset_ is defined as:\n\n<math display=\"block\"><semantics><mrow><mi>A</mi><mo>⊆</mo><mi>B</mi><mo stretchy=\"false\">⇔</mo><mo>∀</mo><mi>x</mi><mo>∊</mo><mi>A</mi><mo>,</mo><mspace width=\"0.16666666666666666em\"></mspace><mi>x</mi><mo>∊</mo><mi>B</mi></mrow><annotation encoding=\"TeX\">A\\subseteq B \\Leftrightarrow \\forall x\\in A,\\,x\\in B</annotation></semantics></math>\n\nAnd using Venn diagram:\n\n![A Venn diragram with two circles. A is a subset of B because A is completely contained in B.](diagram.svg)\n\n> **Note:** The _subset_ relationship is not _proper subset_, which means `isSubsetOf()` returns `true` if `this` and `other` contain the same elements.\n\n`isSubsetOf()` accepts [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires {{jsxref(\"Operators/this\", \"this\")}} to be an actual {{jsxref(\"Set\")}} instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, its behavior depends on the sizes of `this` and `other`:\n\n- If there are more elements in `this` than `other.size`, then it directly returns `false`.\n- Otherwise, it iterates over the elements in `this`, and returns `false` if any element `e` in `this` causes `other.has(e)` to return a [falsy](/en-US/docs/Glossary/Falsy) value. Otherwise, it returns `true`.\n\n## Examples\n\n### Using isSubsetOf()\n\nThe set of multiples of 4 (<20) is a subset of even numbers (<20):\n\n```js\nconst fours = new Set([4, 8, 12, 16]);\nconst evens = new Set([2, 4, 6, 8, 10, 12, 14, 16, 18]);\nconsole.log(fours.isSubsetOf(evens)); // true\n```\n\nThe set of prime numbers (<20) is not a subset of all odd numbers (<20), because 2 is prime but not odd:\n\n```js\nconst primes = new Set([2, 3, 5, 7, 11, 13, 17, 19]);\nconst odds = new Set([3, 5, 7, 9, 11, 13, 15, 17, 19]);\nconsole.log(primes.isSubsetOf(odds)); // false\n```\n\nEquivalent sets are subsets of each other:\n\n```js\nconst set1 = new Set([1, 2, 3]);\nconst set2 = new Set([1, 2, 3]);\nconsole.log(set1.isSubsetOf(set2)); // true\nconsole.log(set2.isSubsetOf(set1)); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Set.prototype.isSubsetOf` in `core-js`](https://github.com/zloirock/core-js#new-set-methods)\n- {{jsxref(\"Set.prototype.difference()\")}}\n- {{jsxref(\"Set.prototype.intersection()\")}}\n- {{jsxref(\"Set.prototype.isDisjointFrom()\")}}\n- {{jsxref(\"Set.prototype.isSupersetOf()\")}}\n- {{jsxref(\"Set.prototype.symmetricDifference()\")}}\n- {{jsxref(\"Set.prototype.union()\")}}\n"
    },
    "issupersetof": {
      "diagram.svg": "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0\" y=\"0\" viewBox=\"0 0 300 200\" xml:space=\"preserve\"><style>.st0{fill:none;stroke:#231f20;stroke-miterlimit:10}</style><circle class=\"st0\" cx=\"150\" cy=\"100\" r=\"75\"/><circle class=\"st0\" cx=\"150\" cy=\"120\" r=\"50\"/><text transform=\"translate(144.358 44.51)\">A</text><text transform=\"translate(144.361 94.51)\">B</text></svg>",
      "index.md": "---\ntitle: Set.prototype.isSupersetOf()\nslug: Web/JavaScript/Reference/Global_Objects/Set/isSupersetOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.isSupersetOf\n---\n\n{{JSRef}}\n\nThe **`isSupersetOf()`** method of {{jsxref(\"Set\")}} instances takes a set and returns a boolean indicating if all elements of the given set are in this set.\n\n## Syntax\n\n```js-nolint\nisSupersetOf(other)\n```\n\n### Parameters\n\n- `other`\n  - : A {{jsxref(\"Set\")}} object, or [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### Return value\n\n`true` if all elements in the `other` set are also in this set, and `false` otherwise.\n\n## Description\n\nIn mathematical notation, _superset_ is defined as:\n\n<math display=\"block\"><semantics><mrow><mi>A</mi><mo>⊇</mo><mi>B</mi><mo stretchy=\"false\">⇔</mo><mo>∀</mo><mi>x</mi><mo>∊</mo><mi>B</mi><mo>,</mo><mspace width=\"0.16666666666666666em\"></mspace><mi>x</mi><mo>∊</mo><mi>A</mi></mrow><annotation encoding=\"TeX\">A\\supseteq B \\Leftrightarrow \\forall x\\in B,\\,x\\in A</annotation></semantics></math>\n\nAnd using Venn diagram:\n\n![A Venn diagram with two circles. A is a superset of B because B is completely contained in A.](diagram.svg)\n\n> **Note:** The _superset_ relationship is not _proper superset_, which means `isSupersetOf()` returns `true` if `this` and `other` contain the same elements.\n\n`isSupersetOf()` accepts [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires {{jsxref(\"Operators/this\", \"this\")}} to be an actual {{jsxref(\"Set\")}} instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, its behavior depends on the sizes of `this` and `other`:\n\n- If there are fewer elements in `this` than `other.size`, then it directly returns `false`.\n- Otherwise, it iterates over `other` by calling its `keys()` method, and if any element in `other` is not present in `this`, it returns `false` (and closes the `keys()` iterator by calling its `return()` method). Otherwise, it returns `true`.\n\n## Examples\n\n### Using isSupersetOf()\n\nThe set of even numbers (<20) is a superset of multiples of 4 (<20):\n\n```js\nconst evens = new Set([2, 4, 6, 8, 10, 12, 14, 16, 18]);\nconst fours = new Set([4, 8, 12, 16]);\nconsole.log(evens.isSupersetOf(fours)); // true\n```\n\nThe set of all odd numbers (<20) is not a superset of prime numbers (<20), because 2 is prime but not odd:\n\n```js\nconst primes = new Set([2, 3, 5, 7, 11, 13, 17, 19]);\nconst odds = new Set([3, 5, 7, 9, 11, 13, 15, 17, 19]);\nconsole.log(odds.isSupersetOf(primes)); // false\n```\n\nEquivalent sets are supersets of each other:\n\n```js\nconst set1 = new Set([1, 2, 3]);\nconst set2 = new Set([1, 2, 3]);\nconsole.log(set1.isSupersetOf(set2)); // true\nconsole.log(set2.isSupersetOf(set1)); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Set.prototype.isSupersetOf` in `core-js`](https://github.com/zloirock/core-js#new-set-methods)\n- {{jsxref(\"Set.prototype.difference()\")}}\n- {{jsxref(\"Set.prototype.intersection()\")}}\n- {{jsxref(\"Set.prototype.isDisjointFrom()\")}}\n- {{jsxref(\"Set.prototype.isSubsetOf()\")}}\n- {{jsxref(\"Set.prototype.symmetricDifference()\")}}\n- {{jsxref(\"Set.prototype.union()\")}}\n"
    },
    "keys": {
      "index.md": "---\ntitle: Set.prototype.keys()\nslug: Web/JavaScript/Reference/Global_Objects/Set/keys\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.keys\n---\n\n{{JSRef}}\n\nThe **`keys()`** method of {{jsxref(\"Set\")}} instances is an alias for the [`values()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values) method.\n\n## Syntax\n\n```js-nolint\nkeys()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Examples\n\n### Using keys()\n\nThe `keys()` method is exactly equivalent to the {{jsxref(\"Set/values\", \"values()\")}} method.\n\n```js\nconst mySet = new Set();\nmySet.add(\"foo\");\nmySet.add(\"bar\");\nmySet.add(\"baz\");\n\nconst setIter = mySet.keys();\n\nconsole.log(setIter.next().value); // \"foo\"\nconsole.log(setIter.next().value); // \"bar\"\nconsole.log(setIter.next().value); // \"baz\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Set.prototype.entries()\")}}\n- {{jsxref(\"Set.prototype.values()\")}}\n"
    },
    "set": {
      "index.md": "---\ntitle: Set() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Set/Set\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Set.Set\n---\n\n{{JSRef}}\n\nThe **`Set()`** constructor creates {{jsxref(\"Set\")}} objects.\n\n{{EmbedInteractiveExample(\"pages/js/set-prototype-constructor.html\")}}\n\n## Syntax\n\n```js-nolint\nnew Set()\nnew Set(iterable)\n```\n\n> **Note:** `Set()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `iterable` {{optional_inline}}\n\n  - : If an [iterable object](/en-US/docs/Web/JavaScript/Reference/Statements/for...of) is passed, all of its elements will be added to the new\n    `Set`.\n\n    If you don't specify this parameter, or its value is `null`, the new\n    `Set` is empty.\n\n### Return value\n\nA new `Set` object.\n\n## Examples\n\n### Using the `Set` object\n\n```js\nconst mySet = new Set();\n\nmySet.add(1); // Set [ 1 ]\nmySet.add(5); // Set [ 1, 5 ]\nmySet.add(5); // Set [ 1, 5 ]\nmySet.add(\"some text\"); // Set [ 1, 5, 'some text' ]\nconst o = { a: 1, b: 2 };\nmySet.add(o);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Set` in `core-js`](https://github.com/zloirock/core-js#set)\n- {{jsxref(\"Set\")}}\n"
    },
    "size": {
      "index.md": "---\ntitle: Set.prototype.size\nslug: Web/JavaScript/Reference/Global_Objects/Set/size\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Set.size\n---\n\n{{JSRef}}\n\nThe **`size`** accessor property of {{jsxref(\"Set\")}} instances returns the number of (unique) elements in this set.\n\n{{EmbedInteractiveExample(\"pages/js/set-prototype-size.html\")}}\n\n## Description\n\nThe value of `size` is an integer representing how many entries the `Set` object has. A set accessor function for `size` is `undefined`; you cannot change this property.\n\n## Examples\n\n### Using size\n\n```js\nconst mySet = new Set();\nmySet.add(1);\nmySet.add(5);\nmySet.add(\"some text\");\n\nconsole.log(mySet.size); // 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Set\")}}\n"
    },
    "symmetricdifference": {
      "diagram.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 200\" xml:space=\"preserve\"><style>.st1{fill:none;stroke:#231f20;stroke-miterlimit:10}</style><path d=\"M115 100c0-25.91 14.08-48.51 35-60.61A69.667 69.667 0 0 0 115 30c-38.66 0-70 31.34-70 70s31.34 70 70 70c12.75 0 24.7-3.43 35-9.39-20.92-12.1-35-34.7-35-60.61zm70-70c-12.75 0-24.7 3.43-35 9.39 20.92 12.1 35 34.71 35 60.61s-14.08 48.51-35 60.61a69.667 69.667 0 0 0 35 9.39c38.66 0 70-31.34 70-70s-31.34-70-70-70z\" style=\"fill:#39cac4\"/><circle class=\"st1\" cx=\"115\" cy=\"100\" r=\"70\"/><circle class=\"st1\" cx=\"185\" cy=\"100\" r=\"70\"/><text transform=\"translate(99.37 50.4)\">A</text><text transform=\"translate(190.014 50.4)\">B</text></svg>",
      "index.md": "---\ntitle: Set.prototype.symmetricDifference()\nslug: Web/JavaScript/Reference/Global_Objects/Set/symmetricDifference\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.symmetricDifference\n---\n\n{{JSRef}}\n\nThe **`symmetricDifference()`** method of {{jsxref(\"Set\")}} instances takes a set and returns a new set containing elements which are in either this set or the given set, but not in both.\n\n## Syntax\n\n```js-nolint\nsymmetricDifference(other)\n```\n\n### Parameters\n\n- `other`\n  - : A {{jsxref(\"Set\")}} object, or [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### Return value\n\nA new {{jsxref(\"Set\")}} object containing elements which are in either this set or the `other` set, but not in both.\n\n## Description\n\nIn mathematical notation, _symmetric difference_ is defined as:\n\n<math display=\"block\"><semantics><mrow><mi>A</mi><mo>⊖</mo><mi>B</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>A</mi><mo>∖</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">(</mo><mi>B</mi><mo>∖</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"TeX\">A\\ominus B = (A\\setminus B)\\cup(B\\setminus A)</annotation></semantics></math>\n\nAnd using Venn diagram:\n\n![A Venn diagram where two circles overlap. The symmetric difference of A and B is the region contained by either circle but not both.](diagram.svg)\n\n`symmetricDifference()` accepts [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires {{jsxref(\"Operators/this\", \"this\")}} to be an actual {{jsxref(\"Set\")}} instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, it iterates over `other` by calling its `keys()` method, and constructs a new set with all elements in `this` that are not seen in `other`, and all elements in `other` that are not seen in `this`.\n\nThe order of elements in the returned set is first those in `this` followed by those in `other`.\n\n## Examples\n\n### Using symmetricDifference()\n\nThe following example computes the symmetric difference between the set of even numbers (<10) and the set of perfect squares (<10). The result is the set of numbers that are either even or a perfect square, but not both.\n\n```js\nconst evens = new Set([2, 4, 6, 8]);\nconst squares = new Set([1, 4, 9]);\nconsole.log(evens.symmetricDifference(squares)); // Set(5) { 1, 2, 6, 8, 9 }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Set.prototype.symmetricDifference` in `core-js`](https://github.com/zloirock/core-js#new-set-methods)\n- {{jsxref(\"Set.prototype.difference()\")}}\n- {{jsxref(\"Set.prototype.intersection()\")}}\n- {{jsxref(\"Set.prototype.isDisjointFrom()\")}}\n- {{jsxref(\"Set.prototype.isSubsetOf()\")}}\n- {{jsxref(\"Set.prototype.isSupersetOf()\")}}\n- {{jsxref(\"Set.prototype.union()\")}}\n"
    },
    "union": {
      "diagram.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 200\" xml:space=\"preserve\"><style>.st1{fill:none;stroke:#231f20;stroke-miterlimit:10}</style><path d=\"M185 30c-12.75 0-24.7 3.43-35 9.39A69.667 69.667 0 0 0 115 30c-38.66 0-70 31.34-70 70s31.34 70 70 70c12.75 0 24.7-3.43 35-9.39a69.667 69.667 0 0 0 35 9.39c38.66 0 70-31.34 70-70s-31.34-70-70-70z\" style=\"fill:#39cac4\"/><circle class=\"st1\" cx=\"115\" cy=\"100\" r=\"70\"/><circle class=\"st1\" cx=\"185\" cy=\"100\" r=\"70\"/><text transform=\"translate(99.37 50.4)\">A</text><text transform=\"translate(190.014 50.4)\">B</text></svg>\n",
      "index.md": "---\ntitle: Set.prototype.union()\nslug: Web/JavaScript/Reference/Global_Objects/Set/union\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.union\n---\n\n{{JSRef}}\n\nThe **`union()`** method of {{jsxref(\"Set\")}} instances takes a set and returns a new set containing elements which are in either or both of this set and the given set.\n\n## Syntax\n\n```js-nolint\nunion(other)\n```\n\n### Parameters\n\n- `other`\n  - : A {{jsxref(\"Set\")}} object, or [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) object.\n\n### Return value\n\nA new {{jsxref(\"Set\")}} object containing elements which are in either or both of this set and the `other` set.\n\n## Description\n\nIn mathematical notation, _union_ is defined as:\n\n<math display=\"block\"><semantics><mrow><mi>A</mi><mo>∪</mo><mi>B</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mo>∣</mo><mi>x</mi><mo>∊</mo><mi>A</mi><mtext>&nbsp;or&nbsp;</mtext><mi>x</mi><mo>∊</mo><mi>B</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"TeX\">A\\cup B = \\{x\\midx\\in A\\text{ or }x\\in B\\}</annotation></semantics></math>\n\nAnd using Venn diagram:\n\n![A Venn diagram where two circles overlap. The symmetric difference of A and B is the region contained by either or both circles.](diagram.svg)\n\n`union()` accepts [set-like](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#set-like_objects) objects as the `other` parameter. It requires {{jsxref(\"Operators/this\", \"this\")}} to be an actual {{jsxref(\"Set\")}} instance, because it directly retrieves the underlying data stored in `this` without invoking any user code. Then, it iterates over `other` by calling its `keys()` method, and constructs a new set with all elements in `this`, followed by all elements in `other` that are not present in `this`.\n\nThe order of elements in the returned set is first those in `this` followed by those in `other`.\n\n## Examples\n\n### Using union()\n\nThe following example computes the union between the set of even numbers (<10) and the set of perfect squares (<10). The result is the set of numbers that are either even or a perfect square, or both.\n\n```js\nconst evens = new Set([2, 4, 6, 8]);\nconst squares = new Set([1, 4, 9]);\nconsole.log(evens.union(squares)); // Set(6) { 2, 4, 6, 8, 1, 9 }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Set.prototype.union` in `core-js`](https://github.com/zloirock/core-js#new-set-methods)\n- {{jsxref(\"Set.prototype.difference()\")}}\n- {{jsxref(\"Set.prototype.intersection()\")}}\n- {{jsxref(\"Set.prototype.isDisjointFrom()\")}}\n- {{jsxref(\"Set.prototype.isSubsetOf()\")}}\n- {{jsxref(\"Set.prototype.isSupersetOf()\")}}\n- {{jsxref(\"Set.prototype.symmetricDifference()\")}}\n"
    },
    "values": {
      "index.md": "---\ntitle: Set.prototype.values()\nslug: Web/JavaScript/Reference/Global_Objects/Set/values\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Set.values\n---\n\n{{JSRef}}\n\nThe **`values()`** method of {{jsxref(\"Set\")}} instances returns a new _[set iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the values for each element in this set in insertion order.\n\n{{EmbedInteractiveExample(\"pages/js/set-prototype-values.html\")}}\n\n## Syntax\n\n```js-nolint\nvalues()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Examples\n\n### Using values()\n\n```js\nconst mySet = new Set();\nmySet.add(\"foo\");\nmySet.add(\"bar\");\nmySet.add(\"baz\");\n\nconst setIter = mySet.values();\n\nconsole.log(setIter.next().value); // \"foo\"\nconsole.log(setIter.next().value); // \"bar\"\nconsole.log(setIter.next().value); // \"baz\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Set.prototype.entries()\")}}\n- {{jsxref(\"Set.prototype.keys()\")}}\n"
    }
  },
  "sharedarraybuffer": {
    "@@species": {
      "index.md": "---\ntitle: SharedArrayBuffer[@@species]\nslug: Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/@@species\npage-type: javascript-static-accessor-property\nbrowser-compat: javascript.builtins.SharedArrayBuffer.@@species\n---\n\n{{JSRef}}\n\nThe **`SharedArrayBuffer[@@species]`** static accessor property returns the constructor used to construct return values from `SharedArrayBuffer` methods.\n\n> **Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible.\n\n## Syntax\n\n```js-nolint\nSharedArrayBuffer[Symbol.species]\n```\n\n### Return value\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct return values from array buffer methods that create new array buffer.\n\n## Description\n\nThe `@@species` accessor property returns the default constructor for `SharedArrayBuffer` objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically:\n\n```js\n// Hypothetical underlying implementation for illustration\nclass SharedArrayBuffer {\n  static get [Symbol.species]() {\n    return this;\n  }\n}\n```\n\nBecause of this polymorphic implementation, `@@species` of derived subclasses would also return the constructor itself by default.\n\n```js\nclass SubArrayBuffer extends SharedArrayBuffer {}\nSubArrayBuffer[Symbol.species] === SharedArrayBuffer; // true\n```\n\nWhen calling array buffer methods that do not mutate the existing array but return a new array buffer instance (for example, [`slice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice)), the array's `constructor[@@species]` will be accessed. The returned constructor will be used to construct the return value of the array buffer method.\n\n## Examples\n\n### Species in ordinary objects\n\nThe `@@species` property returns the default constructor function, which is the `SharedArrayBuffer` constructor for `SharedArrayBuffer`.\n\n```js\nSharedArrayBuffer[Symbol.species]; // function SharedArrayBuffer()\n```\n\n### Species in derived objects\n\nIn an instance of a custom `SharedArrayBuffer` subclass, such as `MySharedArrayBuffer`, the `MySharedArrayBuffer` species is the `MySharedArrayBuffer` constructor. However, you might want to overwrite this, in order to return parent `SharedArrayBuffer` objects in your derived class methods:\n\n```js\nclass MySharedArrayBuffer extends SharedArrayBuffer {\n  // Overwrite MySharedArrayBuffer species to the parent SharedArrayBuffer constructor\n  static get [Symbol.species]() {\n    return SharedArrayBuffer;\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"SharedArrayBuffer\")}}\n- {{jsxref(\"Symbol.species\")}}\n"
    },
    "bytelength": {
      "index.md": "---\ntitle: SharedArrayBuffer.prototype.byteLength\nslug: Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.SharedArrayBuffer.byteLength\n---\n\n{{JSRef}}\n\nThe **`byteLength`** accessor property of {{jsxref(\"SharedArrayBuffer\")}} instances returns the length (in bytes) of this `SharedArrayBuffer`.\n\n{{EmbedInteractiveExample(\"pages/js/sharedarraybuffer-bytelength.html\", \"shorter\")}}\n\n## Description\n\nThe `byteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the shared array is constructed and cannot be changed.\n\n## Examples\n\n### Using byteLength\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nsab.byteLength; // 1024\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"SharedArrayBuffer\")}}\n"
    },
    "grow": {
      "index.md": "---\ntitle: SharedArrayBuffer.prototype.grow()\nslug: Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/grow\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.SharedArrayBuffer.grow\n---\n\n{{JSRef}}\n\nThe **`grow()`** method of {{jsxref(\"SharedArrayBuffer\")}} instances grows the `SharedArrayBuffer` to the specified size, in bytes.\n\n## Syntax\n\n```js-nolint\ngrow(newLength)\n```\n\n### Parameters\n\n- `newLength`\n  - : The new length, in bytes, to resize the `SharedArrayBuffer` to.\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if the `SharedArrayBuffer` is not growable.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `newLength` is larger than the {{jsxref(\"SharedArrayBuffer/maxByteLength\", \"maxByteLength\")}} of the `SharedArrayBuffer` or smaller than the {{jsxref(\"SharedArrayBuffer/byteLength\", \"byteLength\")}}.\n\n## Description\n\nThe `grow()` method grows a `SharedArrayBuffer` to the size specified by the `newLength` parameter, provided that the `SharedArrayBuffer` is [growable](/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/growable) and the new size is less than or equal to the {{jsxref(\"SharedArrayBuffer/maxByteLength\", \"maxByteLength\")}} of the `SharedArrayBuffer`. New bytes are initialized to 0.\n\n## Examples\n\n### Using grow()\n\nIn this example, we create a 8-byte buffer that is growable to a max length of 16 bytes, then check its {{jsxref(\"SharedArrayBuffer/growable\", \"growable\")}} property, growing it if `growable` returns `true`:\n\n```js\nconst buffer = new SharedArrayBuffer(8, { maxByteLength: 16 });\n\nif (buffer.growable) {\n  console.log(\"SAB is growable!\");\n  buffer.grow(12);\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"SharedArrayBuffer\")}}\n- {{jsxref(\"SharedArrayBuffer.prototype.growable\")}}\n- {{jsxref(\"SharedArrayBuffer.prototype.maxByteLength\")}}\n"
    },
    "growable": {
      "index.md": "---\ntitle: SharedArrayBuffer.prototype.growable\nslug: Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/growable\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.SharedArrayBuffer.growable\n---\n\n{{JSRef}}\n\nThe **`growable`** accessor property of {{jsxref(\"SharedArrayBuffer\")}} instances returns whether this `SharedArrayBuffer` can be grow or not.\n\n## Description\n\nThe `growable` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the array is constructed. If a `maxByteLength` option was set in the constructor, `growable` will return `true`; if not, it will return `false`.\n\n## Examples\n\n### Using growable\n\nIn this example, we create a 8-byte buffer that is growable to a max length of 16 bytes, then check its `growable` property, growing it if `growable` returns `true`:\n\n```js\nconst buffer = new SharedArrayBuffer(8, { maxByteLength: 16 });\n\nif (buffer.growable) {\n  console.log(\"SAB is growable!\");\n  buffer.grow(12);\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"SharedArrayBuffer\")}}\n- {{jsxref(\"SharedArrayBuffer.prototype.grow()\")}}\n- {{jsxref(\"SharedArrayBuffer.prototype.maxByteLength\")}}\n"
    },
    "index.md": "---\ntitle: SharedArrayBuffer\nslug: Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\npage-type: javascript-class\nbrowser-compat: javascript.builtins.SharedArrayBuffer\n---\n\n{{JSRef}}\n\nThe **`SharedArrayBuffer`** object is used to represent a generic raw binary data buffer, similar to the {{jsxref(\"ArrayBuffer\")}} object, but in a way that they can be used to create views on shared memory. A `SharedArrayBuffer` is not a [Transferable Object](/en-US/docs/Web/API/Web_Workers_API/Transferable_objects), unlike an `ArrayBuffer` which is transferable.\n\n## Description\n\nTo share memory using `SharedArrayBuffer` objects from one agent in the cluster to another (an agent is either the web page's main program or one of its web workers), [`postMessage`](/en-US/docs/Web/API/Worker/postMessage) and [structured cloning](/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm) is used.\n\nThe structured clone algorithm accepts `SharedArrayBuffer` objects and typed arrays mapped onto `SharedArrayBuffer` objects. In both cases, the `SharedArrayBuffer` object is transmitted to the receiver resulting in a new, private `SharedArrayBuffer` object in the receiving agent (just as for {{jsxref(\"ArrayBuffer\")}}). However, the shared data block referenced by the two `SharedArrayBuffer` objects is the same data block, and a side effect to the block in one agent will eventually become visible in the other agent.\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nworker.postMessage(sab);\n```\n\nShared memory can be created and updated simultaneously in workers or the main thread. Depending on the system (the CPU, the OS, the Browser) it can take a while until the change is propagated to all contexts. To synchronize, {{jsxref(\"Atomics\", \"atomic\", \"\", 1)}} operations are needed.\n\n`SharedArrayBuffer` objects are used by some web APIs, such as:\n\n- [`WebGLRenderingContext.bufferData()`](/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n- [`WebGLRenderingContext.bufferSubData()`](/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData)\n- [`WebGL2RenderingContext.getBufferSubData()`](/en-US/docs/Web/API/WebGL2RenderingContext/getBufferSubData)\n\n### Security requirements\n\nShared memory and high-resolution timers were effectively [disabled at the start of 2018](https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/) in light of [Spectre](<https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)>). In 2020, a new, secure approach has been standardized to re-enable shared memory.\n\nAs a baseline requirement, your document needs to be in a [secure context](/en-US/docs/Web/Security/Secure_Contexts).\n\nFor top-level documents, two headers need to be set to cross-origin isolate your site:\n\n- [`Cross-Origin-Opener-Policy`](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy) with `same-origin` as value (protects your origin from attackers)\n- [`Cross-Origin-Embedder-Policy`](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy) with `require-corp` or `credentialless` as value (protects victims from your origin)\n\n```http\nCross-Origin-Opener-Policy: same-origin\nCross-Origin-Embedder-Policy: require-corp\n```\n\nTo check if cross origin isolation has been successful, you can test against the [`crossOriginIsolated`](/en-US/docs/Web/API/crossOriginIsolated) property available to window and worker contexts:\n\n```js\nconst myWorker = new Worker(\"worker.js\");\n\nif (crossOriginIsolated) {\n  const buffer = new SharedArrayBuffer(16);\n  myWorker.postMessage(buffer);\n} else {\n  const buffer = new ArrayBuffer(16);\n  myWorker.postMessage(buffer);\n}\n```\n\nWith these two headers set, `postMessage()` no longer throws for `SharedArrayBuffer` objects and shared memory across threads is therefore available.\n\nNested documents and dedicated workers need to set the [`Cross-Origin-Embedder-Policy`](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy) header as well, with the same value. No further changes are needed for same-origin nested documents and subresources. Same-site (but cross-origin) nested documents and subresources need to set the [`Cross-Origin-Resource-Policy`](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy) header with `same-site` as value. And their cross-origin (and cross-site) counterparts need to set the same header with `cross-origin` as value. Note that setting the [`Cross-Origin-Resource-Policy`](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy) header to any other value than `same-origin` opens up the resource to potential attacks, such as [Spectre](<https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)>).\n\nNote that the [`Cross-Origin-Opener-Policy`](/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy) header limits your ability to retain a reference to popups. Direct access between two top-level window contexts essentially only work if they are same-origin and carry the same two headers with the same two values.\n\n### API availability\n\nDepending on whether the above security measures are taken, the various memory-sharing APIs have different availabilities:\n\n- The `Atomics` object is always available.\n- `SharedArrayBuffer` objects are in principle always available, but unfortunately the constructor on the global object is hidden, unless the two headers mentioned above are set, for compatibility with web content. There is hope that this restriction can be removed in the future. [`WebAssembly.Memory`](/en-US/docs/WebAssembly/JavaScript_interface/Memory) can still be used to get an instance.\n- Unless the two headers mentioned above are set, the various `postMessage()` APIs will throw for `SharedArrayBuffer` objects. If they are set, `postMessage()` on `Window` objects and dedicated workers will function and allow for memory sharing.\n\n### WebAssembly shared memory\n\n[`WebAssembly.Memory`](/en-US/docs/WebAssembly/JavaScript_interface/Memory) objects can be created with the [`shared`](/en-US/docs/WebAssembly/JavaScript_interface/Memory/Memory#shared) constructor flag. When this flag is set to `true`, the constructed `Memory` object can be shared between workers via `postMessage()`, just like `SharedArrayBuffer`, and the backing [`buffer`](/en-US/docs/WebAssembly/JavaScript_interface/Memory/buffer) of the `Memory` object is a `SharedArrayBuffer`. Therefore, the requirements listed above for sharing a `SharedArrayBuffer` between workers also apply to sharing a `WebAssembly.Memory`.\n\nThe WebAssembly Threads proposal also defines a new set of [atomic](https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses) instructions. Just as `SharedArrayBuffer` and its methods are unconditionally enabled (and only sharing between threads is gated on the new headers), the WebAssembly atomic instructions are also unconditionally allowed.\n\n### Growing SharedArrayBuffers\n\n`SharedArrayBuffer` objects can be made growable by including the `maxByteLength` option when calling the {{jsxref(\"SharedArrayBuffer/SharedArrayBuffer\", \"SharedArrayBuffer()\")}} constructor. You can query whether a `SharedArrayBuffer` is growable and what its maximum size is by accessing its {{jsxref(\"SharedArrayBuffer/growable\", \"growable\")}} and {{jsxref(\"SharedArrayBuffer/maxByteLength\", \"maxByteLength\")}} properties, respectively. You can assign a new size to a growable `SharedArrayBuffer` with a {{jsxref(\"SharedArrayBuffer/grow\", \"grow()\")}} call. New bytes are initialized to 0.\n\nThese features make growing `SharedArrayBuffer`s more efficient — otherwise, you have to make a copy of the buffer with a new size. It also gives JavaScript parity with WebAssembly in this regard (Wasm linear memory can be resized with [`WebAssembly.Memory.prototype.grow()`](/en-US/docs/WebAssembly/JavaScript_interface/Memory/grow)).\n\nFor security reasons, `SharedArrayBuffer`s cannot be reduced in size, only grown.\n\n## Constructor\n\n- {{jsxref(\"SharedArrayBuffer/SharedArrayBuffer\", \"SharedArrayBuffer()\")}}\n  - : Creates a new `SharedArrayBuffer` object.\n\n## Static properties\n\n- {{jsxref(\"SharedArrayBuffer/@@species\", \"SharedArrayBuffer[@@species]\")}}\n  - : Returns the constructor used to construct return values from `SharedArrayBuffer` methods.\n\n## Instance properties\n\nThese properties are defined on `SharedArrayBuffer.prototype` and shared by all `SharedArrayBuffer` instances.\n\n- {{jsxref(\"SharedArrayBuffer.prototype.byteLength\")}}\n  - : The size, in bytes, of the array. This is established when the array is constructed and can only be changed using the {{jsxref(\"SharedArrayBuffer.prototype.grow()\")}} method if the `SharedArrayBuffer` is growable.\n- {{jsxref(\"Object/constructor\", \"SharedArrayBuffer.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `SharedArrayBuffer` instances, the initial value is the {{jsxref(\"SharedArrayBuffer/SharedArrayBuffer\", \"SharedArrayBuffer\")}} constructor.\n- {{jsxref(\"SharedArrayBuffer.prototype.growable\")}}\n  - : Read-only. Returns `true` if the `SharedArrayBuffer` can be grown, or `false` if not.\n- {{jsxref(\"SharedArrayBuffer.prototype.maxByteLength\")}}\n  - : The read-only maximum length, in bytes, that the `SharedArrayBuffer` can be grown to. This is established when the array is constructed and cannot be changed.\n- `SharedArrayBuffer.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"SharedArrayBuffer\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"SharedArrayBuffer.prototype.grow()\")}}\n  - : Grows the `SharedArrayBuffer` to the specified size, in bytes.\n- {{jsxref(\"SharedArrayBuffer.prototype.slice()\")}}\n  - : Returns a new `SharedArrayBuffer` whose contents are a copy of this `SharedArrayBuffer`'s bytes from `begin`, inclusive, up to `end`, exclusive. If either `begin` or `end` is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n\n## Examples\n\n### Creating a new SharedArrayBuffer\n\n```js\nconst sab = new SharedArrayBuffer(1024);\n```\n\n### Slicing the SharedArrayBuffer\n\n```js\nsab.slice(); // SharedArrayBuffer { byteLength: 1024 }\nsab.slice(2); // SharedArrayBuffer { byteLength: 1022 }\nsab.slice(-2); // SharedArrayBuffer { byteLength: 2 }\nsab.slice(0, 1); // SharedArrayBuffer { byteLength: 1 }\n```\n\n### Using it in a WebGL buffer\n\n```js\nconst canvas = document.querySelector(\"canvas\");\nconst gl = canvas.getContext(\"webgl\");\nconst buffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer);\ngl.bufferData(gl.ARRAY_BUFFER, sab, gl.STATIC_DRAW);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- [Web Workers](/en-US/docs/Web/API/Web_Workers_API)\n- [Shared Memory – a brief tutorial](https://github.com/tc39/proposal-ecmascript-sharedmem/blob/main/TUTORIAL.md) in the TC39 ecmascript-sharedmem proposal\n- [A Taste of JavaScript's New Parallel Primitives](https://hacks.mozilla.org/2016/05/a-taste-of-javascripts-new-parallel-primitives/) on hacks.mozilla.org (2016)\n- [COOP and COEP explained](https://docs.google.com/document/d/1zDlfvfTJ_9e8Jdc8ehuV4zMEu9ySMCiTGMS9y0GU92k/edit) by the Chrome team (2020)\n- {{HTTPHeader(\"Cross-Origin-Opener-Policy\")}}\n- {{HTTPHeader(\"Cross-Origin-Embedder-Policy\")}}\n- {{HTTPHeader(\"Cross-Origin-Resource-Policy\")}}\n- [`crossOriginIsolated`](/en-US/docs/Web/API/crossOriginIsolated)\n- [SharedArrayBuffer updates in Android Chrome 88 and Desktop Chrome 92](https://developer.chrome.com/blog/enabling-shared-array-buffer/) on developer.chrome.com (2021)\n",
    "maxbytelength": {
      "index.md": "---\ntitle: SharedArrayBuffer.prototype.maxByteLength\nslug: Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.SharedArrayBuffer.maxByteLength\n---\n\n{{JSRef}}\n\nThe **`maxByteLength`** accessor property of {{jsxref(\"SharedArrayBuffer\")}} instances returns the maximum length (in bytes) that this `SharedArrayBuffer` can be grown to.\n\n## Description\n\nThe `maxByteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the shared array is constructed, set via the `maxByteLength` option of the {{jsxref(\"SharedArrayBuffer/SharedArrayBuffer\", \"SharedArrayBuffer()\")}} constructor, and cannot be changed.\n\nIf this `SharedArrayBuffer` was constructed without specifying a `maxByteLength` value, this property returns a value equal to the value of the `SharedArrayBuffer`'s {{jsxref(\"SharedArrayBuffer/byteLength\", \"byteLength\")}}.\n\n## Examples\n\n### Using maxByteLength\n\nIn this example, we create a 8-byte buffer that is resizable to a max length of 16 bytes, then return its `maxByteLength`:\n\n```js\nconst buffer = new SharedArrayBuffer(8, { maxByteLength: 16 });\n\nbuffer.maxByteLength; // 16\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"SharedArrayBuffer\")}}\n"
    },
    "sharedarraybuffer": {
      "index.md": "---\ntitle: SharedArrayBuffer() constructor\nslug: Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/SharedArrayBuffer\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.SharedArrayBuffer.SharedArrayBuffer\n---\n\n{{JSRef}}\n\n> **Note:** The `SharedArrayBuffer` constructor may not always be globally available unless certain [security requirements](/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements) are met.\n\nThe **`SharedArrayBuffer()`** constructor creates {{jsxref(\"SharedArrayBuffer\")}} objects.\n\n{{EmbedInteractiveExample(\"pages/js/sharedarraybuffer-constructor.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nnew SharedArrayBuffer(length)\nnew SharedArrayBuffer(length, options)\n```\n\n> **Note:** `SharedArrayBuffer()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `length`\n  - : The size, in bytes, of the array buffer to create.\n- `options` {{optional_inline}}\n  - : An object, which can contain the following properties:\n    - `maxByteLength` {{optional_inline}}\n      - : The maximum size, in bytes, that the shared array buffer can be resized to.\n\n### Return value\n\nA new `SharedArrayBuffer` object of the specified size, with its {{jsxref(\"SharedArrayBuffer/maxByteLength\", \"maxByteLength\")}} property set to the specified `maxByteLength` if one was specified. Its contents are\ninitialized to 0.\n\n## Examples\n\n### Always use the new operator to create a SharedArrayBuffer\n\n`SharedArrayBuffer` constructors are required to be constructed with a\n{{jsxref(\"Operators/new\", \"new\")}} operator. Calling a `SharedArrayBuffer`\nconstructor as a function without `new` will throw a {{jsxref(\"TypeError\")}}.\n\n```js example-bad\nconst sab = SharedArrayBuffer(1024);\n// TypeError: calling a builtin SharedArrayBuffer constructor\n// without new is forbidden\n```\n\n```js example-good\nconst sab = new SharedArrayBuffer(1024);\n```\n\n### Growing a growable SharedArrayBuffer\n\nIn this example, we create an 8-byte buffer that is growable to a max length of 16 bytes, then {{jsxref(\"SharedArrayBuffer/grow\", \"grow()\")}} it to 12 bytes:\n\n```js\nconst buffer = new SharedArrayBuffer(8, { maxByteLength: 16 });\n\nbuffer.grow(12);\n```\n\n> **Note:** It is recommended that `maxByteLength` is set to the smallest value possible for your use case. It should never exceed `1073741824` (1GB), to reduce the risk of out-of-memory errors.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Atomics\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n"
    },
    "slice": {
      "index.md": "---\ntitle: SharedArrayBuffer.prototype.slice()\nslug: Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.SharedArrayBuffer.slice\n---\n\n{{JSRef}}\n\nThe **`slice()`** method of {{jsxref(\"SharedArrayBuffer\")}} instances returns a new `SharedArrayBuffer` whose contents are a copy of this `SharedArrayBuffer`'s bytes from `start`, inclusive, up to `end`, exclusive. If either `start` or `end` is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n\n{{EmbedInteractiveExample(\"pages/js/sharedarraybuffer-slice.html\")}}\n\n## Syntax\n\n```js-nolint\nslice()\nslice(start)\nslice(start, end)\n```\n\n### Parameters\n\n- `start` {{optional_inline}}\n  - : Zero-based index at which to start extraction, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n    - Negative index counts back from the end of the buffer — if `-buffer.length <= start < 0`, `start + buffer.length` is used.\n    - If `start < -buffer.length` or `start` is omitted, `0` is used.\n    - If `start >= buffer.length`, nothing is extracted.\n- `end` {{optional_inline}}\n  - : Zero-based index at which to end extraction, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `slice()` extracts up to but not including `end`.\n    - Negative index counts back from the end of the buffer — if `-buffer.length <= end < 0`, `end + buffer.length` is used.\n    - If `end < -buffer.length`, `0` is used.\n    - If `end >= buffer.length` or `end` is omitted, `buffer.length` is used, causing all elements until the end to be extracted.\n    - If `end` implies a position before or at the position that `start` implies, nothing is extracted.\n\n### Return value\n\nA new {{jsxref(\"SharedArrayBuffer\")}} containing the extracted elements.\n\n## Examples\n\n### Using slice()\n\n```js\nconst sab = new SharedArrayBuffer(1024);\nsab.slice(); // SharedArrayBuffer { byteLength: 1024 }\nsab.slice(2); // SharedArrayBuffer { byteLength: 1022 }\nsab.slice(-2); // SharedArrayBuffer { byteLength: 2 }\nsab.slice(0, 1); // SharedArrayBuffer { byteLength: 1 }\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"SharedArrayBuffer\")}}\n- {{jsxref(\"ArrayBuffer.prototype.slice()\")}}\n"
    }
  },
  "string": {
    "@@iterator": {
      "index.md": "---\ntitle: String.prototype[@@iterator]()\nslug: Web/JavaScript/Reference/Global_Objects/String/@@iterator\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.@@iterator\n---\n\n{{JSRef}}\n\nThe **`[@@iterator]()`** method of {{jsxref(\"String\")}} values implements the [iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows strings to be consumed by most syntaxes expecting iterables, such as the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and {{jsxref(\"Statements/for...of\", \"for...of\")}} loops. It returns a [string iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the Unicode code points of the string value as individual strings.\n\n{{EmbedInteractiveExample(\"pages/js/string-prototype-@@iterator.html\")}}\n\n## Syntax\n\n```js-nolint\nstring[Symbol.iterator]()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the Unicode code points of the string value as individual strings.\n\n## Description\n\nStrings are iterated by Unicode code points. This means grapheme clusters will be split, but surrogate pairs will be preserved.\n\n```js\n// \"Backhand Index Pointing Right: Dark Skin Tone\"\n[...\"👉🏿\"]; // ['👉', '🏿']\n// splits into the basic \"Backhand Index Pointing Right\" emoji and\n// the \"Dark skin tone\" emoji\n\n// \"Family: Man, Boy\"\n[...\"👨‍👦\"]; // [ '👨', '‍', '👦' ]\n// splits into the \"Man\" and \"Boy\" emoji, joined by a ZWJ\n```\n\n## Examples\n\n### Iteration using for...of loop\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes strings [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```js\nconst str = \"A\\uD835\\uDC68B\\uD835\\uDC69C\\uD835\\uDC6A\";\n\nfor (const v of str) {\n  console.log(v);\n}\n// \"A\"\n// \"\\uD835\\uDC68\"\n// \"B\"\n// \"\\uD835\\uDC69\"\n// \"C\"\n// \"\\uD835\\uDC6A\"\n```\n\n### Manually hand-rolling the iterator\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```js\nconst str = \"A\\uD835\\uDC68\";\n\nconst strIter = str[Symbol.iterator]();\n\nconsole.log(strIter.next().value); // \"A\"\nconsole.log(strIter.next().value); // \"\\uD835\\uDC68\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype[@@iterator]` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [Text formatting](/en-US/docs/Web/JavaScript/Guide/Text_formatting) guide\n- {{jsxref(\"Symbol.iterator\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "anchor": {
      "index.md": "---\ntitle: String.prototype.anchor()\nslug: Web/JavaScript/Reference/Global_Objects/String/anchor\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.anchor\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`anchor()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in an {{HTMLElement(\"a\")}} element with a name (`<a name=\"...\">str</a>`).\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. Use [DOM APIs](/en-US/docs/Web/API/Document_Object_Model) such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement) instead.\n>\n> The HTML specification no longer allows the {{HTMLElement(\"a\")}} element to have a `name` attribute, so this method doesn't even create valid markup.\n\n## Syntax\n\n```js-nolint\nanchor(name)\n```\n\n### Parameters\n\n- `name`\n  - : A string representing a `name` value to put into the generated `<a name=\"...\">` start tag.\n\n### Return value\n\nA string beginning with an `<a name=\"name\">` start tag (double quotes in `name` are replaced with `&quot;`), then the text `str`, and then an `</a>` end tag.\n\n## Examples\n\n### Using anchor()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.anchor(\"hello\");\n```\n\nThis will create the following HTML:\n\n```html\n<a name=\"hello\">Hello, world</a>\n```\n\n> **Warning:** This markup is invalid, because `name` is no longer a valid attribute of the {{HTMLElement(\"a\")}} element.\n\nInstead of using `anchor()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement). For example:\n\n```js\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"a\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.anchor` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"a\")}}\n"
    },
    "at": {
      "index.md": "---\ntitle: String.prototype.at()\nslug: Web/JavaScript/Reference/Global_Objects/String/at\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.at\n---\n\n{{JSRef}}\n\nThe **`at()`** method of {{jsxref(\"String\")}} values takes an integer value and returns a new {{jsxref(\"String\")}} consisting of the single UTF-16 code unit located at the specified offset. This method allows for positive and negative integers. Negative integers count back from the last string character.\n\n{{EmbedInteractiveExample(\"pages/js/string-at.html\")}}\n\n## Syntax\n\n```js-nolint\nat(index)\n```\n\n### Parameters\n\n- `index`\n  - : The index (position) of the string character to be returned. Supports relative indexing from the end of the string when passed a negative index; i.e. if a negative number is used, the character returned will be found by counting back from the end of the string.\n\n### Return value\n\nA {{jsxref(\"String\")}} consisting of the single UTF-16 code unit located at the specified position. Returns {{jsxref(\"undefined\")}} if the given index can not be found.\n\n## Examples\n\n### Return the last character of a string\n\nThe following example provides a function which returns the last character found in a specified string.\n\n```js\n// A function which returns the last character of a given string\nfunction returnLast(arr) {\n  return arr.at(-1);\n}\n\nlet invoiceRef = \"myinvoice01\";\n\nconsole.log(returnLast(invoiceRef)); // '1'\n\ninvoiceRef = \"myinvoice02\";\n\nconsole.log(returnLast(invoiceRef)); // '2'\n```\n\n### Comparing methods\n\nHere we compare different ways to select the penultimate (last but one) character of a {{jsxref(\"String\")}}. Whilst all below methods are valid, it highlights the succinctness and readability of the `at()` method.\n\n```js\nconst myString = \"Every green bus drives fast.\";\n\n// Using length property and charAt() method\nconst lengthWay = myString.charAt(myString.length - 2);\nconsole.log(lengthWay); // 't'\n\n// Using slice() method\nconst sliceWay = myString.slice(-2, -1);\nconsole.log(sliceWay); // 't'\n\n// Using at() method\nconst atWay = myString.at(-2);\nconsole.log(atWay); // 't'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.at` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.indexOf()\")}}\n- {{jsxref(\"String.prototype.lastIndexOf()\")}}\n- {{jsxref(\"String.prototype.charCodeAt()\")}}\n- {{jsxref(\"String.prototype.codePointAt()\")}}\n- {{jsxref(\"String.prototype.split()\")}}\n"
    },
    "big": {
      "index.md": "---\ntitle: String.prototype.big()\nslug: Web/JavaScript/Reference/Global_Objects/String/big\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.big\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`big()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in a {{HTMLElement(\"big\")}} element (`<big>str</big>`), which causes this string to be displayed in a big font.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `big()`, the `<big>` element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use [CSS](/en-US/docs/Web/CSS) properties instead.\n\n## Syntax\n\n```js-nolint\nbig()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string beginning with a `<big>` start tag, then the text `str`, and then a `</big>` end tag.\n\n## Examples\n\n### Using big()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.big();\n```\n\nThis will create the following HTML:\n\n```html\n<big>Hello, world</big>\n```\n\n> **Warning:** This markup is invalid, because `big` is no longer a valid element.\n\nInstead of using `big()` and creating HTML text directly, you should use CSS to manipulate fonts. For example, you can manipulate {{cssxref(\"font-size\")}} through the {{domxref(\"HTMLElement/style\", \"element.style\")}} attribute:\n\n```js\ndocument.getElementById(\"yourElemId\").style.fontSize = \"2em\";\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.big` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"big\")}}\n"
    },
    "blink": {
      "index.md": "---\ntitle: String.prototype.blink()\nslug: Web/JavaScript/Reference/Global_Objects/String/blink\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.blink\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`blink()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in a `<blink>` element (`<blink>str</blink>`), which used to cause a string to blink in old browsers.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `blink()`, the `<blink>` element itself is removed from modern browsers, and blinking text is frowned upon by several accessibility standards. Avoid using the element in any way.\n\n## Syntax\n\n```js-nolint\nblink()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string beginning with a `<blink>` start tag, then the text `str`, and then a `</blink>` end tag.\n\n## Examples\n\n### Using blink()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.blink();\n```\n\nThis will create the following HTML:\n\n```html\n<blink>Hello, world</blink>\n```\n\n> **Warning:** This markup is invalid, because `blink` is no longer a valid element.\n\nYou should avoid blinking elements altogether.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.blink` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n"
    },
    "bold": {
      "index.md": "---\ntitle: String.prototype.bold()\nslug: Web/JavaScript/Reference/Global_Objects/String/bold\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.bold\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`bold()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in a {{HTMLElement(\"b\")}} element (`<b>str</b>`), which causes this string to be displayed as bold.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. Use [DOM APIs](/en-US/docs/Web/API/Document_Object_Model) such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement) instead.\n\n## Syntax\n\n```js-nolint\nbold()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string beginning with a `<b>` start tag, then the text `str`, and then a `</b>` end tag.\n\n## Examples\n\n### Using bold()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.bold();\n```\n\nThis will create the following HTML:\n\n```html\n<b>Hello, world</b>\n```\n\nInstead of using `bold()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement). For example:\n\n```js\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"b\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.bold` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"b\")}}\n"
    },
    "charat": {
      "index.md": "---\ntitle: String.prototype.charAt()\nslug: Web/JavaScript/Reference/Global_Objects/String/charAt\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.charAt\n---\n\n{{JSRef}}\n\nThe **`charAt()`** method of {{jsxref(\"String\")}} values returns a new string consisting of the single UTF-16 code unit at the given index.\n\n`charAt()` always indexes the string as a sequence of [UTF-16 code units](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters), so it may return lone surrogates. To get the full Unicode code point at the given index, use {{jsxref(\"String.prototype.codePointAt()\")}} and {{jsxref(\"String.fromCodePoint()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/string-charat.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ncharAt(index)\n```\n\n### Parameters\n\n- `index`\n  - : Zero-based index of the character to be returned. [Converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) — `undefined` is converted to 0.\n\n### Return value\n\nA string representing the character (exactly one UTF-16 code unit) at the specified `index`. If `index` is out of the range of `0` – `str.length - 1`, `charAt()` returns an empty string.\n\n## Description\n\nCharacters in a string are indexed from left to right. The index of the first character is `0`, and the index of the last character in a string called `str` is `str.length - 1`.\n\nUnicode code points range from `0` to `1114111` (`0x10FFFF`). `charAt()` always returns a character whose value is less than `65536`, because the higher code points are represented by _a pair_ of 16-bit surrogate pseudo-characters. Therefore, in order to get a full character with value greater than `65535`, it is necessary to retrieve not only `charAt(i)`, but also `charAt(i + 1)` (as if manipulating a string with two characters), or to use {{jsxref(\"String/codePointAt\", \"codePointAt(i)\")}} and {{jsxref(\"String.fromCodePoint()\")}} instead. For information on Unicode, see [UTF-16 characters, Unicode code points, and grapheme clusters](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n`charAt()` is very similar to using [bracket notation](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation) to access a character at the specified index. The main differences are:\n\n- `charAt()` attempts to convert `index` to an integer, while bracket notation does not, and directly uses `index` as a property name.\n- `charAt()` returns an empty string if `index` is out of range, while bracket notation returns `undefined`.\n\n## Examples\n\n### Using charAt()\n\nThe following example displays characters at different locations in the string `\"Brave new world\"`:\n\n```js\nconst anyString = \"Brave new world\";\nconsole.log(`The character at index 0   is '${anyString.charAt()}'`);\n// No index was provided, used 0 as default\n\nconsole.log(`The character at index 0   is '${anyString.charAt(0)}'`);\nconsole.log(`The character at index 1   is '${anyString.charAt(1)}'`);\nconsole.log(`The character at index 2   is '${anyString.charAt(2)}'`);\nconsole.log(`The character at index 3   is '${anyString.charAt(3)}'`);\nconsole.log(`The character at index 4   is '${anyString.charAt(4)}'`);\nconsole.log(`The character at index 999 is '${anyString.charAt(999)}'`);\n```\n\nThese lines display the following:\n\n```plain\nThe character at index 0   is 'B'\n\nThe character at index 0   is 'B'\nThe character at index 1   is 'r'\nThe character at index 2   is 'a'\nThe character at index 3   is 'v'\nThe character at index 4   is 'e'\nThe character at index 999 is ''\n```\n\n`charAt()` may return lone surrogates, which are not valid Unicode characters.\n\n```js\nconst str = \"𠮷𠮾\";\nconsole.log(str.charAt(0)); // \"\\ud842\", which is not a valid Unicode character\nconsole.log(str.charAt(1)); // \"\\udfb7\", which is not a valid Unicode character\n```\n\nTo get the full Unicode code point at the given index, use an indexing method that splits by Unicode code points, such as {{jsxref(\"String.prototype.codePointAt()\")}} and [spreading strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator) into an array of Unicode code points.\n\n```js\nconst str = \"𠮷𠮾\";\nconsole.log(String.fromCodePoint(str.codePointAt(0))); // \"𠮷\"\nconsole.log([...str][0]); // \"𠮷\"\n```\n\n> **Note:** Avoid re-implementing the solutions above using `charAt()`. The detection of lone surrogates and their pairing is complex, and built-in APIs may be more performant as they directly use the internal representation of the string. Install a polyfill for the APIs mentioned above if necessary.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.indexOf()\")}}\n- {{jsxref(\"String.prototype.lastIndexOf()\")}}\n- {{jsxref(\"String.prototype.charCodeAt()\")}}\n- {{jsxref(\"String.prototype.codePointAt()\")}}\n- {{jsxref(\"String.prototype.split()\")}}\n- {{jsxref(\"String.fromCodePoint()\")}}\n- [JavaScript has a Unicode problem](https://mathiasbynens.be/notes/javascript-unicode) by Mathias Bynens (2013)\n"
    },
    "charcodeat": {
      "index.md": "---\ntitle: String.prototype.charCodeAt()\nslug: Web/JavaScript/Reference/Global_Objects/String/charCodeAt\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.charCodeAt\n---\n\n{{JSRef}}\n\nThe **`charCodeAt()`** method of {{jsxref(\"String\")}} values returns an integer between `0` and `65535` representing the UTF-16 code unit at the given index.\n\n`charCodeAt()` always indexes the string as a sequence of [UTF-16 code units](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters), so it may return lone surrogates. To get the full Unicode code point at the given index, use {{jsxref(\"String.prototype.codePointAt()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/string-charcodeat.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ncharCodeAt(index)\n```\n\n### Parameters\n\n- `index`\n  - : Zero-based index of the character to be returned. [Converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) — `undefined` is converted to 0.\n\n### Return value\n\nAn integer between `0` and `65535` representing the UTF-16 code unit value of the character at the specified `index`. If `index` is out of range of `0` – `str.length - 1`, `charCodeAt()` returns {{jsxref(\"NaN\")}}.\n\n## Description\n\nCharacters in a string are indexed from left to right. The index of the first character is `0`, and the index of the last character in a string called `str` is `str.length - 1`.\n\nUnicode code points range from `0` to `1114111` (`0x10FFFF`). `charCodeAt()` always returns a value that is less than `65536`, because the higher code points are represented by _a pair_ of 16-bit surrogate pseudo-characters. Therefore, in order to get a full character with value greater than `65535`, it is necessary to retrieve not only `charCodeAt(i)`, but also `charCodeAt(i + 1)` (as if manipulating a string with two characters), or to use {{jsxref(\"String/codePointAt\", \"codePointAt(i)\")}} instead. For information on Unicode, see [UTF-16 characters, Unicode code points, and grapheme clusters](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## Examples\n\n### Using charCodeAt()\n\nThe following example returns `65`, the Unicode value for A.\n\n```js\n\"ABC\".charCodeAt(0); // returns 65\n```\n\n`charCodeAt()` may return lone surrogates, which are not valid Unicode characters.\n\n```js\nconst str = \"𠮷𠮾\";\nconsole.log(str.charCodeAt(0)); // 55362, or d842, which is not a valid Unicode character\nconsole.log(str.charCodeAt(1)); // 57271, or dfb7, which is not a valid Unicode character\n```\n\nTo get the full Unicode code point at the given index, use {{jsxref(\"String.prototype.codePointAt()\")}}.\n\n```js\nconst str = \"𠮷𠮾\";\nconsole.log(str.codePointAt(0)); // 134071\n```\n\n> **Note:** Avoid re-implementing `codePointAt()` using `charCodeAt()`. The translation from UTF-16 surrogates to Unicode code points is complex, and `codePointAt()` may be more performant as it directly uses the internal representation of the string. Install a polyfill for `codePointAt()` if necessary.\n\nBelow is a possible algorithm to convert a pair of UTF-16 code units into a Unicode code point, adapted from the [Unicode FAQ](https://unicode.org/faq/utf_bom.html#utf16-3):\n\n```js\n// constants\nconst LEAD_OFFSET = 0xd800 - (0x10000 >> 10);\nconst SURROGATE_OFFSET = 0x10000 - (0xd800 << 10) - 0xdc00;\n\nfunction utf16ToUnicode(lead, trail) {\n  return (lead << 10) + trail + SURROGATE_OFFSET;\n}\nfunction unicodeToUTF16(codePoint) {\n  const lead = LEAD_OFFSET + (codePoint >> 10);\n  const trail = 0xdc00 + (codePoint & 0x3ff);\n  return [lead, trail];\n}\n\nconst str = \"𠮷\";\nconsole.log(utf16ToUnicode(str.charCodeAt(0), str.charCodeAt(1))); // 134071\nconsole.log(str.codePointAt(0)); // 134071\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.fromCharCode()\")}}\n- {{jsxref(\"String.prototype.charAt()\")}}\n- {{jsxref(\"String.fromCodePoint()\")}}\n- {{jsxref(\"String.prototype.codePointAt()\")}}\n"
    },
    "codepointat": {
      "index.md": "---\ntitle: String.prototype.codePointAt()\nslug: Web/JavaScript/Reference/Global_Objects/String/codePointAt\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.codePointAt\n---\n\n{{JSRef}}\n\nThe **`codePointAt()`** method of {{jsxref(\"String\")}} values returns a non-negative integer that is the Unicode code point value of the character starting at the given index. Note that the index is still based on UTF-16 code units, not Unicode code points.\n\n{{EmbedInteractiveExample(\"pages/js/string-codepointat.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ncodePointAt(index)\n```\n\n### Parameters\n\n- `index`\n  - : Zero-based index of the character to be returned. [Converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion) — `undefined` is converted to 0.\n\n### Return value\n\nA non-negative integer representing the code point value of the character at the given `index`.\n\n- If `index` is out of the range of `0` – `str.length - 1`, `codePointAt()` returns {{jsxref(\"undefined\")}}.\n- If the element at `index` is a UTF-16 leading surrogate, returns the code point of the surrogate _pair_.\n- If the element at `index` is a UTF-16 trailing surrogate, returns _only_ the trailing surrogate code unit.\n\n## Description\n\nCharacters in a string are indexed from left to right. The index of the first character is `0`, and the index of the last character in a string called `str` is `str.length - 1`.\n\nUnicode code points range from `0` to `1114111` (`0x10FFFF`). In UTF-16, each string index is a code unit with value `0` – `65535`. Higher code points are represented by _a pair_ of 16-bit surrogate pseudo-characters. Therefore, `codePointAt()` returns a code point that may span two string indices. For information on Unicode, see [UTF-16 characters, Unicode code points, and grapheme clusters](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## Examples\n\n### Using codePointAt()\n\n```js\n\"ABC\".codePointAt(0); // 65\n\"ABC\".codePointAt(0).toString(16); // 41\n\n\"😍\".codePointAt(0); // 128525\n\"\\ud83d\\ude0d\".codePointAt(0); // 128525\n\"\\ud83d\\ude0d\".codePointAt(0).toString(16); // 1f60d\n\n\"😍\".codePointAt(1); // 56845\n\"\\ud83d\\ude0d\".codePointAt(1); // 56845\n\"\\ud83d\\ude0d\".codePointAt(1).toString(16); // de0d\n\n\"ABC\".codePointAt(42); // undefined\n```\n\n### Looping with codePointAt()\n\nBecause using string indices for looping causes the same code point to be visited twice (once for the leading surrogate, once for the trailing surrogate), and the second time `codePointAt()` returns _only_ the trailing surrogate, it's better to avoid looping by index.\n\n```js example-bad\nconst str = \"\\ud83d\\udc0e\\ud83d\\udc71\\u2764\";\n\nfor (let i = 0; i < str.length; i++) {\n  console.log(str.codePointAt(i).toString(16));\n}\n// '1f40e', 'dc0e', '1f471', 'dc71', '2764'\n```\n\nInstead, use a [`for...of`](/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement) statement or [spread the string](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), both of which invoke the string's [`@@iterator`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator), which iterates by code points. Then, use `codePointAt(0)` to get the code point of each element.\n\n```js\nfor (const codePoint of str) {\n  console.log(codePoint.codePointAt(0).toString(16));\n}\n// '1f40e', '1f471', '2764'\n\n[...str].map((cp) => cp.codePointAt(0).toString(16));\n// ['1f40e', '1f471', '2764']\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.codePointAt` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.fromCodePoint()\")}}\n- {{jsxref(\"String.fromCharCode()\")}}\n- {{jsxref(\"String.prototype.charCodeAt()\")}}\n- {{jsxref(\"String.prototype.charAt()\")}}\n"
    },
    "concat": {
      "index.md": "---\ntitle: String.prototype.concat()\nslug: Web/JavaScript/Reference/Global_Objects/String/concat\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.concat\n---\n\n{{JSRef}}\n\nThe **`concat()`** method of {{jsxref(\"String\")}} values concatenates\nthe string arguments to this string and returns a new string.\n\n{{EmbedInteractiveExample(\"pages/js/string-concat.html\")}}\n\n## Syntax\n\n```js-nolint\nconcat()\nconcat(str1)\nconcat(str1, str2)\nconcat(str1, str2, /* …, */ strN)\n```\n\n### Parameters\n\n- `str1`, …, `strN`\n  - : One or more strings to concatenate to `str`.\n\n### Return value\n\nA new string containing the combined text of the strings provided.\n\n## Description\n\nThe `concat()` function concatenates the string arguments to the calling\nstring and returns a new string. Changes to the original string or the returned string\ndon't affect the other.\n\nIf the arguments are not of the type string, they are converted to string values before\nconcatenating.\n\nThe `concat()` method is very similar to the [addition/string concatenation operators](/en-US/docs/Web/JavaScript/Reference/Operators/Addition) (`+`, `+=`), except that `concat()` [coerces its arguments directly to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), while addition coerces its operands to primitives first. For more information, see the reference page for the [`+` operator](/en-US/docs/Web/JavaScript/Reference/Operators/Addition).\n\n## Examples\n\n### Using concat()\n\nThe following example combines strings into a new string.\n\n```js\nconst hello = \"Hello, \";\nconsole.log(hello.concat(\"Kevin\", \". Have a nice day.\"));\n// Hello, Kevin. Have a nice day.\n\nconst greetList = [\"Hello\", \" \", \"Venkat\", \"!\"];\n\"\".concat(...greetList); // \"Hello Venkat!\"\n\n\"\".concat({}); // \"[object Object]\"\n\"\".concat([]); // \"\"\n\"\".concat(null); // \"null\"\n\"\".concat(true); // \"true\"\n\"\".concat(4, 5); // \"45\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Array.prototype.concat()\")}}\n- [Addition (`+`)](/en-US/docs/Web/JavaScript/Reference/Operators/Addition)\n"
    },
    "endswith": {
      "index.md": "---\ntitle: String.prototype.endsWith()\nslug: Web/JavaScript/Reference/Global_Objects/String/endsWith\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.endsWith\n---\n\n{{JSRef}}\n\nThe **`endsWith()`** method of {{jsxref(\"String\")}} values determines whether a string ends with the characters of this string, returning `true` or `false` as appropriate.\n\n{{EmbedInteractiveExample(\"pages/js/string-endswith.html\")}}\n\n## Syntax\n\n```js-nolint\nendsWith(searchString)\nendsWith(searchString, endPosition)\n```\n\n### Parameters\n\n- `searchString`\n  - : The characters to be searched for at the end of `str`. Cannot [be a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes). All values that are not regexes are [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `endsWith()` to search for the string `\"undefined\"`, which is rarely what you want.\n- `endPosition` {{optional_inline}}\n  - : The end position at which `searchString` is expected to be found (the index of `searchString`'s last character plus 1). Defaults to `str.length`.\n\n### Return value\n\n**`true`** if the given characters are found at the end of the string, including when `searchString` is an empty string; otherwise, **`false`**.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `searchString` [is a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes).\n\n## Description\n\nThis method lets you determine whether or not a string ends with another string. This method is case-sensitive.\n\n## Examples\n\n### Using endsWith()\n\n```js\nconst str = \"To be, or not to be, that is the question.\";\n\nconsole.log(str.endsWith(\"question.\")); // true\nconsole.log(str.endsWith(\"to be\")); // false\nconsole.log(str.endsWith(\"to be\", 19)); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.endsWith` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.startsWith()\")}}\n- {{jsxref(\"String.prototype.includes()\")}}\n- {{jsxref(\"String.prototype.indexOf()\")}}\n- {{jsxref(\"String.prototype.lastIndexOf()\")}}\n"
    },
    "fixed": {
      "index.md": "---\ntitle: String.prototype.fixed()\nslug: Web/JavaScript/Reference/Global_Objects/String/fixed\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.fixed\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`fixed()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in a {{HTMLElement(\"tt\")}} element (`<tt>str</tt>`), which causes this string to be displayed in a fixed-width font.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `fixed()`, the `<tt>` element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use [CSS](/en-US/docs/Web/CSS) properties instead.\n\n## Syntax\n\n```js-nolint\nfixed()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string beginning with a `<tt>` start tag, then the text `str`, and then a `</tt>` end tag.\n\n## Examples\n\n### Using fixed()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.fixed();\n```\n\nThis will create the following HTML:\n\n```html\n<tt>Hello, world</tt>\n```\n\n> **Warning:** This markup is invalid, because `tt` is no longer a valid element.\n\nInstead of using `fixed()` and creating HTML text directly, you should use CSS to manipulate fonts. For example, you can manipulate {{cssxref(\"font-family\")}} through the {{domxref(\"HTMLElement/style\", \"element.style\")}} attribute:\n\n```js\ndocument.getElementById(\"yourElemId\").style.fontFamily = \"monospace\";\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.fixed` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"tt\")}}\n"
    },
    "fontcolor": {
      "index.md": "---\ntitle: String.prototype.fontcolor()\nslug: Web/JavaScript/Reference/Global_Objects/String/fontcolor\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.fontcolor\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`fontcolor()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in a {{HTMLElement(\"font\")}} element (`<font color=\"...\">str</font>`), which causes this string to be displayed in the specified font color.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `fontcolor()`, the `<font>` element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use [CSS](/en-US/docs/Web/CSS) properties instead.\n\n## Syntax\n\n```js-nolint\nfontcolor(color)\n```\n\n### Parameters\n\n- `color`\n  - : A string expressing the color as a hexadecimal RGB triplet or as a string literal. String literals for color names are listed in the [CSS color reference](/en-US/docs/Web/CSS/color_value).\n\n### Return value\n\nA string beginning with a `<font color=\"color\">` start tag (double quotes in `color` are replaced with `&quot;`), then the text `str`, and then a `</font>` end tag.\n\n## Description\n\nThe `fontcolor()` method itself simply joins the string parts together without any validation or normalization. However, to create valid {{HTMLElement(\"font\")}} elements, if you express color as a hexadecimal RGB triplet, you must use the format `rrggbb`. For example, the hexadecimal RGB values for salmon are red=FA, green=80, and blue=72, so the RGB triplet for salmon is `\"FA8072\"`.\n\n## Examples\n\n### Using fontcolor()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.fontcolor(\"red\");\n```\n\nThis will create the following HTML:\n\n```html\n<font color=\"red\">Hello, world</font>\n```\n\n> **Warning:** This markup is invalid, because `font` is no longer a valid element.\n\nInstead of using `fontcolor()` and creating HTML text directly, you should use CSS to manipulate fonts. For example, you can manipulate {{cssxref(\"color\")}} through the {{domxref(\"HTMLElement/style\", \"element.style\")}} attribute:\n\n```js\ndocument.getElementById(\"yourElemId\").style.color = \"red\";\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.fontcolor` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"font\")}}\n"
    },
    "fontsize": {
      "index.md": "---\ntitle: String.prototype.fontsize()\nslug: Web/JavaScript/Reference/Global_Objects/String/fontsize\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.fontsize\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`fontsize()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in a {{HTMLElement(\"font\")}} element (`<font size=\"...\">str</font>`), which causes this string to be displayed in the specified font size.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `fontsize()`, the `<font>` element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use [CSS](/en-US/docs/Web/CSS) properties instead.\n\n## Syntax\n\n```js-nolint\nfontsize(size)\n```\n\n### Parameters\n\n- `size`\n  - : An integer between 1 and 7, or a string representing a signed integer between 1 and 7.\n\n### Return value\n\nA string beginning with a `<font size=\"size\">` start tag (double quotes in `size` are replaced with `&quot;`), then the text `str`, and then a `</font>` end tag.\n\n## Description\n\nThe `fontsize()` method itself simply joins the string parts together without any validation or normalization. However, to create valid {{HTMLElement(\"font\")}} elements, When you specify size as an integer, you set the font size of `str` to one of the 7 defined sizes. You can specify `size` as a string such as `\"-2\"` or `\"+3\"` to adjust the font size of `str` relative to 3, the default value.\n\n## Examples\n\n### Using fontsize()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.fontsize(7);\n```\n\nThis will create the following HTML:\n\n```html\n<font size=\"7\">Hello, world</font>\n```\n\n> **Warning:** This markup is invalid, because `font` is no longer a valid element.\n\nInstead of using `fontsize()` and creating HTML text directly, you should use CSS to manipulate fonts. For example, you can manipulate {{cssxref(\"font-size\")}} through the {{domxref(\"HTMLElement/style\", \"element.style\")}} attribute:\n\n```js\ndocument.getElementById(\"yourElemId\").style.fontSize = \"7pt\";\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.fontsize` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"font\")}}\n"
    },
    "fromcharcode": {
      "index.md": "---\ntitle: String.fromCharCode()\nslug: Web/JavaScript/Reference/Global_Objects/String/fromCharCode\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.String.fromCharCode\n---\n\n{{JSRef}}\n\nThe **`String.fromCharCode()`** static method returns a string created from the specified sequence of UTF-16 code units.\n\n{{EmbedInteractiveExample(\"pages/js/string-fromcharcode.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nString.fromCharCode()\nString.fromCharCode(num1)\nString.fromCharCode(num1, num2)\nString.fromCharCode(num1, num2, /* …, */ numN)\n```\n\n### Parameters\n\n- `num1`, …, `numN`\n  - : A number between `0` and `65535` (`0xFFFF`) representing a UTF-16 code unit. Numbers greater than `0xFFFF` are truncated to the last 16 bits. No validity checks are performed.\n\n### Return value\n\nA string of length `N` consisting of the `N` specified UTF-16 code units.\n\n## Description\n\nBecause `fromCharCode()` is a static method of `String`, you always use it as `String.fromCharCode()`, rather than as a method of a `String` value you created.\n\nUnicode code points range from `0` to `1114111` (`0x10FFFF`). `charCodeAt()` always returns a value that is less than `65536`, because the higher code points are represented by _a pair_ of 16-bit surrogate pseudo-characters. Therefore, in order to produce a full character with value greater than `65535`, it is necessary to provide two code units (as if manipulating a string with two characters). For information on Unicode, see [UTF-16 characters, Unicode code points, and grapheme clusters](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\nBecause `fromCharCode()` only works with 16-bit values (same as the `\\u` escape sequence), a surrogate pair is required in order to return a supplementary character. For example, both `String.fromCharCode(0xd83c, 0xdf03)` and `\"\\ud83c\\udf03\"` return code point `U+1F303` \"Night with Stars\". While there is a mathematical relationship between the supplementary code point value (e.g. `0x1f303`) and both surrogate values that represent it (e.g., `0xd83c` and `0xdf03`), it does require an extra step to either calculate or look up the surrogate pair values every time a supplementary code point is to be used. For this reason, it's more convenient to use {{jsxref(\"String.fromCodePoint()\")}}, which allows for returning supplementary characters based on their actual code point value. For example, `String.fromCodePoint(0x1f303)` returns code point `U+1F303` \"Night with Stars\".\n\n## Examples\n\n### Using fromCharCode()\n\nBMP characters, in UTF-16, use a single code unit:\n\n```js\nString.fromCharCode(65, 66, 67); // returns \"ABC\"\nString.fromCharCode(0x2014); // returns \"—\"\nString.fromCharCode(0x12014); // also returns \"—\"; the digit 1 is truncated and ignored\nString.fromCharCode(8212); // also returns \"—\"; 8212 is the decimal form of 0x2014\n```\n\nSupplementary characters, in UTF-16, require two code units (i.e. a surrogate pair):\n\n```js\nString.fromCharCode(0xd83c, 0xdf03); // Code Point U+1F303 \"Night with\nString.fromCharCode(55356, 57091); // Stars\" === \"\\uD83C\\uDF03\"\n\nString.fromCharCode(0xd834, 0xdf06, 0x61, 0xd834, 0xdf07); // \"\\uD834\\uDF06a\\uD834\\uDF07\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.fromCodePoint()\")}}\n- {{jsxref(\"String.prototype.charAt()\")}}\n- {{jsxref(\"String.prototype.charCodeAt()\")}}\n- {{jsxref(\"String.prototype.codePointAt()\")}}\n"
    },
    "fromcodepoint": {
      "index.md": "---\ntitle: String.fromCodePoint()\nslug: Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.String.fromCodePoint\n---\n\n{{JSRef}}\n\nThe **`String.fromCodePoint()`** static method returns a string created from the specified sequence of code points.\n\n{{EmbedInteractiveExample(\"pages/js/string-fromcodepoint.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nString.fromCodePoint()\nString.fromCodePoint(num1)\nString.fromCodePoint(num1, num2)\nString.fromCodePoint(num1, num2, /* …, */ numN)\n```\n\n### Parameters\n\n- `num1`, …, `numN`\n  - : An integer between `0` and `0x10FFFF` (inclusive) representing a Unicode code point.\n\n### Return value\n\nA string created by using the specified sequence of code points.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `numN` is not an integer, is less than `0`, or is greater than `0x10FFFF` after being converted to a number.\n\n## Description\n\nBecause `fromCodePoint()` is a static method of `String`, you always use it as `String.fromCodePoint()`, rather than as a method of a `String` value you created.\n\nUnicode code points range from `0` to `1114111` (`0x10FFFF`). In UTF-16, each string index is a code unit with value `0` – `65535`. Higher code points are represented by _a pair_ of 16-bit surrogate pseudo-characters. Therefore, `fromCodePoint()` may return a string whose [`length`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length) (in UTF-16 code units) is larger than the number of arguments passed. For information on Unicode, see [UTF-16 characters, Unicode code points, and grapheme clusters](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## Examples\n\n### Using fromCodePoint()\n\nValid input:\n\n```js\nString.fromCodePoint(42); // \"*\"\nString.fromCodePoint(65, 90); // \"AZ\"\nString.fromCodePoint(0x404); // \"\\u0404\" === \"Є\"\nString.fromCodePoint(0x2f804); // \"\\uD87E\\uDC04\"\nString.fromCodePoint(194564); // \"\\uD87E\\uDC04\"\nString.fromCodePoint(0x1d306, 0x61, 0x1d307); // \"\\uD834\\uDF06a\\uD834\\uDF07\"\n```\n\nInvalid input:\n\n```js\nString.fromCodePoint(\"_\"); // RangeError\nString.fromCodePoint(Infinity); // RangeError\nString.fromCodePoint(-1); // RangeError\nString.fromCodePoint(3.14); // RangeError\nString.fromCodePoint(3e-2); // RangeError\nString.fromCodePoint(NaN); // RangeError\n```\n\n### Compared to fromCharCode()\n\n{{jsxref(\"String.fromCharCode()\")}} cannot return supplementary characters (i.e. code points `0x010000` – `0x10FFFF`) by specifying their code point. Instead, it requires the UTF-16 surrogate pair in order to return a supplementary character:\n\n```js\nString.fromCharCode(0xd83c, 0xdf03); // Code Point U+1F303 \"Night with\nString.fromCharCode(55356, 57091); // Stars\" === \"\\uD83C\\uDF03\"\n```\n\n`String.fromCodePoint()`, on the other hand, can return 4-byte supplementary characters, as well as the more common 2-byte BMP characters, by specifying their code point (which is equivalent to the UTF-32 code unit):\n\n```js\nString.fromCodePoint(0x1f303); // or 127747 in decimal\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.fromCodePoint` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.fromCharCode()\")}}\n- {{jsxref(\"String.prototype.charAt()\")}}\n- {{jsxref(\"String.prototype.codePointAt()\")}}\n- {{jsxref(\"String.prototype.charCodeAt()\")}}\n"
    },
    "includes": {
      "index.md": "---\ntitle: String.prototype.includes()\nslug: Web/JavaScript/Reference/Global_Objects/String/includes\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.includes\n---\n\n{{JSRef}}\n\nThe **`includes()`** method of {{jsxref(\"String\")}} values performs a case-sensitive search to determine whether a given string may be found within this string, returning `true` or `false` as appropriate.\n\n{{EmbedInteractiveExample(\"pages/js/string-includes.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nincludes(searchString)\nincludes(searchString, position)\n```\n\n### Parameters\n\n- `searchString`\n  - : A string to be searched for within `str`. Cannot [be a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes). All values that are not regexes are [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `includes()` to search for the string `\"undefined\"`, which is rarely what you want.\n- `position` {{optional_inline}}\n  - : The position within the string at which to begin searching for `searchString`. (Defaults to `0`.)\n\n### Return value\n\n**`true`** if the search string is found anywhere within the given string, including when `searchString` is an empty string; otherwise, **`false`**.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `searchString` [is a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes).\n\n## Description\n\nThis method lets you determine whether or not a string includes another string.\n\n### Case-sensitivity\n\nThe `includes()` method is case sensitive. For example, the following expression returns `false`:\n\n```js\n\"Blue Whale\".includes(\"blue\"); // returns false\n```\n\nYou can work around this constraint by transforming both the original string and the search string to all lowercase:\n\n```js\n\"Blue Whale\".toLowerCase().includes(\"blue\"); // returns true\n```\n\n## Examples\n\n### Using includes()\n\n```js\nconst str = \"To be, or not to be, that is the question.\";\n\nconsole.log(str.includes(\"To be\")); // true\nconsole.log(str.includes(\"question\")); // true\nconsole.log(str.includes(\"nonexistent\")); // false\nconsole.log(str.includes(\"To be\", 1)); // false\nconsole.log(str.includes(\"TO BE\")); // false\nconsole.log(str.includes(\"\")); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.includes` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"Array.prototype.includes()\")}}\n- {{jsxref(\"TypedArray.prototype.includes()\")}}\n- {{jsxref(\"String.prototype.indexOf()\")}}\n- {{jsxref(\"String.prototype.lastIndexOf()\")}}\n- {{jsxref(\"String.prototype.startsWith()\")}}\n- {{jsxref(\"String.prototype.endsWith()\")}}\n"
    },
    "index.md": "---\ntitle: String\nslug: Web/JavaScript/Reference/Global_Objects/String\npage-type: javascript-class\nbrowser-compat: javascript.builtins.String\n---\n\n{{JSRef}}\n\nThe **`String`** object is used to represent and manipulate a\nsequence of characters.\n\n## Description\n\nStrings are useful for holding data that can be represented in text form. Some of the\nmost-used operations on strings are to check their {{jsxref(\"String/length\", \"length\")}}, to build and concatenate them using the\n[`+` and `+=` string operators](/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#string_operators),\nchecking for the existence or location of substrings with the\n{{jsxref(\"String/indexOf\", \"indexOf()\")}} method, or extracting substrings\nwith the {{jsxref(\"String/substring\", \"substring()\")}} method.\n\n### Creating strings\n\nStrings can be created as primitives, from string literals, or as objects, using the\n{{jsxref(\"String/String\", \"String()\")}} constructor:\n\n```js-nolint\nconst string1 = \"A string primitive\";\nconst string2 = 'Also a string primitive';\nconst string3 = `Yet another string primitive`;\n```\n\n```js\nconst string4 = new String(\"A String object\");\n```\n\nString primitives and string objects share many behaviors, but have other important differences and caveats.\nSee \"[String primitives and String objects](#string_primitives_and_string_objects)\" below.\n\nString literals can be specified using single or double quotes, which are treated\nidentically, or using the backtick character <kbd>`</kbd>. This last form specifies a [template literal](/en-US/docs/Web/JavaScript/Reference/Template_literals):\nwith this form you can interpolate expressions. For more information on the syntax of string literals, see [lexical grammar](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals).\n\n### Character access\n\nThere are two ways to access an individual character in a string. The first is the\n{{jsxref(\"String/charAt\", \"charAt()\")}} method:\n\n```js\n\"cat\".charAt(1); // gives value \"a\"\n```\n\nThe other way is to treat the string as an array-like object, where individual characters correspond to a numerical index:\n\n```js\n\"cat\"[1]; // gives value \"a\"\n```\n\nWhen using bracket notation for character access, attempting to delete or assign a\nvalue to these properties will not succeed. The properties involved are neither writable\nnor configurable. (See {{jsxref(\"Object.defineProperty()\")}} for more information.)\n\n### Comparing strings\n\nUse the [less-than and greater-than operators](/en-US/docs/Web/JavaScript/Reference/Operators) to compare strings:\n\n```js\nconst a = \"a\";\nconst b = \"b\";\nif (a < b) {\n  // true\n  console.log(`${a} is less than ${b}`);\n} else if (a > b) {\n  console.log(`${a} is greater than ${b}`);\n} else {\n  console.log(`${a} and ${b} are equal.`);\n}\n```\n\nNote that all comparison operators, including [`===`](/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) and [`==`](/en-US/docs/Web/JavaScript/Reference/Operators/Equality), compare strings case-sensitively. A common way to compare strings case-insensitively is to convert both to the same case (upper or lower) before comparing them.\n\n```js\nfunction areEqualCaseInsensitive(str1, str2) {\n  return str1.toUpperCase() === str2.toUpperCase();\n}\n```\n\nThe choice of whether to transform by [`toUpperCase()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) or [`toLowerCase()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) is mostly arbitrary, and neither one is fully robust when extending beyond the Latin alphabet. For example, the German lowercase letter `ß` and `ss` are both transformed to `SS` by `toUpperCase()`, while the Turkish letter `ı` would be falsely reported as unequal to `I` by `toLowerCase()` unless specifically using [`toLocaleLowerCase(\"tr\")`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase).\n\n```js\nconst areEqualInUpperCase = (str1, str2) =>\n  str1.toUpperCase() === str2.toUpperCase();\nconst areEqualInLowerCase = (str1, str2) =>\n  str1.toLowerCase() === str2.toLowerCase();\n\nareEqualInUpperCase(\"ß\", \"ss\"); // true; should be false\nareEqualInLowerCase(\"ı\", \"I\"); // false; should be true\n```\n\nA locale-aware and robust solution for testing case-insensitive equality is to use the {{jsxref(\"Intl.Collator\")}} API or the string's [`localeCompare()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) method — they share the same interface — with the [`sensitivity`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#sensitivity) option set to `\"accent\"` or `\"base\"`.\n\n```js\nconst areEqual = (str1, str2, locale = \"en-US\") =>\n  str1.localeCompare(str2, locale, { sensitivity: \"accent\" }) === 0;\n\nareEqual(\"ß\", \"ss\", \"de\"); // false\nareEqual(\"ı\", \"I\", \"tr\"); // true\n```\n\nThe `localeCompare()` method enables string comparison in a similar fashion as `strcmp()` — it allows sorting strings in a locale-aware manner.\n\n### String primitives and String objects\n\nNote that JavaScript distinguishes between `String` objects and\n{{Glossary(\"Primitive\", \"primitive string\")}} values. (The same is true of\n{{jsxref(\"Boolean\")}} and {{jsxref(\"Number\", \"Numbers\")}}.)\n\nString literals (denoted by double or single quotes) and strings returned from\n`String` calls in a non-constructor context (that is, called without using\nthe {{jsxref(\"Operators/new\", \"new\")}} keyword) are primitive strings. In contexts where a\nmethod is to be invoked on a primitive string or a property lookup occurs, JavaScript\nwill automatically wrap the string primitive and call the method or perform the property\nlookup on the wrapper object instead.\n\n```js\nconst strPrim = \"foo\"; // A literal is a string primitive\nconst strPrim2 = String(1); // Coerced into the string primitive \"1\"\nconst strPrim3 = String(true); // Coerced into the string primitive \"true\"\nconst strObj = new String(strPrim); // String with new returns a string wrapper object.\n\nconsole.log(typeof strPrim); // \"string\"\nconsole.log(typeof strPrim2); // \"string\"\nconsole.log(typeof strPrim3); // \"string\"\nconsole.log(typeof strObj); // \"object\"\n```\n\n> **Warning:** You should rarely find yourself using `String` as a constructor.\n\nString primitives and `String` objects also give different results when\nusing {{jsxref(\"Global_Objects/eval\", \"eval()\")}}. Primitives passed to\n`eval` are treated as source code; `String` objects are treated as\nall other objects are, by returning the object. For example:\n\n```js\nconst s1 = \"2 + 2\"; // creates a string primitive\nconst s2 = new String(\"2 + 2\"); // creates a String object\nconsole.log(eval(s1)); // returns the number 4\nconsole.log(eval(s2)); // returns the string \"2 + 2\"\n```\n\nFor these reasons, the code may break when it encounters `String` objects\nwhen it expects a primitive string instead, although generally, authors need not worry\nabout the distinction.\n\nA `String` object can always be converted to its primitive counterpart with\nthe {{jsxref(\"String/valueOf\", \"valueOf()\")}} method.\n\n```js\nconsole.log(eval(s2.valueOf())); // returns the number 4\n```\n\n### String coercion\n\nMany built-in operations that expect strings first coerce their arguments to strings (which is largely why `String` objects behave similarly to string primitives). [The operation](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-tostring) can be summarized as follows:\n\n- Strings are returned as-is.\n- [`undefined`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined) turns into `\"undefined\"`.\n- [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) turns into `\"null\"`.\n- `true` turns into `\"true\"`; `false` turns into `\"false\"`.\n- Numbers are converted with the same algorithm as [`toString(10)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString).\n- [BigInts](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) are converted with the same algorithm as [`toString(10)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString).\n- [Symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) throw a {{jsxref(\"TypeError\")}}.\n- Objects are first [converted to a primitive](/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) by calling its [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) (with `\"string\"` as hint), `toString()`, and `valueOf()` methods, in that order. The resulting primitive is then converted to a string.\n\nThere are several ways to achieve nearly the same effect in JavaScript.\n\n- [Template literal](/en-US/docs/Web/JavaScript/Reference/Template_literals): `` `${x}` `` does exactly the string coercion steps explained above for the embedded expression.\n- The [`String()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String) function: `String(x)` uses the same algorithm to convert `x`, except that [Symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) don't throw a {{jsxref(\"TypeError\")}}, but return `\"Symbol(description)\"`, where `description` is the [description](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description) of the Symbol.\n- Using the [`+` operator](/en-US/docs/Web/JavaScript/Reference/Operators/Addition): `\"\" + x` coerces its operand to a _primitive_ instead of a _string_, and, for some objects, has entirely different behaviors from normal string coercion. See its [reference page](/en-US/docs/Web/JavaScript/Reference/Operators/Addition) for more details.\n\nDepending on your use case, you may want to use `` `${x}` `` (to mimic built-in behavior) or `String(x)` (to handle symbol values without throwing an error), but you should not use `\"\" + x`.\n\n### UTF-16 characters, Unicode code points, and grapheme clusters\n\nStrings are represented fundamentally as sequences of [UTF-16 code units](https://en.wikipedia.org/wiki/UTF-16). In UTF-16 encoding, every code unit is exact 16 bits long. This means there are a maximum of 2<sup>16</sup>, or 65536 possible characters representable as single UTF-16 code units. This character set is called the [basic multilingual plane (BMP)](<https://en.wikipedia.org/wiki/Plane_(Unicode)#Basic_Multilingual_Plane>), and includes the most common characters like the Latin, Greek, Cyrillic alphabets, as well as many East Asian characters. Each code unit can be written in a string with `\\u` followed by exactly four hex digits.\n\nHowever, the entire Unicode character set is much, much bigger than 65536. The extra characters are stored in UTF-16 as _surrogate pairs_, which are pairs of 16-bit code units that represent a single character. To avoid ambiguity, the two parts of the pair must be between `0xD800` and `0xDFFF`, and these code units are not used to encode single-code-unit characters. (More precisely, leading surrogates, also called high-surrogate code units, have values between `0xD800` and `0xDBFF`, inclusive, while trailing surrogates, also called low-surrogate code units, have values between `0xDC00` and `0xDFFF`, inclusive.) Each Unicode character, comprised of one or two UTF-16 code units, is also called a _Unicode code point_. Each Unicode code point can be written in a string with `\\u{xxxxxx}` where `xxxxxx` represents 1–6 hex digits.\n\nA \"lone surrogate\" is a 16-bit code unit satisfying one of the descriptions below:\n\n- It is in the range `0xD800`–`0xDBFF`, inclusive (i.e. is a leading surrogate), but it is the last code unit in the string, or the next code unit is not a trailing surrogate.\n- It is in the range `0xDC00`–`0xDFFF`, inclusive (i.e. is a trailing surrogate), but it is the first code unit in the string, or the previous code unit is not a leading surrogate.\n\nLone surrogates do not represent any Unicode character. Although most JavaScript built-in methods handle them correctly because they all work based on UTF-16 code units, lone surrogates are often not valid values when interacting with other systems — for example, [`encodeURI()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) will throw a {{jsxref(\"URIError\")}} for lone surrogates, because URI encoding uses UTF-8 encoding, which does not have any encoding for lone surrogates. Strings not containing any lone surrogates are called _well-formed_ strings, and are safe to be used with functions that do not deal with UTF-16 (such as `encodeURI()` or {{domxref(\"TextEncoder\")}}). You can check if a string is well-formed with the {{jsxref(\"String/isWellFormed\", \"isWellFormed()\")}} method, or sanitize lone surrogates with the {{jsxref(\"String/toWellFormed\", \"toWellFormed()\")}} method.\n\nOn top of Unicode characters, there are certain sequences of Unicode characters that should be treated as one visual unit, known as a _grapheme cluster_. The most common case is emojis: many emojis that have a range of variations are actually formed by multiple emojis, usually joined by the \\<ZWJ> (`U+200D`) character.\n\nYou must be careful which level of characters you are iterating on. For example, [`split(\"\")`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) will split by UTF-16 code units and will separate surrogate pairs. String indexes also refer to the index of each UTF-16 code unit. On the other hand, [`@@iterator()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator) iterates by Unicode code points. Iterating through grapheme clusters will require some custom code.\n\n```js\n\"😄\".split(\"\"); // ['\\ud83d', '\\ude04']; splits into two lone surrogates\n\n// \"Backhand Index Pointing Right: Dark Skin Tone\"\n[...\"👉🏿\"]; // ['👉', '🏿']\n// splits into the basic \"Backhand Index Pointing Right\" emoji and\n// the \"Dark skin tone\" emoji\n\n// \"Family: Man, Boy\"\n[...\"👨‍👦\"]; // [ '👨', '‍', '👦' ]\n// splits into the \"Man\" and \"Boy\" emoji, joined by a ZWJ\n\n// The United Nations flag\n[...\"🇺🇳\"]; // [ '🇺', '🇳' ]\n// splits into two \"region indicator\" letters \"U\" and \"N\".\n// All flag emojis are formed by joining two region indicator letters\n```\n\n## Constructor\n\n- {{jsxref(\"String/String\", \"String()\")}}\n  - : Creates a new `String` object. It performs type conversion when called as\n    a function, rather than as a constructor, which is usually more useful.\n\n## Static methods\n\n- {{jsxref(\"String.fromCharCode()\")}}\n  - : Returns a string created by using the specified sequence of Unicode values.\n- {{jsxref(\"String.fromCodePoint()\")}}\n  - : Returns a string created by using the specified sequence of code points.\n- {{jsxref(\"String.raw()\")}}\n  - : Returns a string created from a raw template string.\n\n## Instance properties\n\nThese properties are defined on `String.prototype` and shared by all `String` instances.\n\n- {{jsxref(\"Object/constructor\", \"String.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `String` instances, the initial value is the {{jsxref(\"String/String\", \"String\")}} constructor.\n\nThese properties are own properties of each `String` instance.\n\n- {{jsxref(\"String/length\", \"length\")}}\n  - : Reflects the `length` of the string. Read-only.\n\n## Instance methods\n\n- {{jsxref(\"String.prototype.at()\")}}\n  - : Returns the character (exactly one UTF-16 code unit) at the specified `index`. Accepts negative integers, which count back from the last string character.\n- {{jsxref(\"String.prototype.charAt()\")}}\n  - : Returns the character (exactly one UTF-16 code unit) at the specified\n    `index`.\n- {{jsxref(\"String.prototype.charCodeAt()\")}}\n  - : Returns a number that is the UTF-16 code unit value at the given\n    `index`.\n- {{jsxref(\"String.prototype.codePointAt()\")}}\n  - : Returns a nonnegative integer Number that is the code point value of the UTF-16\n    encoded code point starting at the specified `pos`.\n- {{jsxref(\"String.prototype.concat()\")}}\n  - : Combines the text of two (or more) strings and returns a new string.\n- {{jsxref(\"String.prototype.endsWith()\")}}\n  - : Determines whether a string ends with the characters of the string\n    `searchString`.\n- {{jsxref(\"String.prototype.includes()\")}}\n  - : Determines whether the calling string contains `searchString`.\n- {{jsxref(\"String.prototype.indexOf()\")}}\n  - : Returns the index within the calling {{jsxref(\"String\")}} object of the first\n    occurrence of `searchValue`, or `-1` if not found.\n- {{jsxref(\"String.prototype.isWellFormed()\")}}\n  - : Returns a boolean indicating whether this string contains any [lone surrogates](#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n- {{jsxref(\"String.prototype.lastIndexOf()\")}}\n  - : Returns the index within the calling {{jsxref(\"String\")}} object of the last\n    occurrence of `searchValue`, or `-1` if not found.\n- {{jsxref(\"String.prototype.localeCompare()\")}}\n  - : Returns a number indicating whether the reference string\n    `compareString` comes before, after, or is equivalent to the\n    given string in sort order.\n- {{jsxref(\"String.prototype.match()\")}}\n  - : Used to match regular expression `regexp` against a string.\n- {{jsxref(\"String.prototype.matchAll()\")}}\n  - : Returns an iterator of all `regexp`'s matches.\n- {{jsxref(\"String.prototype.normalize()\")}}\n  - : Returns the Unicode Normalization Form of the calling string value.\n- {{jsxref(\"String.prototype.padEnd()\")}}\n  - : Pads the current string from the end with a given string and returns a new string of\n    the length `targetLength`.\n- {{jsxref(\"String.prototype.padStart()\")}}\n  - : Pads the current string from the start with a given string and returns a new string\n    of the length `targetLength`.\n- {{jsxref(\"String.prototype.repeat()\")}}\n  - : Returns a string consisting of the elements of the object repeated\n    `count` times.\n- {{jsxref(\"String.prototype.replace()\")}}\n  - : Used to replace occurrences of `searchFor` using\n    `replaceWith`. `searchFor` may be a string\n    or Regular Expression, and `replaceWith` may be a string or\n    function.\n- {{jsxref(\"String.prototype.replaceAll()\")}}\n  - : Used to replace all occurrences of `searchFor` using\n    `replaceWith`. `searchFor` may be a string\n    or Regular Expression, and `replaceWith` may be a string or\n    function.\n- {{jsxref(\"String.prototype.search()\")}}\n  - : Search for a match between a regular expression `regexp` and\n    the calling string.\n- {{jsxref(\"String.prototype.slice()\")}}\n  - : Extracts a section of a string and returns a new string.\n- {{jsxref(\"String.prototype.split()\")}}\n  - : Returns an array of strings populated by splitting the calling string at occurrences\n    of the substring `sep`.\n- {{jsxref(\"String.prototype.startsWith()\")}}\n  - : Determines whether the calling string begins with the characters of string\n    `searchString`.\n- {{jsxref(\"String.prototype.substr()\")}} {{deprecated_inline}}\n  - : Returns a portion of the string, starting at the specified index and extending for a given number of characters afterwards.\n- {{jsxref(\"String.prototype.substring()\")}}\n  - : Returns a new string containing characters of the calling string from (or between)\n    the specified index (or indices).\n- {{jsxref(\"String.prototype.toLocaleLowerCase()\")}}\n\n  - : The characters within a string are converted to lowercase while respecting the\n    current locale.\n\n    For most languages, this will return the same as\n    {{jsxref(\"String/toLowerCase\", \"toLowerCase()\")}}.\n\n- {{jsxref(\"String.prototype.toLocaleUpperCase()\")}}\n\n  - : The characters within a string are converted to uppercase while respecting the\n    current locale.\n\n    For most languages, this will return the same as\n    {{jsxref(\"String/toUpperCase\", \"toUpperCase()\")}}.\n\n- {{jsxref(\"String.prototype.toLowerCase()\")}}\n  - : Returns the calling string value converted to lowercase.\n- {{jsxref(\"String.prototype.toString()\")}}\n  - : Returns a string representing the specified object. Overrides the\n    {{jsxref(\"Object.prototype.toString()\")}} method.\n- {{jsxref(\"String.prototype.toUpperCase()\")}}\n  - : Returns the calling string value converted to uppercase.\n- {{jsxref(\"String.prototype.toWellFormed()\")}}\n  - : Returns a string where all [lone surrogates](#utf-16_characters_unicode_code_points_and_grapheme_clusters) of this string are replaced with the Unicode replacement character U+FFFD.\n- {{jsxref(\"String.prototype.trim()\")}}\n  - : Trims whitespace from the beginning and end of the string.\n- {{jsxref(\"String.prototype.trimEnd()\")}}\n  - : Trims whitespace from the end of the string.\n- {{jsxref(\"String.prototype.trimStart()\")}}\n  - : Trims whitespace from the beginning of the string.\n- {{jsxref(\"String.prototype.valueOf()\")}}\n  - : Returns the primitive value of the specified object. Overrides the\n    {{jsxref(\"Object.prototype.valueOf()\")}} method.\n- [`String.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator)\n  - : Returns a new iterator object that iterates over the code points of a String value,\n    returning each code point as a String value.\n\n### HTML wrapper methods\n\n> **Warning:** Deprecated. Avoid these methods.\n>\n> They are of limited use, as they are based on a very old HTML standard and provide only a subset of the currently available HTML tags and attributes. Many of them create deprecated or non-standard markup today. In addition, they do simple string concatenation without any validation or sanitation, which makes them a potential security threat when directly inserted using [`innerHTML`](/en-US/docs/Web/API/Element/innerHTML). Use [DOM APIs](/en-US/docs/Web/API/Document_Object_Model) such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement) instead.\n\n- {{jsxref(\"String.prototype.anchor()\")}} {{deprecated_inline}}\n  - : [`<a name=\"name\">`](/en-US/docs/Web/HTML/Element/a#name) (hypertext target)\n- {{jsxref(\"String.prototype.big()\")}} {{deprecated_inline}}\n  - : {{HTMLElement(\"big\")}}\n- {{jsxref(\"String.prototype.blink()\")}} {{deprecated_inline}}\n  - : `<blink>`\n- {{jsxref(\"String.prototype.bold()\")}} {{deprecated_inline}}\n  - : {{HTMLElement(\"b\")}}\n- {{jsxref(\"String.prototype.fixed()\")}} {{deprecated_inline}}\n  - : {{HTMLElement(\"tt\")}}\n- {{jsxref(\"String.prototype.fontcolor()\")}} {{deprecated_inline}}\n  - : [`<font color=\"color\">`](/en-US/docs/Web/HTML/Element/font#color)\n- {{jsxref(\"String.prototype.fontsize()\")}} {{deprecated_inline}}\n  - : [`<font size=\"size\">`](/en-US/docs/Web/HTML/Element/font#size)\n- {{jsxref(\"String.prototype.italics()\")}} {{deprecated_inline}}\n  - : {{HTMLElement(\"i\")}}\n- {{jsxref(\"String.prototype.link()\")}} {{deprecated_inline}}\n  - : [`<a href=\"url\">`](/en-US/docs/Web/HTML/Element/a#href) (link to URL)\n- {{jsxref(\"String.prototype.small()\")}} {{deprecated_inline}}\n  - : {{HTMLElement(\"small\")}}\n- {{jsxref(\"String.prototype.strike()\")}} {{deprecated_inline}}\n  - : {{HTMLElement(\"strike\")}}\n- {{jsxref(\"String.prototype.sub()\")}} {{deprecated_inline}}\n  - : {{HTMLElement(\"sub\")}}\n- {{jsxref(\"String.prototype.sup()\")}} {{deprecated_inline}}\n  - : {{HTMLElement(\"sup\")}}\n\nNote that these methods do not check if the string itself contains HTML tags, so it's possible to create invalid HTML:\n\n```js\n\"</b>\".bold(); // <b></b></b>\n```\n\nThe only escaping they do is to replace `\"` in the attribute value (for {{jsxref(\"String/anchor\", \"anchor()\")}}, {{jsxref(\"String/fontcolor\", \"fontcolor()\")}}, {{jsxref(\"String/fontsize\", \"fontsize()\")}}, and {{jsxref(\"String/link\", \"link()\")}}) with `&quot;`.\n\n```js\n\"foo\".anchor('\"Hello\"'); // <a name=\"&quot;Hello&quot;\">foo</a>\n```\n\n## Examples\n\n### String conversion\n\nThe `String()` function is a more reliable way of converting values to strings than calling the `toString()` method of the value, as the former works when used on [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) and {{jsxref(\"undefined\")}}. For example:\n\n```js\n// You cannot access properties on null or undefined\n\nconst nullVar = null;\nnullVar.toString(); // TypeError: Cannot read properties of null\nString(nullVar); // \"null\"\n\nconst undefinedVar = undefined;\nundefinedVar.toString(); // TypeError: Cannot read properties of undefined\nString(undefinedVar); // \"undefined\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Text formatting](/en-US/docs/Web/JavaScript/Guide/Text_formatting) guide\n- {{jsxref(\"RegExp\")}}\n",
    "indexof": {
      "index.md": "---\ntitle: String.prototype.indexOf()\nslug: Web/JavaScript/Reference/Global_Objects/String/indexOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.indexOf\n---\n\n{{JSRef}}\n\nThe **`indexOf()`** method of {{jsxref(\"String\")}} values searches this string and returns the index of the first occurrence of the specified substring. It takes an optional starting position and returns the first occurrence of the specified substring at an index greater than or equal to the specified number.\n\n{{EmbedInteractiveExample(\"pages/js/string-indexof.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nindexOf(searchString)\nindexOf(searchString, position)\n```\n\n### Parameters\n\n- `searchString`\n\n  - : Substring to search for. All values are [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `indexOf()` to search for the string `\"undefined\"`, which is rarely what you want.\n\n- `position` {{optional_inline}}\n\n  - : The method returns the index of the first occurrence of the specified substring at a position greater than or equal to `position`, which defaults to `0`. If `position` is greater than the length of the calling string, the method doesn't search the calling string at all. If `position` is less than zero, the method behaves as it would if `position` were `0`.\n\n    - `'hello world hello'.indexOf('o', -5)` returns `4` — because it causes the method to behave as if the second argument were `0`, and the first occurrence of `o` at a position greater or equal to `0` is at position `4`.\n\n    - `'hello world hello'.indexOf('world', 12)` returns `-1` — because, while it's true the substring `world` occurs at index `6`, that position is not greater than or equal to `12`.\n\n    - `'hello world hello'.indexOf('o', 99)` returns `-1` — because `99` is greater than the length of `hello world hello`, which causes the method to not search the string at all.\n\n### Return value\n\nThe index of the first occurrence of `searchString` found, or `-1` if not found.\n\n#### Return value when using an empty search string\n\nSearching for an empty search string produces strange results. With no second argument, or with a second argument whose value is less than the calling string's length, the return value is the same as the value of the second argument:\n\n```js\n\"hello world\".indexOf(\"\"); // returns 0\n\"hello world\".indexOf(\"\", 0); // returns 0\n\"hello world\".indexOf(\"\", 3); // returns 3\n\"hello world\".indexOf(\"\", 8); // returns 8\n```\n\nHowever, with a second argument whose value is greater than or equal to the string's length, the return value is the string's length:\n\n```js\n\"hello world\".indexOf(\"\", 11); // returns 11\n\"hello world\".indexOf(\"\", 13); // returns 11\n\"hello world\".indexOf(\"\", 22); // returns 11\n```\n\nIn the former instance, the method behaves as if it found an empty string just after the position specified in the second argument. In the latter instance, the method behaves as if it found an empty string at the end of the calling string.\n\n## Description\n\nStrings are zero-indexed: The index of a string's first character is `0`, and the index of a string's last character is the length of the string minus 1.\n\n```js\n\"Blue Whale\".indexOf(\"Blue\"); // returns  0\n\"Blue Whale\".indexOf(\"Blute\"); // returns -1\n\"Blue Whale\".indexOf(\"Whale\", 0); // returns  5\n\"Blue Whale\".indexOf(\"Whale\", 5); // returns  5\n\"Blue Whale\".indexOf(\"Whale\", 7); // returns -1\n\"Blue Whale\".indexOf(\"\"); // returns  0\n\"Blue Whale\".indexOf(\"\", 9); // returns  9\n\"Blue Whale\".indexOf(\"\", 10); // returns 10\n\"Blue Whale\".indexOf(\"\", 11); // returns 10\n```\n\nThe `indexOf()` method is case sensitive. For example, the following\nexpression returns `-1`:\n\n```js\n\"Blue Whale\".indexOf(\"blue\"); // returns -1\n```\n\n### Checking occurrences\n\nWhen checking if a specific substring occurs within a string, the correct way to check is test whether the return value is `-1`:\n\n```js\n\"Blue Whale\".indexOf(\"Blue\") !== -1; // true; found 'Blue' in 'Blue Whale'\n\"Blue Whale\".indexOf(\"Bloe\") !== -1; // false; no 'Bloe' in 'Blue Whale'\n```\n\n## Examples\n\n### Using indexOf()\n\nThe following example uses `indexOf()` to locate substrings in the string\n`\"Brave new world\"`.\n\n```js\nconst str = \"Brave new world\";\n\nconsole.log(str.indexOf(\"w\")); // 8\nconsole.log(str.indexOf(\"new\")); // 6\n```\n\n### indexOf() and case-sensitivity\n\nThe following example defines two string variables.\n\nThe variables contain the same string, except that the second string contains uppercase\nletters. The first {{domxref(\"console/log_static\", \"console.log()\")}} method displays `19`. But\nbecause the `indexOf()` method is case sensitive, the string\n`\"cheddar\"` is not found in `myCapString`, so the second\n`console.log()` method displays `-1`.\n\n```js\nconst myString = \"brie, pepper jack, cheddar\";\nconst myCapString = \"Brie, Pepper Jack, Cheddar\";\n\nconsole.log(myString.indexOf(\"cheddar\")); // 19\nconsole.log(myCapString.indexOf(\"cheddar\")); // -1\n```\n\n### Using indexOf() to count occurrences of a letter in a string\n\nThe following example sets `count` to the number of occurrences of the\nletter `e` in the string `str`:\n\n```js\nconst str = \"To be, or not to be, that is the question.\";\nlet count = 0;\nlet position = str.indexOf(\"e\");\n\nwhile (position !== -1) {\n  count++;\n  position = str.indexOf(\"e\", position + 1);\n}\n\nconsole.log(count); // 4\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.charAt()\")}}\n- {{jsxref(\"String.prototype.lastIndexOf()\")}}\n- {{jsxref(\"String.prototype.includes()\")}}\n- {{jsxref(\"String.prototype.split()\")}}\n- {{jsxref(\"Array.prototype.indexOf()\")}}\n"
    },
    "iswellformed": {
      "index.md": "---\ntitle: String.prototype.isWellFormed()\nslug: Web/JavaScript/Reference/Global_Objects/String/isWellFormed\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.isWellFormed\n---\n\n{{JSRef}}\n\nThe **`isWellFormed()`** method of {{jsxref(\"String\")}} values returns a boolean indicating whether this string contains any [lone surrogates](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters).\n\n## Syntax\n\n```js-nolint\nisWellFormed()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nReturns `true` if this string does not contain any lone surrogates, `false` otherwise.\n\n## Description\n\nStrings in JavaScript are UTF-16 encoded. UTF-16 encoding has the concept of _surrogate pairs_, which is introduced in detail in the [UTF-16 characters, Unicode code points, and grapheme clusters](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters) section.\n\n`isWellFormed()` allows you to test whether a string is well-formed (i.e. does not contain any lone surrogates). Compared to a custom implementation, `isWellFormed()` is more efficient, as engines can directly access the internal representation of strings. If you need to convert a string to a well-formed string, use the {{jsxref(\"String/toWellFormed\", \"toWellFormed()\")}} method. `isWellFormed()` allows you to handle ill-formed strings differently from well-formed strings, such as throwing an error or marking it as invalid.\n\n## Examples\n\n### Using isWellFormed()\n\n```js\nconst strings = [\n  // Lone leading surrogate\n  \"ab\\uD800\",\n  \"ab\\uD800c\",\n  // Lone trailing surrogate\n  \"\\uDFFFab\",\n  \"c\\uDFFFab\",\n  // Well-formed\n  \"abc\",\n  \"ab\\uD83D\\uDE04c\",\n];\n\nfor (const str of strings) {\n  console.log(str.isWellFormed());\n}\n// Logs:\n// false\n// false\n// false\n// false\n// true\n// true\n```\n\n### Avoiding errors in encodeURI()\n\n{{jsxref(\"encodeURI\")}} throws an error if the string passed is not well-formed. This can be avoided by using `isWellFormed()` to test the string before passing it to `encodeURI()`.\n\n```js\nconst illFormed = \"https://example.com/search?q=\\uD800\";\n\ntry {\n  encodeURI(illFormed);\n} catch (e) {\n  console.log(e); // URIError: URI malformed\n}\n\nif (illFormed.isWellFormed()) {\n  console.log(encodeURI(illFormed));\n} else {\n  console.warn(\"Ill-formed strings encountered.\"); // Ill-formed strings encountered.\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.isWellFormed` in `core-js`](https://github.com/zloirock/core-js#well-formed-unicode-strings)\n- {{jsxref(\"String.prototype.toWellFormed()\")}}\n- {{jsxref(\"String.prototype.normalize()\")}}\n"
    },
    "italics": {
      "index.md": "---\ntitle: String.prototype.italics()\nslug: Web/JavaScript/Reference/Global_Objects/String/italics\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.italics\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`italics()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in an {{HTMLElement(\"i\")}} element (`<i>str</i>`), which causes this string to be displayed as italic.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. Use [DOM APIs](/en-US/docs/Web/API/Document_Object_Model) such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement) instead.\n\n## Syntax\n\n```js-nolint\nitalics()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string beginning with an `<i>` start tag, then the text `str`, and then an `</i>` end tag.\n\n## Examples\n\n### Using italics()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.italics();\n```\n\nThis will create the following HTML:\n\n```html\n<i>Hello, world</i>\n```\n\nInstead of using `italics()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement). For example:\n\n```js\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"i\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.italics` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"i\")}}\n"
    },
    "lastindexof": {
      "index.md": "---\ntitle: String.prototype.lastIndexOf()\nslug: Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.lastIndexOf\n---\n\n{{JSRef}}\n\nThe **`lastIndexOf()`** method of {{jsxref(\"String\")}} values searches this string and returns the index of the last occurrence of the specified substring. It takes an optional starting position and returns the last occurrence of the specified substring at an index less than or equal to the specified number.\n\n{{EmbedInteractiveExample(\"pages/js/string-lastindexof.html\")}}\n\n## Syntax\n\n```js-nolint\nlastIndexOf(searchString)\nlastIndexOf(searchString, position)\n```\n\n### Parameters\n\n- `searchString`\n\n  - : Substring to search for. All values are [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `lastIndexOf()` to search for the string `\"undefined\"`, which is rarely what you want.\n\n- `position` {{optional_inline}}\n\n  - : The method returns the index of the last occurrence of the specified substring at a position less than or equal to `position`, which defaults to `+Infinity`. If `position` is greater than the length of the calling string, the method searches the entire string. If `position` is less than `0`, the behavior is the same as for `0` — that is, the method looks for the specified substring only at index `0`.\n\n    - `'hello world hello'.lastIndexOf('world', 4)` returns `-1` — because, while the substring `world` does occurs at index `6`, that position is not less than or equal to `4`.\n\n    - `'hello world hello'.lastIndexOf('hello', 99)` returns `12` — because the last occurrence of `hello` at a position less than or equal to `99` is at position `12`.\n\n    - `'hello world hello'.lastIndexOf('hello', 0)` and `'hello world hello'.lastIndexOf('hello', -5)` both return `0` — because both cause the method to only look for `hello` at index `0`.\n\n### Return value\n\nThe index of the last occurrence of `searchString` found, or `-1` if not found.\n\n## Description\n\nStrings are zero-indexed: The index of a string's first character is `0`, and the index of a string's last character is the length of the string minus 1.\n\n```js\n\"canal\".lastIndexOf(\"a\"); // returns 3\n\"canal\".lastIndexOf(\"a\", 2); // returns 1\n\"canal\".lastIndexOf(\"a\", 0); // returns -1\n\"canal\".lastIndexOf(\"x\"); // returns -1\n\"canal\".lastIndexOf(\"c\", -5); // returns 0\n\"canal\".lastIndexOf(\"c\", 0); // returns 0\n\"canal\".lastIndexOf(\"\"); // returns 5\n\"canal\".lastIndexOf(\"\", 2); // returns 2\n```\n\n### Case-sensitivity\n\nThe `lastIndexOf()` method is case sensitive. For example, the following\nexpression returns `-1`:\n\n```js\n\"Blue Whale, Killer Whale\".lastIndexOf(\"blue\"); // returns -1\n```\n\n## Examples\n\n### Using indexOf() and lastIndexOf()\n\nThe following example uses {{jsxref(\"String/indexOf\", \"indexOf()\")}} and\n`lastIndexOf()` to locate values in the string\n`\"Brave, Brave New World\"`.\n\n```js\nconst anyString = \"Brave, Brave New World\";\n\nconsole.log(anyString.indexOf(\"Brave\")); // 0\nconsole.log(anyString.lastIndexOf(\"Brave\")); // 7\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.charAt()\")}}\n- {{jsxref(\"String.prototype.indexOf()\")}}\n- {{jsxref(\"String.prototype.split()\")}}\n- {{jsxref(\"Array.prototype.indexOf()\")}}\n- {{jsxref(\"Array.prototype.lastIndexOf()\")}}\n"
    },
    "length": {
      "index.md": "---\ntitle: \"String: length\"\nslug: Web/JavaScript/Reference/Global_Objects/String/length\npage-type: javascript-instance-data-property\nbrowser-compat: javascript.builtins.String.length\n---\n\n{{JSRef}}\n\nThe **`length`** data property of a {{jsxref(\"String\")}} value contains the length of the string in UTF-16 code units.\n\n{{EmbedInteractiveExample(\"pages/js/string-length.html\", \"shorter\")}}\n\n## Value\n\nA non-negative integer.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nThis property returns the number of code units in the string. JavaScript uses [UTF-16](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters) encoding, where each Unicode character may be encoded as one or two code units, so it's possible for the value returned by `length` to not match the actual number of Unicode characters in the string. For common scripts like Latin, Cyrillic, wellknown CJK characters, etc., this should not be an issue, but if you are working with certain scripts, such as emojis, [mathematical symbols](https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols), or obscure Chinese characters, you may need to account for the difference between code units and characters.\n\nThe language specification requires strings to have a maximum length of 2<sup>53</sup> - 1 elements, which is the upper limit for [precise integers](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER). However, a string with this length needs 16384TiB of storage, which cannot fit in any reasonable device's memory, so implementations tend to lower the threshold, which allows the string's length to be conveniently stored in a 32-bit integer.\n\n- In V8 (used by Chrome and Node), the maximum length is 2<sup>29</sup> - 24 (\\~1GiB). On 32-bit systems, the maximum length is 2<sup>28</sup> - 16 (\\~512MiB).\n- In Firefox, the maximum length is 2<sup>30</sup> - 2 (\\~2GiB). Before Firefox 65, the maximum length was 2<sup>28</sup> - 1 (\\~512MiB).\n- In Safari, the maximum length is 2<sup>31</sup> - 1 (\\~4GiB).\n\nFor an empty string, `length` is 0.\n\nThe static property `String.length` is unrelated to the length of strings. It's the [arity](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length) of the `String` function (loosely, the number of formal parameters it has), which is 1.\n\nSince `length` counts code units instead of characters, if you want to get the number of characters, you can first split the string with its [iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator), which iterates by characters:\n\n```js\nfunction getCharacterLength(str) {\n  // The string iterator that is used here iterates over characters,\n  // not mere code units\n  return [...str].length;\n}\n\nconsole.log(getCharacterLength(\"A\\uD87E\\uDC04Z\")); // 3\n```\n\n## Examples\n\n### Basic usage\n\n```js\nconst x = \"Mozilla\";\nconst empty = \"\";\n\nconsole.log(`${x} is ${x.length} code units long`);\n// Mozilla is 7 code units long\n\nconsole.log(`The empty string has a length of ${empty.length}`);\n// The empty string has a length of 0\n```\n\n### Strings with length not equal to the number of characters\n\n```js\nconst emoji = \"😄\";\nconsole.log(emoji.length); // 2\nconsole.log([...emoji].length); // 1\nconst adlam = \"𞤲𞥋𞤣𞤫\";\nconsole.log(adlam.length); // 8\nconsole.log([...adlam].length); // 4\nconst formula = \"∀𝑥∈ℝ,𝑥²≥0\";\nconsole.log(formula.length); // 11\nconsole.log([...formula].length); // 9\n```\n\n### Assigning to length\n\nBecause string is a primitive, attempting to assign a value to a string's `length` property has no observable effect, and will throw in [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode).\n\n```js\nconst myString = \"bluebells\";\n\nmyString.length = 4;\nconsole.log(myString); // \"bluebells\"\nconsole.log(myString.length); // 9\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`Array`: `length`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length)\n"
    },
    "link": {
      "index.md": "---\ntitle: String.prototype.link()\nslug: Web/JavaScript/Reference/Global_Objects/String/link\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.link\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`link()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in an {{HTMLElement(\"a\")}} element (`<a href=\"...\">str</a>`), to be used as a hypertext link to another URL.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. Use [DOM APIs](/en-US/docs/Web/API/Document_Object_Model) such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement) instead.\n\n## Syntax\n\n```js-nolint\nlink(url)\n```\n\n### Parameters\n\n- `url`\n  - : Any string that specifies the `href` attribute of the `<a>` element; it should be a valid URL (relative or absolute), with any `&` characters escaped as `&amp;`.\n\n### Return value\n\nA string beginning with an `<a href=\"url\">` start tag (double quotes in `url` are replaced with `&quot;`), then the text `str`, and then an `</a>` end tag.\n\n## Examples\n\n### Using link()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"MDN Web Docs\";\n\ndocument.body.innerHTML = contentString.link(\"https://developer.mozilla.org/\");\n```\n\nThis will create the following HTML:\n\n```html\n<a href=\"https://developer.mozilla.org/\">MDN Web Docs</a>\n```\n\nInstead of using `link()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement). For example:\n\n```js\nconst contentString = \"MDN Web Docs\";\nconst elem = document.createElement(\"a\");\nelem.href = \"https://developer.mozilla.org/\";\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.link` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"a\")}}\n"
    },
    "localecompare": {
      "index.md": "---\ntitle: String.prototype.localeCompare()\nslug: Web/JavaScript/Reference/Global_Objects/String/localeCompare\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.localeCompare\n---\n\n{{JSRef}}\n\nThe **`localeCompare()`** method of {{jsxref(\"String\")}} values returns a number indicating whether this string comes before, or after, or is the same as the given string in sort order. In implementations with [`Intl.Collator` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator) support, this method simply calls `Intl.Collator`.\n\nWhen comparing large numbers of strings, such as in sorting large arrays, it is better to create an {{jsxref(\"Intl.Collator\")}} object and use the function provided by its {{jsxref(\"Intl/Collator/compare\", \"compare()\")}} method.\n\n{{EmbedInteractiveExample(\"pages/js/string-localecompare.html\")}}\n\n## Syntax\n\n```js-nolint\nlocaleCompare(compareString)\nlocaleCompare(compareString, locales)\nlocaleCompare(compareString, locales, options)\n```\n\n### Parameters\n\nThe `locales` and `options` parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used.\n\nIn implementations that support the [`Intl.Collator` API](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator), these parameters correspond exactly to the [`Intl.Collator()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator) constructor's parameters. Implementations without `Intl.Collator` support are asked to ignore both parameters, making the comparison result returned entirely implementation-dependent — it's only required to be _consistent_.\n\n- `compareString`\n  - : The string against which the `referenceStr` is compared. All values are [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `localeCompare()` to compare against the string `\"undefined\"`, which is rarely what you want.\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag, or an array of such strings. Corresponds to the [`locales`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#locales) parameter of the `Intl.Collator()` constructor.\n\n    In implementations without `Intl.Collator` support, this parameter is ignored and the host's locale is usually used.\n\n- `options` {{optional_inline}}\n\n  - : An object adjusting the output format. Corresponds to the [`options`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator#options) parameter of the `Intl.Collator()` constructor.\n\n    In implementations without `Intl.Collator` support, this parameter is ignored.\n\nSee the [`Intl.Collator()` constructor](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator) for details on the `locales` and `options` parameters and how to use them.\n\n### Return value\n\nA **negative** number if `referenceStr` occurs before `compareString`; **positive** if the `referenceStr` occurs after `compareString`; `0` if they are equivalent.\n\nIn implementations with `Intl.Collator`, this is equivalent to `new Intl.Collator(locales, options).compare(referenceStr, compareString)`.\n\n## Description\n\nReturns an integer indicating whether the `referenceStr` comes\nbefore, after or is equivalent to the `compareString`.\n\n- Negative when the `referenceStr` occurs before\n  `compareString`\n- Positive when the `referenceStr` occurs after\n  `compareString`\n- Returns `0` if they are equivalent\n\n> **Warning:** Do not rely on exact return values of `-1` or `1`!\n>\n> Negative and positive integer results vary between browsers (as well as between\n> browser versions) because the ECMAScript specification only mandates negative and positive\n> values. Some browsers may return `-2` or `2`, or even some other\n> negative or positive value.\n\n## Examples\n\n### Using localeCompare()\n\n```js\n// The letter \"a\" is before \"c\" yielding a negative value\n\"a\".localeCompare(\"c\"); // -2 or -1 (or some other negative value)\n\n// Alphabetically the word \"check\" comes after \"against\" yielding a positive value\n\"check\".localeCompare(\"against\"); // 2 or 1 (or some other positive value)\n\n// \"a\" and \"a\" are equivalent yielding a neutral value of zero\n\"a\".localeCompare(\"a\"); // 0\n```\n\n### Sort an array\n\n`localeCompare()` enables case-insensitive sorting for an array.\n\n```js\nconst items = [\"réservé\", \"Premier\", \"Cliché\", \"communiqué\", \"café\", \"Adieu\"];\nitems.sort((a, b) => a.localeCompare(b, \"fr\", { ignorePunctuation: true }));\n// ['Adieu', 'café', 'Cliché', 'communiqué', 'Premier', 'réservé']\n```\n\n### Check browser support for extended arguments\n\nThe `locales` and `options` arguments are\nnot supported in all browsers yet.\n\nTo check whether an implementation supports them, use the `\"i\"` argument (a\nrequirement that illegal language tags are rejected) and look for a\n{{jsxref(\"RangeError\")}} exception:\n\n```js\nfunction localeCompareSupportsLocales() {\n  try {\n    \"foo\".localeCompare(\"bar\", \"i\");\n  } catch (e) {\n    return e.name === \"RangeError\";\n  }\n  return false;\n}\n```\n\n### Using locales\n\nThe results provided by `localeCompare()` vary between languages. In order\nto get the sort order of the language used in the user interface of your application,\nmake sure to specify that language (and possibly some fallback languages) using the\n`locales` argument:\n\n```js\nconsole.log(\"ä\".localeCompare(\"z\", \"de\")); // a negative value: in German, ä sorts before z\nconsole.log(\"ä\".localeCompare(\"z\", \"sv\")); // a positive value: in Swedish, ä sorts after z\n```\n\n### Using options\n\nThe results provided by `localeCompare()` can be customized using the\n`options` argument:\n\n```js\n// in German, ä has a as the base letter\nconsole.log(\"ä\".localeCompare(\"a\", \"de\", { sensitivity: \"base\" })); // 0\n\n// in Swedish, ä and a are separate base letters\nconsole.log(\"ä\".localeCompare(\"a\", \"sv\", { sensitivity: \"base\" })); // a positive value\n```\n\n### Numeric sorting\n\n```js\n// by default, \"2\" > \"10\"\nconsole.log(\"2\".localeCompare(\"10\")); // 1\n\n// numeric using options:\nconsole.log(\"2\".localeCompare(\"10\", undefined, { numeric: true })); // -1\n\n// numeric using locales tag:\nconsole.log(\"2\".localeCompare(\"10\", \"en-u-kn-true\")); // -1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`Intl.Collator`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator)\n"
    },
    "match": {
      "index.md": "---\ntitle: String.prototype.match()\nslug: Web/JavaScript/Reference/Global_Objects/String/match\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.match\n---\n\n{{JSRef}}\n\nThe **`match()`** method of {{jsxref(\"String\")}} values retrieves the result of matching this string against a [regular expression](/en-US/docs/Web/JavaScript/Guide/Regular_expressions).\n\n{{EmbedInteractiveExample(\"pages/js/string-match.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nmatch(regexp)\n```\n\n### Parameters\n\n- `regexp`\n\n  - : A regular expression object, or any object that has a [`Symbol.match`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match) method.\n\n    If `regexp` is not a `RegExp` object and does not have a `Symbol.match` method, it is implicitly converted to a {{jsxref(\"RegExp\")}} by using `new RegExp(regexp)`.\n\n    If you don't give any parameter and use the `match()` method directly, you will get an {{jsxref(\"Array\")}} with an empty string: `[\"\"]`, because this is equivalent to `match(/(?:)/)`.\n\n### Return value\n\nAn {{jsxref(\"Array\")}} whose contents depend on the presence or absence of the global (`g`) flag, or [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null) if no matches are found.\n\n- If the `g` flag is used, all results matching the complete regular expression will be returned, but capturing groups are not included.\n- If the `g` flag is not used, only the first complete match and its related capturing groups are returned. In this case, `match()` will return the same result as {{jsxref(\"RegExp.prototype.exec()\")}} (an array with some extra properties).\n\n## Description\n\nThe implementation of `String.prototype.match` itself is very simple — it simply calls the `Symbol.match` method of the argument with the string as the first parameter. The actual implementation comes from [`RegExp.prototype[@@match]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match).\n\n- If you need to know if a string matches a regular expression {{jsxref(\"RegExp\")}}, use {{jsxref(\"RegExp.prototype.test()\")}}.\n- If you only want the first match found, you might want to use {{jsxref(\"RegExp.prototype.exec()\")}} instead.\n- If you want to obtain capture groups and the global flag is set, you need to use {{jsxref(\"RegExp.prototype.exec()\")}} or {{jsxref(\"String.prototype.matchAll()\")}} instead.\n\nFor more information about the semantics of `match()` when a regex is passed, see [`RegExp.prototype[@@match]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match).\n\n## Examples\n\n### Using match()\n\nIn the following example, `match()` is used to find `\"Chapter\"` followed by one or more numeric characters followed by a decimal point and numeric character zero or more times.\n\nThe regular expression includes the `i` flag so that upper/lower case differences will be ignored.\n\n```js\nconst str = \"For more information, see Chapter 3.4.5.1\";\nconst re = /see (chapter \\d+(\\.\\d)*)/i;\nconst found = str.match(re);\n\nconsole.log(found);\n// [\n//   'see Chapter 3.4.5.1',\n//   'Chapter 3.4.5.1',\n//   '.1',\n//   index: 22,\n//   input: 'For more information, see Chapter 3.4.5.1',\n//   groups: undefined\n// ]\n```\n\nIn the match result above, `'see Chapter 3.4.5.1'` is the whole match. `'Chapter 3.4.5.1'` was captured by `(chapter \\d+(\\.\\d)*)`. `'.1'` was the last value captured by `(\\.\\d)`. The `index` property (`22`) is the zero-based index of the whole match. The `input` property is the original string that was parsed.\n\n### Using global and ignoreCase flags with match()\n\nThe following example demonstrates the use of the global flag and ignore-case flag with `match()`. All letters `A` through `E` and `a` through `e` are returned, each its own element in the array.\n\n```js\nconst str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nconst regexp = /[A-E]/gi;\nconst matches = str.match(regexp);\n\nconsole.log(matches);\n// ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']\n```\n\n> **Note:** See also {{jsxref(\"String.prototype.matchAll()\")}} and [Advanced searching with flags](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags).\n\n### Using named capturing groups\n\nIn browsers which support named capturing groups, the following code captures `\"fox\"` or `\"cat\"` into a group named `animal`:\n\n```js\nconst paragraph = \"The quick brown fox jumps over the lazy dog. It barked.\";\n\nconst capturingRegex = /(?<animal>fox|cat) jumps over/;\nconst found = paragraph.match(capturingRegex);\nconsole.log(found.groups); // {animal: \"fox\"}\n```\n\n### Using match() with no parameter\n\n```js\nconst str = \"Nothing will come of nothing.\";\n\nstr.match(); // returns [\"\"]\n```\n\n### Using match() with a non-RegExp implementing @@match\n\nIf an object has a `Symbol.match` method, it can be used as a custom matcher. The return value of `Symbol.match` becomes the return value of `match()`.\n\n```js\nconst str = \"Hmm, this is interesting.\";\n\nstr.match({\n  [Symbol.match](str) {\n    return [\"Yes, it's interesting.\"];\n  },\n}); // returns [\"Yes, it's interesting.\"]\n```\n\n### A non-RegExp as the parameter\n\nWhen the `regexp` parameter is a string or a number, it is implicitly converted to a {{jsxref(\"RegExp\")}} by using `new RegExp(regexp)`.\n\n```js\nconst str1 =\n  \"NaN means not a number. Infinity contains -Infinity and +Infinity in JavaScript.\";\nconst str2 =\n  \"My grandfather is 65 years old and My grandmother is 63 years old.\";\nconst str3 = \"The contract was declared null and void.\";\nstr1.match(\"number\"); // \"number\" is a string. returns [\"number\"]\nstr1.match(NaN); // the type of NaN is the number. returns [\"NaN\"]\nstr1.match(Infinity); // the type of Infinity is the number. returns [\"Infinity\"]\nstr1.match(+Infinity); // returns [\"Infinity\"]\nstr1.match(-Infinity); // returns [\"-Infinity\"]\nstr2.match(65); // returns [\"65\"]\nstr2.match(+65); // A number with a positive sign. returns [\"65\"]\nstr3.match(null); // returns [\"null\"]\n```\n\nThis may have unexpected results if special characters are not properly escaped.\n\n```js\nconsole.log(\"123\".match(\"1.3\")); // [ \"123\" ]\n```\n\nThis is a match because `.` in a regex matches any character. In order to make it only match specifically a dot character, you need to escape the input.\n\n```js\nconsole.log(\"123\".match(\"1\\\\.3\")); // null\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.match` in `core-js` with fixes and implementation of modern behavior like `Symbol.match` support](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.matchAll()\")}}\n- {{jsxref(\"RegExp\")}}\n- {{jsxref(\"RegExp.prototype.exec()\")}}\n- {{jsxref(\"RegExp.prototype.test()\")}}\n"
    },
    "matchall": {
      "index.md": "---\ntitle: String.prototype.matchAll()\nslug: Web/JavaScript/Reference/Global_Objects/String/matchAll\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.matchAll\n---\n\n{{JSRef}}\n\nThe **`matchAll()`** method of {{jsxref(\"String\")}} values returns an iterator of all results matching this string against a [regular expression](/en-US/docs/Web/JavaScript/Guide/Regular_expressions), including [capturing groups](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences).\n\n{{EmbedInteractiveExample(\"pages/js/string-matchall.html\")}}\n\n## Syntax\n\n```js-nolint\nmatchAll(regexp)\n```\n\n### Parameters\n\n- `regexp`\n\n  - : A regular expression object, or any object that has a [`Symbol.matchAll`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll) method.\n\n    If `regexp` is not a `RegExp` object and does not have a `Symbol.matchAll` method, it is implicitly converted to a {{jsxref(\"RegExp\")}} by using `new RegExp(regexp, 'g')`.\n\n    If `regexp` [is a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes), then it must have the global (`g`) flag set, or a {{jsxref(\"TypeError\")}} is thrown.\n\n### Return value\n\nAn [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) (which is not restartable) of matches or an empty iterator if no matches are found. Each value yielded by the iterator is an array with the same shape as the return value of {{jsxref(\"RegExp.prototype.exec()\")}}.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if the `regexp` [is a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes) that does not have the global (`g`) flag set (its [`flags`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags) property does not contain `\"g\"`).\n\n## Description\n\nThe implementation of `String.prototype.matchAll` itself is very simple — it simply calls the `Symbol.matchAll` method of the argument with the string as the first parameter (apart from the extra input validation that the regex is global). The actual implementation comes from [`RegExp.prototype[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll).\n\n## Examples\n\n### Regexp.prototype.exec() and matchAll()\n\nWithout `matchAll()`, it's possible to use calls to [`regexp.exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) (and regexes with the `g` flag) in a loop to obtain all the matches:\n\n```js\nconst regexp = /foo[a-z]*/g;\nconst str = \"table football, foosball\";\nlet match;\n\nwhile ((match = regexp.exec(str)) !== null) {\n  console.log(\n    `Found ${match[0]} start=${match.index} end=${regexp.lastIndex}.`,\n  );\n}\n// Found football start=6 end=14.\n// Found foosball start=16 end=24.\n```\n\nWith `matchAll()` available, you can avoid the {{jsxref(\"Statements/while\", \"while\")}} loop and `exec` with `g`. Instead, you get an iterator to use with the more convenient {{jsxref(\"Statements/for...of\", \"for...of\")}}, [array spreading](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax), or {{jsxref(\"Array.from()\")}} constructs:\n\n```js\nconst regexp = /foo[a-z]*/g;\nconst str = \"table football, foosball\";\nconst matches = str.matchAll(regexp);\n\nfor (const match of matches) {\n  console.log(\n    `Found ${match[0]} start=${match.index} end=${\n      match.index + match[0].length\n    }.`,\n  );\n}\n// Found football start=6 end=14.\n// Found foosball start=16 end=24.\n\n// matches iterator is exhausted after the for...of iteration\n// Call matchAll again to create a new iterator\nArray.from(str.matchAll(regexp), (m) => m[0]);\n// [ \"football\", \"foosball\" ]\n```\n\n`matchAll` will throw an exception if the `g` flag is missing.\n\n```js\nconst regexp = /[a-c]/;\nconst str = \"abc\";\nstr.matchAll(regexp);\n// TypeError\n```\n\n`matchAll` internally makes a clone of the `regexp` — so, unlike {{jsxref(\"RegExp/exec\", \"regexp.exec()\")}}, `lastIndex` does not change as the string is scanned.\n\n```js\nconst regexp = /[a-c]/g;\nregexp.lastIndex = 1;\nconst str = \"abc\";\nArray.from(str.matchAll(regexp), (m) => `${regexp.lastIndex} ${m[0]}`);\n// [ \"1 b\", \"1 c\" ]\n```\n\nHowever, this means that unlike using [`regexp.exec()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) in a loop, you can't mutate `lastIndex` to make the regex advance or rewind.\n\n### Better access to capturing groups (than String.prototype.match())\n\nAnother compelling reason for `matchAll` is the improved access to capture groups.\n\nCapture groups are ignored when using {{jsxref(\"String/match\", \"match()\")}} with the global `g` flag:\n\n```js\nconst regexp = /t(e)(st(\\d?))/g;\nconst str = \"test1test2\";\n\nstr.match(regexp); // ['test1', 'test2']\n```\n\nUsing `matchAll`, you can access capture groups easily:\n\n```js\nconst array = [...str.matchAll(regexp)];\n\narray[0];\n// ['test1', 'e', 'st1', '1', index: 0, input: 'test1test2', length: 4]\narray[1];\n// ['test2', 'e', 'st2', '2', index: 5, input: 'test1test2', length: 4]\n```\n\n### Using matchAll() with a non-RegExp implementing @@matchAll\n\nIf an object has a `Symbol.matchAll` method, it can be used as a custom matcher. The return value of `Symbol.matchAll` becomes the return value of `matchAll()`.\n\n```js\nconst str = \"Hmm, this is interesting.\";\n\nstr.matchAll({\n  [Symbol.matchAll](str) {\n    return [[\"Yes, it's interesting.\"]];\n  },\n}); // returns [[\"Yes, it's interesting.\"]]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.matchAll` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.match()\")}}\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) guide\n- [Groups and backreferences](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) guide\n- {{jsxref(\"RegExp\")}}\n- {{jsxref(\"RegExp.prototype.exec()\")}}\n- {{jsxref(\"RegExp.prototype.test()\")}}\n- [`RegExp.prototype[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)\n"
    },
    "normalize": {
      "index.md": "---\ntitle: String.prototype.normalize()\nslug: Web/JavaScript/Reference/Global_Objects/String/normalize\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.normalize\n---\n\n{{JSRef}}\n\nThe **`normalize()`** method of {{jsxref(\"String\")}} values returns the Unicode Normalization\nForm of this string.\n\n{{EmbedInteractiveExample(\"pages/js/string-normalize.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nnormalize()\nnormalize(form)\n```\n\n### Parameters\n\n- `form` {{optional_inline}}\n\n  - : One of `\"NFC\"`, `\"NFD\"`, `\"NFKC\"`, or\n    `\"NFKD\"`, specifying the Unicode Normalization Form. If omitted or\n    {{jsxref(\"undefined\")}}, `\"NFC\"` is used.\n\n    These values have the following meanings:\n\n    - `\"NFC\"`\n      - : Canonical Decomposition, followed by Canonical Composition.\n    - `\"NFD\"`\n      - : Canonical Decomposition.\n    - `\"NFKC\"`\n      - : Compatibility Decomposition, followed by Canonical Composition.\n    - `\"NFKD\"`\n      - : Compatibility Decomposition.\n\n### Return value\n\nA string containing the Unicode Normalization Form of the given string.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `form` isn't one of the values\n    specified above.\n\n## Description\n\nUnicode assigns a unique numerical value, called a _code point_, to each\ncharacter. For example, the code point for `\"A\"` is given as U+0041. However,\nsometimes more than one code point, or sequence of code points, can represent the same\nabstract character — the character `\"ñ\"` for example can be represented by\neither of:\n\n- The single code point U+00F1.\n- The code point for `\"n\"` (U+006E) followed by the code point for the\n  combining tilde (U+0303).\n\n```js\nconst string1 = \"\\u00F1\";\nconst string2 = \"\\u006E\\u0303\";\n\nconsole.log(string1); // ñ\nconsole.log(string2); // ñ\n```\n\nHowever, since the code points are different, string comparison will not treat them as\nequal. And since the number of code points in each version is different, they even have\ndifferent lengths.\n\n```js\nconst string1 = \"\\u00F1\"; // ñ\nconst string2 = \"\\u006E\\u0303\"; // ñ\n\nconsole.log(string1 === string2); // false\nconsole.log(string1.length); // 1\nconsole.log(string2.length); // 2\n```\n\nThe `normalize()` method helps solve this problem by converting a string\ninto a normalized form common for all sequences of code points that represent the same\ncharacters. There are two main normalization forms, one based on **canonical\nequivalence** and the other based on **compatibility**.\n\n### Canonical equivalence normalization\n\nIn Unicode, two sequences of code points have canonical equivalence if they represent\nthe same abstract characters, and should always have the same visual appearance and\nbehavior (for example, they should always be sorted in the same way).\n\nYou can use `normalize()` using the `\"NFD\"` or `\"NFC\"`\narguments to produce a form of the string that will be the same for all canonically\nequivalent strings. In the example below we normalize two representations of the\ncharacter `\"ñ\"`:\n\n```js\nlet string1 = \"\\u00F1\"; // ñ\nlet string2 = \"\\u006E\\u0303\"; // ñ\n\nstring1 = string1.normalize(\"NFD\");\nstring2 = string2.normalize(\"NFD\");\n\nconsole.log(string1 === string2); // true\nconsole.log(string1.length); // 2\nconsole.log(string2.length); // 2\n```\n\n#### Composed and decomposed forms\n\nNote that the length of the normalized form under `\"NFD\"` is\n`2`. That's because `\"NFD\"` gives you the\n**decomposed** version of the canonical form, in which single code points\nare split into multiple combining ones. The decomposed canonical form for\n`\"ñ\"` is `\"\\u006E\\u0303\"`.\n\nYou can specify `\"NFC\"` to get the **composed** canonical form,\nin which multiple code points are replaced with single code points where possible. The\ncomposed canonical form for `\"ñ\"` is `\"\\u00F1\"`:\n\n```js\nlet string1 = \"\\u00F1\"; // ñ\nlet string2 = \"\\u006E\\u0303\"; // ñ\n\nstring1 = string1.normalize(\"NFC\");\nstring2 = string2.normalize(\"NFC\");\n\nconsole.log(string1 === string2); // true\nconsole.log(string1.length); // 1\nconsole.log(string2.length); // 1\nconsole.log(string2.codePointAt(0).toString(16)); // f1\n```\n\n### Compatibility normalization\n\nIn Unicode, two sequences of code points are compatible if they represent the same\nabstract characters, and should be treated alike in some — but not necessarily all —\napplications.\n\nAll canonically equivalent sequences are also compatible, but not vice versa.\n\nFor example:\n\n- the code point U+FB00 represents the [ligature](/en-US/docs/Glossary/Ligature) `\"ﬀ\"`. It is compatible\n  with two consecutive U+0066 code points (`\"ff\"`).\n- the code point U+24B9 represents the symbol\n  `\"Ⓓ\"`.\n  It is compatible with the U+0044 code point (`\"D\"`).\n\nIn some respects (such as sorting) they should be treated as equivalent—and in some\n(such as visual appearance) they should not, so they are not canonically equivalent.\n\nYou can use `normalize()` using the `\"NFKD\"` or\n`\"NFKC\"` arguments to produce a form of the string that will be the same for\nall compatible strings:\n\n```js\nlet string1 = \"\\uFB00\";\nlet string2 = \"\\u0066\\u0066\";\n\nconsole.log(string1); // ﬀ\nconsole.log(string2); // ff\nconsole.log(string1 === string2); // false\nconsole.log(string1.length); // 1\nconsole.log(string2.length); // 2\n\nstring1 = string1.normalize(\"NFKD\");\nstring2 = string2.normalize(\"NFKD\");\n\nconsole.log(string1); // ff <- visual appearance changed\nconsole.log(string2); // ff\nconsole.log(string1 === string2); // true\nconsole.log(string1.length); // 2\nconsole.log(string2.length); // 2\n```\n\nWhen applying compatibility normalization it's important to consider what you intend to\ndo with the strings, since the normalized form may not be appropriate for all\napplications. In the example above the normalization is appropriate for search, because\nit enables a user to find the string by searching for `\"f\"`. But it may not\nbe appropriate for display, because the visual representation is different.\n\nAs with canonical normalization, you can ask for decomposed or composed compatible\nforms by passing `\"NFKD\"` or `\"NFKC\"`, respectively.\n\n## Examples\n\n### Using normalize()\n\n```js\n// Initial string\n\n// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE\n// U+0323: COMBINING DOT BELOW\nconst str = \"\\u1E9B\\u0323\";\n\n// Canonically-composed form (NFC)\n\n// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE\n// U+0323: COMBINING DOT BELOW\nstr.normalize(\"NFC\"); // '\\u1E9B\\u0323'\nstr.normalize(); // same as above\n\n// Canonically-decomposed form (NFD)\n\n// U+017F: LATIN SMALL LETTER LONG S\n// U+0323: COMBINING DOT BELOW\n// U+0307: COMBINING DOT ABOVE\nstr.normalize(\"NFD\"); // '\\u017F\\u0323\\u0307'\n\n// Compatibly-composed (NFKC)\n\n// U+1E69: LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE\nstr.normalize(\"NFKC\"); // '\\u1E69'\n\n// Compatibly-decomposed (NFKD)\n\n// U+0073: LATIN SMALL LETTER S\n// U+0323: COMBINING DOT BELOW\n// U+0307: COMBINING DOT ABOVE\nstr.normalize(\"NFKD\"); // '\\u0073\\u0323\\u0307'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Unicode Standard Annex #15, Unicode Normalization Forms](https://www.unicode.org/reports/tr15/)\n- [Unicode equivalence](https://en.wikipedia.org/wiki/Unicode_equivalence) on Wikipedia\n"
    },
    "padend": {
      "index.md": "---\ntitle: String.prototype.padEnd()\nslug: Web/JavaScript/Reference/Global_Objects/String/padEnd\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.padEnd\n---\n\n{{JSRef}}\n\nThe **`padEnd()`** method of {{jsxref(\"String\")}} values pads this string with a given\nstring (repeated, if needed) so that the resulting string reaches a given length. The\npadding is applied from the end of this string.\n\n{{EmbedInteractiveExample(\"pages/js/string-padend.html\")}}\n\n## Syntax\n\n```js-nolint\npadEnd(targetLength)\npadEnd(targetLength, padString)\n```\n\n### Parameters\n\n- `targetLength`\n  - : The length of the resulting string once the current `str` has\n    been padded. If the value is less than or equal to `str.length`, the\n    current string will be returned as-is.\n- `padString` {{optional_inline}}\n  - : The string to pad the current `str` with. If\n    `padString` is too long to stay within\n    `targetLength`, it will be truncated: for left-to-right\n    languages the left-most part and for right-to-left languages the right-most will be\n    applied. The default value for this parameter is \" \"\n    (`U+0020`).\n\n### Return value\n\nA {{jsxref(\"String\")}} of the specified `targetLength` with the\n`padString` applied at the end of the current\n`str`.\n\n## Examples\n\n### Using padEnd\n\n```js\n\"abc\".padEnd(10); // \"abc       \"\n\"abc\".padEnd(10, \"foo\"); // \"abcfoofoof\"\n\"abc\".padEnd(6, \"123456\"); // \"abc123\"\n\"abc\".padEnd(1); // \"abc\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.padEnd` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.padStart()\")}}\n"
    },
    "padstart": {
      "index.md": "---\ntitle: String.prototype.padStart()\nslug: Web/JavaScript/Reference/Global_Objects/String/padStart\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.padStart\n---\n\n{{JSRef}}\n\nThe **`padStart()`** method of {{jsxref(\"String\")}} values pads this string with another string (multiple times, if needed) until the resulting\nstring reaches the given length. The padding is applied from the start of this string.\n\n{{EmbedInteractiveExample(\"pages/js/string-padstart.html\")}}\n\n## Syntax\n\n```js-nolint\npadStart(targetLength)\npadStart(targetLength, padString)\n```\n\n### Parameters\n\n- `targetLength`\n  - : The length of the resulting string once the current `str` has\n    been padded. If the value is less than or equal to `str.length`, then\n    `str` is returned as-is.\n- `padString` {{optional_inline}}\n  - : The string to pad the current `str` with. If\n    `padString` is too long to stay within the\n    `targetLength`, it will be truncated from the end.\n    The default value is the unicode \"space\" character (U+0020).\n\n### Return value\n\nA {{jsxref(\"String\")}} of the specified `targetLength` with\n`padString` applied from the start.\n\n## Examples\n\n### Basic examples\n\n```js\n\"abc\".padStart(10); // \"       abc\"\n\"abc\".padStart(10, \"foo\"); // \"foofoofabc\"\n\"abc\".padStart(6, \"123465\"); // \"123abc\"\n\"abc\".padStart(8, \"0\"); // \"00000abc\"\n\"abc\".padStart(1); // \"abc\"\n```\n\n### Fixed width string number conversion\n\n```js\n// JavaScript version of: (unsigned)\n// printf \"%0*d\" width num\nfunction leftFillNum(num, targetLength) {\n  return num.toString().padStart(targetLength, \"0\");\n}\n\nconst num = 123;\nconsole.log(leftFillNum(num, 5)); // \"00123\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.padStart` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.padEnd()\")}}\n"
    },
    "raw": {
      "index.md": "---\ntitle: String.raw()\nslug: Web/JavaScript/Reference/Global_Objects/String/raw\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.String.raw\n---\n\n{{JSRef}}\n\nThe **`String.raw()`** static method is a tag function of [template literals](/en-US/docs/Web/JavaScript/Reference/Template_literals). This is similar to the `r` prefix in Python, or the `@` prefix in C# for string literals. It's used to get the raw string form of template literals — that is, substitutions (e.g. `${foo}`) are processed, but escape sequences (e.g. `\\n`) are not.\n\n{{EmbedInteractiveExample(\"pages/js/string-raw.html\")}}\n\n## Syntax\n\n```js-nolint\nString.raw(strings)\nString.raw(strings, sub1)\nString.raw(strings, sub1, sub2)\nString.raw(strings, sub1, sub2, /* …, */ subN)\n\nString.raw`templateString`\n```\n\n### Parameters\n\n- `strings`\n  - : Well-formed template literal array object, like `{ raw: ['foo', 'bar', 'baz'] }`. Should be an object with a `raw` property whose value is an array-like object of strings.\n- `sub1`, …, `subN`\n  - : Contains substitution values.\n- `templateString`\n  - : A [template literal](/en-US/docs/Web/JavaScript/Reference/Template_literals), optionally with substitutions (`${...}`).\n\n### Return value\n\nThe raw string form of a given template literal.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if the first argument doesn't have a `raw` property, or the `raw` property is `undefined` or `null`.\n\n## Description\n\nIn most cases, `String.raw()` is used with template literals. The first syntax mentioned above is only rarely used, because the JavaScript engine will call this with proper arguments for you, (just like with other [tag functions](/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates)).\n\n`String.raw()` is the only built-in template literal tag. It has close semantics to an untagged literal since it concatenates all arguments and returns a string. You can even re-implement it with normal JavaScript code.\n\n> **Warning:** You should not use `String.raw` directly as an \"identity\" tag. See [Building an identity tag](#building_an_identity_tag) for how to implement this.\n\nIf `String.raw()` is called with an object whose `raw` property doesn't have a `length` property or a non-positive `length`, it returns an empty string `\"\"`. If `substitutions.length < strings.raw.length - 1` (i.e. there are not enough substitutions to fill the placeholders — which can't happen in a well-formed tagged template literal), the rest of the placeholders are filled with empty strings.\n\n## Examples\n\n### Using String.raw()\n\n```js\nString.raw`Hi\\n${2 + 3}!`;\n// 'Hi\\\\n5!', the character after 'Hi'\n// is not a newline character,\n// '\\' and 'n' are two characters.\n\nString.raw`Hi\\u000A!`;\n// 'Hi\\\\u000A!', same here, this time we will get the\n// \\, u, 0, 0, 0, A, 6 characters.\n// All kinds of escape characters will be ineffective\n// and backslashes will be present in the output string.\n// You can confirm this by checking the .length property\n// of the string.\n\nconst name = \"Bob\";\nString.raw`Hi\\n${name}!`;\n// 'Hi\\\\nBob!', substitutions are processed.\n\nString.raw`Hi \\${name}!`;\n// 'Hi \\\\${name}!', the dollar sign is escaped; there's no interpolation.\n```\n\n### Building an identity tag\n\nMany tools give special treatment to literals tagged by a particular name.\n\n```js-nolint\n// Some formatters will format this literal's content as HTML\nconst doc = html`<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <title>Hello</title>\n  </head>\n  <body>\n    <h1>Hello world!</h1>\n  </body>\n</html>\n`;\n```\n\nOne might naïvely implement the `html` tag as:\n\n```js\nconst html = String.raw;\n```\n\nThis, in fact, works for the case above. However, because `String.raw` would concatenate the _raw_ string literals instead of the \"cooked\" ones, escape sequences would not be processed.\n\n```js-nolint\nconst doc = html`<canvas>\\n</canvas>`;\n// \"<canvas>\\\\n</canvas>\"\n```\n\nThis may not be what you want for a \"true identity\" tag, where the tag is purely for markup and doesn't change the literal's value. In this case, you can create a custom tag and pass the \"cooked\" (i.e. escape sequences are processed) literal array to `String.raw`, pretending they are raw strings.\n\n```js-nolint\nconst html = (strings, ...values) => String.raw({ raw: strings }, ...values);\n// Some formatters will format this literal's content as HTML\nconst doc = html`<canvas>\\n</canvas>`;\n// \"<canvas>\\n</canvas>\"; the \"\\n\" becomes a line break\n```\n\nNotice the first argument is an object with a `raw` property, whose value is an array-like object (with a `length` property and integer indexes) representing the separated strings in the template literal. The rest of the arguments are the substitutions. Since the `raw` value can be any array-like object, it can even be a string! For example, `'test'` is treated as `['t', 'e', 's', 't']`. The following is equivalent to `` `t${0}e${1}s${2}t` ``:\n\n```js\nString.raw({ raw: \"test\" }, 0, 1, 2); // 't0e1s2t'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.raw` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [Template literals](/en-US/docs/Web/JavaScript/Reference/Template_literals)\n- {{jsxref(\"String\")}}\n- [Lexical grammar](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar)\n"
    },
    "repeat": {
      "index.md": "---\ntitle: String.prototype.repeat()\nslug: Web/JavaScript/Reference/Global_Objects/String/repeat\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.repeat\n---\n\n{{JSRef}}\n\nThe **`repeat()`** method of {{jsxref(\"String\")}} values constructs and returns a new string\nwhich contains the specified number of copies of this string, concatenated together.\n\n{{EmbedInteractiveExample(\"pages/js/string-repeat.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nrepeat(count)\n```\n\n### Parameters\n\n- `count`\n  - : An integer between `0` and\n    {{jsxref(\"Number/POSITIVE_INFINITY\", \"+Infinity\")}}, indicating the\n    number of times to repeat the string.\n\n### Return value\n\nA new string containing the specified number of copies of the given string.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `count` is negative or if `count` overflows maximum string length.\n\n## Examples\n\n### Using repeat()\n\n```js\n\"abc\".repeat(-1); // RangeError\n\"abc\".repeat(0); // ''\n\"abc\".repeat(1); // 'abc'\n\"abc\".repeat(2); // 'abcabc'\n\"abc\".repeat(3.5); // 'abcabcabc' (count will be converted to integer)\n\"abc\".repeat(1 / 0); // RangeError\n\n({ toString: () => \"abc\", repeat: String.prototype.repeat }).repeat(2);\n// 'abcabc' (repeat() is a generic method)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.repeat` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.concat()\")}}\n"
    },
    "replace": {
      "index.md": "---\ntitle: String.prototype.replace()\nslug: Web/JavaScript/Reference/Global_Objects/String/replace\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.replace\n---\n\n{{JSRef}}\n\nThe **`replace()`** method of {{jsxref(\"String\")}} values returns a new string with one, some, or all matches of a `pattern` replaced by a `replacement`. The `pattern` can be a string or a {{jsxref(\"RegExp\")}}, and the `replacement` can be a string or a function called for each match. If `pattern` is a string, only the first occurrence will be replaced. The original string is left unchanged.\n\n{{EmbedInteractiveExample(\"pages/js/string-replace.html\")}}\n\n## Syntax\n\n```js-nolint\nreplace(pattern, replacement)\n```\n\n### Parameters\n\n- `pattern`\n  - : Can be a string or an object with a [`Symbol.replace`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace) method — the typical example being a [regular expression](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp). Any value that doesn't have the `Symbol.replace` method will be coerced to a string.\n- `replacement`\n  - : Can be a string or a function.\n    - If it's a string, it will replace the substring matched by `pattern`. A number of special replacement patterns are supported; see the [Specifying a string as the replacement](#specifying_a_string_as_the_replacement) section below.\n    - If it's a function, it will be invoked for every match and its return value is used as the replacement text. The arguments supplied to this function are described in the [Specifying a function as the replacement](#specifying_a_function_as_the_replacement) section below.\n\n### Return value\n\nA new string, with one, some, or all matches of the pattern replaced by the specified replacement.\n\n## Description\n\nThis method does not mutate the string value it's called on. It returns a new string.\n\nA string pattern will only be replaced once. To perform a global search and replace, use a regular expression with the `g` flag, or use [`replaceAll()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) instead.\n\nIf `pattern` is an object with a [`Symbol.replace`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace) method (including `RegExp` objects), that method is called with the target string and `replacement` as arguments. Its return value becomes the return value of `replace()`. In this case the behavior of `replace()` is entirely encoded by the `@@replace` method — for example, any mention of \"capturing groups\" in the description below is actually functionality provided by [`RegExp.prototype[@@replace]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace).\n\nIf the `pattern` is an empty string, the replacement is prepended to the start of the string.\n\n```js\n\"xxx\".replace(\"\", \"_\"); // \"_xxx\"\n```\n\nA regexp with the `g` flag is the only case where `replace()` replaces more than once. For more information about how regex properties (especially the [sticky](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) flag) interact with `replace()`, see [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace).\n\n### Specifying a string as the replacement\n\nThe replacement string can include the following special replacement patterns:\n\n| Pattern   | Inserts                                                                                        |\n| --------- | ---------------------------------------------------------------------------------------------- |\n| `$$`      | Inserts a `\"$\"`.                                                                               |\n| `$&`      | Inserts the matched substring.                                                                 |\n| `` $` ``  | Inserts the portion of the string that precedes the matched substring.                         |\n| `$'`      | Inserts the portion of the string that follows the matched substring.                          |\n| `$n`      | Inserts the `n`th (`1`-indexed) capturing group where `n` is a positive integer less than 100. |\n| `$<Name>` | Inserts the named capturing group where `Name` is the group name.                              |\n\n`$n` and `$<Name>` are only available if the `pattern` argument is a {{jsxref(\"RegExp\")}} object. If the `pattern` is a string, or if the corresponding capturing group isn't present in the regex, then the pattern will be replaced as a literal. If the group is present but isn't matched (because it's part of a disjunction), it will be replaced with an empty string.\n\n```js\n\"foo\".replace(/(f)/, \"$2\");\n// \"$2oo\"; the regex doesn't have the second group\n\n\"foo\".replace(\"f\", \"$1\");\n// \"$1oo\"; the pattern is a string, so it doesn't have any groups\n\n\"foo\".replace(/(f)|(g)/, \"$2\");\n// \"oo\"; the second group exists but isn't matched\n```\n\n### Specifying a function as the replacement\n\nYou can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string.\n\n> **Note:** The above-mentioned special replacement patterns do _not_ apply for strings returned from the replacer function.\n\nThe function has the following signature:\n\n```js\nfunction replacer(match, p1, p2, /* …, */ pN, offset, string, groups) {\n  return replacement;\n}\n```\n\nThe arguments to the function are as follows:\n\n- `match`\n  - : The matched substring. (Corresponds to `$&` above.)\n- `p1, p2, …, pN`\n  - : The `n`th string found by a capture group (including named capturing groups), provided the first argument to `replace()` is a {{jsxref(\"RegExp\")}} object. (Corresponds to `$1`, `$2`, etc. above.) For example, if the `pattern` is `/(\\a+)(\\b+)/`, then `p1` is the match for `\\a+`, and `p2` is the match for `\\b+`. If the group is part of a disjunction (e.g. `\"abc\".replace(/(a)|(b)/, replacer)`), the unmatched alternative will be `undefined`.\n- `offset`\n  - : The offset of the matched substring within the whole string being examined. For example, if the whole string was `'abcd'`, and the matched substring was `'bc'`, then this argument will be `1`.\n- `string`\n  - : The whole string being examined.\n- `groups`\n  - : An object whose keys are the used group names, and whose values are the matched portions (`undefined` if not matched). Only present if the `pattern` contains at least one named capturing group.\n\nThe exact number of arguments depends on whether the first argument is a {{jsxref(\"RegExp\")}} object — and, if so, how many capture groups it has.\n\nThe following example will set `newString` to `'abc - 12345 - #$*%'`:\n\n```js\nfunction replacer(match, p1, p2, p3, offset, string) {\n  // p1 is non-digits, p2 digits, and p3 non-alphanumerics\n  return [p1, p2, p3].join(\" - \");\n}\nconst newString = \"abc12345#$*%\".replace(/([^\\d]*)(\\d*)([^\\w]*)/, replacer);\nconsole.log(newString); // abc - 12345 - #$*%\n```\n\nThe function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global.\n\n## Examples\n\n### Defining the regular expression in replace()\n\nIn the following example, the regular expression is defined in `replace()` and includes the ignore case flag.\n\n```js\nconst str = \"Twas the night before Xmas...\";\nconst newstr = str.replace(/xmas/i, \"Christmas\");\nconsole.log(newstr); // Twas the night before Christmas...\n```\n\nThis logs `'Twas the night before Christmas...'`.\n\n> **Note:** See [the regular expression guide](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) for more explanations about regular expressions.\n\n### Using the global and ignoreCase flags with replace()\n\nGlobal replace can only be done with a regular expression. In the following example, the regular expression includes the [global and ignore case flags](/en-US/docs/Web/JavaScript/Guide/Regular_expressions#advanced_searching_with_flags) which permits `replace()` to replace each occurrence of `'apples'` in the string with `'oranges'`.\n\n```js\nconst re = /apples/gi;\nconst str = \"Apples are round, and apples are juicy.\";\nconst newstr = str.replace(re, \"oranges\");\nconsole.log(newstr); // oranges are round, and oranges are juicy.\n```\n\nThis logs `'oranges are round, and oranges are juicy'`.\n\n### Switching words in a string\n\nThe following script switches the words in the string. For the replacement text, the script uses [capturing groups](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences) and the `$1` and `$2` replacement patterns.\n\n```js\nconst re = /(\\w+)\\s(\\w+)/;\nconst str = \"Maria Cruz\";\nconst newstr = str.replace(re, \"$2, $1\");\nconsole.log(newstr); // Cruz, Maria\n```\n\nThis logs `'Cruz, Maria'`.\n\n### Using an inline function that modifies the matched characters\n\nIn this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement.\n\nThe replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning.\n\n```js\nfunction styleHyphenFormat(propertyName) {\n  function upperToHyphenLower(match, offset, string) {\n    return (offset > 0 ? \"-\" : \"\") + match.toLowerCase();\n  }\n  return propertyName.replace(/[A-Z]/g, upperToHyphenLower);\n}\n```\n\nGiven `styleHyphenFormat('borderTop')`, this returns `'border-top'`.\n\nBecause we want to further transform the _result_ of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the [`toLowerCase()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) method. If we had tried to do this using the match without a function, the {{jsxref(\"String/toLowerCase\", \"toLowerCase()\")}} would have no effect.\n\n```js example-bad\n// Won't work\nconst newString = propertyName.replace(/[A-Z]/g, \"-\" + \"$&\".toLowerCase());\n```\n\nThis is because `'$&'.toLowerCase()` would first be evaluated as a string literal (resulting in the same `'$&'`) before using the characters as a pattern.\n\n### Replacing a Fahrenheit degree with its Celsius equivalent\n\nThe following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with `\"F\"`. The function returns the Celsius number ending with `\"C\"`. For example, if the input number is `\"212F\"`, the function returns `\"100C\"`. If the number is `\"0F\"`, the function returns `\"-17.77777777777778C\"`.\n\nThe regular expression `test` checks for any number that ends with `F`. The number of Fahrenheit degrees is accessible to the function through its second parameter, `p1`. The function sets the Celsius number based on the number of Fahrenheit degrees passed in a string to the `f2c()` function. `f2c()` then returns the Celsius number. This function approximates Perl's `s///e` flag.\n\n```js\nfunction f2c(x) {\n  function convert(str, p1, offset, s) {\n    return `${((p1 - 32) * 5) / 9}C`;\n  }\n  const s = String(x);\n  const test = /(-?\\d+(?:\\.\\d*)?)F\\b/g;\n  return s.replace(test, convert);\n}\n```\n\n### Making a generic replacer\n\nSuppose we want to create a replacer that appends the offset data to every matched string. Because the replacer function already receives the `offset` parameter, it will be trivial if the regex is statically known.\n\n```js\n\"abcd\".replace(/(bc)/, (match, p1, offset) => `${match} (${offset}) `);\n// \"abc (1) d\"\n```\n\nHowever, this replacer would be hard to generalize if we want it to work with any regex pattern. The replacer is _variadic_ — the number of arguments it receives depends on the number of capturing groups present. We can use [rest parameters](/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters), but it would also collect `offset`, `string`, etc. into the array. The fact that `groups` may or may not be passed depending on the identity of the regex would also make it hard to generically know which argument corresponds to the `offset`.\n\n```js example-bad\nfunction addOffset(match, ...args) {\n  const offset = args.at(-2);\n  return `${match} (${offset}) `;\n}\n\nconsole.log(\"abcd\".replace(/(bc)/, addOffset)); // \"abc (1) d\"\nconsole.log(\"abcd\".replace(/(?<group>bc)/, addOffset)); // \"abc (abcd) d\"\n```\n\nThe `addOffset` example above doesn't work when the regex contains a named group, because in this case `args.at(-2)` would be the `string` instead of the `offset`.\n\nInstead, you need to extract the last few arguments based on type, because `groups` is an object while `string` is a string.\n\n```js\nfunction addOffset(match, ...args) {\n  const hasNamedGroups = typeof args.at(-1) === \"object\";\n  const offset = hasNamedGroups ? args.at(-3) : args.at(-2);\n  return `${match} (${offset}) `;\n}\n\nconsole.log(\"abcd\".replace(/(bc)/, addOffset)); // \"abc (1) d\"\nconsole.log(\"abcd\".replace(/(?<group>bc)/, addOffset)); // \"abc (1) d\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.replace` in `core-js` with fixes and implementation of modern behavior like `Symbol.replace` support](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.replaceAll()\")}}\n- {{jsxref(\"String.prototype.match()\")}}\n- {{jsxref(\"RegExp.prototype.exec()\")}}\n- {{jsxref(\"RegExp.prototype.test()\")}}\n- [`Symbol.replace`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace)\n- [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)\n"
    },
    "replaceall": {
      "index.md": "---\ntitle: String.prototype.replaceAll()\nslug: Web/JavaScript/Reference/Global_Objects/String/replaceAll\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.replaceAll\n---\n\n{{JSRef}}\n\nThe **`replaceAll()`** method of {{jsxref(\"String\")}} values returns a new string with all matches of a `pattern` replaced by a `replacement`. The `pattern` can be a string or a {{jsxref(\"RegExp\")}}, and the `replacement` can be a string or a function to be called for each match. The original string is left unchanged.\n\n{{EmbedInteractiveExample(\"pages/js/string-replaceall.html\")}}\n\n## Syntax\n\n```js-nolint\nreplaceAll(pattern, replacement)\n```\n\n### Parameters\n\n- `pattern`\n\n  - : Can be a string or an object with a [`Symbol.replace`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace) method — the typical example being a [regular expression](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp). Any value that doesn't have the `Symbol.replace` method will be coerced to a string.\n\n    If `pattern` [is a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes), then it must have the global (`g`) flag set, or a {{jsxref(\"TypeError\")}} is thrown.\n\n- `replacement`\n  - : Can be a string or a function. The replacement has the same semantics as that of [`String.prototype.replace()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace).\n\n### Return value\n\nA new string, with all matches of a pattern replaced by a replacement.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if the `pattern` [is a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes) that does not have the global (`g`) flag set (its [`flags`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags) property does not contain `\"g\"`).\n\n## Description\n\nThis method does not mutate the string value it's called on. It returns a new string.\n\nUnlike [`replace()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace), this method would replace all occurrences of a string, not just the first one. This is especially useful if the string is not statically known, as calling the [`RegExp()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) constructor without escaping special characters may unintentionally change its semantics.\n\n```js\nfunction unsafeRedactName(text, name) {\n  return text.replace(new RegExp(name, \"g\"), \"[REDACTED]\");\n}\nfunction safeRedactName(text, name) {\n  return text.replaceAll(name, \"[REDACTED]\");\n}\n\nconst report =\n  \"A hacker called ha.*er used special characters in their name to breach the system.\";\n\nconsole.log(unsafeRedactName(report, \"ha.*er\")); // \"A [REDACTED]s in their name to breach the system.\"\nconsole.log(safeRedactName(report, \"ha.*er\")); // \"A hacker called [REDACTED] used special characters in their name to breach the system.\"\n```\n\nIf `pattern` is an object with a [`Symbol.replace`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace) method (including `RegExp` objects), that method is called with the target string and `replacement` as arguments. Its return value becomes the return value of `replaceAll()`. In this case the behavior of `replaceAll()` is entirely encoded by the `@@replace` method, and therefore will have the same result as `replace()` (apart from the extra input validation that the regex is global).\n\nIf the `pattern` is an empty string, the replacement will be inserted in between every UTF-16 code unit, similar to [`split()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) behavior.\n\n```js\n\"xxx\".replaceAll(\"\", \"_\"); // \"_x_x_x_\"\n```\n\nFor more information about how regex properties (especially the [sticky](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) flag) interact with `replaceAll()`, see [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace).\n\n## Examples\n\n### Using replaceAll()\n\n```js\n\"aabbcc\".replaceAll(\"b\", \".\");\n// 'aa..cc'\n```\n\n### Non-global regex throws\n\nWhen using a regular expression search value, it must be global. This won't work:\n\n```js example-bad\n\"aabbcc\".replaceAll(/b/, \".\");\n// TypeError: replaceAll must be called with a global RegExp\n```\n\nThis will work:\n\n```js example-good\n\"aabbcc\".replaceAll(/b/g, \".\");\n(\"aa..cc\");\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.replaceAll` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.replace()\")}}\n- {{jsxref(\"String.prototype.match()\")}}\n- {{jsxref(\"RegExp.prototype.exec()\")}}\n- {{jsxref(\"RegExp.prototype.test()\")}}\n"
    },
    "search": {
      "index.md": "---\ntitle: String.prototype.search()\nslug: Web/JavaScript/Reference/Global_Objects/String/search\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.search\n---\n\n{{JSRef}}\n\nThe **`search()`** method of {{jsxref(\"String\")}} values executes a search for a match between a regular expression and this string, returning the index of the first match in the string.\n\n{{EmbedInteractiveExample(\"pages/js/string-search.html\")}}\n\n## Syntax\n\n```js-nolint\nsearch(regexp)\n```\n\n### Parameters\n\n- `regexp`\n\n  - : A regular expression object, or any object that has a [`Symbol.search`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search) method.\n\n    If `regexp` is not a `RegExp` object and does not have a `Symbol.search` method, it is implicitly converted to a {{jsxref(\"RegExp\")}} by using `new RegExp(regexp)`.\n\n### Return value\n\nThe index of the first match between the regular expression and the given string, or `-1` if no match was found.\n\n## Description\n\nThe implementation of `String.prototype.search()` itself is very simple — it simply calls the `Symbol.search` method of the argument with the string as the first parameter. The actual implementation comes from [`RegExp.prototype[@@search]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search).\n\nThe `g` flag of `regexp` has no effect on the `search()` result, and the search always happens as if the regex's `lastIndex` is 0. For more information on the behavior of `search()`, see [`RegExp.prototype[@@search]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search).\n\nWhen you want to know whether a pattern is found, and _also_ know its index within a string, use `search()`.\n\n- If you only want to know if it exists, use the {{jsxref(\"RegExp.prototype.test()\")}} method, which returns a boolean.\n- If you need the content of the matched text, use {{jsxref(\"String.prototype.match()\")}} or {{jsxref(\"RegExp.prototype.exec()\")}}.\n\n## Examples\n\n### Using search()\n\nThe following example searches a string with two different regex objects to show a successful search (positive value) vs. an unsuccessful search (`-1`).\n\n```js\nconst str = \"hey JudE\";\nconst re = /[A-Z]/;\nconst reDot = /[.]/;\nconsole.log(str.search(re)); // returns 4, which is the index of the first capital letter \"J\"\nconsole.log(str.search(reDot)); // returns -1 cannot find '.' dot punctuation\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.search` in `core-js` with fixes and implementation of modern behavior like `Symbol.search` support](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) guide\n- {{jsxref(\"String.prototype.match()\")}}\n- {{jsxref(\"RegExp.prototype.exec()\")}}\n- [`RegExp.prototype[@@search]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search)\n"
    },
    "slice": {
      "index.md": "---\ntitle: String.prototype.slice()\nslug: Web/JavaScript/Reference/Global_Objects/String/slice\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.slice\n---\n\n{{JSRef}}\n\nThe **`slice()`** method of {{jsxref(\"String\")}} values extracts a section of this string and\nreturns it as a new string, without modifying the original string.\n\n{{EmbedInteractiveExample(\"pages/js/string-slice.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nslice(indexStart)\nslice(indexStart, indexEnd)\n```\n\n### Parameters\n\n- `indexStart`\n  - : The index of the first character to include in the returned substring.\n- `indexEnd` {{optional_inline}}\n  - : The index of the first character to exclude from the returned substring.\n\n### Return value\n\nA new string containing the extracted section of the string.\n\n## Description\n\n`slice()` extracts the text from one string and returns a new string. Changes to the text in one string do not affect the other string.\n\n`slice()` extracts up to but not including `indexEnd`. For example, `str.slice(4, 8)` extracts the fifth character through the eighth character (characters indexed `4`, `5`, `6`, and `7`):\n\n```plain\n              indexStart        indexEnd\n                  ↓               ↓\n| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n| T | h | e |   | m | i | r | r | o | r |\n\n                  m   i   r   r\n                 _______________\n                      ↑\n                    Result\n```\n\n- If `indexStart >= str.length`, an empty string is returned.\n- If `indexStart < 0`, the index is counted from the end of the string. More formally, in this case, the substring starts at `max(indexStart + str.length, 0)`.\n- If `indexStart` is omitted, undefined, or cannot be [converted to a number](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), it's treated as `0`.\n- If `indexEnd` is omitted, undefined, or cannot be [converted to a number](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_coercion), or if `indexEnd >= str.length`, `slice()` extracts to the end of the string.\n- If `indexEnd < 0`, the index is counted from the end of the string. More formally, in this case, the substring ends at `max(indexEnd + str.length, 0)`.\n- If `indexEnd <= indexStart` after normalizing negative values (i.e. `indexEnd` represents a character that's before `indexStart`), an empty string is returned.\n\n## Examples\n\n### Using slice() to create a new string\n\nThe following example uses `slice()` to create a new string.\n\n```js\nconst str1 = \"The morning is upon us.\"; // The length of str1 is 23.\nconst str2 = str1.slice(1, 8);\nconst str3 = str1.slice(4, -2);\nconst str4 = str1.slice(12);\nconst str5 = str1.slice(30);\nconsole.log(str2); // he morn\nconsole.log(str3); // morning is upon u\nconsole.log(str4); // is upon us.\nconsole.log(str5); // \"\"\n```\n\n### Using slice() with negative indexes\n\nThe following example uses `slice()` with negative indexes.\n\n```js\nconst str = \"The morning is upon us.\";\nstr.slice(-3); // 'us.'\nstr.slice(-3, -1); // 'us'\nstr.slice(0, -1); // 'The morning is upon us'\nstr.slice(4, -1); // 'morning is upon us'\n```\n\nThis example counts backwards from the end of the string by `11` to find the\nstart index and forwards from the start of the string by `16` to find the end\nindex.\n\n```js\nconsole.log(str.slice(-11, 16)); // \"is u\"\n```\n\nHere it counts forwards from the start by `11` to find the start index and\nbackwards from the end by `7` to find the end index.\n\n```js\nconsole.log(str.slice(11, -7)); // \" is u\"\n```\n\nThese arguments count backwards from the end by `5` to find the start index\nand backwards from the end by `1` to find the end index.\n\n```js\nconsole.log(str.slice(-5, -1)); // \"n us\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.substr()\")}}\n- {{jsxref(\"String.prototype.substring()\")}}\n- {{jsxref(\"Array.prototype.slice()\")}}\n"
    },
    "small": {
      "index.md": "---\ntitle: String.prototype.small()\nslug: Web/JavaScript/Reference/Global_Objects/String/small\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.small\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`small()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in a {{HTMLElement(\"small\")}} element (`<small>str</small>`), which causes this string to be displayed in a small font.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. Use [DOM APIs](/en-US/docs/Web/API/Document_Object_Model) such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement) instead.\n\n## Syntax\n\n```js-nolint\nsmall()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string beginning with a `<small>` start tag, then the text `str`, and then a `</small>` end tag.\n\n## Examples\n\n### Using small()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.small();\n```\n\nThis will create the following HTML:\n\n```html\n<small>Hello, world</small>\n```\n\nInstead of using `small()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement). For example:\n\n```js\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"small\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.small` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"small\")}}\n"
    },
    "split": {
      "index.md": "---\ntitle: String.prototype.split()\nslug: Web/JavaScript/Reference/Global_Objects/String/split\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.split\n---\n\n{{JSRef}}\n\nThe **`split()`** method of {{jsxref(\"String\")}} values takes a pattern and divides this string into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.\n\n{{EmbedInteractiveExample(\"pages/js/string-split.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nsplit(separator)\nsplit(separator, limit)\n```\n\n### Parameters\n\n- `separator`\n  - : The pattern describing where each split should occur. Can be `undefined`, a string, or an object with a [`Symbol.split`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split) method — the typical example being a {{jsxref(\"RegExp\", \"regular expression\", \"\", 1)}}. Omitting `separator` or passing `undefined` causes `split()` to return an array with the calling string as a single element. All values that are not `undefined` or objects with a `@@split` method are [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion).\n- `limit` {{optional_inline}}\n  - : A non-negative integer specifying a limit on the number of substrings to be included in the array. If provided, splits the string at each occurrence of the specified `separator`, but stops when `limit` entries have been placed in the array. Any leftover text is not included in the array at all.\n    - The array may contain fewer entries than `limit` if the end of the string is reached before the limit is reached.\n    - If `limit` is `0`, `[]` is returned.\n\n### Return value\n\nAn {{jsxref(\"Array\")}} of strings, split at each point where the `separator` occurs in the given string.\n\n## Description\n\nIf `separator` is a non-empty string, the target string is split by all matches of the `separator` without including `separator` in the results. For example, a string containing tab separated values (TSV) could be parsed by passing a tab character as the separator, like `myString.split(\"\\t\")`. If `separator` contains multiple characters, that entire character sequence must be found in order to split. If `separator` appears at the beginning (or end) of the string, it still has the effect of splitting, resulting in an empty (i.e. zero length) string appearing at the first (or last) position of the returned array. If `separator` does not occur in `str`, the returned array contains one element consisting of the entire string.\n\nIf `separator` is an empty string (`\"\"`), `str` is converted to an array of each of its UTF-16 \"characters\", without empty strings on either ends of the resulting string.\n\n> **Note:** `\"\".split(\"\")` is therefore the only way to produce an empty array when a string is passed as `separator` and `limit` is not `0`.\n\n> **Warning:** When the empty string (`\"\"`) is used as a separator, the string is **not** split by _user-perceived characters_ ([grapheme clusters](https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)) or unicode characters (code points), but by UTF-16 code units. This destroys [surrogate pairs](https://unicode.org/faq/utf_bom.html#utf16-2). See [\"How do you get a string to a character array in JavaScript?\" on StackOverflow](https://stackoverflow.com/questions/4547609/how-to-get-character-array-from-a-string/34717402#34717402).\n\nIf `separator` is a regexp that matches empty strings, whether the match is split by UTF-16 code units or Unicode code points depends on if the regex is [Unicode-aware](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode#unicode-aware_mode).\n\n```js\n\"😄😄\".split(/(?:)/); // [ \"\\ud83d\", \"\\ude04\", \"\\ud83d\", \"\\ude04\" ]\n\"😄😄\".split(/(?:)/u); // [ \"😄\", \"😄\" ]\n```\n\nIf `separator` is a regular expression with capturing groups, then each time `separator` matches, the captured groups (including any `undefined` results) are spliced into the output array. This behavior is specified by the regexp's [`Symbol.split`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split) method.\n\nIf `separator` is an object with a [`Symbol.split`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split) method, that method is called with the target string and `limit` as arguments, and `this` set to the object. Its return value becomes the return value of `split`.\n\nAny other value will be coerced to a string before being used as separator.\n\n## Examples\n\n### Using split()\n\nWhen the string is empty and a non-empty separator is specified, `split()` returns `[\"\"]`. If the string and separator are both empty strings, an empty array is returned.\n\n```js\nconst emptyString = \"\";\n\n// string is empty and separator is non-empty\nconsole.log(emptyString.split(\"a\"));\n// [\"\"]\n\n// string and separator are both empty strings\nconsole.log(emptyString.split(emptyString));\n// []\n```\n\nThe following example defines a function that splits a string into an array of strings\nusing `separator`. After splitting the string, the function logs\nmessages indicating the original string (before the split), the separator used, the\nnumber of elements in the array, and the individual array elements.\n\n```js\nfunction splitString(stringToSplit, separator) {\n  const arrayOfStrings = stringToSplit.split(separator);\n\n  console.log(\"The original string is:\", stringToSplit);\n  console.log(\"The separator is:\", separator);\n  console.log(\n    \"The array has\",\n    arrayOfStrings.length,\n    \"elements:\",\n    arrayOfStrings.join(\" / \"),\n  );\n}\n\nconst tempestString = \"Oh brave new world that has such people in it.\";\nconst monthString = \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\";\n\nconst space = \" \";\nconst comma = \",\";\n\nsplitString(tempestString, space);\nsplitString(tempestString);\nsplitString(monthString, comma);\n```\n\nThis example produces the following output:\n\n```plain\nThe original string is: \"Oh brave new world that has such people in it.\"\nThe separator is: \" \"\nThe array has 10 elements: Oh / brave / new / world / that / has / such / people / in / it.\n\nThe original string is: \"Oh brave new world that has such people in it.\"\nThe separator is: \"undefined\"\nThe array has 1 elements: Oh brave new world that has such people in it.\n\nThe original string is: \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\"\nThe separator is: \",\"\nThe array has 12 elements: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec\n```\n\n### Removing spaces from a string\n\nIn the following example, `split()` looks for zero or more spaces, followed\nby a semicolon, followed by zero or more spaces—and, when found, removes the spaces and\nthe semicolon from the string. `nameList` is the array returned as a result\nof `split()`.\n\n```js\nconst names = \"Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand \";\n\nconsole.log(names);\n\nconst re = /\\s*(?:;|$)\\s*/;\nconst nameList = names.split(re);\n\nconsole.log(nameList);\n```\n\nThis logs two lines; the first line logs the original string, and the second line logs\nthe resulting array.\n\n```plain\nHarry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand\n[ \"Harry Trump\", \"Fred Barney\", \"Helen Rigby\", \"Bill Abel\", \"Chris Hand\", \"\" ]\n```\n\n### Returning a limited number of splits\n\nIn the following example, `split()` looks for spaces in a string and returns\nthe first 3 splits that it finds.\n\n```js\nconst myString = \"Hello World. How are you doing?\";\nconst splits = myString.split(\" \", 3);\n\nconsole.log(splits); // [ \"Hello\", \"World.\", \"How\" ]\n```\n\n### Splitting with a `RegExp` to include parts of the separator in the result\n\nIf `separator` is a regular expression that contains capturing\nparentheses `( )`, matched results are included in the array.\n\n```js\nconst myString = \"Hello 1 word. Sentence number 2.\";\nconst splits = myString.split(/(\\d)/);\n\nconsole.log(splits);\n// [ \"Hello \", \"1\", \" word. Sentence number \", \"2\", \".\" ]\n```\n\n> **Note:** `\\d` matches the [character class](/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes) for digits between 0 and 9.\n\n### Using a custom splitter\n\nAn object with a `Symbol.split` method can be used as a splitter with custom behavior.\n\nThe following example splits a string using an internal state consisting of an incrementing number:\n\n```js\nconst splitByNumber = {\n  [Symbol.split](str) {\n    let num = 1;\n    let pos = 0;\n    const result = [];\n    while (pos < str.length) {\n      const matchPos = str.indexOf(num, pos);\n      if (matchPos === -1) {\n        result.push(str.substring(pos));\n        break;\n      }\n      result.push(str.substring(pos, matchPos));\n      pos = matchPos + String(num).length;\n      num++;\n    }\n    return result;\n  },\n};\n\nconst myString = \"a1bc2c5d3e4f\";\nconsole.log(myString.split(splitByNumber)); // [ \"a\", \"bc\", \"c5d\", \"e\", \"f\" ]\n```\n\nThe following example uses an internal state to enforce certain behavior, and to ensure a \"valid\" result is produced.\n\n```js\nconst DELIMITER = \";\";\n\n// Split the commands, but remove any invalid or unnecessary values.\nconst splitCommands = {\n  [Symbol.split](str, lim) {\n    const results = [];\n    const state = {\n      on: false,\n      brightness: {\n        current: 2,\n        min: 1,\n        max: 3,\n      },\n    };\n    let pos = 0;\n    let matchPos = str.indexOf(DELIMITER, pos);\n\n    while (matchPos !== -1) {\n      const subString = str.slice(pos, matchPos).trim();\n\n      switch (subString) {\n        case \"light on\":\n          // If the `on` state is already true, do nothing.\n          if (!state.on) {\n            state.on = true;\n            results.push(subString);\n          }\n          break;\n\n        case \"light off\":\n          // If the `on` state is already false, do nothing.\n          if (state.on) {\n            state.on = false;\n            results.push(subString);\n          }\n          break;\n\n        case \"brightness up\":\n          // Enforce a brightness maximum.\n          if (state.brightness.current < state.brightness.max) {\n            state.brightness.current += 1;\n            results.push(subString);\n          }\n          break;\n\n        case \"brightness down\":\n          // Enforce a brightness minimum.\n          if (state.brightness.current > state.brightness.min) {\n            state.brightness.current -= 1;\n            results.push(subString);\n          }\n          break;\n      }\n\n      if (results.length === lim) {\n        break;\n      }\n\n      pos = matchPos + DELIMITER.length;\n      matchPos = str.indexOf(DELIMITER, pos);\n    }\n\n    // If we broke early due to reaching the split `lim`, don't add the remaining commands.\n    if (results.length < lim) {\n      results.push(str.slice(pos).trim());\n    }\n\n    return results;\n  },\n};\n\nconst commands =\n  \"light on; brightness up; brightness up; brightness up; light on; brightness down; brightness down; light off\";\nconsole.log(commands.split(splitCommands, 3)); // [\"light on\", \"brightness up\", \"brightness down\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.split` in `core-js` with fixes and implementation of modern behavior like `Symbol.split` support](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.charAt()\")}}\n- {{jsxref(\"String.prototype.indexOf()\")}}\n- {{jsxref(\"String.prototype.lastIndexOf()\")}}\n- {{jsxref(\"Array.prototype.join()\")}}\n- [Regular expressions](/en-US/docs/Web/JavaScript/Guide/Regular_expressions) guide\n"
    },
    "startswith": {
      "index.md": "---\ntitle: String.prototype.startsWith()\nslug: Web/JavaScript/Reference/Global_Objects/String/startsWith\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.startsWith\n---\n\n{{JSRef}}\n\nThe **`startsWith()`** method of {{jsxref(\"String\")}} values determines whether this string begins with the characters of a specified string, returning `true` or `false` as appropriate.\n\n{{EmbedInteractiveExample(\"pages/js/string-startswith.html\")}}\n\n## Syntax\n\n```js-nolint\nstartsWith(searchString)\nstartsWith(searchString, position)\n```\n\n### Parameters\n\n- `searchString`\n  - : The characters to be searched for at the start of this string. Cannot [be a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes). All values that are not regexes are [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion), so omitting it or passing `undefined` causes `startsWith()` to search for the string `\"undefined\"`, which is rarely what you want.\n- `position` {{optional_inline}}\n  - : The start position at which `searchString` is expected to be found (the index of `searchString`'s first character). Defaults to `0`.\n\n### Return value\n\n**`true`** if the given characters are found at the beginning of the string, including when `searchString` is an empty string; otherwise, **`false`**.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `searchString` [is a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes).\n\n## Description\n\nThis method lets you determine whether or not a string begins with another string. This method is case-sensitive.\n\n## Examples\n\n### Using startsWith()\n\n```js\nconst str = \"To be, or not to be, that is the question.\";\n\nconsole.log(str.startsWith(\"To be\")); // true\nconsole.log(str.startsWith(\"not to be\")); // false\nconsole.log(str.startsWith(\"not to be\", 10)); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.startsWith` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.endsWith()\")}}\n- {{jsxref(\"String.prototype.includes()\")}}\n- {{jsxref(\"String.prototype.indexOf()\")}}\n- {{jsxref(\"String.prototype.lastIndexOf()\")}}\n"
    },
    "strike": {
      "index.md": "---\ntitle: String.prototype.strike()\nslug: Web/JavaScript/Reference/Global_Objects/String/strike\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.strike\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`strike()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in a {{HTMLElement(\"strike\")}} element (`<strike>str</strike>`), which causes this string to be displayed as struck-out text.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. For the case of `strike()`, the `<strike>` element itself has been removed from the HTML specification and shouldn't be used anymore. Web developers should use the {{HTMLElement(\"del\")}} for deleted content or the {{HTMLElement(\"s\")}} for content that is no longer accurate or no longer relevant instead.\n\n## Syntax\n\n```js-nolint\nstrike()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string beginning with a `<strike>` start tag, then the text `str`, and then a `</strike>` end tag.\n\n## Examples\n\n### Using strike()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.strike();\n```\n\nThis will create the following HTML:\n\n```html\n<strike>Hello, world</strike>\n```\n\n> **Warning:** This markup is invalid, because `strike` is no longer a valid element.\n\nInstead of using `strike()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement). For example:\n\n```js\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"s\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.strike` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"strike\")}}\n"
    },
    "string": {
      "index.md": "---\ntitle: String() constructor\nslug: Web/JavaScript/Reference/Global_Objects/String/String\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.String.String\n---\n\n{{JSRef}}\n\nThe **`String()`** constructor creates {{jsxref(\"String\")}} objects. When called as a function, it returns primitive values of type String.\n\n## Syntax\n\n```js-nolint\nnew String(thing)\nString(thing)\n```\n\n> **Note:** `String()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new), but with different effects. See [Return value](#return_value).\n\n### Parameters\n\n- `thing`\n  - : Anything to be converted to a string.\n\n### Return value\n\nWhen `String` is called as a constructor (with `new`), it creates a {{jsxref(\"String\")}} object, which is **not** a primitive.\n\nWhen `String` is called as a function, it coerces the parameter to a string primitive. [Symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) values would be converted to `\"Symbol(description)\"`, where `description` is the [description](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description) of the Symbol, instead of throwing.\n\n> **Warning:** You should rarely find yourself using `String` as a constructor.\n\n## Examples\n\n### String constructor and String function\n\nString function and String constructor produce different results:\n\n```js\nconst a = new String(\"Hello world\"); // a === \"Hello world\" is false\nconst b = String(\"Hello world\"); // b === \"Hello world\" is true\na instanceof String; // is true\nb instanceof String; // is false\ntypeof a; // \"object\"\ntypeof b; // \"string\"\n```\n\nHere, the function produces a string (the {{Glossary(\"primitive\")}} type) as promised.\nHowever, the constructor produces an instance of the type String (an object wrapper) and\nthat's why you rarely want to use the String constructor at all.\n\n### Using String() to stringify a symbol\n\n`String()` is the only case where a symbol can be converted to a string without throwing, because it's very explicit.\n\n```js example-bad\nconst sym = Symbol(\"example\");\n`${sym}`; // TypeError: Cannot convert a Symbol value to a string\n\"\" + sym; // TypeError: Cannot convert a Symbol value to a string\n\"\".concat(sym); // TypeError: Cannot convert a Symbol value to a string\n```\n\n```js example-good\nconst sym = Symbol(\"example\");\nString(sym); // \"Symbol(example)\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Text formatting](/en-US/docs/Web/JavaScript/Guide/Text_formatting) guide\n"
    },
    "sub": {
      "index.md": "---\ntitle: String.prototype.sub()\nslug: Web/JavaScript/Reference/Global_Objects/String/sub\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.sub\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`sub()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in a {{HTMLElement(\"sub\")}} element (`<sub>str</sub>`), which causes this string to be displayed as subscript.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. Use [DOM APIs](/en-US/docs/Web/API/Document_Object_Model) such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement) instead.\n\n## Syntax\n\n```js-nolint\nsub()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string beginning with a `<sub>` start tag, then the text `str`, and then a `</sub>` end tag.\n\n## Examples\n\n### Using sub()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.sub();\n```\n\nThis will create the following HTML:\n\n```html\n<sub>Hello, world</sub>\n```\n\nInstead of using `sub()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement). For example:\n\n```js\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"sub\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.sub` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"sub\")}}\n"
    },
    "substr": {
      "index.md": "---\ntitle: String.prototype.substr()\nslug: Web/JavaScript/Reference/Global_Objects/String/substr\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.substr\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`substr()`** method of {{jsxref(\"String\")}} values returns a portion of this string, starting at the specified index and extending for a given number of characters afterwards.\n\n> **Note:** `substr()` is not part of the main ECMAScript specification — it's defined in [Annex B: Additional ECMAScript Features for Web Browsers](https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html), which is normative optional for non-browser runtimes. Therefore, people are advised to use the standard [`String.prototype.substring()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) and [`String.prototype.slice()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) methods instead to make their code maximally cross-platform friendly. The [`String.prototype.substring()` page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring#the_difference_between_substring_and_substr) has some comparisons between the three methods.\n\n{{EmbedInteractiveExample(\"pages/js/string-substr.html\")}}\n\n## Syntax\n\n```js-nolint\nsubstr(start)\nsubstr(start, length)\n```\n\n### Parameters\n\n- `start`\n  - : The index of the first character to include in the returned substring.\n- `length` {{optional_inline}}\n  - : The number of characters to extract.\n\n### Return value\n\nA new string containing the specified part of the given string.\n\n## Description\n\nA string's `substr()` method extracts `length` characters from the string, counting from the `start` index.\n\n- If `start >= str.length`, an empty string is returned.\n- If `start < 0`, the index starts counting from the end of the string. More formally, in this case the substring starts at `max(start + str.length, 0)`.\n- If `start` is omitted or {{jsxref(\"undefined\")}}, it's treated as `0`.\n- If `length` is omitted or {{jsxref(\"undefined\")}}, or if `start + length >= str.length`, `substr()` extracts characters to the end of the string.\n- If `length < 0`, an empty string is returned.\n- For both `start` and `length`, {{jsxref(\"NaN\")}} is treated as `0`.\n\nAlthough you are encouraged to avoid using `substr()`, there is no trivial way to migrate `substr()` to either `slice()` or `substring()` in legacy code without essentially writing a polyfill for `substr()`. For example, `str.substr(a, l)`, `str.slice(a, a + l)`, and `str.substring(a, a + l)` all have different results when `str = \"01234\", a = 1, l = -2` — `substr()` returns an empty string, `slice()` returns `\"123\"`, while `substring()` returns `\"0\"`. The actual refactoring path depends on the knowledge of the range of `a` and `l`.\n\n## Examples\n\n### Using substr()\n\n```js\nconst aString = \"Mozilla\";\n\nconsole.log(aString.substr(0, 1)); // 'M'\nconsole.log(aString.substr(1, 0)); // ''\nconsole.log(aString.substr(-1, 1)); // 'a'\nconsole.log(aString.substr(1, -1)); // ''\nconsole.log(aString.substr(-3)); // 'lla'\nconsole.log(aString.substr(1)); // 'ozilla'\nconsole.log(aString.substr(-20, 2)); // 'Mo'\nconsole.log(aString.substr(20, 2)); // ''\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.substr` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.slice()\")}}\n- {{jsxref(\"String.prototype.substring()\")}}\n"
    },
    "substring": {
      "index.md": "---\ntitle: String.prototype.substring()\nslug: Web/JavaScript/Reference/Global_Objects/String/substring\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.substring\n---\n\n{{JSRef}}\n\nThe **`substring()`** method of {{jsxref(\"String\")}} values returns the part of this string from the start index up to and excluding the end index, or to the end of the string if no end index is supplied.\n\n{{EmbedInteractiveExample(\"pages/js/string-substring.html\")}}\n\n## Syntax\n\n```js-nolint\nsubstring(indexStart)\nsubstring(indexStart, indexEnd)\n```\n\n### Parameters\n\n- `indexStart`\n  - : The index of the first character to include in the returned substring.\n- `indexEnd` {{optional_inline}}\n  - : The index of the first character to exclude from the returned substring.\n\n### Return value\n\nA new string containing the specified part of the given string.\n\n## Description\n\n`substring()` extracts characters from `indexStart` up to _but not including_ `indexEnd`. In particular:\n\n- If `indexEnd` is omitted, `substring()` extracts characters to the end of the string.\n- If `indexStart` is equal to `indexEnd`, `substring()` returns an empty string.\n- If `indexStart` is greater than `indexEnd`, then the effect of `substring()` is as if the two arguments were swapped; see example below.\n\nAny argument value that is less than `0` or greater than `str.length` is treated as if it were `0` and `str.length`, respectively.\n\nAny argument value that is {{jsxref(\"NaN\")}} is treated as if it were `0`.\n\n## Examples\n\n### Using substring()\n\nThe following example uses `substring()` to display characters from the\nstring `\"Mozilla\"`:\n\n```js\nconst anyString = \"Mozilla\";\n\nconsole.log(anyString.substring(0, 1)); // \"M\"\nconsole.log(anyString.substring(1, 0)); // \"M\"\n\nconsole.log(anyString.substring(0, 6)); // \"Mozill\"\n\nconsole.log(anyString.substring(4)); // \"lla\"\nconsole.log(anyString.substring(4, 7)); // \"lla\"\nconsole.log(anyString.substring(7, 4)); // \"lla\"\n\nconsole.log(anyString.substring(0, 7)); // \"Mozilla\"\nconsole.log(anyString.substring(0, 10)); // \"Mozilla\"\n```\n\n### Using substring() with length property\n\nThe following example uses the `substring()` method and\n{{jsxref(\"String/length\", \"length\")}} property to extract the last characters of a\nparticular string. This method may be easier to remember, given that you don't need to\nknow the starting and ending indices as you would in the above examples.\n\n```js\nconst text = \"Mozilla\";\n\n// Takes 4 last characters of string\nconsole.log(text.substring(text.length - 4)); // prints \"illa\"\n\n// Takes 5 last characters of string\nconsole.log(text.substring(text.length - 5)); // prints \"zilla\"\n```\n\n### The difference between substring() and substr()\n\nThere are subtle differences between the `substring()` and\n{{jsxref(\"String/substr\", \"substr()\")}} methods, so you should be careful not to get\nthem confused.\n\n- The two parameters of `substr()` are `start` and `length`, while for `substring()`, they are `start` and `end`.\n- `substr()`'s `start` index will wrap to the end of the string if it is negative, while `substring()` will clamp it to `0`.\n- Negative lengths in `substr()` are treated as zero, while `substring()` will swap the two indexes if `end` is less than `start`.\n\nFurthermore, `substr()` is considered a _legacy feature in ECMAScript_, so it is best to avoid using it if possible.\n\n```js\nconst text = \"Mozilla\";\nconsole.log(text.substring(2, 5)); // \"zil\"\nconsole.log(text.substr(2, 3)); // \"zil\"\n```\n\n### Differences between substring() and slice()\n\nThe `substring()` and {{jsxref(\"String/slice\", \"slice()\")}} methods are\nalmost identical, but there are a couple of subtle differences between the two,\nespecially in the way negative arguments are dealt with.\n\nThe `substring()` method swaps its two arguments if\n`indexStart` is greater than `indexEnd`,\nmeaning that a string is still returned. The {{jsxref(\"String/slice\", \"slice()\")}}\nmethod returns an empty string if this is the case.\n\n```js\nconst text = \"Mozilla\";\nconsole.log(text.substring(5, 2)); // \"zil\"\nconsole.log(text.slice(5, 2)); // \"\"\n```\n\nIf either or both of the arguments are negative or `NaN`, the\n`substring()` method treats them as if they were `0`.\n\n```js\nconsole.log(text.substring(-5, 2)); // \"Mo\"\nconsole.log(text.substring(-5, -2)); // \"\"\n```\n\n`slice()` also treats `NaN` arguments as `0`, but when\nit is given negative values it counts backwards from the end of the string to find the\nindexes.\n\n```js\nconsole.log(text.slice(-5, 2)); // \"\"\nconsole.log(text.slice(-5, -2)); // \"zil\"\n```\n\nSee the {{jsxref(\"String/slice\", \"slice()\")}} page for more examples with negative\nnumbers.\n\n### Replacing a substring within a string\n\nThe following example replaces a substring within a string. It will replace both\nindividual characters and substrings. The function call at the end of the example\nchanges the string `Brave New World` to `Brave New Web`.\n\n```js\n// Replaces oldS with newS in the string fullS\nfunction replaceString(oldS, newS, fullS) {\n  for (let i = 0; i < fullS.length; ++i) {\n    if (fullS.substring(i, i + oldS.length) === oldS) {\n      fullS =\n        fullS.substring(0, i) +\n        newS +\n        fullS.substring(i + oldS.length, fullS.length);\n    }\n  }\n  return fullS;\n}\n\nreplaceString(\"World\", \"Web\", \"Brave New World\");\n```\n\nNote that this can result in an infinite loop if `oldS` is itself a\nsubstring of `newS` — for example, if you attempted to replace\n`\"World\"` with `\"OtherWorld\"` here.\n\nA better method for replacing strings is as follows:\n\n```js\nfunction replaceString(oldS, newS, fullS) {\n  return fullS.split(oldS).join(newS);\n}\n```\n\nThe code above serves as an example for substring operations. If you need to replace\nsubstrings, most of the time you will want to use\n{{jsxref(\"String.prototype.replace()\")}}.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.substr()\")}}\n- {{jsxref(\"String.prototype.slice()\")}}\n"
    },
    "sup": {
      "index.md": "---\ntitle: String.prototype.sup()\nslug: Web/JavaScript/Reference/Global_Objects/String/sup\npage-type: javascript-instance-method\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.String.sup\n---\n\n{{JSRef}} {{Deprecated_Header}}\n\nThe **`sup()`** method of {{jsxref(\"String\")}} values creates a string that embeds this string in a {{HTMLElement(\"sup\")}} element (`<sup>str</sup>`), which causes this string to be displayed as superscript.\n\n> **Note:** All [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods) are deprecated and only standardized for compatibility purposes. Use [DOM APIs](/en-US/docs/Web/API/Document_Object_Model) such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement) instead.\n\n## Syntax\n\n```js-nolint\nsup()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string beginning with a `<sup>` start tag, then the text `str`, and then a `</sup>` end tag.\n\n## Examples\n\n### Using sup()\n\nThe code below creates an HTML string and then replaces the document's body with it:\n\n```js\nconst contentString = \"Hello, world\";\n\ndocument.body.innerHTML = contentString.sup();\n```\n\nThis will create the following HTML:\n\n```html\n<sup>Hello, world</sup>\n```\n\nInstead of using `sup()` and creating HTML text directly, you should use DOM APIs such as [`document.createElement()`](/en-US/docs/Web/API/Document/createElement). For example:\n\n```js\nconst contentString = \"Hello, world\";\nconst elem = document.createElement(\"sup\");\nelem.innerText = contentString;\ndocument.body.appendChild(elem);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.sup` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- [HTML wrapper methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#html_wrapper_methods)\n- {{HTMLElement(\"sup\")}}\n"
    },
    "tolocalelowercase": {
      "index.md": "---\ntitle: String.prototype.toLocaleLowerCase()\nslug: Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.toLocaleLowerCase\n---\n\n{{JSRef}}\n\nThe **`toLocaleLowerCase()`** method of {{jsxref(\"String\")}} values returns this string converted to lower case, according to any locale-specific case mappings.\n\n{{EmbedInteractiveExample(\"pages/js/string-tolocalelowercase.html\")}}\n\n## Syntax\n\n```js-nolint\ntoLocaleLowerCase()\ntoLocaleLowerCase(locales)\n```\n\n### Parameters\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to lower case according to any locale-specific case mappings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n    Unlike other methods that use the `locales` argument, `toLocaleLowerCase()` does not allow locale matching. Therefore, after checking the validity of the `locales` argument, `toLocaleLowerCase()` always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation.\n\n### Return value\n\nA new string representing the calling string converted to lower case, according to any\nlocale-specific case mappings.\n\n## Description\n\nThe `toLocaleLowerCase()` method returns the value of the string converted\nto lower case according to any locale-specific case mappings.\n`toLocaleLowerCase()` does not affect the value of the string itself. In most\ncases, this will produce the same result as {{jsxref(\"String/toLowerCase\", \"toLowerCase()\")}}, but for some locales, such as Turkish, whose case mappings do not\nfollow the default case mappings in Unicode, there may be a different result.\n\n## Examples\n\n### Using toLocaleLowerCase()\n\n```js\n\"ALPHABET\".toLocaleLowerCase(); // 'alphabet'\n\n\"\\u0130\".toLocaleLowerCase(\"tr\") === \"i\"; // true\n\"\\u0130\".toLocaleLowerCase(\"en-US\") === \"i\"; // false\n\nconst locales = [\"tr\", \"TR\", \"tr-TR\", \"tr-u-co-search\", \"tr-x-turkish\"];\n\"\\u0130\".toLocaleLowerCase(locales) === \"i\"; // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.toLocaleUpperCase()\")}}\n- {{jsxref(\"String.prototype.toLowerCase()\")}}\n- {{jsxref(\"String.prototype.toUpperCase()\")}}\n"
    },
    "tolocaleuppercase": {
      "index.md": "---\ntitle: String.prototype.toLocaleUpperCase()\nslug: Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.toLocaleUpperCase\n---\n\n{{JSRef}}\n\nThe **`toLocaleUpperCase()`** method of {{jsxref(\"String\")}} values returns this string converted to upper case, according to any locale-specific case mappings.\n\n{{EmbedInteractiveExample(\"pages/js/string-tolocaleuppercase.html\")}}\n\n## Syntax\n\n```js-nolint\ntoLocaleUpperCase()\ntoLocaleUpperCase(locales)\n```\n\n### Parameters\n\n- `locales` {{optional_inline}}\n\n  - : A string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to upper case according to any locale-specific case mappings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n\n    Unlike other methods that use the `locales` argument, `toLocaleUpperCase()` does not allow locale matching. Therefore, after checking the validity of the `locales` argument, `toLocaleUpperCase()` always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation.\n\n### Return value\n\nA new string representing the calling string converted to upper case, according to any\nlocale-specific case mappings.\n\n## Description\n\nThe `toLocaleUpperCase()` method returns the value of the string converted\nto upper case according to any locale-specific case mappings.\n`toLocaleUpperCase()` does not affect the value of the string itself. In most\ncases, this will produce the same result as {{jsxref(\"String/toUpperCase\", \"toUpperCase()\")}}, but for some locales, such as Turkish, whose case mappings do not\nfollow the default case mappings in Unicode, there may be a different result.\n\nAlso notice that conversion is not necessarily a 1:1 character mapping, as some\ncharacters might result in two (or even more) characters when transformed to upper-case.\nTherefore the length of the result string can differ from the input length. This also\nimplies that the conversion is not stable, so i.E. the following can return\n`false`:\n`x.toLocaleLowerCase() === x.toLocaleUpperCase().toLocaleLowerCase()`\n\n## Examples\n\n### Using toLocaleUpperCase()\n\n```js\n\"alphabet\".toLocaleUpperCase(); // 'ALPHABET'\n\n\"Gesäß\".toLocaleUpperCase(); // 'GESÄSS'\n\n\"i\\u0307\".toLocaleUpperCase(\"lt-LT\"); // 'I'\n\nconst locales = [\"lt\", \"LT\", \"lt-LT\", \"lt-u-co-phonebk\", \"lt-x-lietuva\"];\n\"i\\u0307\".toLocaleUpperCase(locales); // 'I'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.toLocaleLowerCase()\")}}\n- {{jsxref(\"String.prototype.toLowerCase()\")}}\n- {{jsxref(\"String.prototype.toUpperCase()\")}}\n"
    },
    "tolowercase": {
      "index.md": "---\ntitle: String.prototype.toLowerCase()\nslug: Web/JavaScript/Reference/Global_Objects/String/toLowerCase\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.toLowerCase\n---\n\n{{JSRef}}\n\nThe **`toLowerCase()`** method of {{jsxref(\"String\")}} values returns this string converted to lower case.\n\n{{EmbedInteractiveExample(\"pages/js/string-tolowercase.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ntoLowerCase()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new string representing the calling string converted to lower case.\n\n## Description\n\nThe `toLowerCase()` method returns the value of the string converted to\nlower case. `toLowerCase()` does not affect the value of the string\n`str` itself.\n\n## Examples\n\n### Using `toLowerCase()`\n\n```js\nconsole.log(\"ALPHABET\".toLowerCase()); // 'alphabet'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.toLocaleLowerCase()\")}}\n- {{jsxref(\"String.prototype.toLocaleUpperCase()\")}}\n- {{jsxref(\"String.prototype.toUpperCase()\")}}\n"
    },
    "tostring": {
      "index.md": "---\ntitle: String.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/String/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"String\")}} values returns this string value.\n\n{{EmbedInteractiveExample(\"pages/js/string-tostring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the specified string value.\n\n## Description\n\nThe {{jsxref(\"String\")}} object overrides the `toString` method of {{jsxref(\"Object\")}}; it does not inherit\n{{jsxref(\"Object.prototype.toString()\")}}. For `String` values, the `toString` method returns the string itself (if it's a primitive) or the string that the `String` object wraps. It has the exact same implementation as {{jsxref(\"String.prototype.valueOf()\")}}.\n\nThe `toString()` method requires its `this` value to be a `String` primitive or wrapper object. It throws a {{jsxref(\"TypeError\")}} for other `this` values without attempting to coerce them to string values.\n\nBecause `String` doesn't have a [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) method, JavaScript calls the `toString()` method automatically when a `String` _object_ is used in a context expecting a string, such as in a [template literal](/en-US/docs/Web/JavaScript/Reference/Template_literals). However, String _primitive_ values do not consult the `toString()` method to be [coerced to strings](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) — since they are already strings, no conversion is performed.\n\n```js\nString.prototype.toString = () => \"Overridden\";\nconsole.log(`${\"foo\"}`); // \"foo\"\nconsole.log(`${new String(\"foo\")}`); // \"Overridden\"\n```\n\n## Examples\n\n### Using toString()\n\nThe following example displays the string value of a {{jsxref(\"String\")}} object:\n\n```js\nconst x = new String(\"Hello world\");\n\nconsole.log(x.toString()); // \"Hello world\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.valueOf()\")}}\n"
    },
    "touppercase": {
      "index.md": "---\ntitle: String.prototype.toUpperCase()\nslug: Web/JavaScript/Reference/Global_Objects/String/toUpperCase\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.toUpperCase\n---\n\n{{JSRef}}\n\nThe **`toUpperCase()`** method of {{jsxref(\"String\")}} values returns this string converted to uppercase.\n\n{{EmbedInteractiveExample(\"pages/js/string-touppercase.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ntoUpperCase()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new string representing the calling string converted to upper case.\n\n## Description\n\nThe `toUpperCase()` method returns the value of the string converted to\nuppercase. This method does not affect the value of the string itself since JavaScript\nstrings are immutable.\n\n## Examples\n\n### Basic usage\n\n```js\nconsole.log(\"alphabet\".toUpperCase()); // 'ALPHABET'\n```\n\n### Conversion of non-string `this` values to strings\n\nThis method will convert any non-string value to a string, when you set its\n`this` to a value that is not a string:\n\n```js\nconst a = String.prototype.toUpperCase.call({\n  toString() {\n    return \"abcdef\";\n  },\n});\n\nconst b = String.prototype.toUpperCase.call(true);\n\n// prints out 'ABCDEF TRUE'.\nconsole.log(a, b);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.toLocaleLowerCase()\")}}\n- {{jsxref(\"String.prototype.toLocaleUpperCase()\")}}\n- {{jsxref(\"String.prototype.toLowerCase()\")}}\n"
    },
    "towellformed": {
      "index.md": "---\ntitle: String.prototype.toWellFormed()\nslug: Web/JavaScript/Reference/Global_Objects/String/toWellFormed\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.toWellFormed\n---\n\n{{JSRef}}\n\nThe **`toWellFormed()`** method of {{jsxref(\"String\")}} values returns a string where all [lone surrogates](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters) of this string are replaced with the Unicode replacement character U+FFFD.\n\n## Syntax\n\n```js-nolint\ntoWellFormed()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new string that is a copy of this string, with all lone surrogates replaced with the Unicode replacement character U+FFFD. If `str` [is well formed](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed), a new string is still returned (essentially a copy of `str`).\n\n## Description\n\nStrings in JavaScript are UTF-16 encoded. UTF-16 encoding has the concept of _surrogate pairs_, which is introduced in detail in the [UTF-16 characters, Unicode code points, and grapheme clusters](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#utf-16_characters_unicode_code_points_and_grapheme_clusters) section.\n\n`toWellFormed()` iterates through the code units of this string, and replaces any lone surrogates with the [Unicode replacement character](<https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character>) U+FFFD `�`. This ensures that the returned string is well-formed and can be used in functions that expect well-formed strings, such as {{jsxref(\"encodeURI\")}}. Compared to a custom implementation, `toWellFormed()` is more efficient, as engines can directly access the internal representation of strings.\n\nWhen ill-formed strings are used in certain contexts, such as {{domxref(\"TextEncoder\")}}, they are automatically converted to well-formed strings using the same replacement character. When lone surrogates are rendered, they are also rendered as the replacement character (a diamond with a question mark inside).\n\n## Examples\n\n### Using toWellFormed()\n\n```js\nconst strings = [\n  // Lone leading surrogate\n  \"ab\\uD800\",\n  \"ab\\uD800c\",\n  // Lone trailing surrogate\n  \"\\uDFFFab\",\n  \"c\\uDFFFab\",\n  // Well-formed\n  \"abc\",\n  \"ab\\uD83D\\uDE04c\",\n];\n\nfor (const str of strings) {\n  console.log(str.toWellFormed());\n}\n// Logs:\n// \"ab�\"\n// \"ab�c\"\n// \"�ab\"\n// \"c�ab\"\n// \"abc\"\n// \"ab😄c\"\n```\n\n### Avoiding errors in encodeURI()\n\n{{jsxref(\"encodeURI\")}} throws an error if the string passed is not well-formed. This can be avoided by using `toWellFormed()` to convert the string to a well-formed string first.\n\n```js\nconst illFormed = \"https://example.com/search?q=\\uD800\";\n\ntry {\n  encodeURI(illFormed);\n} catch (e) {\n  console.log(e); // URIError: URI malformed\n}\n\nconsole.log(encodeURI(illFormed.toWellFormed())); // \"https://example.com/search?q=%EF%BF%BD\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.toWellFormed` in `core-js`](https://github.com/zloirock/core-js#well-formed-unicode-strings)\n- {{jsxref(\"String.prototype.isWellFormed()\")}}\n- {{jsxref(\"String.prototype.normalize()\")}}\n"
    },
    "trim": {
      "index.md": "---\ntitle: String.prototype.trim()\nslug: Web/JavaScript/Reference/Global_Objects/String/trim\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.trim\n---\n\n{{JSRef}}\n\nThe **`trim()`** method of {{jsxref(\"String\")}} values removes whitespace from both ends of this string and returns a new string, without modifying the original string.\n\nTo return a new string with whitespace trimmed from just one end, use {{jsxref(\"String/trimStart\", \"trimStart()\")}} or {{jsxref(\"String/trimEnd\", \"trimEnd()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/string-trim.html\")}}\n\n## Syntax\n\n```js-nolint\ntrim()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new string representing `str` stripped of whitespace from both its beginning and end. Whitespace is defined as [white space](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#white_space) characters plus [line terminators](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators).\n\nIf neither the beginning or end of `str` has any whitespace, a new string is still returned (essentially a copy of `str`).\n\n## Examples\n\n### Using trim()\n\nThe following example trims whitespace from both ends of `str`.\n\n```js\nconst str = \"   foo  \";\nconsole.log(str.trim()); // 'foo'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.trimStart()\")}}\n- {{jsxref(\"String.prototype.trimEnd()\")}}\n"
    },
    "trimend": {
      "index.md": "---\ntitle: String.prototype.trimEnd()\nslug: Web/JavaScript/Reference/Global_Objects/String/trimEnd\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.trimEnd\n---\n\n{{JSRef}}\n\nThe **`trimEnd()`** method of {{jsxref(\"String\")}} values removes whitespace from the end of this string and returns a new string, without modifying the original string. `trimRight()` is an alias of this method.\n\n{{EmbedInteractiveExample(\"pages/js/string-trimend.html\")}}\n\n## Syntax\n\n```js-nolint\ntrimEnd()\n\ntrimRight()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new string representing `str` stripped of whitespace from its end (right side). Whitespace is defined as [white space](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#white_space) characters plus [line terminators](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators).\n\nIf the end of `str` has no whitespace, a new string is still returned (essentially a copy of `str`).\n\n### Aliasing\n\nAfter {{jsxref(\"String/trim\", \"trim()\")}} was standardized, engines also implemented the non-standard method `trimRight`. However, for consistency with {{jsxref(\"String/padEnd\", \"padEnd()\")}}, when the method got standardized, its name was chosen as `trimEnd`. For web compatibility reasons, `trimRight` remains as an alias to `trimEnd`, and they refer to the exact same function object. In some engines this means:\n\n```js\nString.prototype.trimRight.name === \"trimEnd\";\n```\n\n## Examples\n\n### Using trimEnd()\n\nThe following example trims whitespace from the end of `str`, but not from its start.\n\n```js\nlet str = \"   foo  \";\n\nconsole.log(str.length); // 8\n\nstr = str.trimEnd();\nconsole.log(str.length); // 6\nconsole.log(str); // '   foo'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.trimEnd` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.trim()\")}}\n- {{jsxref(\"String.prototype.trimStart()\")}}\n"
    },
    "trimstart": {
      "index.md": "---\ntitle: String.prototype.trimStart()\nslug: Web/JavaScript/Reference/Global_Objects/String/trimStart\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.trimStart\n---\n\n{{JSRef}}\n\nThe **`trimStart()`** method of {{jsxref(\"String\")}} values removes whitespace from the beginning of this string and returns a new string, without modifying the original string. `trimLeft()` is an alias of this method.\n\n{{EmbedInteractiveExample(\"pages/js/string-trimstart.html\")}}\n\n## Syntax\n\n```js-nolint\ntrimStart()\n\ntrimLeft()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new string representing `str` stripped of whitespace from its beginning (left side). Whitespace is defined as [white space](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#white_space) characters plus [line terminators](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#line_terminators).\n\nIf the beginning of `str` has no whitespace, a new string is still returned (essentially a copy of `str`).\n\n### Aliasing\n\nAfter {{jsxref(\"String/trim\", \"trim()\")}} was standardized, engines also implemented the non-standard method `trimLeft`. However, for consistency with {{jsxref(\"String/padStart\", \"padStart()\")}}, when the method got standardized, its name was chosen as `trimStart`. For web compatibility reasons, `trimLeft` remains as an alias to `trimStart`, and they refer to the exact same function object. In some engines this means:\n\n```js\nString.prototype.trimLeft.name === \"trimStart\";\n```\n\n## Examples\n\n### Using trimStart()\n\nThe following example trims whitespace from the start of `str`, but not from its end.\n\n```js\nlet str = \"   foo  \";\n\nconsole.log(str.length); // 8\n\nstr = str.trimStart();\nconsole.log(str.length); // 5\nconsole.log(str); // 'foo  '\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `String.prototype.trimStart` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"String.prototype.trim()\")}}\n- {{jsxref(\"String.prototype.trimEnd()\")}}\n"
    },
    "valueof": {
      "index.md": "---\ntitle: String.prototype.valueOf()\nslug: Web/JavaScript/Reference/Global_Objects/String/valueOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.String.valueOf\n---\n\n{{JSRef}}\n\nThe **`valueOf()`** method of {{jsxref(\"String\")}} values returns this string value.\n\n{{EmbedInteractiveExample(\"pages/js/string-valueof.html\")}}\n\n## Syntax\n\n```js-nolint\nvalueOf()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the primitive value of a given {{jsxref(\"String\")}} object.\n\n## Description\n\nThe `valueOf()` method of {{jsxref(\"String\")}} returns the primitive value\nof a {{jsxref(\"String\")}} object as a string data type. This value is equivalent to\n{{jsxref(\"String.prototype.toString()\")}}.\n\nThis method is usually called internally by JavaScript and not explicitly in code.\n\n## Examples\n\n### Using `valueOf()`\n\n```js\nconst x = new String(\"Hello world\");\nconsole.log(x.valueOf()); // 'Hello world'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"String.prototype.toString()\")}}\n- {{jsxref(\"Object.prototype.valueOf()\")}}\n"
    }
  },
  "symbol": {
    "@@toprimitive": {
      "index.md": "---\ntitle: Symbol.prototype[@@toPrimitive]()\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Symbol.@@toPrimitive\n---\n\n{{JSRef}}\n\nThe **`[@@toPrimitive]()`** method of {{jsxref(\"Symbol\")}} values returns this symbol value.\n\n## Syntax\n\n```js-nolint\nsymbolValue[Symbol.toPrimitive](hint)\n```\n\n### Parameters\n\n- `hint`\n  - : A string value indicating the primitive value to return. The value is ignored.\n\n### Return value\n\nThe primitive value of the specified {{jsxref(\"Symbol\")}} object.\n\n## Description\n\nThe `[@@toPrimitive]()` method of {{jsxref(\"Symbol\")}} returns the primitive\nvalue of a Symbol object as a Symbol data type. The `hint`\nargument is not used.\n\nJavaScript calls the `[@@toPrimitive]()` method to convert an object to a\nprimitive value. You rarely need to invoke the `[@@toPrimitive]()` method\nyourself; JavaScript automatically invokes it when encountering an object where a\nprimitive value is expected.\n\n## Examples\n\n### Using @@toPrimitive\n\n```js\nconst sym = Symbol(\"example\");\nsym === sym[Symbol.toPrimitive](); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Symbol.toPrimitive\")}}\n"
    },
    "asynciterator": {
      "index.md": "---\ntitle: Symbol.asyncIterator\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.asyncIterator\n---\n\n{{JSRef}}\n\nThe **`Symbol.asyncIterator`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@asyncIterator`. The [async iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) looks up this symbol for the method that returns the async iterator for an object. In order for an object to be async iterable, it must have an `@@asyncIterator` key.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-asynciterator.html\", \"taller\")}}\n\n## Value\n\nThe well-known symbol `@@asyncIterator`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Examples\n\n### User-defined async iterables\n\nYou can define your own async iterable by setting the `[Symbol.asyncIterator]` property on an object.\n\n```js\nconst myAsyncIterable = {\n  async *[Symbol.asyncIterator]() {\n    yield \"hello\";\n    yield \"async\";\n    yield \"iteration!\";\n  },\n};\n\n(async () => {\n  for await (const x of myAsyncIterable) {\n    console.log(x);\n  }\n})();\n// Logs:\n// \"hello\"\n// \"async\"\n// \"iteration!\"\n```\n\nWhen creating an API, remember that async iterables are designed to represent something _iterable_ — like a stream of data or a list —, not to completely replace callbacks and events in most situations.\n\n### Built-in async iterables\n\nThere is no object in the core JavaScript language that is async iterable. Some web APIs, such as {{domxref(\"ReadableStream\")}}, have the `Symbol.asyncIterator` method set by default.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n- [for await...of](/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)\n"
    },
    "description": {
      "index.md": "---\ntitle: Symbol.prototype.description\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/description\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.Symbol.description\n---\n\n{{JSRef}}\n\nThe **`description`** accessor property of {{jsxref(\"Symbol\")}} values returns a string containing the description of this symbol, or `undefined` if the symbol has no description.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-prototype-description.html\")}}\n\n## Description\n\n{{jsxref(\"Symbol\")}} objects can be created with an optional description which can be used for debugging but not to access the symbol itself. The `Symbol.prototype.description` property can be used to read that description. It is different to `Symbol.prototype.toString()` as it does not contain the enclosing `\"Symbol()\"` string. See the examples.\n\n## Examples\n\n### Using description\n\n```js\nSymbol(\"desc\").toString(); // \"Symbol(desc)\"\nSymbol(\"desc\").description; // \"desc\"\nSymbol(\"\").description; // \"\"\nSymbol().description; // undefined\n\n// well-known symbols\nSymbol.iterator.toString(); // \"Symbol(Symbol.iterator)\"\nSymbol.iterator.description; // \"Symbol.iterator\"\n\n// global symbols\nSymbol.for(\"foo\").toString(); // \"Symbol(foo)\"\nSymbol.for(\"foo\").description; // \"foo\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol.prototype.description` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- {{jsxref(\"Symbol.prototype.toString()\")}}\n"
    },
    "for": {
      "index.md": "---\ntitle: Symbol.for()\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/for\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Symbol.for\n---\n\n{{JSRef}}\n\nThe **`Symbol.for()`** static method searches for existing symbols\nin a runtime-wide symbol registry with the given key and returns it if found. Otherwise\na new symbol gets created in the global symbol registry with this key.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-for.html\")}}\n\n## Syntax\n\n```js-nolint\nSymbol.for(key)\n```\n\n### Parameters\n\n- `key`\n  - : String, required. The key for the symbol (and also used for the description of the\n    symbol).\n\n### Return value\n\nAn existing symbol with the given key if found; otherwise, a new symbol is created and\nreturned.\n\n## Description\n\nIn contrast to `Symbol()`, the `Symbol.for()` function creates a\nsymbol available in a [global symbol registry](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) list. `Symbol.for()` does also\nnot necessarily create a new symbol on every call, but checks first if a symbol with the\ngiven `key` is already present in the registry. In that case, that symbol is\nreturned. If no symbol with the given key is found, `Symbol.for()` will\ncreate a new global symbol.\n\n## Examples\n\n### Using Symbol.for()\n\n```js\nSymbol.for(\"foo\"); // create a new global symbol\nSymbol.for(\"foo\"); // retrieve the already created symbol\n\n// Same global symbol, but not locally\nSymbol.for(\"bar\") === Symbol.for(\"bar\"); // true\nSymbol(\"bar\") === Symbol(\"bar\"); // false\n\n// The key is also used as the description\nconst sym = Symbol.for(\"mario\");\nsym.toString(); // \"Symbol(mario)\"\n```\n\nTo avoid name clashes with your global symbol keys and other (library code) global\nsymbols, it might be a good idea to prefix your symbols:\n\n```js\nSymbol.for(\"mdn.foo\");\nSymbol.for(\"mdn.bar\");\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Symbol.keyFor()\")}}\n"
    },
    "hasinstance": {
      "index.md": "---\ntitle: Symbol.hasInstance\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.hasInstance\n---\n\n{{JSRef}}\n\nThe **`Symbol.hasInstance`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@hasInstance`. The {{jsxref(\"Operators/instanceof\", \"instanceof\")}} operator looks up this symbol on its right-hand operand for the method used to determine if the constructor object recognizes an object as its instance.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-hasinstance.html\")}}\n\n## Value\n\nThe well-known symbol `@@hasInstance`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nThe `instanceof` operator uses the following algorithm to calculate the return value of `object instanceof constructor`:\n\n1. If `constructor` has a `@@hasInstance` method, then call it with `object` as the first argument and return the result, [coerced to a boolean](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean#boolean_coercion). Throw a {{jsxref(\"TypeError\")}} if `constructor` is not an object, or if `constructor[@@hasInstance]` is not one of `null`, `undefined`, or a function.\n2. Otherwise, if `constructor` doesn't have a `@@hasInstance` method (`constructor[@@hasInstance]` is `null` or `undefined`), then determine the result using the same algorithm as [`Function.prototype[@@hasInstance]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance). Throw a {{jsxref(\"TypeError\")}} if `constructor` is not a function.\n\nBecause all functions inherit from `Function.prototype` by default, most of the time, the [`Function.prototype[@@hasInstance]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance) method specifies the behavior of `instanceof` when the right-hand side is a function.\n\n## Examples\n\n### Custom instanceof behavior\n\nYou could implement your custom `instanceof` behavior like this, for example:\n\n```js\nclass MyArray {\n  static [Symbol.hasInstance](instance) {\n    return Array.isArray(instance);\n  }\n}\nconsole.log([] instanceof MyArray); // true\n```\n\n```js\nfunction MyArray() {}\nObject.defineProperty(MyArray, Symbol.hasInstance, {\n  value(instance) {\n    return Array.isArray(instance);\n  },\n});\nconsole.log([] instanceof MyArray); // true\n```\n\n### Checking the instance of an object\n\nJust in the same manner at which you can check if an object is an instance of a class using the `instanceof` keyword, we can also use `Symbol.hasInstance` for such checks.\n\n```js\nclass Animal {\n  constructor() {}\n}\n\nconst cat = new Animal();\n\nconsole.log(Animal[Symbol.hasInstance](cat)); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Operators/instanceof\", \"instanceof\")}}\n- [`Function.prototype[@@hasInstance]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance)\n"
    },
    "index.md": "---\ntitle: Symbol\nslug: Web/JavaScript/Reference/Global_Objects/Symbol\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Symbol\n---\n\n{{JSRef}}\n\n**`Symbol`** is a built-in object whose constructor returns a `symbol` [primitive](/en-US/docs/Glossary/Primitive) — also called a **Symbol value** or just a **Symbol** — that's guaranteed to be unique. Symbols are often used to add unique property keys to an object that won't collide with keys any other code might add to the object, and which are hidden from any mechanisms other code will typically use to access the object. That enables a form of weak {{Glossary(\"encapsulation\")}}, or a weak form of [information hiding](https://en.wikipedia.org/wiki/Information_hiding).\n\nEvery `Symbol()` call is guaranteed to return a unique Symbol. Every `Symbol.for(\"key\")` call will always return the same Symbol for a given value of `\"key\"`. When `Symbol.for(\"key\")` is called, if a Symbol with the given key can be found in the global Symbol registry, that Symbol is returned. Otherwise, a new Symbol is created, added to the global Symbol registry under the given key, and returned.\n\n## Description\n\nTo create a new primitive Symbol, you write `Symbol()` with an optional string as its description:\n\n```js\nconst sym1 = Symbol();\nconst sym2 = Symbol(\"foo\");\nconst sym3 = Symbol(\"foo\");\n```\n\nThe above code creates three new Symbols. Note that `Symbol(\"foo\")` does not coerce the string `\"foo\"` into a Symbol. It creates a new Symbol each time:\n\n```js\nSymbol(\"foo\") === Symbol(\"foo\"); // false\n```\n\nThe following syntax with the {{jsxref(\"Operators/new\", \"new\")}} operator will throw a {{jsxref(\"TypeError\")}}:\n\n```js example-bad\nconst sym = new Symbol(); // TypeError\n```\n\nThis prevents authors from creating an explicit `Symbol` wrapper object instead of a new Symbol value and might be surprising as creating explicit wrapper objects around primitive data types is generally possible (for example, `new Boolean`, `new String` and `new Number`).\n\nIf you really want to create a `Symbol` wrapper object, you can use the `Object()` function:\n\n```js\nconst sym = Symbol(\"foo\");\ntypeof sym; // \"symbol\"\nconst symObj = Object(sym);\ntypeof symObj; // \"object\"\n```\n\nBecause symbols are the only primitive data type that has reference identity (that is, you cannot create the same symbol twice), they behave like objects in some way. For example, they are garbage collectable and can therefore be stored in {{jsxref(\"WeakMap\")}}, {{jsxref(\"WeakSet\")}}, {{jsxref(\"WeakRef\")}}, and {{jsxref(\"FinalizationRegistry\")}} objects.\n\n### Shared Symbols in the global Symbol registry\n\nThe above syntax using the `Symbol()` function will create a Symbol whose value remains unique throughout the lifetime of the program. To create Symbols available across files and even across realms (each of which has its own global scope), use the methods {{jsxref(\"Symbol.for()\")}} and {{jsxref(\"Symbol.keyFor()\")}} to set and retrieve Symbols from the global Symbol registry.\n\nNote that the \"global Symbol registry\" is only a fictitious concept and may not correspond to any internal data structure in the JavaScript engine — and even if such a registry exists, its content is not available to the JavaScript code, except through the `for()` and `keyFor()` methods.\n\nThe method `Symbol.for(tokenString)` takes a string key and returns a symbol value from the registry, while `Symbol.keyFor(symbolValue)` takes a symbol value and returns the string key corresponding to it. Each is the other's inverse, so the following is `true`:\n\n```js\nSymbol.keyFor(Symbol.for(\"tokenString\")) === \"tokenString\"; // true\n```\n\nBecause registered symbols can be arbitrarily created anywhere, they behave almost exactly like the strings they wrap. Therefore, they are not guaranteed to be unique and are not garbage collectable. Therefore, registered symbols are disallowed in {{jsxref(\"WeakMap\")}}, {{jsxref(\"WeakSet\")}}, {{jsxref(\"WeakRef\")}}, and {{jsxref(\"FinalizationRegistry\")}} objects.\n\n### Well-known Symbols\n\nAll static properties of the `Symbol` constructor are Symbols themselves, whose values are constant across realms. They are known as _well-known Symbols_, and their purpose is to serve as \"protocols\" for certain built-in JavaScript operations, allowing users to customize the language's behavior. For example, if a constructor function has a method with {{jsxref(\"Symbol.hasInstance\")}} as its name, this method will encode its behavior with the {{jsxref(\"Operators/instanceof\", \"instanceof\")}} operator.\n\nPrior to well-known Symbols, JavaScript used normal properties to implement certain built-in operations. For example, the [`JSON.stringify`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) function will attempt to call each object's `toJSON()` method, and the [`String`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String) function will call the object's `toString()` and `valueOf()` methods. However, as more operations are added to the language, designating each operation a \"magic property\" can break backward compatibility and make the language's behavior harder to reason with. Well-known Symbols allow the customizations to be \"invisible\" from normal code, which typically only read string properties.\n\nIn MDN and other sources, well-known symbol values are stylized by prefixing `@@`. For example, {{jsxref(\"Symbol.hasInstance\")}} is written as `@@hasInstance`. This is because symbols don't have actual literal formats, but using `Symbol.hasInstance` does not reflect the ability of using other aliases to refer to the same symbol. This is like the difference between `Function.name` and `\"Function\"`.\n\nWell-known symbols do not have the concept of garbage collectability, because they come in a fixed set and are unique throughout the lifetime of the program, similar to intrinsic objects such as `Array.prototype`, so they are also allowed in {{jsxref(\"WeakMap\")}}, {{jsxref(\"WeakSet\")}}, {{jsxref(\"WeakRef\")}}, and {{jsxref(\"FinalizationRegistry\")}} objects.\n\n### Finding Symbol properties on objects\n\nThe method {{jsxref(\"Object.getOwnPropertySymbols()\")}} returns an array of Symbols and lets you find Symbol properties on a given object. Note that every object is initialized with no own Symbol properties, so that this array will be empty unless you've set Symbol properties on the object.\n\n## Constructor\n\n- {{jsxref(\"Symbol/Symbol\", \"Symbol()\")}}\n  - : Creates a new `Symbol` object. It is not a constructor in the traditional sense, because it can only be called as a function, instead of being constructed with `new Symbol()`.\n\n## Static properties\n\nThe static properties are all well-known Symbols. In these Symbols' descriptions, we will use language like \"`Symbol.hasInstance` is a method determining…\", but bear in mind that this is referring to the semantic of an object's method having this Symbol as the method name (because well-known Symbols act as \"protocols\"), not describing the value of the Symbol itself.\n\n- {{jsxref(\"Symbol.asyncIterator\")}}\n  - : A method that returns the default AsyncIterator for an object. Used by [`for await...of`](/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of).\n- {{jsxref(\"Symbol.hasInstance\")}}\n  - : A method determining if a constructor object recognizes an object as its instance. Used by {{jsxref(\"Operators/instanceof\", \"instanceof\")}}.\n- {{jsxref(\"Symbol.isConcatSpreadable\")}}\n  - : A Boolean value indicating if an object should be flattened to its array elements. Used by {{jsxref(\"Array.prototype.concat()\")}}.\n- {{jsxref(\"Symbol.iterator\")}}\n  - : A method returning the default iterator for an object. Used by [`for...of`](/en-US/docs/Web/JavaScript/Reference/Statements/for...of).\n- {{jsxref(\"Symbol.match\")}}\n  - : A method that matches against a string, also used to determine if an object may be used as a regular expression. Used by {{jsxref(\"String.prototype.match()\")}}.\n- {{jsxref(\"Symbol.matchAll\")}}\n  - : A method that returns an iterator, that yields matches of the regular expression against a string. Used by {{jsxref(\"String.prototype.matchAll()\")}}.\n- {{jsxref(\"Symbol.replace\")}}\n  - : A method that replaces matched substrings of a string. Used by {{jsxref(\"String.prototype.replace()\")}}.\n- {{jsxref(\"Symbol.search\")}}\n  - : A method that returns the index within a string that matches the regular expression. Used by {{jsxref(\"String.prototype.search()\")}}.\n- {{jsxref(\"Symbol.species\")}}\n  - : A constructor function that is used to create derived objects.\n- {{jsxref(\"Symbol.split\")}}\n  - : A method that splits a string at the indices that match a regular expression. Used by {{jsxref(\"String.prototype.split()\")}}.\n- {{jsxref(\"Symbol.toPrimitive\")}}\n  - : A method converting an object to a primitive value.\n- {{jsxref(\"Symbol.toStringTag\")}}\n  - : A string value used for the default description of an object. Used by {{jsxref(\"Object.prototype.toString()\")}}.\n- {{jsxref(\"Symbol.unscopables\")}}\n  - : An object value of whose own and inherited property names are excluded from the [`with`](/en-US/docs/Web/JavaScript/Reference/Statements/with) environment bindings of the associated object.\n\n## Static methods\n\n- {{jsxref(\"Symbol.for()\")}}\n  - : Searches for existing Symbols with the given `key` and returns it if found. Otherwise a new Symbol gets created in the global Symbol registry with `key`.\n- {{jsxref(\"Symbol.keyFor()\")}}\n  - : Retrieves a shared Symbol key from the global Symbol registry for the given Symbol.\n\n## Instance properties\n\nThese properties are defined on `Symbol.prototype` and shared by all `Symbol` instances.\n\n- {{jsxref(\"Object/constructor\", \"Symbol.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Symbol` instances, the initial value is the {{jsxref(\"Symbol/Symbol\", \"Symbol\")}} constructor.\n- {{jsxref(\"Symbol.prototype.description\")}}\n  - : A read-only string containing the description of the Symbol.\n- `Symbol.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"Symbol\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}. However, because `Symbol` also has its own [`toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString) method, this property is not used unless you call [`Object.prototype.toString.call()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) with a symbol as `thisArg`.\n\n## Instance methods\n\n- {{jsxref(\"Symbol.prototype.toString()\")}}\n  - : Returns a string containing the description of the Symbol. Overrides the {{jsxref(\"Object.prototype.toString()\")}} method.\n- {{jsxref(\"Symbol.prototype.valueOf()\")}}\n  - : Returns the Symbol. Overrides the {{jsxref(\"Object.prototype.valueOf()\")}} method.\n- [`Symbol.prototype[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive)\n  - : Returns the Symbol.\n\n## Examples\n\n### Using the typeof operator with Symbols\n\nThe {{jsxref(\"Operators/typeof\", \"typeof\")}} operator can help you to identify Symbols.\n\n```js\ntypeof Symbol() === \"symbol\";\ntypeof Symbol(\"foo\") === \"symbol\";\ntypeof Symbol.iterator === \"symbol\";\n```\n\n### Symbol type conversions\n\nSome things to note when working with type conversion of Symbols.\n\n- When trying to convert a Symbol to a number, a {{jsxref(\"TypeError\")}} will be thrown\n  (e.g. `+sym` or `sym | 0`).\n- When using loose equality, `Object(sym) == sym` returns `true`.\n- `Symbol(\"foo\") + \"bar\"` throws a {{jsxref(\"TypeError\")}} (can't convert Symbol to string). This prevents you from silently creating a new string property name from a Symbol, for example.\n- The [\"safer\" `String(sym)` conversion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_conversion) works like a call to {{jsxref(\"Symbol.prototype.toString()\")}} with Symbols, but note that `new String(sym)` will throw.\n\n### Symbols and for...in iteration\n\nSymbols are not enumerable in [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) iterations. In addition, {{jsxref(\"Object.getOwnPropertyNames()\")}} will not return Symbol object properties, however, you can use {{jsxref(\"Object.getOwnPropertySymbols()\")}} to get these.\n\n```js\nconst obj = {};\n\nobj[Symbol(\"a\")] = \"a\";\nobj[Symbol.for(\"b\")] = \"b\";\nobj[\"c\"] = \"c\";\nobj.d = \"d\";\n\nfor (const i in obj) {\n  console.log(i);\n}\n// \"c\" \"d\"\n```\n\n### Symbols and JSON.stringify()\n\nSymbol-keyed properties will be completely ignored when using `JSON.stringify()`:\n\n```js\nJSON.stringify({ [Symbol(\"foo\")]: \"foo\" });\n// '{}'\n```\n\nFor more details, see {{jsxref(\"JSON.stringify()\")}}.\n\n### Symbol wrapper objects as property keys\n\nWhen a Symbol wrapper object is used as a property key, this object will be coerced to its wrapped Symbol:\n\n```js\nconst sym = Symbol(\"foo\");\nconst obj = { [sym]: 1 };\nobj[sym]; // 1\nobj[Object(sym)]; // still 1\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- {{jsxref(\"Operators/typeof\", \"typeof\")}}\n- [JavaScript data types and data structures](/en-US/docs/Web/JavaScript/Data_structures)\n- [ES6 In Depth: Symbols](https://hacks.mozilla.org/2015/06/es6-in-depth-symbols/) on hacks.mozilla.org (2015)\n",
    "isconcatspreadable": {
      "index.md": "---\ntitle: Symbol.isConcatSpreadable\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.isConcatSpreadable\n---\n\n{{JSRef}}\n\nThe **`Symbol.isConcatSpreadable`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@isConcatSpreadable`. The {{jsxref(\"Array.prototype.concat()\")}} method looks up this symbol on each object being concatenated to determine if it should be treated as an array-like object and flattened to its array elements.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-isconcatspreadable.html\")}}\n\n## Value\n\nThe well-known symbol `@@isConcatSpreadable`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nThe `@@isConcatSpreadable` symbol (`Symbol.isConcatSpreadable`) can be defined as an own or inherited property and its value is a boolean. It can control behavior for arrays and array-like objects:\n\n- For array objects, the default behavior is to spread (flatten) elements. `Symbol.isConcatSpreadable` can avoid flattening in these cases.\n- For array-like objects, the default behavior is no spreading or flattening. `Symbol.isConcatSpreadable` can force flattening in these cases.\n\n## Examples\n\n### Arrays\n\nBy default, {{jsxref(\"Array.prototype.concat()\")}} spreads (flattens) arrays into its result:\n\n```js\nconst alpha = [\"a\", \"b\", \"c\"];\nconst numeric = [1, 2, 3];\n\nconst alphaNumeric = alpha.concat(numeric);\n\nconsole.log(alphaNumeric); // Result: ['a', 'b', 'c', 1, 2, 3]\n```\n\nWhen setting `Symbol.isConcatSpreadable` to `false`, you can disable the default behavior:\n\n```js\nconst alpha = [\"a\", \"b\", \"c\"];\nconst numeric = [1, 2, 3];\n\nnumeric[Symbol.isConcatSpreadable] = false;\nconst alphaNumeric = alpha.concat(numeric);\n\nconsole.log(alphaNumeric); // Result: ['a', 'b', 'c', [1, 2, 3] ]\n```\n\n### Array-like objects\n\nFor array-like objects, the default is to not spread. `Symbol.isConcatSpreadable` needs to be set to `true` in order to get a flattened array:\n\n```js\nconst x = [1, 2, 3];\n\nconst fakeArray = {\n  [Symbol.isConcatSpreadable]: true,\n  length: 2,\n  0: \"hello\",\n  1: \"world\",\n};\n\nx.concat(fakeArray); // [1, 2, 3, \"hello\", \"world\"]\n```\n\n> **Note:** The `length` property is used to control the number of object properties to be added. In the above example, `length:2` indicates two properties has to be added.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol.isConcatSpreadable` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- {{jsxref(\"Array.prototype.concat()\")}}\n"
    },
    "iterator": {
      "index.md": "---\ntitle: Symbol.iterator\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/iterator\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.iterator\n---\n\n{{JSRef}}\n\nThe **`Symbol.iterator`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@iterator`. The [iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol) looks up this symbol for the method that returns the iterator for an object. In order for an object to be iterable, it must have an `@@iterator` key.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-iterator.html\")}}\n\n## Value\n\nThe well-known symbol `@@iterator`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nWhenever an object needs to be iterated (such as at the beginning of a `for...of` loop), its `@@iterator` method is called with no arguments, and the returned **iterator** is used to obtain the values to be iterated.\n\nSome built-in types have a default iteration behavior, while other types (such as {{jsxref(\"Object\")}}) do not. Some built-in types with a `@@iterator` method are:\n\n- [`Array.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)\n- [`TypedArray.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator)\n- [`String.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator)\n- [`Map.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator)\n- [`Set.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator)\n\nSee also [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) for more information.\n\n## Examples\n\n### User-defined iterables\n\nWe can make our own iterables like this:\n\n```js\nconst myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n[...myIterable]; // [1, 2, 3]\n```\n\nOr iterables can be defined directly inside a class or object using a [computed property](/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names):\n\n```js\nclass Foo {\n  *[Symbol.iterator]() {\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n}\n\nconst someObj = {\n  *[Symbol.iterator]() {\n    yield \"a\";\n    yield \"b\";\n  },\n};\n\nconsole.log(...new Foo()); // 1, 2, 3\nconsole.log(...someObj); // 'a', 'b'\n```\n\n### Non-well-formed iterables\n\nIf an iterable's `@@iterator` method does not return an iterator object, then it is a non-well-formed iterable. Using it as such is likely to result in runtime exceptions or buggy behavior:\n\n```js example-bad\nconst nonWellFormedIterable = {};\nnonWellFormedIterable[Symbol.iterator] = () => 1;\n[...nonWellFormedIterable]; // TypeError: [Symbol.iterator]() returned a non-object value\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol.iterator` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n- [`Array.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator)\n- [`TypedArray.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator)\n- [`String.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator)\n- [`Map.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator)\n- [`Set.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator)\n- [`arguments[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator)\n- [`Segments.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter/segment/Segments/@@iterator)\n"
    },
    "keyfor": {
      "index.md": "---\ntitle: Symbol.keyFor()\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.Symbol.keyFor\n---\n\n{{JSRef}}\n\nThe **`Symbol.keyFor()`** static method retrieves a shared symbol\nkey from the global symbol registry for the given symbol.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-keyfor.html\")}}\n\n## Syntax\n\n```js-nolint\nSymbol.keyFor(sym)\n```\n\n### Parameters\n\n- `sym`\n  - : Symbol, required. The symbol to find a key for.\n\n### Return value\n\nA string representing the key for the given symbol if one is found on the [global registry](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry); otherwise, {{jsxref(\"undefined\")}}.\n\n## Examples\n\n### Using keyFor()\n\n```js\nconst globalSym = Symbol.for(\"foo\"); // create a new global symbol\nSymbol.keyFor(globalSym); // \"foo\"\n\nconst localSym = Symbol();\nSymbol.keyFor(localSym); // undefined\n\n// well-known symbols are not symbols registered\n// in the global symbol registry\nSymbol.keyFor(Symbol.iterator); // undefined\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Symbol.for()\")}}\n"
    },
    "match": {
      "index.md": "---\ntitle: Symbol.match\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/match\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.match\n---\n\n{{JSRef}}\n\nThe **`Symbol.match`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@match`. The {{jsxref(\"String.prototype.match()\")}} method looks up this symbol on its first argument for the method used to match an input string against the current object. This symbol is also used to determine if an object should be [treated as a regex](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes).\n\nFor more information, see [`RegExp.prototype[@@match]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match) and {{jsxref(\"String.prototype.match()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-match.html\", \"taller\")}}\n\n## Value\n\nThe well-known symbol `@@match`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nThis function is also used to identify [if objects have the behavior of regular expressions](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes). For example, the methods {{jsxref(\"String.prototype.startsWith()\")}}, {{jsxref(\"String.prototype.endsWith()\")}} and {{jsxref(\"String.prototype.includes()\")}}, check if their first argument is a regular expression and will throw a {{jsxref(\"TypeError\")}} if they are. Now, if the `match` symbol is set to `false` (or a [Falsy](/en-US/docs/Glossary/Falsy) value except `undefined`), it indicates that the object is not intended to be used as a regular expression object.\n\n## Examples\n\n### Marking a RegExp as not a regex\n\nThe following code will throw a {{jsxref(\"TypeError\")}}:\n\n```js\n\"/bar/\".startsWith(/bar/);\n\n// Throws TypeError, as /bar/ is a regular expression\n// and Symbol.match is not modified.\n```\n\nHowever, if you set `Symbol.match` to `false`, the object will be considered as [not a regular expression object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#special_handling_for_regexes). The methods `startsWith` and `endsWith` won't throw a `TypeError` as a consequence.\n\n```js\nconst re = /foo/;\nre[Symbol.match] = false;\n\"/foo/\".startsWith(re); // true\n\"/baz/\".endsWith(re); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol.match` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- {{jsxref(\"Symbol.matchAll\")}}\n- {{jsxref(\"Symbol.replace\")}}\n- {{jsxref(\"Symbol.search\")}}\n- {{jsxref(\"Symbol.split\")}}\n- {{jsxref(\"String.prototype.match()\")}}\n- [`RegExp.prototype[@@match]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match)\n"
    },
    "matchall": {
      "index.md": "---\ntitle: Symbol.matchAll\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/matchAll\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.matchAll\n---\n\n{{JSRef}}\n\nThe **`Symbol.matchAll`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@matchAll`. The {{jsxref(\"String.prototype.matchAll()\")}} method looks up this symbol on its first argument for the method that returns an iterator, that yields matches of the current object against a string.\n\nFor more information, see [`RegExp.prototype[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll) and {{jsxref(\"String.prototype.matchAll()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-matchall.html\")}}\n\n## Value\n\nThe well-known symbol `@@matchAll`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Examples\n\n### Using Symbol.matchAll\n\n```js\nconst str = \"2016-01-02|2019-03-07\";\n\nconst numbers = {\n  *[Symbol.matchAll](str) {\n    for (const n of str.matchAll(/[0-9]+/g)) yield n[0];\n  },\n};\n\nconsole.log(Array.from(str.matchAll(numbers)));\n// [\"2016\", \"01\", \"02\", \"2019\", \"03\", \"07\"]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol.matchAll` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- {{jsxref(\"Symbol.match\")}}\n- {{jsxref(\"Symbol.replace\")}}\n- {{jsxref(\"Symbol.search\")}}\n- {{jsxref(\"Symbol.split\")}}\n- {{jsxref(\"String.prototype.matchAll()\")}}\n- [`RegExp.prototype[@@matchAll]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll)\n"
    },
    "replace": {
      "index.md": "---\ntitle: Symbol.replace\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/replace\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.replace\n---\n\n{{JSRef}}\n\nThe **`Symbol.replace`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@replace`. The {{jsxref(\"String.prototype.replace()\")}} method looks up this symbol on its first argument for the method that replaces substrings matched by the current object.\n\nFor more information, see [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace) and {{jsxref(\"String.prototype.replace()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-replace.html\")}}\n\n## Value\n\nThe well-known symbol `@@replace`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Examples\n\n### Using Symbol.replace\n\n```js\nclass CustomReplacer {\n  constructor(value) {\n    this.value = value;\n  }\n  [Symbol.replace](string) {\n    return string.replace(this.value, \"#!@?\");\n  }\n}\n\nconsole.log(\"football\".replace(new CustomReplacer(\"foo\"))); // \"#!@?tball\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol.replace` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- {{jsxref(\"Symbol.match\")}}\n- {{jsxref(\"Symbol.matchAll\")}}\n- {{jsxref(\"Symbol.search\")}}\n- {{jsxref(\"Symbol.split\")}}\n- {{jsxref(\"String.prototype.replace()\")}}\n- [`RegExp.prototype[@@replace]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace)\n"
    },
    "search": {
      "index.md": "---\ntitle: Symbol.search\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/search\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.search\n---\n\n{{JSRef}}\n\nThe **`Symbol.search`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@search`. The {{jsxref(\"String.prototype.search()\")}} method looks up this symbol on its first argument for the method that returns the index within a string that matches the current object.\n\nFor more information, see [`RegExp.prototype[@@search]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search) and {{jsxref(\"String.prototype.search()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-search.html\")}}\n\n## Value\n\nThe well-known symbol `@@search`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Examples\n\n### Custom string search\n\n```js\nclass caseInsensitiveSearch {\n  constructor(value) {\n    this.value = value.toLowerCase();\n  }\n  [Symbol.search](string) {\n    return string.toLowerCase().indexOf(this.value);\n  }\n}\n\nconsole.log(\"foobar\".search(new caseInsensitiveSearch(\"BaR\"))); // 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol.search` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- {{jsxref(\"Symbol.match\")}}\n- {{jsxref(\"Symbol.matchAll\")}}\n- {{jsxref(\"Symbol.replace\")}}\n- {{jsxref(\"Symbol.split\")}}\n- {{jsxref(\"String.prototype.search()\")}}\n- [`RegExp.prototype[@@search]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search)\n"
    },
    "species": {
      "index.md": "---\ntitle: Symbol.species\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/species\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.species\n---\n\n{{JSRef}}\n\nThe **`Symbol.species`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@species`. Methods that create copies of an object may look up this symbol on the object for the constructor function to use when creating the copy.\n\n> **Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-species.html\")}}\n\n## Value\n\nThe well-known symbol `@@species`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nThe `@@species` accessor property allows subclasses to override the default constructor for objects. This specifies a protocol about how instances should be copied. For example, when you use copying methods of arrays, such as {{jsxref(\"Array/map\", \"map()\")}}. the `map()` method uses `instance.constructor[Symbol.species]` to get the constructor for constructing the new array. For more information, see [subclassing built-ins](/en-US/docs/Web/JavaScript/Reference/Classes/extends#subclassing_built-ins).\n\nAll built-in implementations of `@@species` return the `this` value, which is the current instance's constructor. This allows copying methods to create instances of derived classes rather than the base class — for example, `map()` will return an array of the same type as the original array.\n\n## Examples\n\n### Using species\n\nYou might want to return {{jsxref(\"Array\")}} objects in your derived array class `MyArray`. For example, when using methods such as {{jsxref(\"Array/map\", \"map()\")}} that return the default constructor, you want these methods to return a parent `Array` object, instead of the `MyArray` object. The `species` symbol lets you do this:\n\n```js\nclass MyArray extends Array {\n  // Overwrite species to the parent Array constructor\n  static get [Symbol.species]() {\n    return Array;\n  }\n}\nconst a = new MyArray(1, 2, 3);\nconst mapped = a.map((x) => x * x);\n\nconsole.log(mapped instanceof MyArray); // false\nconsole.log(mapped instanceof Array); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Array/@@species\", \"Array[@@species]\")}}\n- {{jsxref(\"ArrayBuffer/@@species\", \"ArrayBuffer[@@species]\")}}\n- {{jsxref(\"Map/@@species\", \"Map[@@species]\")}}\n- {{jsxref(\"Promise/@@species\", \"Promise[@@species]\")}}\n- {{jsxref(\"RegExp/@@species\", \"RegExp[@@species]\")}}\n- {{jsxref(\"Set/@@species\", \"Set[@@species]\")}}\n- {{jsxref(\"TypedArray/@@species\", \"TypedArray[@@species]\")}}\n"
    },
    "split": {
      "index.md": "---\ntitle: Symbol.split\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/split\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.split\n---\n\n{{JSRef}}\n\nThe **`Symbol.split`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@split`. The {{jsxref(\"String.prototype.split()\")}} method looks up this symbol on its first argument for the method that splits a string at the indices that match the current object.\n\nFor more information, see[`RegExp.prototype[@@split]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split) and {{jsxref(\"String.prototype.split()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-split.html\", \"taller\")}}\n\n## Value\n\nThe well-known symbol `@@split`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Examples\n\n### Custom reverse split\n\n```js\nclass ReverseSplit {\n  [Symbol.split](string) {\n    const array = string.split(\" \");\n    return array.reverse();\n  }\n}\n\nconsole.log(\"Another one bites the dust\".split(new ReverseSplit()));\n// [ \"dust\", \"the\", \"bites\", \"one\", \"Another\" ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol.split` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- {{jsxref(\"Symbol.match\")}}\n- {{jsxref(\"Symbol.matchAll\")}}\n- {{jsxref(\"Symbol.replace\")}}\n- {{jsxref(\"Symbol.search\")}}\n- {{jsxref(\"String.prototype.split()\")}}\n- [`RegExp.prototype[@@split]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split)\n"
    },
    "symbol": {
      "index.md": "---\ntitle: Symbol() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/Symbol\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Symbol.Symbol\n---\n\n{{JSRef}}\n\nThe **`Symbol()`** function returns primitive values of type Symbol.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-constructor.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nSymbol()\nSymbol(description)\n```\n\n> **Note:** `Symbol()` can only be called without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to construct it with `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `description` {{optional_inline}}\n  - : A string. A description of the symbol which can be used for debugging but not to\n    access the symbol itself.\n\n## Examples\n\n### Creating symbols\n\nTo create a new primitive symbol, you write `Symbol()` with an optional\nstring as its description:\n\n```js\nconst sym1 = Symbol();\nconst sym2 = Symbol(\"foo\");\nconst sym3 = Symbol(\"foo\");\n```\n\nThe above code creates three new symbols. Note that `Symbol(\"foo\")` does not\ncoerce the string `\"foo\"` into a symbol. It creates a new symbol each time:\n\n```js\nSymbol(\"foo\") === Symbol(\"foo\"); // false\n```\n\n### new Symbol()\n\nThe following syntax with the {{jsxref(\"Operators/new\", \"new\")}} operator will throw a\n{{jsxref(\"TypeError\")}}:\n\n```js example-bad\nconst sym = new Symbol(); // TypeError\n```\n\nThis prevents authors from creating an explicit `Symbol` wrapper object\ninstead of a new symbol value and might be surprising as creating explicit wrapper\nobjects around primitive data types is generally possible (for example,\n`new Boolean`, `new String` and `new Number`).\n\nIf you really want to create a `Symbol` wrapper object, you can use the\n`Object()` function:\n\n```js\nconst sym = Symbol(\"foo\");\nconst symObj = Object(sym);\ntypeof sym; // \"symbol\"\ntypeof symObj; // \"object\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n"
    },
    "toprimitive": {
      "index.md": "---\ntitle: Symbol.toPrimitive\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.toPrimitive\n---\n\n{{JSRef}}\n\nThe **`Symbol.toPrimitive`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@toPrimitive`. All [type coercion](/en-US/docs/Web/JavaScript/Data_structures#type_coercion) algorithms look up this symbol on objects for the method that accepts a preferred type and returns a primitive representation of the object, before falling back to using the object's `valueOf()` and `toString()` methods.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-toprimitive.html\")}}\n\n## Value\n\nThe well-known symbol `@@toPrimitive`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nWith the help of the `Symbol.toPrimitive` property (used as a function value), an object can be converted to a primitive value. The function is called with a string argument `hint`, which specifies the preferred type of the result primitive value. The `hint` argument can be one of `\"number\"`, `\"string\"`, and `\"default\"`.\n\nThe `\"number\"` hint is used by [numeric coercion](/en-US/docs/Web/JavaScript/Data_structures#numeric_coercion) algorithms. The `\"string\"` hint is used by the [string coercion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) algorithm. The `\"default\"` hint is used by the [primitive coercion](/en-US/docs/Web/JavaScript/Data_structures#primitive_coercion) algorithm. The `hint` only acts as a weak signal of preference, and the implementation is free to ignore it (as [`Symbol.prototype[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive) does). The language does not enforce alignment between the `hint` and the result type, although `[@@toPrimitive]()` must return a primitive, or a {{jsxref(\"TypeError\")}} is thrown.\n\nObjects without the `@@toPrimitive` property are converted to primitives by calling the `valueOf()` and `toString()` methods in different orders, which is explained in more detail in the [type coercion](/en-US/docs/Web/JavaScript/Data_structures#type_coercion) section. `@@toPrimitive` allows full control over the primitive conversion process. For example, [`Date.prototype[@@toPrimitive]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) treats `\"default\"` as if it's `\"string\"` and calls `toString()` instead of `valueOf()`. [`Symbol.prototype[@@toPrimitive]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive) ignores the hint and always returns a symbol, which means even in string contexts, {{jsxref(\"Symbol.prototype.toString()\")}} won't be called, and `Symbol` objects must always be explicitly converted to strings through [`String()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String).\n\n## Examples\n\n### Modifying primitive values converted from an object\n\nFollowing example describes how `Symbol.toPrimitive` property can modify the primitive value converted from an object.\n\n```js\n// An object without Symbol.toPrimitive property.\nconst obj1 = {};\nconsole.log(+obj1); // NaN\nconsole.log(`${obj1}`); // \"[object Object]\"\nconsole.log(obj1 + \"\"); // \"[object Object]\"\n\n// An object with Symbol.toPrimitive property.\nconst obj2 = {\n  [Symbol.toPrimitive](hint) {\n    if (hint === \"number\") {\n      return 10;\n    }\n    if (hint === \"string\") {\n      return \"hello\";\n    }\n    return true;\n  },\n};\nconsole.log(+obj2); // 10        — hint is \"number\"\nconsole.log(`${obj2}`); // \"hello\"   — hint is \"string\"\nconsole.log(obj2 + \"\"); // \"true\"    — hint is \"default\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol.toPrimitive` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- [`Date.prototype[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive)\n- [`Symbol.prototype[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive)\n- {{jsxref(\"Object.prototype.toString()\")}}\n- {{jsxref(\"Object.prototype.valueOf()\")}}\n"
    },
    "tostring": {
      "index.md": "---\ntitle: Symbol.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Symbol.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"Symbol\")}} values returns a string representing this symbol value.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-prototype-tostring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the specified symbol value.\n\n## Description\n\nThe {{jsxref(\"Symbol\")}} object overrides the `toString` method of {{jsxref(\"Object\")}}; it does not inherit\n{{jsxref(\"Object.prototype.toString()\")}}. For `Symbol` values, the `toString` method returns a descriptive string in the form `\"Symbol(description)\"`, where `description` is the symbol's [description](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description).\n\nThe `toString()` method requires its `this` value to be a `Symbol` primitive or wrapper object. It throws a {{jsxref(\"TypeError\")}} for other `this` values without attempting to coerce them to symbol values.\n\nBecause `Symbol` has a [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive) method, that method always takes priority over `toString()` when a `Symbol` object is [coerced to a string](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion). However, because `Symbol.prototype[@@toPrimitive]()` returns a symbol primitive, and symbol primitives throw a {{jsxref(\"TypeError\")}} when implicitly converted to a string, the `toString()` method is never implicitly called by the language. To stringify a symbol, you must explicitly call its `toString()` method or use the [`String()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String#using_string_to_stringify_a_symbol) function.\n\n## Examples\n\n### Using toString()\n\n```js\nSymbol(\"desc\").toString(); // \"Symbol(desc)\"\n\n// well-known symbols\nSymbol.iterator.toString(); // \"Symbol(Symbol.iterator)\"\n\n// global symbols\nSymbol.for(\"foo\").toString(); // \"Symbol(foo)\"\n```\n\n### Implicitly calling toString()\n\nThe only way to make JavaScript implicitly call `toString()` instead of [`[@@toPrimitive]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive) on a symbol wrapper object is by [deleting](/en-US/docs/Web/JavaScript/Reference/Operators/delete) the `@@toPrimitive` method first.\n\n> **Warning:** You should not do this in practice. Never mutate built-in objects unless you know exactly what you're doing.\n\n```js\ndelete Symbol.prototype[Symbol.toPrimitive];\nconsole.log(`${Object(Symbol(\"foo\"))}`); // \"Symbol(foo)\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.toString()\")}}\n"
    },
    "tostringtag": {
      "index.md": "---\ntitle: Symbol.toStringTag\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.toStringTag\n---\n\n{{JSRef}}\n\nThe **`Symbol.toStringTag`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@toStringTag`. {{jsxref(\"Object.prototype.toString()\")}} looks up this symbol on the `this` value for the property containing a string that represents the type of the object.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-tostringtag.html\")}}\n\n## Value\n\nThe well-known symbol `@@toStringTag`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Examples\n\n### Default tags\n\nSome values do not have `Symbol.toStringTag`, but have special `toString()` representations. For a complete list, see {{jsxref(\"Object.prototype.toString()\")}}.\n\n```js\nObject.prototype.toString.call(\"foo\"); // \"[object String]\"\nObject.prototype.toString.call([1, 2]); // \"[object Array]\"\nObject.prototype.toString.call(3); // \"[object Number]\"\nObject.prototype.toString.call(true); // \"[object Boolean]\"\nObject.prototype.toString.call(undefined); // \"[object Undefined]\"\nObject.prototype.toString.call(null); // \"[object Null]\"\n// ... and more\n```\n\n### Built-in toStringTag symbols\n\nMost built-in objects provide their own `@@toStringTag` property. Almost all built-in objects' `@@toStringTag` property is not writable, not enumerable, and configurable; the exception is {{jsxref(\"Iterator\")}}, which is writable for compatibility reasons.\n\nFor constructor objects like {{jsxref(\"Promise\")}}, the property is installed on `Constructor.prototype`, so that all instances of the constructor inherit `@@toStringTag` and can be stringified. For non-constructor objects like {{jsxref(\"Math\")}} and {{jsxref(\"JSON\")}}, the property is installed as a static property, so that the namespace object itself can be stringified. Sometimes, the constructor also provides its own `toString` method (for example, {{jsxref(\"Intl.Locale\")}}), in which case the `@@toStringTag` property is only used when you explicitly call `Object.prototype.toString` on it.\n\n```js\nObject.prototype.toString.call(new Map()); // \"[object Map]\"\nObject.prototype.toString.call(function* () {}); // \"[object GeneratorFunction]\"\nObject.prototype.toString.call(Promise.resolve()); // \"[object Promise]\"\n// ... and more\n```\n\n### Custom tag with toStringTag\n\nWhen creating your own class, JavaScript defaults to the \"Object\" tag:\n\n```js\nclass ValidatorClass {}\n\nObject.prototype.toString.call(new ValidatorClass()); // \"[object Object]\"\n```\n\nNow, with the help of `toStringTag`, you are able to set your own custom tag:\n\n```js\nclass ValidatorClass {\n  get [Symbol.toStringTag]() {\n    return \"Validator\";\n  }\n}\n\nObject.prototype.toString.call(new ValidatorClass()); // \"[object Validator]\"\n```\n\n### toStringTag available on all DOM prototype objects\n\nDue to a [WebIDL spec change](https://github.com/whatwg/webidl/pull/357) in mid-2020, browsers are adding a `Symbol.toStringTag` property to all DOM prototype objects. For example, to access the `Symbol.toStringTag` property on {{domxref(\"HTMLButtonElement\")}}:\n\n```js\nconst test = document.createElement(\"button\");\ntest.toString(); // \"[object HTMLButtonElement]\"\ntest[Symbol.toStringTag]; // \"HTMLButtonElement\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Symbol.toStringTag` in `core-js`](https://github.com/zloirock/core-js#ecmascript-symbol)\n- {{jsxref(\"Object.prototype.toString()\")}}\n"
    },
    "unscopables": {
      "index.md": "---\ntitle: Symbol.unscopables\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/unscopables\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.Symbol.unscopables\n---\n\n{{JSRef}}\n\nThe **`Symbol.unscopables`** static data property represents the [well-known symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#well-known_symbols) `@@unscopables`. The {{jsxref(\"Statements/with\", \"with\")}} statement looks up this symbol on the scope object for a property containing a collection of properties that should not become bindings within the `with` environment.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-unscopables.html\")}}\n\n## Value\n\nThe well-known symbol `@@unscopables`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\nThe `@@unscopables` symbol (accessed via `Symbol.unscopables`) can be defined on any object to exclude property names from being exposed as lexical variables in [`with`](/en-US/docs/Web/JavaScript/Reference/Statements/with) environment bindings. Note that when using [strict mode](/en-US/docs/Web/JavaScript/Reference/Strict_mode), `with` statements are not available, and this symbol is likely not needed.\n\nSetting a property of the `@@unscopables` object to `true` (or any [truthy](/en-US/docs/Glossary/Truthy) value) will make the corresponding property of the `with` scope object _unscopable_ and therefore won't be introduced to the `with` body scope. Setting a property to `false` (or any [falsy](/en-US/docs/Glossary/Falsy) value) will make it _scopable_ and thus appear as lexical scope variables.\n\nWhen deciding whether `x` is unscopable, the entire prototype chain of the `@@unscopables` property is looked up for a property called `x`. This means if you declared `@@unscopables` as a plain object, `Object.prototype` properties like [`toString`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) would become unscopable as well, which may cause backward incompatibility for legacy code assuming those properties are normally scoped (see [an example below](#avoid_using_a_non-null-prototype_object_as_unscopables)). You are advised to make your custom `@@unscopables` property have `null` as its prototype, like [`Array.prototype[@@unscopables]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables) does.\n\nThis protocol is also utilized by DOM APIs, such as [`Element.prototype.append()`](/en-US/docs/Web/API/Element/append).\n\n## Examples\n\n### Scoping in with statements\n\nThe following code works fine in ES5 and below. However, in ECMAScript 2015 and later, the {{jsxref(\"Array.prototype.keys()\")}} method was introduced. That means that inside a `with` environment, \"keys\" would now be the method and not the variable. That's why the `@@unscopables` symbol was introduced. A built-in `@@unscopables` setting is implemented as {{jsxref(\"Array/@@unscopables\", \"Array.prototype[@@unscopables]\")}} to prevent some of the Array methods being scoped into the `with` statement.\n\n```js\nvar keys = [];\n\nwith (Array.prototype) {\n  keys.push(\"something\");\n}\n```\n\n### Unscopables in objects\n\nYou can also set `@@unscopables` for your own objects.\n\n```js\nconst obj = {\n  foo: 1,\n  bar: 2,\n  baz: 3,\n};\n\nobj[Symbol.unscopables] = {\n  // Make the object have `null` prototype to prevent\n  // `Object.prototype` methods from being unscopable\n  __proto__: null,\n  // `foo` will be scopable\n  foo: false,\n  // `bar` will be unscopable\n  bar: true,\n  // `baz` is omitted; because `undefined` is falsy, it is also scopable (default)\n};\n\nwith (obj) {\n  console.log(foo); // 1\n  console.log(bar); // ReferenceError: bar is not defined\n  console.log(baz); // 3\n}\n```\n\n### Avoid using a non-null-prototype object as @@unscopables\n\nDeclaring `@@unscopables` as a plain object without eliminating its prototype may cause subtle bugs. Consider the following code working before `@@unscopables`:\n\n```js\nconst character = {\n  name: \"Yoda\",\n  toString: function () {\n    return \"Use with statements, you must not\";\n  },\n};\n\nwith (character) {\n  console.log(name + ' says: \"' + toString() + '\"'); // Yoda says: \"Use with statements, you must not\"\n}\n```\n\nTo preserve backward compatibility, you decided to add an `@@unscopables` property when adding more properties to `character`. You may naïvely do it like:\n\n```js example-bad\nconst character = {\n  name: \"Yoda\",\n  toString: function () {\n    return \"Use with statements, you must not\";\n  },\n  student: \"Luke\",\n  [Symbol.unscopables]: {\n    // Make `student` unscopable\n    student: true,\n  },\n};\n```\n\nHowever, the code above now breaks:\n\n```js\nwith (character) {\n  console.log(name + ' says: \"' + toString() + '\"'); // Yoda says: \"[object Undefined]\"\n}\n```\n\nThis is because when looking up `character[Symbol.unscopables].toString`, it returns [`Object.prototype.toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString), which is a truthy value, thus making the `toString()` call in the `with()` statement reference `globalThis.toString()` instead — and because it's called without a [`this`](/en-US/docs/Web/JavaScript/Reference/Operators/this), `this` is `undefined`, making it return `[object Undefined]`.\n\nEven when the method is not overridden by `character`, making it unscopable will change the value of `this`.\n\n```js\nconst proto = {};\nconst obj = { __proto__: proto };\n\nwith (proto) {\n  console.log(isPrototypeOf(obj)); // true; `isPrototypeOf` is scoped and `this` is `proto`\n}\n\nproto[Symbol.unscopables] = {};\n\nwith (proto) {\n  console.log(isPrototypeOf(obj)); // TypeError: Cannot convert undefined or null to object\n  // `isPrototypeOf` is unscoped and `this` is undefined\n}\n```\n\nTo fix this, always make sure `@@unscopables` only contains properties you wish to be unscopable, without `Object.prototype` properties.\n\n```js example-good\nconst character = {\n  name: \"Yoda\",\n  toString: function () {\n    return \"Use with statements, you must not\";\n  },\n  student: \"Luke\",\n  [Symbol.unscopables]: {\n    // Make the object have `null` prototype to prevent\n    // `Object.prototype` methods from being unscopable\n    __proto__: null,\n    // Make `student` unscopable\n    student: true,\n  },\n};\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Array/@@unscopables\", \"Array.prototype[@@unscopables]\")}}\n- [`with`](/en-US/docs/Web/JavaScript/Reference/Statements/with)\n- [`Element.prototype.append()`](/en-US/docs/Web/API/Element/append)\n"
    },
    "valueof": {
      "index.md": "---\ntitle: Symbol.prototype.valueOf()\nslug: Web/JavaScript/Reference/Global_Objects/Symbol/valueOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.Symbol.valueOf\n---\n\n{{JSRef}}\n\nThe **`valueOf()`** method of {{jsxref(\"Symbol\")}} values returns this symbol value.\n\n{{EmbedInteractiveExample(\"pages/js/symbol-prototype-valueof.html\")}}\n\n## Syntax\n\n```js-nolint\nvalueOf()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe primitive value of the specified {{jsxref(\"Symbol\")}} object.\n\n## Description\n\nThe `valueOf()` method of {{jsxref(\"Symbol\")}} returns the primitive value of a Symbol object as a Symbol data type.\n\nJavaScript calls the `valueOf()` method to convert an object to a primitive value. You rarely need to invoke the `valueOf()` method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.\n\n## Examples\n\n### Using valueOf()\n\n```js\nconst sym = Symbol(\"example\");\nsym === sym.valueOf(); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Object.prototype.valueOf()\")}}\n"
    }
  },
  "syntaxerror": {
    "index.md": "---\ntitle: SyntaxError\nslug: Web/JavaScript/Reference/Global_Objects/SyntaxError\npage-type: javascript-class\nbrowser-compat: javascript.builtins.SyntaxError\n---\n\n{{JSRef}}\n\nThe **`SyntaxError`** object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.\n\n`SyntaxError` is a {{Glossary(\"serializable object\")}}, so it can be cloned with {{domxref(\"structuredClone()\")}} or copied between [Workers](/en-US/docs/Web/API/Worker) using {{domxref(\"Worker/postMessage()\", \"postMessage()\")}}.\n\n`SyntaxError` is a subclass of {{jsxref(\"Error\")}}.\n\n## Constructor\n\n- {{jsxref(\"SyntaxError/SyntaxError\", \"SyntaxError()\")}}\n  - : Creates a new `SyntaxError` object.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"Error\")}}_.\n\nThese properties are defined on `SyntaxError.prototype` and shared by all `SyntaxError` instances.\n\n- {{jsxref(\"Object/constructor\", \"SyntaxError.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `SyntaxError` instances, the initial value is the {{jsxref(\"SyntaxError/SyntaxError\", \"SyntaxError\")}} constructor.\n- {{jsxref(\"Error/name\", \"SyntaxError.prototype.name\")}}\n  - : Represents the name for the type of error. For `SyntaxError.prototype.name`, the initial value is `\"SyntaxError\"`.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"Error\")}}_.\n\n## Examples\n\n### Catching a SyntaxError\n\n```js\ntry {\n  eval(\"hoo bar\");\n} catch (e) {\n  console.log(e instanceof SyntaxError); // true\n  console.log(e.message);\n  console.log(e.name); // \"SyntaxError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### Creating a SyntaxError\n\n```js\ntry {\n  throw new SyntaxError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof SyntaxError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"SyntaxError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n",
    "syntaxerror": {
      "index.md": "---\ntitle: SyntaxError() constructor\nslug: Web/JavaScript/Reference/Global_Objects/SyntaxError/SyntaxError\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.SyntaxError.SyntaxError\n---\n\n{{JSRef}}\n\nThe **`SyntaxError()`** constructor creates {{jsxref(\"SyntaxError\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew SyntaxError()\nnew SyntaxError(message)\nnew SyntaxError(message, options)\nnew SyntaxError(message, fileName)\nnew SyntaxError(message, fileName, lineNumber)\n\nSyntaxError()\nSyntaxError(message)\nSyntaxError(message, options)\nSyntaxError(message, fileName)\nSyntaxError(message, fileName, lineNumber)\n```\n\n> **Note:** `SyntaxError()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `SyntaxError` instance.\n\n### Parameters\n\n- `message` {{optional_inline}}\n  - : Human-readable description of the error\n- `options` {{optional_inline}}\n  - : An object that has the following properties:\n    - `cause` {{optional_inline}}\n      - : A property indicating the specific cause of the error.\n        When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n- `fileName` {{optional_inline}} {{non-standard_inline}}\n  - : The name of the file containing the code that caused the exception\n- `lineNumber` {{optional_inline}} {{non-standard_inline}}\n  - : The line number of the code that caused the exception\n\n## Examples\n\n### Catching a SyntaxError\n\n```js\ntry {\n  eval(\"hoo bar\");\n} catch (e) {\n  console.log(e instanceof SyntaxError); // true\n  console.log(e.message);\n  console.log(e.name); // \"SyntaxError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### Creating a SyntaxError\n\n```js\ntry {\n  throw new SyntaxError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof SyntaxError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"SyntaxError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n"
    }
  },
  "typedarray": {
    "@@iterator": {
      "index.md": "---\ntitle: TypedArray.prototype[@@iterator]()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.@@iterator\n---\n\n{{JSRef}}\n\nThe **`[@@iterator]()`** method of {{jsxref(\"TypedArray\")}} instances implements the [iterable protocol](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) and allows typed arrays to be consumed by most syntaxes expecting iterables, such as the [spread syntax](/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and {{jsxref(\"Statements/for...of\", \"for...of\")}} loops. It returns an [array iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the value of each index in the typed array.\n\nThe initial value of this property is the same function object as the initial value of the {{jsxref(\"TypedArray.prototype.values\")}} property.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-prototype-@@iterator.html\")}}\n\n## Syntax\n\n```js-nolint\ntypedArray[Symbol.iterator]()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe same return value as {{jsxref(\"TypedArray.prototype.values()\")}}: a new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) that yields the value of each index in the typed array.\n\n## Examples\n\n### Iteration using for...of loop\n\nNote that you seldom need to call this method directly. The existence of the `@@iterator` method makes typed arrays [iterable](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol), and iterating syntaxes like the `for...of` loop automatically call this method to obtain the iterator to loop over.\n\n```js\nconst arr = new Uint8Array([10, 20, 30, 40, 50]);\nfor (const n of arr) {\n  console.log(n);\n}\n```\n\n### Manually hand-rolling the iterator\n\nYou may still manually call the `next()` method of the returned iterator object to achieve maximum control over the iteration process.\n\n```js\nconst arr = new Uint8Array([10, 20, 30, 40, 50]);\nconst arrIter = arr[Symbol.iterator]();\nconsole.log(arrIter.next().value); // 10\nconsole.log(arrIter.next().value); // 20\nconsole.log(arrIter.next().value); // 30\nconsole.log(arrIter.next().value); // 40\nconsole.log(arrIter.next().value); // 50\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype[@@iterator]` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.entries()\")}}\n- {{jsxref(\"TypedArray.prototype.keys()\")}}\n- {{jsxref(\"TypedArray.prototype.values()\")}}\n- {{jsxref(\"Symbol.iterator\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "@@species": {
      "index.md": "---\ntitle: TypedArray[@@species]\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/@@species\npage-type: javascript-static-accessor-property\nbrowser-compat: javascript.builtins.TypedArray.@@species\n---\n\n{{JSRef}}\n\nThe **`TypedArray[@@species]`** static accessor property returns the constructor used to construct return values from typed array methods.\n\n> **Warning:** The existence of `@@species` allows execution of arbitrary code and may create security vulnerabilities. It also makes certain optimizations much harder. Engine implementers are [investigating whether to remove this feature](https://github.com/tc39/proposal-rm-builtin-subclassing). Avoid relying on it if possible.\n\n## Syntax\n\n```js-nolint\nTypedArray[Symbol.species]\n```\n\n### Return value\n\nThe value of the constructor (`this`) on which `get @@species` was called. The return value is used to construct return values from typed array methods that create new typed arrays.\n\n## Description\n\nThe `@@species` accessor property returns the default constructor for [typed array](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects) objects. Subclass constructors may override it to change the constructor assignment. The default implementation is basically:\n\n```js\n// Hypothetical underlying implementation for illustration\nclass TypedArray {\n  static get [Symbol.species]() {\n    return this;\n  }\n}\n```\n\nBecause of this polymorphic implementation, `@@species` of derived subclasses would also return the constructor itself by default.\n\n```js\nclass SubTypedArray extends Int8Array {}\nSubTypedArray[Symbol.species] === SubTypedArray; // true\n```\n\nWhen calling typed array methods that do not mutate the existing array but return a new array instance (for example, [`filter()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter) and [`map()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map)), the array's `constructor[@@species]` will be accessed. The returned constructor will be used to construct the return value of the typed array method.\n\nHowever, unlike [`Array[@@species]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species), when using `@@species` to create new typed arrays, the language will make sure that the newly created array is a proper typed array and has the same content type as the original array — for example, you can't create a {{jsxref(\"BigInt64Array\")}} from a {{jsxref(\"Float64Array\")}}, or create a non-BigInt array from a BigInt array. Doing so throws a {{jsxref(\"TypeError\")}}.\n\n```js\nclass BadArray extends Int8Array {\n  static get [Symbol.species]() {\n    return Array;\n  }\n}\nnew BadArray(1).map(() => 0); // TypeError: Method %TypedArray%.prototype.map called on incompatible receiver [object Array]\n\nclass BadArray2 extends Int8Array {\n  static get [Symbol.species]() {\n    return BigInt64Array;\n  }\n}\nnew BadArray2(1).map(() => 0n); // TypeError: TypedArray.prototype.map constructed typed array of different content type from |this|\n```\n\n> **Note:** Due to a bug in both [SpiderMonkey](https://bugzil.la/1640194) and V8, the content type match is not checked. Only Safari will throw a {{jsxref(\"TypeError\")}} in the second example.\n\n## Examples\n\n### Species in ordinary objects\n\nThe `@@species` property returns the default constructor function, which is one of the typed array constructors itself for any given [typed array](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects) constructor.\n\n```js\nInt8Array[Symbol.species]; // function Int8Array()\nUint8Array[Symbol.species]; // function Uint8Array()\nFloat32Array[Symbol.species]; // function Float32Array()\n```\n\n### Species in derived objects\n\nIn an instance of a custom `TypedArray` subclass, such as `MyTypedArray`, the `MyTypedArray` species is the `MyTypedArray` constructor. However, you might want to overwrite this, in order to return a parent [typed array](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects) object in your derived class methods:\n\n```js\nclass MyTypedArray extends Uint8Array {\n  // Overwrite MyTypedArray species to the parent Uint8Array constructor\n  static get [Symbol.species]() {\n    return Uint8Array;\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"Symbol.species\")}}\n"
    },
    "at": {
      "index.md": "---\ntitle: TypedArray.prototype.at()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/at\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.at\n---\n\n{{JSRef}}\n\nThe **`at()`** method of {{jsxref(\"TypedArray\")}} instances takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the typed array. This method has the same algorithm as {{jsxref(\"Array.prototype.at()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-at.html\")}}\n\n## Syntax\n\n```js-nolint\nat(index)\n```\n\n### Parameters\n\n- `index`\n  - : Zero-based index of the typed array element to be returned, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). Negative index counts back from the end of the typed array — if `index < 0`, `index + array.length` is accessed.\n\n### Return value\n\nThe element in the typed array matching the given index. Always returns {{jsxref(\"undefined\")}} if `index < -array.length` or `index >= array.length` without attempting to access the corresponding property.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.at()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Return the last value of a typed array\n\nThe following example provides a function which returns the last element found in a specified array.\n\n```js\nconst uint8 = new Uint8Array([1, 2, 4, 7, 11, 18]);\n\n// A function which returns the last item of a given array\nfunction returnLast(arr) {\n  return arr.at(-1);\n}\n\nconst lastItem = returnLast(uint8);\nconsole.log(lastItem); // 18\n```\n\n### Comparing methods\n\nHere we compare different ways to select the penultimate (last but one) item of a {{jsxref(\"TypedArray\")}}. Whilst all below methods are valid, it highlights the succinctness and readability of the `at()` method.\n\n```js\n// Our typed array with values\nconst uint8 = new Uint8Array([1, 2, 4, 7, 11, 18]);\n\n// Using length property\nconst lengthWay = uint8[uint8.length - 2];\nconsole.log(lengthWay); // 11\n\n// Using slice() method. Note an array is returned\nconst sliceWay = uint8.slice(-2, -1);\nconsole.log(sliceWay[0]); // 11\n\n// Using at() method\nconst atWay = uint8.at(-2);\nconsole.log(atWay); // 11\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.at` in `core-js`](https://github.com/zloirock/core-js#relative-indexing-method)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.findIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.indexOf()\")}}\n- {{jsxref(\"TypedArray.prototype.with()\")}}\n- {{jsxref(\"Array.prototype.at()\")}}\n- {{jsxref(\"String.prototype.at()\")}}\n"
    },
    "buffer": {
      "index.md": "---\ntitle: TypedArray.prototype.buffer\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.TypedArray.buffer\n---\n\n{{JSRef}}\n\nThe **`buffer`** accessor property of {{jsxref(\"TypedArray\")}} instances returns the {{jsxref(\"ArrayBuffer\")}} or {{jsxref(\"SharedArrayBuffer\")}} referenced by this typed array at construction time.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-buffer.html\", \"shorter\")}}\n\n## Description\n\nThe `buffer` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when the _TypedArray_ is constructed and cannot be changed. _TypedArray_ is one of the [TypedArray objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects).\n\nBecause a typed array is a _view_ of a buffer, the underlying buffer may be longer than the typed array itself.\n\n## Examples\n\n### Using the buffer property\n\n```js\nconst buffer = new ArrayBuffer(8);\nconst uint16 = new Uint16Array(buffer);\nuint16.buffer; // ArrayBuffer { byteLength: 8 }\n```\n\n### Accessing the underlying buffer from a sliced array view\n\n```js\nconst buffer = new ArrayBuffer(1024);\nconst arr = new Uint8Array(buffer, 64, 128);\nconsole.log(arr.byteLength); // 128\nconsole.log(arr.buffer.byteLength); // 1024\nconsole.log(arr.buffer === buffer); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n"
    },
    "bytelength": {
      "index.md": "---\ntitle: TypedArray.prototype.byteLength\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.TypedArray.byteLength\n---\n\n{{JSRef}}\n\nThe **`byteLength`** accessor property of {{jsxref(\"TypedArray\")}} instances returns the length (in bytes) of this typed array.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-bytelength.html\", \"shorter\")}}\n\n## Description\n\nThe `byteLength` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when a _TypedArray_ is constructed and cannot be changed. If the _TypedArray_ is not specifying a `byteOffset` or a `length`, the `length` of the referenced `ArrayBuffer` will be returned. _TypedArray_ is one of the [TypedArray objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects).\n\n## Examples\n\n### Using the byteLength property\n\n```js\nconst buffer = new ArrayBuffer(8);\n\nconst uint8 = new Uint8Array(buffer);\nuint8.byteLength; // 8 (matches the byteLength of the buffer)\n\nconst uint8newLength = new Uint8Array(buffer, 1, 5);\nuint8newLength.byteLength; // 5 (as specified when constructing the Uint8Array)\n\nconst uint8offSet = new Uint8Array(buffer, 2);\nuint8offSet.byteLength; // 6 (due to the offset of the constructed Uint8Array)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n"
    },
    "byteoffset": {
      "index.md": "---\ntitle: TypedArray.prototype.byteOffset\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.TypedArray.byteOffset\n---\n\n{{JSRef}}\n\nThe **`byteOffset`** accessor property of {{jsxref(\"TypedArray\")}} instances returns the offset (in bytes) of this typed array from the start of its {{jsxref(\"ArrayBuffer\")}} or {{jsxref(\"SharedArrayBuffer\")}}.\n\n## Description\n\nThe `byteOffset` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when a _TypedArray_ is constructed and cannot be changed. _TypedArray_ is one of the [TypedArray objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects).\n\n## Examples\n\n### Using the byteOffset property\n\n```js\nconst buffer = new ArrayBuffer(8);\n\nconst uint8array1 = new Uint8Array(buffer);\nuint8array1.byteOffset; // 0 (no offset specified)\n\nconst uint8array2 = new Uint8Array(buffer, 3);\nuint8array2.byteOffset; // 3 (as specified when constructing Uint8Array)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n"
    },
    "bytes_per_element": {
      "index.md": "---\ntitle: TypedArray.BYTES_PER_ELEMENT\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\npage-type: javascript-static-data-property\nbrowser-compat: javascript.builtins.TypedArray.BYTES_PER_ELEMENT\n---\n\n{{JSRef}}\n\nThe **`TypedArray.BYTES_PER_ELEMENT`** static data property represents the size in bytes of each element in a typed array.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-bytes-per-element.html\", \"shorter\")}}\n\n## Value\n\nA number whose value depends on the type of `TypedArray`.\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\n`TypedArray` objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The `BYTES_PER_ELEMENT` constant contains the number of bytes each element in the given `TypedArray` has.\n\nThe `BYTES_PER_ELEMENT` property is both an _instance property_ and a _static property_. It's available on both `TypedArray` subclass constructors and on instances of those constructors.\n\nAs an instance property, `BYTES_PER_ELEMENT` is defined on the constructor's `prototype`.\n\n```js\nconsole.log(Object.hasOwn(Int8Array.prototype, \"BYTES_PER_ELEMENT\")); // true\n```\n\n## Examples\n\n### Using BYTES_PER_ELEMENT\n\nAs a static property:\n\n```js\nInt8Array.BYTES_PER_ELEMENT; // 1\nUint8Array.BYTES_PER_ELEMENT; // 1\nUint8ClampedArray.BYTES_PER_ELEMENT; // 1\nInt16Array.BYTES_PER_ELEMENT; // 2\nUint16Array.BYTES_PER_ELEMENT; // 2\nInt32Array.BYTES_PER_ELEMENT; // 4\nUint32Array.BYTES_PER_ELEMENT; // 4\nFloat32Array.BYTES_PER_ELEMENT; // 4\nFloat64Array.BYTES_PER_ELEMENT; // 8\nBigInt64Array.BYTES_PER_ELEMENT; // 8\nBigUint64Array.BYTES_PER_ELEMENT; // 8\n```\n\nAs an instance property:\n\n```js\nnew Int8Array([]).BYTES_PER_ELEMENT; // 1\nnew Uint8Array([]).BYTES_PER_ELEMENT; // 1\nnew Uint8ClampedArray([]).BYTES_PER_ELEMENT; // 1\nnew Int16Array([]).BYTES_PER_ELEMENT; // 2\nnew Uint16Array([]).BYTES_PER_ELEMENT; // 2\nnew Int32Array([]).BYTES_PER_ELEMENT; // 4\nnew Uint32Array([]).BYTES_PER_ELEMENT; // 4\nnew Float32Array([]).BYTES_PER_ELEMENT; // 4\nnew Float64Array([]).BYTES_PER_ELEMENT; // 8\nnew BigInt64Array([]).BYTES_PER_ELEMENT; // 8\nnew BigUint64Array([]).BYTES_PER_ELEMENT; // 8\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n"
    },
    "copywithin": {
      "index.md": "---\ntitle: TypedArray.prototype.copyWithin()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.copyWithin\n---\n\n{{JSRef}}\n\nThe **`copyWithin()`** method of {{jsxref(\"TypedArray\")}} instances shallow copies part of this typed array to another location in the same typed array and returns this typed array without modifying its length. This method has the same algorithm as {{jsxref(\"Array.prototype.copyWithin()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-copywithin.html\")}}\n\n## Syntax\n\n```js-nolint\ncopyWithin(target, start)\ncopyWithin(target, start, end)\n```\n\n### Parameters\n\n- `target`\n  - : Zero-based index at which to copy the sequence to, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). This corresponds to where the element at `start` will be copied to, and all elements between `start` and `end` are copied to succeeding indices.\n- `start`\n  - : Zero-based index at which to start copying elements from, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n- `end` {{optional_inline}}\n  - : Zero-based index at which to end copying elements from, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `copyWithin()` copies up to but not including `end`.\n\n### Return value\n\nThe modified typed array.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.copyWithin()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Using copyWithin()\n\n```js\nconst buffer = new ArrayBuffer(8);\nconst uint8 = new Uint8Array(buffer);\nuint8.set([1, 2, 3]);\nconsole.log(uint8); // Uint8Array [ 1, 2, 3, 0, 0, 0, 0, 0 ]\nuint8.copyWithin(3, 0, 3);\nconsole.log(uint8); // Uint8Array [ 1, 2, 3, 1, 2, 3, 0, 0 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.copyWithin` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"Array.prototype.copyWithin()\")}}\n"
    },
    "entries": {
      "index.md": "---\ntitle: TypedArray.prototype.entries()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/entries\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.entries\n---\n\n{{JSRef}}\n\nThe **`entries()`** method of {{jsxref(\"TypedArray\")}} instances returns a new _[array iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the key/value pairs for each index in the typed array. This method has the same algorithm as {{jsxref(\"Array.prototype.entries()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-entries.html\")}}\n\n## Syntax\n\n```js-nolint\nentries()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Description\n\nSee {{jsxref(\"Array.prototype.entries()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Iteration using for...of loop\n\n```js\nconst array = new Uint8Array([10, 20, 30, 40, 50]);\nconst arrayEntries = arr.entries();\nfor (const element of arrayEntries) {\n  console.log(element);\n}\n```\n\n### Alternative iteration\n\n```js\nconst array = new Uint8Array([10, 20, 30, 40, 50]);\nconst arrayEntries = arr.entries();\n\nconsole.log(arrayEntries.next().value); // [0, 10]\nconsole.log(arrayEntries.next().value); // [1, 20]\nconsole.log(arrayEntries.next().value); // [2, 30]\nconsole.log(arrayEntries.next().value); // [3, 40]\nconsole.log(arrayEntries.next().value); // [4, 50]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.entries` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.keys()\")}}\n- {{jsxref(\"TypedArray.prototype.values()\")}}\n- [`TypedArray.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator)\n- {{jsxref(\"Array.prototype.entries()\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "every": {
      "index.md": "---\ntitle: TypedArray.prototype.every()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/every\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.every\n---\n\n{{JSRef}}\n\nThe **`every()`** method of {{jsxref(\"TypedArray\")}} instances tests whether all elements in the typed array pass the test implemented by the provided function. It returns a Boolean value. This method has the same algorithm as {{jsxref(\"Array.prototype.every()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-every.html\")}}\n\n## Syntax\n\n```js-nolint\nevery(callbackFn)\nevery(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the typed array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the typed array.\n    - `index`\n      - : The index of the current element being processed in the typed array.\n    - `array`\n      - : The typed array `every()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\n`true` unless `callbackFn` returns a {{Glossary(\"falsy\")}} value for a typed array element, in which case `false` is immediately returned.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.every()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Testing size of all typed array elements\n\nThe following example tests whether all elements in the typed array are 10 or bigger.\n\n```js\nfunction isBigEnough(element, index, array) {\n  return element >= 10;\n}\nnew Uint8Array([12, 5, 8, 130, 44]).every(isBigEnough); // false\nnew Uint8Array([12, 54, 18, 130, 44]).every(isBigEnough); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.every` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.forEach()\")}}\n- {{jsxref(\"TypedArray.prototype.some()\")}}\n- {{jsxref(\"TypedArray.prototype.find()\")}}\n- {{jsxref(\"Array.prototype.every()\")}}\n"
    },
    "fill": {
      "index.md": "---\ntitle: TypedArray.prototype.fill()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/fill\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.fill\n---\n\n{{JSRef}}\n\nThe **`fill()`** method of {{jsxref(\"TypedArray\")}} instances changes all elements within a range of indices in a typed array to a static value. It returns the modified typed array. This method has the same algorithm as {{jsxref(\"Array.prototype.fill()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-fill.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nfill(value)\nfill(value, start)\nfill(value, start, end)\n```\n\n### Parameters\n\n- `value`\n  - : Value to fill the typed array with.\n- `start` {{optional_inline}}\n  - : Zero-based index at which to start filling, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n- `end` {{optional_inline}}\n  - : Zero-based index at which to end filling, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `fill()` fills up to but not including `end`.\n\n### Return value\n\nThe modified typed array, filled with `value`.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.fill()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Using fill()\n\n```js\nnew Uint8Array([1, 2, 3]).fill(4); // Uint8Array [4, 4, 4]\nnew Uint8Array([1, 2, 3]).fill(4, 1); // Uint8Array [1, 4, 4]\nnew Uint8Array([1, 2, 3]).fill(4, 1, 2); // Uint8Array [1, 4, 3]\nnew Uint8Array([1, 2, 3]).fill(4, 1, 1); // Uint8Array [1, 2, 3]\nnew Uint8Array([1, 2, 3]).fill(4, -3, -2); // Uint8Array [4, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.fill` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"Array.prototype.fill()\")}}\n"
    },
    "filter": {
      "index.md": "---\ntitle: TypedArray.prototype.filter()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/filter\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.filter\n---\n\n{{JSRef}}\n\nThe **`filter()`** method of {{jsxref(\"TypedArray\")}} instances creates a copy of a portion of a given typed array, filtered down to just the elements from the given typed array that pass the test implemented by the provided function. This method has the same algorithm as {{jsxref(\"Array.prototype.filter()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-filter.html\")}}\n\n## Syntax\n\n```js-nolint\nfilter(callbackFn)\nfilter(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the typed array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to keep the element in the resulting typed array, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the typed array.\n    - `index`\n      - : The index of the current element being processed in the typed array.\n    - `array`\n      - : The typed array `filter()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nA copy of the given typed array containing just the elements that pass the test. If no elements pass the test, an empty typed array is returned.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.filter()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Filtering out all small values\n\nThe following example uses `filter()` to create a filtered typed array that has all elements with values less than 10 removed.\n\n```js\nfunction isBigEnough(element, index, array) {\n  return element >= 10;\n}\nnew Uint8Array([12, 5, 8, 130, 44]).filter(isBigEnough);\n// Uint8Array [ 12, 130, 44 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.filter` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.forEach()\")}}\n- {{jsxref(\"TypedArray.prototype.every()\")}}\n- {{jsxref(\"TypedArray.prototype.map()\")}}\n- {{jsxref(\"TypedArray.prototype.some()\")}}\n- {{jsxref(\"TypedArray.prototype.reduce()\")}}\n- {{jsxref(\"Array.prototype.filter()\")}}\n"
    },
    "find": {
      "index.md": "---\ntitle: TypedArray.prototype.find()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/find\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.find\n---\n\n{{JSRef}}\n\nThe **`find()`** method of {{jsxref(\"TypedArray\")}} instances returns the first element in the provided typed array that satisfies the provided testing function. If no values satisfy the testing function, {{jsxref(\"undefined\")}} is returned. This method has the same algorithm as {{jsxref(\"Array.prototype.find()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-find.html\")}}\n\n## Syntax\n\n```js-nolint\nfind(callbackFn)\nfind(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the typed array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the typed array.\n    - `index`\n      - : The index of the current element being processed in the typed array.\n    - `array`\n      - : The typed array `find()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nThe first element in the typed array that satisfies the provided testing function.\nOtherwise, {{jsxref(\"undefined\")}} is returned.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.find()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Find a prime number in a typed array\n\nThe following example finds an element in the typed array that is a prime number (or returns {{jsxref(\"undefined\")}} if there is no prime number).\n\n```js\nfunction isPrime(element, index, array) {\n  let start = 2;\n  while (start <= Math.sqrt(element)) {\n    if (element % start++ < 1) {\n      return false;\n    }\n  }\n  return element > 1;\n}\n\nconst uint8 = new Uint8Array([4, 5, 8, 12]);\nconsole.log(uint8.find(isPrime)); // 5\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.find` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.findIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.findLast()\")}}\n- {{jsxref(\"TypedArray.prototype.findLastIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.includes()\")}}\n- {{jsxref(\"TypedArray.prototype.filter()\")}}\n- {{jsxref(\"TypedArray.prototype.every()\")}}\n- {{jsxref(\"TypedArray.prototype.some()\")}}\n- {{jsxref(\"Array.prototype.find()\")}}\n"
    },
    "findindex": {
      "index.md": "---\ntitle: TypedArray.prototype.findIndex()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.findIndex\n---\n\n{{JSRef}}\n\nThe **`findIndex()`** method of {{jsxref(\"TypedArray\")}} instances returns the index of the first element in a typed array that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as {{jsxref(\"Array.prototype.findIndex()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-findindex.html\")}}\n\n## Syntax\n\n```js-nolint\nfindIndex(callbackFn)\nfindIndex(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the typed array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the typed array.\n    - `index`\n      - : The index of the current element being processed in the typed array.\n    - `array`\n      - : The typed array `findIndex()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nThe index of the first element in the typed array that passes the test. Otherwise, `-1`.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.findIndex()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Find the index of a prime number in a typed array\n\nThe following example finds the index of an element in the typed array that is a prime\nnumber (or returns `-1` if there is no prime number).\n\n```js\nfunction isPrime(element, index, array) {\n  let start = 2;\n  while (start <= Math.sqrt(element)) {\n    if (element % start++ < 1) {\n      return false;\n    }\n  }\n  return element > 1;\n}\n\nconst uint8 = new Uint8Array([4, 6, 8, 12]);\nconst uint16 = new Uint16Array([4, 6, 7, 12]);\n\nconsole.log(uint8.findIndex(isPrime)); // -1, not found\nconsole.log(uint16.findIndex(isPrime)); // 2\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.findIndex` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.find()\")}}\n- {{jsxref(\"TypedArray.prototype.findLast()\")}}\n- {{jsxref(\"TypedArray.prototype.findLastIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.indexOf()\")}}\n- {{jsxref(\"TypedArray.prototype.lastIndexOf()\")}}\n- {{jsxref(\"Array.prototype.findIndex()\")}}\n"
    },
    "findlast": {
      "index.md": "---\ntitle: TypedArray.prototype.findLast()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/findLast\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.findLast\n---\n\n{{JSRef}}\n\nThe **`findLast()`** method of {{jsxref(\"TypedArray\")}} instances iterates the typed array in reverse order and returns the value of the first element that satisfies the provided testing function. If no elements satisfy the testing function, {{jsxref(\"undefined\")}} is returned. This method has the same algorithm as {{jsxref(\"Array.prototype.findLast()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-findlast.html\")}}\n\n## Syntax\n\n```js-nolint\nfindLast(callbackFn)\nfindLast(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the typed array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the typed array.\n    - `index`\n      - : The index of the current element being processed in the typed array.\n    - `array`\n      - : The typed array `findLast()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nThe last (highest-index) element in the typed array that satisfies the provided testing function; {{jsxref(\"undefined\")}} if no matching element is found.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.findLast()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Find the last prime number in a typed array\n\nThe following example returns the value of the last element in the typed array that is a prime number, or {{jsxref(\"undefined\")}} if there is no prime number.\n\n```js\nfunction isPrime(element) {\n  if (element % 2 === 0 || element < 2) {\n    return false;\n  }\n  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\n    if (element % factor === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nlet uint8 = new Uint8Array([4, 6, 8, 12]);\nconsole.log(uint8.findLast(isPrime)); // undefined (no primes in array)\nuint8 = new Uint8Array([4, 5, 7, 8, 9, 11, 12]);\nconsole.log(uint8.findLast(isPrime)); // 11\n```\n\n### All elements are visited and may be modified by the callback\n\nThe following examples show that all elements _are_ visited, and that the value passed to the callback is their value when visited:\n\n```js\n// Declare array with no elements at indexes 2, 3, and 4\n// The missing elements will be initialized to zero.\nconst uint8 = new Uint8Array([0, 1, , , , 5, 6]);\n\n// Iterate through the elements in reverse order.\n// Note that all elements are visited.\nuint8.findLast((value, index) => {\n  console.log(`Visited index ${index} with value ${value}`);\n});\n\n// Shows all indexes, including deleted\nuint8.findLast((value, index) => {\n  // Modify element 3 on first iteration\n  if (index === 6) {\n    console.log(\"Set uint8[3] to 44\");\n    uint8[3] = 44;\n  }\n  // Element 3 is still visited but will have a new value.\n  console.log(`Visited index ${index} with value ${value}`);\n});\n// Visited index 6 with value 6\n// Visited index 5 with value 5\n// Visited index 4 with value 0\n// Visited index 3 with value 0\n// Visited index 2 with value 0\n// Visited index 1 with value 1\n// Visited index 0 with value 0\n// Set uint8[3] to 44\n// Visited index 6 with value 6\n// Visited index 5 with value 5\n// Visited index 4 with value 0\n// Visited index 3 with value 44\n// Visited index 2 with value 0\n// Visited index 1 with value 1\n// Visited index 0 with value 0\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.findLast` in `core-js`](https://github.com/zloirock/core-js#array-find-from-last)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.find()\")}}\n- {{jsxref(\"TypedArray.prototype.findIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.findLastIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.includes()\")}}\n- {{jsxref(\"TypedArray.prototype.filter()\")}}\n- {{jsxref(\"TypedArray.prototype.every()\")}}\n- {{jsxref(\"TypedArray.prototype.some()\")}}\n- {{jsxref(\"Array.prototype.findLast()\")}}\n"
    },
    "findlastindex": {
      "index.md": "---\ntitle: TypedArray.prototype.findLastIndex()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/findLastIndex\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.findLastIndex\n---\n\n{{JSRef}}\n\nThe **`findLastIndex()`** method of {{jsxref(\"TypedArray\")}} instances iterates the typed array in reverse order and returns the index of the first element that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. This method has the same algorithm as {{jsxref(\"Array.prototype.findLastIndex()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-findlastindex.html\")}}\n\n## Syntax\n\n```js-nolint\nfindLastIndex(callbackFn)\nfindLastIndex(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the typed array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate a matching element has been found, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the typed array.\n    - `index`\n      - : The index of the current element being processed in the typed array.\n    - `array`\n      - : The typed array `findLastIndex()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nThe index of the last (highest-index) element in the typed array that passes the test.\nOtherwise `-1` if no matching element is found.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.findLastIndex()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Find the index of the last prime number in a typed array\n\nThe following example returns the index of the last element in the typed array that is a prime number, or `-1` if there is no prime number.\n\n```js\nfunction isPrime(element) {\n  if (element % 2 === 0 || element < 2) {\n    return false;\n  }\n  for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\n    if (element % factor === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nlet uint8 = new Uint8Array([4, 6, 8, 12]);\nconsole.log(uint8.findLastIndex(isPrime));\n// -1 (no primes in array)\nuint8 = new Uint8Array([4, 5, 7, 8, 9, 11, 12]);\nconsole.log(uint8.findLastIndex(isPrime));\n// 5\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.findLastIndex` in `core-js`](https://github.com/zloirock/core-js#array-find-from-last)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.find()\")}}\n- {{jsxref(\"TypedArray.prototype.findIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.findLast()\")}}\n- {{jsxref(\"TypedArray.prototype.indexOf()\")}}\n- {{jsxref(\"TypedArray.prototype.lastIndexOf()\")}}\n- {{jsxref(\"Array.prototype.findLastIndex()\")}}\n"
    },
    "foreach": {
      "index.md": "---\ntitle: TypedArray.prototype.forEach()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/forEach\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.forEach\n---\n\n{{JSRef}}\n\nThe **`forEach()`** method of {{jsxref(\"TypedArray\")}} instances executes a provided function once for each typed array element. This method has the same algorithm as {{jsxref(\"Array.prototype.forEach()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-foreach.html\")}}\n\n## Syntax\n\n```js-nolint\nforEach(callbackFn)\nforEach(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the typed array. Its return value is discarded. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the typed array.\n    - `index`\n      - : The index of the current element being processed in the typed array.\n    - `array`\n      - : The typed array `forEach()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n## Description\n\nSee {{jsxref(\"Array.prototype.forEach()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Logging the contents of a typed array\n\nThe following code logs a line for each element in a typed array:\n\n```js\nfunction logArrayElements(element, index, array) {\n  console.log(`a[${index}] = ${element}`);\n}\n\nnew Uint8Array([0, 1, 2, 3]).forEach(logArrayElements);\n// Logs:\n// a[0] = 0\n// a[1] = 1\n// a[2] = 2\n// a[3] = 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.forEach` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.find()\")}}\n- {{jsxref(\"TypedArray.prototype.map()\")}}\n- {{jsxref(\"TypedArray.prototype.filter()\")}}\n- {{jsxref(\"TypedArray.prototype.every()\")}}\n- {{jsxref(\"TypedArray.prototype.some()\")}}\n- {{jsxref(\"Array.prototype.forEach()\")}}\n- {{jsxref(\"Map.prototype.forEach()\")}}\n- {{jsxref(\"Set.prototype.forEach()\")}}\n"
    },
    "from": {
      "index.md": "---\ntitle: TypedArray.from()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/from\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.TypedArray.from\n---\n\n{{JSRef}}\n\nThe **`TypedArray.from()`** static method creates a new\n[typed array](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects)\nfrom an array-like or iterable object. This method is nearly the same as\n{{jsxref(\"Array.from()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-from.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nTypedArray.from(arrayLike, mapFn)\nTypedArray.from(arrayLike, mapFn, thisArg)\n```\n\nWhere `TypedArray` is one of:\n\n- {{jsxref(\"Int8Array\")}}\n- {{jsxref(\"Uint8Array\")}}\n- {{jsxref(\"Uint8ClampedArray\")}}\n- {{jsxref(\"Int16Array\")}}\n- {{jsxref(\"Uint16Array\")}}\n- {{jsxref(\"Int32Array\")}}\n- {{jsxref(\"Uint32Array\")}}\n- {{jsxref(\"Float32Array\")}}\n- {{jsxref(\"Float64Array\")}}\n- {{jsxref(\"BigInt64Array\")}}\n- {{jsxref(\"BigUint64Array\")}}\n\n### Parameters\n\n- `arrayLike`\n  - : An iterable or array-like object to convert to a typed array.\n- `mapFn` {{optional_inline}}\n  - : A function to call on every element of the typed array. If provided, every value to be added to the array is first passed through this function, and `mapFn`'s return value is added to the typed array instead. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the typed array.\n    - `index`\n      - : The index of the current element being processed in the typed array.\n- `thisArg` {{optional_inline}}\n  - : Value to use as `this` when executing `mapFn`.\n\n### Return value\n\nA new {{jsxref(\"TypedArray\")}} instance.\n\n## Description\n\nSee {{jsxref(\"Array.from()\")}} for more details.\n\nThere are some subtle distinctions between {{jsxref(\"Array.from()\")}} and `TypedArray.from()` (note: the `this` value mentioned below is the `this` value that `TypedArray.from()` was called with, not the `thisArg` argument used to invoke `mapFn`):\n\n- If the `this` value of `TypedArray.from()` is not a constructor, `TypedArray.from()` will throw a {{jsxref(\"TypeError\")}}, while `Array.from()` defaults to creating a new {{jsxref(\"Array\")}}.\n- The object constructed by `this` must be a `TypedArray` instance, while `Array.from()` allows its `this` value to be constructed to any object.\n- When the `source` parameter is an iterator, `TypedArray.from()` first collects all the values from the iterator, then creates an instance of `this` using the count, and finally sets the values on the instance. `Array.from()` sets each value as it receives them from the iterator, then sets its `length` at the end.\n- `TypedArray.from()` uses `[[Set]]` while `Array.from()` uses `[[DefineOwnProperty]]`. Hence, when working with {{jsxref(\"Proxy\")}} objects, it calls [`handler.set()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set) to create new elements rather than [`handler.defineProperty()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty).\n- When `Array.from()` gets an array-like which isn't an iterator, it respects holes. `TypedArray.from()` will ensure the result is dense.\n\n## Examples\n\n### From an iterable object (Set)\n\n```js\nconst s = new Set([1, 2, 3]);\nUint8Array.from(s);\n// Uint8Array [ 1, 2, 3 ]\n```\n\n### From a string\n\n```js\nInt16Array.from(\"123\");\n// Int16Array [ 1, 2, 3 ]\n```\n\n### Use with arrow function and map\n\nUsing an arrow function as the map function to manipulate the elements\n\n```js\nFloat32Array.from([1, 2, 3], (x) => x + x);\n// Float32Array [ 2, 4, 6 ]\n```\n\n### Generate a sequence of numbers\n\n```js\nUint8Array.from({ length: 5 }, (v, k) => k);\n// Uint8Array [ 0, 1, 2, 3, 4 ]\n```\n\n### Calling from() on non-TypedArray constructors\n\nThe `this` value of `from()` must be a constructor that returns a `TypedArray` instance.\n\n```js\nfunction NotArray(len) {\n  console.log(\"NotArray called with length\", len);\n}\n\nInt8Array.from.call({}, []); // TypeError: #<Object> is not a constructor\nInt8Array.from.call(NotArray, []);\n// NotArray called with length 0\n// TypeError: Method %TypedArray%.from called on incompatible receiver #<NotArray>\n```\n\n```js\nfunction NotArray2(len) {\n  console.log(\"NotArray2 called with length\", len);\n  return new Uint8Array(len);\n}\nconsole.log(Int8Array.from.call(NotArray2, [1, 2, 3]));\n// NotArray2 called with length 3\n// Uint8Array(3) [ 1, 2, 3 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.from` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.of()\")}}\n- {{jsxref(\"TypedArray.prototype.map()\")}}\n- {{jsxref(\"Array.from()\")}}\n"
    },
    "includes": {
      "index.md": "---\ntitle: TypedArray.prototype.includes()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/includes\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.includes\n---\n\n{{JSRef}}\n\nThe **`includes()`** method of {{jsxref(\"TypedArray\")}} instances determines whether a typed array includes a certain value among its entries, returning `true` or `false` as appropriate. This method has the same algorithm as {{jsxref(\"Array.prototype.includes()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-includes.html\")}}\n\n## Syntax\n\n```js-nolint\nincludes(searchElement)\nincludes(searchElement, fromIndex)\n```\n\n### Parameters\n\n- `searchElement`\n  - : The value to search for.\n- `fromIndex` {{optional_inline}}\n  - : Zero-based index at which to start searching, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n### Return value\n\nA boolean value which is `true` if the value `searchElement` is found within the typed array (or the part of the typed array indicated by the index `fromIndex`, if specified).\n\n## Description\n\nSee {{jsxref(\"Array.prototype.includes()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Using includes()\n\n```js\nconst uint8 = new Uint8Array([1, 2, 3]);\nuint8.includes(2); // true\nuint8.includes(4); // false\nuint8.includes(3, 3); // false\n\n// NaN handling (only true for Float32 and Float64)\nnew Uint8Array([NaN]).includes(NaN); // false, since the NaN passed to the constructor gets converted to 0\nnew Float32Array([NaN]).includes(NaN); // true;\nnew Float64Array([NaN]).includes(NaN); // true;\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.includes` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.indexOf()\")}}\n- {{jsxref(\"TypedArray.prototype.find()\")}}\n- {{jsxref(\"TypedArray.prototype.findIndex()\")}}\n- {{jsxref(\"Array.prototype.includes()\")}}\n- {{jsxref(\"String.prototype.includes()\")}}\n"
    },
    "index.md": "---\ntitle: TypedArray\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray\npage-type: javascript-class\nbrowser-compat: javascript.builtins.TypedArray\n---\n\n{{JSRef}}\n\nA **_TypedArray_** object describes an array-like view of an\nunderlying [binary data buffer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer).\nThere is no global property named `TypedArray`, nor is there a\ndirectly visible `TypedArray` constructor. Instead, there are a number of\ndifferent global properties, whose values are typed array constructors for specific\nelement types, listed below. On the following pages you will find common properties and\nmethods that can be used with any typed array containing elements of any type.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-constructor.html\")}}\n\n## Description\n\nThe `TypedArray` constructor (often referred to as `%TypedArray%` to indicate its \"intrinsicness\", since it does not correspond to any global exposed to a JavaScript program) serves as the common superclass of all `TypedArray` subclasses. Think about `%TypedArray%` as an \"abstract class\" providing a common interface of utility methods for all typed array subclasses. This constructor is not directly exposed: there is no global `TypedArray` property. It is only accessible through `Object.getPrototypeOf(Int8Array)` and similar.\n\nWhen creating an instance of a `TypedArray` subclass (e.g. `Int8Array`), an array buffer is created internally in memory or, if an `ArrayBuffer` object is given as constructor argument, that `ArrayBuffer` is used instead. The buffer address is saved as an internal property of the instance and all the methods of `%TypedArray%.prototype` will set and get values based on that array buffer address.\n\n### TypedArray objects\n\n| Type                            | Value Range                           | Size in bytes | Web IDL type          |\n| ------------------------------- | ------------------------------------- | ------------- | --------------------- |\n| {{jsxref(\"Int8Array\")}}         | -128 to 127                           | 1             | `byte`                |\n| {{jsxref(\"Uint8Array\")}}        | 0 to 255                              | 1             | `octet`               |\n| {{jsxref(\"Uint8ClampedArray\")}} | 0 to 255                              | 1             | `octet`               |\n| {{jsxref(\"Int16Array\")}}        | -32768 to 32767                       | 2             | `short`               |\n| {{jsxref(\"Uint16Array\")}}       | 0 to 65535                            | 2             | `unsigned short`      |\n| {{jsxref(\"Int32Array\")}}        | -2147483648 to 2147483647             | 4             | `long`                |\n| {{jsxref(\"Uint32Array\")}}       | 0 to 4294967295                       | 4             | `unsigned long`       |\n| {{jsxref(\"Float32Array\")}}      | `-3.4e38` to `3.4e38`                 | 4             | `unrestricted float`  |\n| {{jsxref(\"Float64Array\")}}      | `-1.8e308` to `1.8e308`               | 8             | `unrestricted double` |\n| {{jsxref(\"BigInt64Array\")}}     | -2<sup>63</sup> to 2<sup>63</sup> - 1 | 8             | `bigint`              |\n| {{jsxref(\"BigUint64Array\")}}    | 0 to 2<sup>64</sup> - 1               | 8             | `bigint`              |\n\n### Value encoding and normalization\n\nAll typed arrays operate on `ArrayBuffer`s, where you can observe the exact byte representation of each element, so how the numbers are encoded in binary format is significant.\n\n- Unsigned integer arrays (`Uint8Array`, `Uint16Array`, `Uint32Array`, and `BigUint64Array`) store the number directly in binary.\n- Signed integer arrays (`Int8Array`, `Int16Array`, `Int32Array`, and `BigInt64Array`) store the number using [two's complement](https://en.wikipedia.org/wiki/Two's_complement).\n- Floating-point arrays (`Float32Array` and `Float64Array`) store the number using [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754) floating-point format. The [`Number`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding) reference has more information about the exact format. JavaScript numbers use double precision floating point format by default, which is the same as `Float64Array`. `Float32Array` uses 23 (instead of 52) bits for the mantissa and 8 (instead of 11) bits for the exponent. Note that the spec requires all {{jsxref(\"NaN\")}} values to use the same bit encoding, but the exact bit pattern is implementation-dependent.\n- `Uint8ClampedArray` is a special case. It stores the number in binary like `Uint8Array` does, but when you store a number outside the range, it _clamps_ the number to the range 0 to 255 by mathematical value, instead of truncating the most significant bits.\n\nAll typed arrays except `Int8Array`, `Uint8Array`, and `Uint8ClampedArray` store each element using multiple bytes. These bytes can either be ordered from most significant to least significant (big-endian) or from least significant to most significant (little-endian). See [Endianness](/en-US/docs/Glossary/Endianness) for more explanation. Typed arrays always use the platform's native byte order. If you want to specify the endianness when writing and reading from buffers, you should use a {{jsxref(\"DataView\")}} instead.\n\nWhen writing to these typed arrays, values that are outside the representable range are normalized.\n\n- All integer arrays (except `Uint8ClampedArray`) use [fixed-width number conversion](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion), which first truncates the decimal part of the number and then takes the lowest bits.\n- `Uint8ClampedArray` first clamps the number to the range 0 to 255 (values greater than 255 become 255 and values less than 0 become 0). It then _rounds_ (instead of flooring) the result to the nearest integer, with half-to-even; meaning if the number is exactly between two integers, it rounds to the nearest even integer. For example, `0.5` becomes `0`, `1.5` becomes `2`, and `2.5` becomes `2`.\n- `Float32Array` performs a \"round to even\" to convert 64-bit floating point numbers to 32-bit. This is the same algorithm as provided by {{jsxref(\"Math.fround()\")}}.\n\n### Behavior when viewing a resizable buffer\n\nWhen a `TypedArray` is created as a view of a [resizable buffer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer#resizing_arraybuffers), resizing the underlying buffer will have different effects on the size of the `TypedArray` depending on whether the `TypedArray` is constructed as length-tracking.\n\nIf a typed array is created without a specific size by omitting the third parameter or passing `undefined`, the typed array will become _length-tracking_, and will automatically resize to fit the underlying `buffer` as the latter is resized:\n\n```js\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst float32 = new Float32Array(buffer);\n\nconsole.log(float32.byteLength); // 8\nconsole.log(float32.length); // 2\n\nbuffer.resize(12);\n\nconsole.log(float32.byteLength); // 12\nconsole.log(float32.length); // 3\n```\n\nIf a typed array is created with a specific size using the third `length` parameter, it won't resize to contain the `buffer` as the latter is grown:\n\n```js\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst float32 = new Float32Array(buffer, 0, 2);\n\nconsole.log(float32.byteLength); // 8\nconsole.log(float32.length); // 2\nconsole.log(float32[0]); // 0, the initial value\n\nbuffer.resize(12);\n\nconsole.log(float32.byteLength); // 8\nconsole.log(float32.length); // 2\nconsole.log(float32[0]); // 0, the initial value\n```\n\nWhen a `buffer` is shrunk, the viewing typed array may become out of bounds, in which case the typed array's observed size will decrease to 0. This is the only case where a non-length-tracking typed array's length may change.\n\n```js\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst float32 = new Float32Array(buffer, 0, 2);\n\nbuffer.resize(7);\n\nconsole.log(float32.byteLength); // 0\nconsole.log(float32.length); // 0\nconsole.log(float32[0]); // undefined\n```\n\nIf you then grow the `buffer` again to bring the typed array back in bounds, the typed array's size will be restored to its original value.\n\n```js\nbuffer.resize(8);\n\nconsole.log(float32.byteLength); // 8\nconsole.log(float32.length); // 2\nconsole.log(float32[0]); // 0 - back in bounds again!\n```\n\nThe same can happen for length-tracking typed arrays as well, if the buffer is shrunk beyond the `byteOffset`.\n\n```js\nconst buffer = new ArrayBuffer(8, { maxByteLength: 16 });\nconst float32 = new Float32Array(buffer, 4);\n// float32 is length-tracking, but it only extends from the 4th byte\n// to the end of the buffer, so if the buffer is resized to be shorter\n// than 4 bytes, the typed array will become out of bounds\nbuffer.resize(3);\nconsole.log(float32.byteLength); // 0\n```\n\n## Constructor\n\nThis object cannot be instantiated directly — attempting to construct it with `new` throws a {{jsxref(\"TypeError\")}}.\n\n```js\nnew (Object.getPrototypeOf(Int8Array))();\n// TypeError: Abstract class TypedArray not directly constructable\n```\n\nInstead, you create an instance of a typed array of a particular type, such as an {{jsxref(\"Int8Array\")}} or a {{jsxref(\"BigInt64Array\")}}. These objects all have a common syntax for their constructors:\n\n```js-nolint\nnew TypedArray()\nnew TypedArray(length)\nnew TypedArray(typedArray)\nnew TypedArray(object)\n\nnew TypedArray(buffer)\nnew TypedArray(buffer, byteOffset)\nnew TypedArray(buffer, byteOffset, length)\n```\n\nWhere `TypedArray` is a constructor for one of the concrete types.\n\n> **Note:** All `TypedArray` subclasses' constructors can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call one without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `typedArray`\n  - : When called with an instance of a `TypedArray` subclass, the `typedArray` gets copied into a new typed array. For a non-[bigint](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) `TypedArray` constructor, the `typedArray` parameter can only be of one of the non-[bigint](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) types (such as {{jsxref(\"Int32Array\")}}). Similarly, for a [bigint](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) `TypedArray` constructor ({{jsxref(\"BigInt64Array\")}} or {{jsxref(\"BigUint64Array\")}}), the `typedArray` parameter can only be of one of the [bigint](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) types. Each value in `typedArray` is converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the `typedArray` argument.\n- `object`\n  - : When called with an object that's not a `TypedArray` instance, a new typed array is created in the same way as the [`TypedArray.from()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from) method.\n- `length` {{optional_inline}}\n  - : When called with a non-object, the parameter will be treated as a number specifying the length of the typed array. An internal array buffer is created in memory, of size `length` multiplied by [`BYTES_PER_ELEMENT`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT) bytes, filled with zeros. Omitting all parameters is equivalent to using `0` as `length`.\n- `buffer`, `byteOffset` {{optional_inline}}, `length` {{optional_inline}}\n  - : When called with an [`ArrayBuffer`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or [`SharedArrayBuffer`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instance, and optionally a `byteOffset` and a `length` argument, a new typed array view is created that views the specified buffer. The `byteOffset` (in bytes) and `length` (in number of elements, each occupying [`BYTES_PER_ELEMENT`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT) bytes) parameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of `buffer` is viewed; if only `length` is omitted, the remainder of `buffer` starting from `byteOffset` is viewed. If `length` is omitted, the typed array becomes [length-tracking](#behavior_when_viewing_a_resizable_buffer).\n\n### Exceptions\n\nAll `TypeArray` subclass constructors operate in the same way. They would all throw the following exceptions:\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown in one of the following cases:\n    - A `typedArray` is passed but it is a [bigint](/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) type while the current constructor is not, or vice versa.\n    - A `typedArray` is passed but the buffer it's viewing is detached, or a detached `buffer` is directly passed.\n- {{jsxref(\"RangeError\")}}\n  - : Thrown in one of the following cases:\n    - The new typed array's length is too large.\n    - The length of `buffer` (if the `length` parameter is not specified) or `byteOffset` is not an integral multiple of the new typed array's element size.\n    - `byteOffset` is not a valid array index (an integer between 0 and 2<sup>53</sup> - 1).\n    - When creating a view from a buffer, the bounds are outside the buffer. In other words, `byteOffset + length * TypedArray.BYTES_PER_ELEMENT > buffer.byteLength`.\n\n## Static properties\n\nThese properties are defined on the `TypedArray` constructor object and are thus shared by all `TypedArray` subclass constructors.\n\n- {{jsxref(\"TypedArray/@@species\", \"TypedArray[@@species]\")}}\n  - : The constructor function used to create derived objects.\n\nAll `TypedArray` subclasses also have the following static properties:\n\n- {{jsxref(\"TypedArray.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size for the different `TypedArray` objects.\n\n## Static methods\n\nThese methods are defined on the `TypedArray` constructor object and are thus shared by all `TypedArray` subclass constructors.\n\n- {{jsxref(\"TypedArray.from()\")}}\n  - : Creates a new `TypedArray` from an array-like or iterable object. See also {{jsxref(\"Array.from()\")}}.\n- {{jsxref(\"TypedArray.of()\")}}\n  - : Creates a new `TypedArray` with a variable number of arguments. See also {{jsxref(\"Array.of()\")}}.\n\n## Instance properties\n\nThese properties are defined on `TypedArray.prototype` and shared by all `TypedArray` subclass instances.\n\n- {{jsxref(\"TypedArray.prototype.buffer\")}}\n  - : Returns the {{jsxref(\"ArrayBuffer\")}} referenced by the typed array.\n- {{jsxref(\"TypedArray.prototype.byteLength\")}}\n  - : Returns the length (in bytes) of the typed array.\n- {{jsxref(\"TypedArray.prototype.byteOffset\")}}\n  - : Returns the offset (in bytes) of the typed array from the start of its {{jsxref(\"ArrayBuffer\")}}.\n- {{jsxref(\"Object/constructor\", \"TypedArray.prototype.constructor\")}}\n  - : The constructor function that created the instance object. `TypedArray.prototype.constructor` is the hidden `TypedArray` constructor function, but each typed array subclass also defines its own `constructor` property.\n- {{jsxref(\"TypedArray.prototype.length\")}}\n  - : Returns the number of elements held in the typed array.\n- `TypedArray.prototype[@@toStringTag]`\n  - : The initial value of the [`TypedArray.prototype[@@toStringTag]`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is a getter that returns the same string as the typed array constructor's name. It returns `undefined` if the `this` value is not one of the typed array subclasses. This property is used in {{jsxref(\"Object.prototype.toString()\")}}. However, because `TypedArray` also has its own [`toString()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toString) method, this property is not used unless you call [`Object.prototype.toString.call()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call) with a typed array as `thisArg`.\n\nAll `TypedArray` subclasses also have the following instance properties:\n\n- {{jsxref(\"TypedArray.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size for the different `TypedArray` objects.\n\n## Instance methods\n\nThese methods are defined on the `TypedArray` prototype object and are thus shared by all `TypedArray` subclass instances.\n\n- {{jsxref(\"TypedArray.prototype.at()\")}}\n  - : Takes an integer value and returns the item at that index. This method allows for negative integers, which count back from the last item.\n- {{jsxref(\"TypedArray.prototype.copyWithin()\")}}\n  - : Copies a sequence of array elements within the array. See also {{jsxref(\"Array.prototype.copyWithin()\")}}.\n- {{jsxref(\"TypedArray.prototype.entries()\")}}\n  - : Returns a new _array iterator_ object that contains the key/value pairs for each index in the array. See also {{jsxref(\"Array.prototype.entries()\")}}.\n- {{jsxref(\"TypedArray.prototype.every()\")}}\n  - : Tests whether all elements in the array pass the test provided by a function. See also {{jsxref(\"Array.prototype.every()\")}}.\n- {{jsxref(\"TypedArray.prototype.fill()\")}}\n  - : Fills all the elements of an array from a start index to an end index with a static value. See also {{jsxref(\"Array.prototype.fill()\")}}.\n- {{jsxref(\"TypedArray.prototype.filter()\")}}\n  - : Creates a new array with all of the elements of this array for which the provided filtering function returns `true`. See also {{jsxref(\"Array.prototype.filter()\")}}.\n- {{jsxref(\"TypedArray.prototype.find()\")}}\n  - : Returns the first `element` in the array that satisfies a provided testing function, or `undefined` if no appropriate element is found. See also {{jsxref(\"Array.prototype.find()\")}}.\n- {{jsxref(\"TypedArray.prototype.findIndex()\")}}\n  - : Returns the first index value in the array that has an element that satisfies a provided testing function, or `-1` if no appropriate element was found. See also {{jsxref(\"Array.prototype.findIndex()\")}}.\n- {{jsxref(\"TypedArray.prototype.findLast()\")}}\n  - : Returns the value of the last element in the array that satisfies a provided testing function, or `undefined` if no appropriate element is found. See also {{jsxref(\"Array.prototype.findLast()\")}}.\n- {{jsxref(\"TypedArray.prototype.findLastIndex()\")}}\n  - : Returns the index of the last element in the array that satisfies a provided testing function, or `-1` if no appropriate element was found. See also {{jsxref(\"Array.prototype.findLastIndex()\")}}.\n- {{jsxref(\"TypedArray.prototype.forEach()\")}}\n  - : Calls a function for each element in the array. See also {{jsxref(\"Array.prototype.forEach()\")}}.\n- {{jsxref(\"TypedArray.prototype.includes()\")}}\n  - : Determines whether a typed array includes a certain element, returning `true` or `false` as appropriate. See also {{jsxref(\"Array.prototype.includes()\")}}.\n- {{jsxref(\"TypedArray.prototype.indexOf()\")}}\n  - : Returns the first (least) index of an element within the array equal to the specified value, or `-1` if none is found. See also {{jsxref(\"Array.prototype.indexOf()\")}}.\n- {{jsxref(\"TypedArray.prototype.join()\")}}\n  - : Joins all elements of an array into a string. See also {{jsxref(\"Array.prototype.join()\")}}.\n- {{jsxref(\"TypedArray.prototype.keys()\")}}\n  - : Returns a new array iterator that contains the keys for each index in the array. See also {{jsxref(\"Array.prototype.keys()\")}}.\n- {{jsxref(\"TypedArray.prototype.lastIndexOf()\")}}\n  - : Returns the last (greatest) index of an element within the array equal to the specified value, or `-1` if none is found. See also {{jsxref(\"Array.prototype.lastIndexOf()\")}}.\n- {{jsxref(\"TypedArray.prototype.map()\")}}\n  - : Creates a new array with the results of calling a provided function on every element in this array. See also {{jsxref(\"Array.prototype.map()\")}}.\n- {{jsxref(\"TypedArray.prototype.reduce()\")}}\n  - : Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. See also {{jsxref(\"Array.prototype.reduce()\")}}.\n- {{jsxref(\"TypedArray.prototype.reduceRight()\")}}\n  - : Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. See also {{jsxref(\"Array.prototype.reduceRight()\")}}.\n- {{jsxref(\"TypedArray.prototype.reverse()\")}}\n  - : Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first. See also {{jsxref(\"Array.prototype.reverse()\")}}.\n- {{jsxref(\"TypedArray.prototype.set()\")}}\n  - : Stores multiple values in the typed array, reading input values from a specified array.\n- {{jsxref(\"TypedArray.prototype.slice()\")}}\n  - : Extracts a section of an array and returns a new array. See also {{jsxref(\"Array.prototype.slice()\")}}.\n- {{jsxref(\"TypedArray.prototype.some()\")}}\n  - : Returns `true` if at least one element in this array satisfies the provided testing function. See also {{jsxref(\"Array.prototype.some()\")}}.\n- {{jsxref(\"TypedArray.prototype.sort()\")}}\n  - : Sorts the elements of an array in place and returns the array. See also {{jsxref(\"Array.prototype.sort()\")}}.\n- {{jsxref(\"TypedArray.prototype.subarray()\")}}\n  - : Returns a new `TypedArray` from the given start and end element index.\n- {{jsxref(\"TypedArray.prototype.toLocaleString()\")}}\n  - : Returns a localized string representing the array and its elements. See also {{jsxref(\"Array.prototype.toLocaleString()\")}}.\n- {{jsxref(\"TypedArray.prototype.toReversed()\")}}\n  - : Returns a new array with the elements in reversed order, without modifying the original array.\n- {{jsxref(\"TypedArray.prototype.toSorted()\")}}\n  - : Returns a new array with the elements sorted in ascending order, without modifying the original array.\n- {{jsxref(\"TypedArray.prototype.toString()\")}}\n  - : Returns a string representing the array and its elements. See also {{jsxref(\"Array.prototype.toString()\")}}.\n- {{jsxref(\"TypedArray.prototype.values()\")}}\n  - : Returns a new _array iterator_ object that contains the values for each index in the array. See also {{jsxref(\"Array.prototype.values()\")}}.\n- {{jsxref(\"TypedArray.prototype.with()\")}}\n  - : Returns a new array with the element at the given index replaced with the given value, without modifying the original array.\n- [`TypedArray.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator)\n  - : Returns a new _array iterator_ object that contains the values for each index in the array.\n\n## Examples\n\n### Property access\n\nYou can reference elements in the array using standard array index syntax (that is,\nusing bracket notation). However, getting or setting indexed properties on typed arrays\nwill not search in the prototype chain for this property, even when the indices are out\nof bound. Indexed properties will consult the {{jsxref(\"ArrayBuffer\")}} and will never\nlook at object properties. You can still use named properties, just like with all\nobjects.\n\n```js\n// Setting and getting using standard array syntax\nconst int16 = new Int16Array(2);\nint16[0] = 42;\nconsole.log(int16[0]); // 42\n\n// Indexed properties on prototypes are not consulted (Fx 25)\nInt8Array.prototype[20] = \"foo\";\nnew Int8Array(32)[20]; // 0\n// even when out of bound\nInt8Array.prototype[20] = \"foo\";\nnew Int8Array(8)[20]; // undefined\n// or with negative integers\nInt8Array.prototype[-1] = \"foo\";\nnew Int8Array(8)[-1]; // undefined\n\n// Named properties are allowed, though (Fx 30)\nInt8Array.prototype.foo = \"bar\";\nnew Int8Array(32).foo; // \"bar\"\n```\n\n### Cannot be frozen\n\n`TypedArray`s that aren't empty cannot be frozen, as their\nunderlying `ArrayBuffer` could be mutated through another\n`TypedArray` view of the buffer. This would mean that the object\nwould never genuinely be frozen.\n\n```js example-bad\nconst i8 = Int8Array.of(1, 2, 3);\nObject.freeze(i8);\n// TypeError: Cannot freeze array buffer views with elements\n```\n\n### ByteOffset must be aligned\n\nWhen constructing a `TypedArray` as a view onto an\n`ArrayBuffer`, the `byteOffset` argument must be aligned to its\nelement size; in other words, the offset must be a multiple of\n`BYTES_PER_ELEMENT`.\n\n```js example-bad\nconst i32 = new Int32Array(new ArrayBuffer(4), 1);\n// RangeError: start offset of Int32Array should be a multiple of 4\n```\n\n```js example-good\nconst i32 = new Int32Array(new ArrayBuffer(4), 0);\n```\n\n### ByteLength must be aligned\n\nLike the `byteOffset` parameter, the `byteLength` property of an\n`ArrayBuffer` passed to a `TypedArray`'s constructor\nmust be a multiple of the constructor's `BYTES_PER_ELEMENT`.\n\n```js example-bad\nconst i32 = new Int32Array(new ArrayBuffer(3));\n// RangeError: byte length of Int32Array should be a multiple of 4\n```\n\n```js example-good\nconst i32 = new Int32Array(new ArrayBuffer(4));\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of typed arrays in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n- {{domxref(\"TextDecoder\")}}\n",
    "indexof": {
      "index.md": "---\ntitle: TypedArray.prototype.indexOf()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.indexOf\n---\n\n{{JSRef}}\n\nThe **`indexOf()`** method of {{jsxref(\"TypedArray\")}} instances returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as {{jsxref(\"Array.prototype.indexOf()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-indexof.html\")}}\n\n## Syntax\n\n```js-nolint\nindexOf(searchElement)\nindexOf(searchElement, fromIndex)\n```\n\n### Parameters\n\n- `searchElement`\n  - : Element to locate in the typed array.\n- `fromIndex` {{optional_inline}}\n  - : Zero-based index at which to start searching, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n### Return value\n\nThe first index of `searchElement` in the typed array; `-1` if not found.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.indexOf()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Using indexOf()\n\n```js\nconst uint8 = new Uint8Array([2, 5, 9]);\nuint8.indexOf(2); // 0\nuint8.indexOf(7); // -1\nuint8.indexOf(9, 2); // 2\nuint8.indexOf(2, -1); // -1\nuint8.indexOf(2, -3); // 0\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.indexOf` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.findIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.findLastIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.lastIndexOf()\")}}\n- {{jsxref(\"Array.prototype.indexOf()\")}}\n- {{jsxref(\"String.prototype.indexOf()\")}}\n"
    },
    "join": {
      "index.md": "---\ntitle: TypedArray.prototype.join()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/join\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.join\n---\n\n{{JSRef}}\n\nThe **`join()`** method of {{jsxref(\"TypedArray\")}} instances creates and returns a new string by concatenating all of the elements in this typed array, separated by commas or a specified separator string. If the typed array has only one item, then that item will be returned without using the separator. This method has the same algorithm as {{jsxref(\"Array.prototype.join()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-join.html\")}}\n\n## Syntax\n\n```js-nolint\njoin()\njoin(separator)\n```\n\n### Parameters\n\n- `separator` {{optional_inline}}\n  - : A string to separate each pair of adjacent elements of the typed array. If omitted, the typed array elements are separated with a comma (\",\").\n\n### Return value\n\nA string with all typed array elements joined. If `array.length` is `0`, the empty string is returned.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.join()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Using join()\n\n```js\nconst uint8 = new Uint8Array([1, 2, 3]);\nuint8.join(); // '1,2,3'\nuint8.join(\" / \"); // '1 / 2 / 3'\nuint8.join(\"\"); // '123'\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.join` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.toString()\")}}\n- {{jsxref(\"Array.prototype.join()\")}}\n- {{jsxref(\"String.prototype.split()\")}}\n"
    },
    "keys": {
      "index.md": "---\ntitle: TypedArray.prototype.keys()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/keys\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.keys\n---\n\n{{JSRef}}\n\nThe **`keys()`** method of {{jsxref(\"TypedArray\")}} instances returns a new _[array iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that contains the keys for each index in the typed array. This method has the same algorithm as {{jsxref(\"Array.prototype.keys()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-keys.html\")}}\n\n## Syntax\n\n```js-nolint\nkeys()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Description\n\nSee {{jsxref(\"Array.prototype.keys()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Iteration using for...of loop\n\n```js\nconst arr = new Uint8Array([10, 20, 30, 40, 50]);\nconst arrKeys = arr.keys();\nfor (const n of arrKeys) {\n  console.log(n);\n}\n```\n\n### Alternative iteration\n\n```js\nconst arr = new Uint8Array([10, 20, 30, 40, 50]);\nconst arrKeys = arr.keys();\nconsole.log(arrKeys.next().value); // 0\nconsole.log(arrKeys.next().value); // 1\nconsole.log(arrKeys.next().value); // 2\nconsole.log(arrKeys.next().value); // 3\nconsole.log(arrKeys.next().value); // 4\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.keys` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.entries()\")}}\n- {{jsxref(\"TypedArray.prototype.values()\")}}\n- [`TypedArray.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator)\n- {{jsxref(\"Array.prototype.keys()\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "lastindexof": {
      "index.md": "---\ntitle: TypedArray.prototype.lastIndexOf()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.lastIndexOf\n---\n\n{{JSRef}}\n\nThe **`lastIndexOf()`** method of {{jsxref(\"TypedArray\")}} instances returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at `fromIndex`. This method has the same algorithm as {{jsxref(\"Array.prototype.lastIndexOf()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-lastindexof.html\")}}\n\n## Syntax\n\n```js-nolint\nlastIndexOf(searchElement)\nlastIndexOf(searchElement, fromIndex)\n```\n\n### Parameters\n\n- `searchElement`\n  - : Element to locate in the typed array.\n- `fromIndex` {{optional_inline}}\n  - : Zero-based index at which to start searching backwards, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n\n### Return value\n\nThe last index of `searchElement` in the typed array; `-1` if not found.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.lastIndexOf()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Using lastIndexOf()\n\n```js\nconst uint8 = new Uint8Array([2, 5, 9, 2]);\nuint8.lastIndexOf(2); // 3\nuint8.lastIndexOf(7); // -1\nuint8.lastIndexOf(2, 3); // 3\nuint8.lastIndexOf(2, 2); // 0\nuint8.lastIndexOf(2, -2); // 0\nuint8.lastIndexOf(2, -1); // 3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.lastIndexOf` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.findIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.findLastIndex()\")}}\n- {{jsxref(\"TypedArray.prototype.indexOf()\")}}\n- {{jsxref(\"Array.prototype.lastIndexOf()\")}}\n- {{jsxref(\"String.prototype.lastIndexOf()\")}}\n"
    },
    "length": {
      "index.md": "---\ntitle: TypedArray.prototype.length\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/length\npage-type: javascript-instance-accessor-property\nbrowser-compat: javascript.builtins.TypedArray.length\n---\n\n{{JSRef}}\n\nThe **`length`** accessor property of {{jsxref(\"TypedArray\")}} instances returns the length (in elements) of this typed array.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-length.html\", \"shorter\")}}\n\n## Description\n\nThe `length` property is an accessor property whose set accessor function is `undefined`, meaning that you can only read this property. The value is established when a _TypedArray_ is constructed and cannot be changed. If the _TypedArray_ is not specifying a `byteOffset` or a `length`, the length of the referenced {{jsxref(\"ArrayBuffer\")}} will be returned. _TypedArray_ is one of the [TypedArray objects](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects).\n\n## Examples\n\n### Using the `length` property\n\n```js\nconst buffer = new ArrayBuffer(8);\n\nlet uint8 = new Uint8Array(buffer);\nuint8.length; // 8 (matches the length of the buffer)\n\nuint8 = new Uint8Array(buffer, 1, 5);\nuint8.length; // 5 (as specified when constructing the Uint8Array)\n\nuint8 = new Uint8Array(buffer, 2);\nuint8.length; // 6 (due to the offset of the constructed Uint8Array)\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n"
    },
    "map": {
      "index.md": "---\ntitle: TypedArray.prototype.map()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/map\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.map\n---\n\n{{JSRef}}\n\nThe **`map()`** method of {{jsxref(\"TypedArray\")}} instances creates a new typed array populated with the results of calling a provided function on every element in the calling typed array. This method has the same algorithm as {{jsxref(\"Array.prototype.map()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-map.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nmap(callbackFn)\nmap(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the typed array. Its return value is added as a single element in the new typed array. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the typed array.\n    - `index`\n      - : The index of the current element being processed in the typed array.\n    - `array`\n      - : The typed array `map()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\nA new typed array with each element being the result of the callback function.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.map()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Mapping a typed array to a typed array of square roots\n\nThe following code takes a typed array and creates a new typed array containing the\nsquare roots of the numbers in the first typed array.\n\n```js\nconst numbers = new Uint8Array([1, 4, 9]);\nconst roots = numbers.map(Math.sqrt);\n// roots is now: Uint8Array [1, 2, 3],\n// numbers is still Uint8Array [1, 4, 9]\n```\n\n### Mapping a typed array of numbers using a function containing an argument\n\nThe following code shows how `map()` works when a function requiring one\nargument is used with it. The argument will automatically be assigned to each element of\nthe typed array as `map()` loops through the original typed array.\n\n```js\nconst numbers = new Uint8Array([1, 4, 9]);\nconst doubles = numbers.map((num) => num * 2);\n// doubles is now Uint8Array [2, 8, 18]\n// numbers is still Uint8Array [1, 4, 9]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.map` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.forEach()\")}}\n- {{jsxref(\"TypedArray.from()\")}}\n- {{jsxref(\"Array.prototype.map()\")}}\n- {{jsxref(\"Map\")}}\n"
    },
    "of": {
      "index.md": "---\ntitle: TypedArray.of()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/of\npage-type: javascript-static-method\nbrowser-compat: javascript.builtins.TypedArray.of\n---\n\n{{JSRef}}\n\nThe **`TypedArray.of()`** static method creates a new\n[typed array](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#typedarray_objects) from a variable number of arguments. This method is nearly the same as\n{{jsxref(\"Array.of()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-of.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nTypedArray.of()\nTypedArray.of(element1)\nTypedArray.of(element1, element2)\nTypedArray.of(element1, element2, /* …, */ elementN)\n```\n\nWhere `TypedArray` is one of:\n\n- {{jsxref(\"Int8Array\")}}\n- {{jsxref(\"Uint8Array\")}}\n- {{jsxref(\"Uint8ClampedArray\")}}\n- {{jsxref(\"Int16Array\")}}\n- {{jsxref(\"Uint16Array\")}}\n- {{jsxref(\"Int32Array\")}}\n- {{jsxref(\"Uint32Array\")}}\n- {{jsxref(\"Float32Array\")}}\n- {{jsxref(\"Float64Array\")}}\n- {{jsxref(\"BigInt64Array\")}}\n- {{jsxref(\"BigUint64Array\")}}\n\n### Parameters\n\n- `element1`, …, `elementN`\n  - : Elements used to create the typed array.\n\n### Return value\n\nA new {{jsxref(\"TypedArray\")}} instance.\n\n## Description\n\nSee {{jsxref(\"Array.of()\")}} for more details. There are some subtle distinctions between {{jsxref(\"Array.of()\")}} and\n`TypedArray.of()`:\n\n- If the `this` value passed to `TypedArray.of()` is not a constructor, `TypedArray.from()` will throw a {{jsxref(\"TypeError\")}}, while `Array.of()` defaults to creating a new {{jsxref(\"Array\")}}.\n- `TypedArray.of()` uses `[[Set]]` while `Array.of()` uses `[[DefineOwnProperty]]`. Hence, when working with {{jsxref(\"Proxy\")}} objects, it calls [`handler.set()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set) to create new elements rather than [`handler.defineProperty()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty).\n\n## Examples\n\n### Using of()\n\n```js\nUint8Array.of(1); // Uint8Array [ 1 ]\nInt8Array.of(\"1\", \"2\", \"3\"); // Int8Array [ 1, 2, 3 ]\nFloat32Array.of(1, 2, 3); // Float32Array [ 1, 2, 3 ]\nInt16Array.of(undefined); // Int16Array [ 0 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.of` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.from()\")}}\n- {{jsxref(\"Array.of()\")}}\n"
    },
    "reduce": {
      "index.md": "---\ntitle: TypedArray.prototype.reduce()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/reduce\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.reduce\n---\n\n{{JSRef}}\n\nThe **`reduce()`** method of {{jsxref(\"TypedArray\")}} instances executes a user-supplied \"reducer\" callback function on each element of the typed array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the typed array is a single value. This method has the same algorithm as {{jsxref(\"Array.prototype.reduce()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-reduce.html\")}}\n\n## Syntax\n\n```js-nolint\nreduce(callbackFn)\nreduce(callbackFn, initialValue)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the typed array. Its return value becomes the value of the `accumulator` parameter on the next invocation of `callbackFn`. For the last invocation, the return value becomes the return value of `reduce()`. The function is called with the following arguments:\n    - `accumulator`\n      - : The value resulting from the previous call to `callbackFn`. On the first call, its value is `initialValue` if the latter is specified; otherwise its value is `array[0]`.\n    - `currentValue`\n      - : The value of the current element. On the first call, its value is `array[0]` if `initialValue` is specified; otherwise its value is `array[1]`.\n    - `currentIndex`\n      - : The index position of `currentValue` in the typed array. On the first call, its value is `0` if `initialValue` is specified, otherwise `1`.\n    - `array`\n      - : The typed array `reduce()` was called upon.\n- `initialValue` {{optional_inline}}\n  - : A value to which `accumulator` is initialized the first time the callback is called.\n    If `initialValue` is specified, `callbackFn` starts executing with the first value in the typed array as `currentValue`.\n    If `initialValue` is _not_ specified, `accumulator` is initialized to the first value in the typed array, and `callbackFn` starts executing with the second value in the typed array as `currentValue`. In this case, if the typed array is empty (so that there's no first value to return as `accumulator`), an error is thrown.\n\n### Return value\n\nThe value that results from running the \"reducer\" callback function to completion over the entire typed array.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if the typed array contains no elements and `initialValue` is not provided.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.reduce()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Sum up all values within an array\n\n```js\nconst total = new Uint8Array([0, 1, 2, 3]).reduce((a, b) => a + b);\n// total === 6\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.reduce` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.map()\")}}\n- {{jsxref(\"TypedArray.prototype.reduceRight()\")}}\n- {{jsxref(\"Array.prototype.reduce()\")}}\n- {{jsxref(\"Object.groupBy()\")}}\n- {{jsxref(\"Map.groupBy()\")}}\n"
    },
    "reduceright": {
      "index.md": "---\ntitle: TypedArray.prototype.reduceRight()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.reduceRight\n---\n\n{{JSRef}}\n\nThe **`reduceRight()`** method of {{jsxref(\"TypedArray\")}} instances applies a function against an accumulator and each value of the typed array (from right-to-left) to reduce it to a single value. This method has the same algorithm as {{jsxref(\"Array.prototype.reduceRight()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-reduceright.html\")}}\n\n## Syntax\n\n```js-nolint\nreduceRight(callbackFn)\nreduceRight(callbackFn, initialValue)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the typed array. Its return value becomes the value of the `accumulator` parameter on the next invocation of `callbackFn`. For the last invocation, the return value becomes the return value of `reduceRight()`. The function is called with the following arguments:\n    - `accumulator`\n      - : The value resulting from the previous call to `callbackFn`. On the first call, its value is `initialValue` if the latter is specified; otherwise its value is the last element of the typed array.\n    - `currentValue`\n      - : The value of the current element. On the first call, its value is the last element if `initialValue` is specified; otherwise its value is the second-to-last element.\n    - `currentIndex`\n      - : The index position of `currentValue` in the typed array. On the first call, its value is `array.length - 1` if `initialValue` is specified, otherwise `array.length - 2`.\n    - `array`\n      - : The typed array `reduceRight()` was called upon.\n- `initialValue` {{optional_inline}}\n  - : Value to use as accumulator to the first call of the `callbackFn`. If no initial value is supplied, the last element in the typed array will be used and skipped. Calling `reduceRight()` on an empty typed array without an initial value creates a `TypeError`.\n\n### Return value\n\nThe value that results from the reduction.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.reduceRight()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Sum up all values within an array\n\n```js\nconst total = new Uint8Array([0, 1, 2, 3]).reduceRight((a, b) => a + b);\n// total === 6\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.reduceRight` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.map()\")}}\n- {{jsxref(\"TypedArray.prototype.reduce()\")}}\n- {{jsxref(\"Array.prototype.reduceRight()\")}}\n- {{jsxref(\"Object.groupBy()\")}}\n- {{jsxref(\"Map.groupBy()\")}}\n"
    },
    "reverse": {
      "index.md": "---\ntitle: TypedArray.prototype.reverse()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/reverse\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.reverse\n---\n\n{{JSRef}}\n\nThe **`reverse()`** method of {{jsxref(\"TypedArray\")}} instances reverses a typed array _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_ and returns the reference to the same typed array, the first typed array element now becoming the last, and the last typed array element becoming the first. In other words, elements order in the typed array will be turned towards the direction opposite to that previously stated. This method has the same algorithm as {{jsxref(\"Array.prototype.reverse()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-reverse.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nreverse()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe reference to the original typed array, now reversed. Note that the typed array is reversed _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_, and no copy is made.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.reverse()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Using reverse()\n\n```js\nconst uint8 = new Uint8Array([1, 2, 3]);\nuint8.reverse();\n\nconsole.log(uint8); // Uint8Array [3, 2, 1]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.reverse` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.join()\")}}\n- {{jsxref(\"TypedArray.prototype.sort()\")}}\n- {{jsxref(\"TypedArray.prototype.toReversed()\")}}\n- {{jsxref(\"Array.prototype.reverse()\")}}\n"
    },
    "set": {
      "index.md": "---\ntitle: TypedArray.prototype.set()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/set\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.set\n---\n\n{{JSRef}}\n\nThe **`set()`** method of {{jsxref(\"TypedArray\")}} instances stores multiple values in the typed\narray, reading input values from a specified array.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-set.html\")}}\n\n## Syntax\n\n```js-nolint\nset(array)\nset(array, targetOffset)\n\nset(typedarray)\nset(typedarray, targetOffset)\n```\n\n### Parameters\n\n- `array`\n  - : The array from which to copy values. All values from the source array are copied\n    into the target array, unless the length of the source array plus the target offset exceeds\n    the length of the target array, in which case an exception is thrown.\n- `typedarray`\n  - : If the source array is a typed array, the two arrays may share the same underlying\n    {{jsxref(\"ArrayBuffer\")}}; the JavaScript engine will intelligently\n    **copy** the source range of the buffer to the destination range.\n- `targetOffset` {{optional_inline}}\n  - : The offset into the target array at which to begin writing values from the source\n    array. If this value is omitted, 0 is assumed (that is, the source array will\n    overwrite values in the target array starting at index 0).\n\n### Return value\n\nNone ({{jsxref(\"undefined\")}}).\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown in one of the following cases:\n    - An element will be stored beyond the end of the typed array, either because `targetOffset` is too large or because `array` or `typedarray` is too large.\n    - `targetOffset` is negative.\n\n## Examples\n\n### Using set()\n\n```js\nconst buffer = new ArrayBuffer(8);\nconst uint8 = new Uint8Array(buffer);\n\nuint8.set([1, 2, 3], 3);\n\nconsole.log(uint8); // Uint8Array [ 0, 0, 0, 1, 2, 3, 0, 0 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.set` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n"
    },
    "slice": {
      "index.md": "---\ntitle: TypedArray.prototype.slice()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/slice\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.slice\n---\n\n{{JSRef}}\n\nThe **`slice()`** method of {{jsxref(\"TypedArray\")}} instances returns a copy of a portion of a typed array into a new typed array object selected from `start` to `end` (`end` not included) where `start` and `end` represent the index of items in that typed array. The original typed array will not be modified. This method has the same algorithm as {{jsxref(\"Array.prototype.slice()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-slice.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nslice()\nslice(start)\nslice(start, end)\n```\n\n### Parameters\n\n- `start` {{optional_inline}}\n  - : Zero-based index at which to start extraction, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n- `end` {{optional_inline}}\n  - : Zero-based index at which to end extraction, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion). `slice()` extracts up to but not including `end`.\n\n### Return value\n\nA new typed array containing the extracted elements.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.slice()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Return a portion of an existing typed array\n\n```js\nconst uint8 = new Uint8Array([1, 2, 3]);\nuint8.slice(1); // Uint8Array [ 2, 3 ]\nuint8.slice(2); // Uint8Array [ 3 ]\nuint8.slice(-2); // Uint8Array [ 2, 3 ]\nuint8.slice(0, 1); // Uint8Array [ 1 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.slice` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"Array.prototype.slice()\")}}\n- {{jsxref(\"String.prototype.slice()\")}}\n"
    },
    "some": {
      "index.md": "---\ntitle: TypedArray.prototype.some()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/some\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.some\n---\n\n{{JSRef}}\n\nThe **`some()`** method of {{jsxref(\"TypedArray\")}} instances tests whether at least one element in the typed array passes the test implemented by the provided function. It returns true if, in the typed array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the typed array. This method has the same algorithm as {{jsxref(\"Array.prototype.some()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-some.html\")}}\n\n## Syntax\n\n```js-nolint\nsome(callbackFn)\nsome(callbackFn, thisArg)\n```\n\n### Parameters\n\n- `callbackFn`\n  - : A function to execute for each element in the typed array. It should return a [truthy](/en-US/docs/Glossary/Truthy) value to indicate the element passes the test, and a [falsy](/en-US/docs/Glossary/Falsy) value otherwise. The function is called with the following arguments:\n    - `element`\n      - : The current element being processed in the typed array.\n    - `index`\n      - : The index of the current element being processed in the typed array.\n    - `array`\n      - : The typed array `some()` was called upon.\n- `thisArg` {{optional_inline}}\n  - : A value to use as `this` when executing `callbackFn`. See [iterative methods](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods).\n\n### Return value\n\n`false` unless `callbackFn` returns a {{Glossary(\"truthy\")}} value for a typed array element, in which case `true` is immediately returned.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.some()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Testing size of all typed array elements\n\nThe following example tests whether any element in the typed array is bigger than 10.\n\n```js\nfunction isBiggerThan10(element, index, array) {\n  return element > 10;\n}\nnew Uint8Array([2, 5, 8, 1, 4]).some(isBiggerThan10); // false\nnew Uint8Array([12, 5, 8, 1, 4]).some(isBiggerThan10); // true\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.some` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.every()\")}}\n- {{jsxref(\"TypedArray.prototype.forEach()\")}}\n- {{jsxref(\"TypedArray.prototype.find()\")}}\n- {{jsxref(\"TypedArray.prototype.includes()\")}}\n- {{jsxref(\"Array.prototype.some()\")}}\n"
    },
    "sort": {
      "index.md": "---\ntitle: TypedArray.prototype.sort()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/sort\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.sort\n---\n\n{{JSRef}}\n\nThe **`sort()`** method of {{jsxref(\"TypedArray\")}} instances sorts the elements of a typed array _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_ and returns the reference to the same typed array, now sorted. This method has the same algorithm as {{jsxref(\"Array.prototype.sort()\")}}, except that it sorts the values numerically instead of as strings by default.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-sort.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\nsort()\nsort(compareFn)\n```\n\n### Parameters\n\n- `compareFn` {{optional_inline}}\n\n  - : A function that defines the sort order. The return value should be a number whose sign indicates the relative order of the two elements: negative if `a` is less than `b`, positive if `a` is greater than `b`, and zero if they are equal. `NaN` is treated as `0`. The function is called with the following arguments:\n\n    - `a`\n      - : The first element for comparison. Will never be `undefined`.\n    - `b`\n      - : The second element for comparison. Will never be `undefined`.\n\n    If omitted, the typed array elements are sorted according to numeric value.\n\n### Return value\n\nThe reference to the original typed array, now sorted. Note that the typed array is sorted _[in place](https://en.wikipedia.org/wiki/In-place_algorithm)_, and no copy is made.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.sort()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Using sort()\n\nFor more examples, see also the {{jsxref(\"Array.prototype.sort()\")}} method.\n\n```js\nlet numbers = new Uint8Array([40, 1, 5, 200]);\nnumbers.sort();\n// Uint8Array [ 1, 5, 40, 200 ]\n// Unlike plain Arrays, a compare function is not required\n// to sort the numbers numerically.\n\n// Regular Arrays require a compare function to sort numerically:\nnumbers = [40, 1, 5, 200];\nnumbers.sort();\n// [1, 200, 40, 5]\n\nnumbers.sort((a, b) => a - b); // compare numbers\n// [ 1, 5, 40, 200 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.sort` with modern behavior like stable sort in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.reverse()\")}}\n- {{jsxref(\"TypedArray.prototype.toSorted()\")}}\n- {{jsxref(\"Array.prototype.sort()\")}}\n"
    },
    "subarray": {
      "index.md": "---\ntitle: TypedArray.prototype.subarray()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.subarray\n---\n\n{{JSRef}}\n\nThe **`subarray()`** method of {{jsxref(\"TypedArray\")}} instances returns a new typed array\non the same {{jsxref(\"ArrayBuffer\")}} store and with the same element types as for this\ntyped array. The begin offset is **inclusive** and the end\noffset is **exclusive**.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-subarray.html\")}}\n\n## Syntax\n\n```js-nolint\nsubarray()\nsubarray(begin)\nsubarray(begin, end)\n```\n\n### Parameters\n\n- `begin` {{optional_inline}}\n  - : Element to begin at. The offset is inclusive. The whole array will be included in\n    the new view if this value is not specified.\n- `end` {{optional_inline}}\n  - : Element to end at. The offset is exclusive. If not specified, all elements from the\n    one specified by `begin` to the end of the array are included in\n    the new view.\n\n### Return value\n\nA new {{jsxref(\"TypedArray\")}} object.\n\n## Description\n\nThe range specified by `begin` and `end` is\nclamped to the valid index range for the current array; if the computed length of the\nnew array would be negative, it's clamped to zero. If either\n`begin` or `end` is negative, it refers to\nan index from the end of the array instead of from the beginning.\n\nAlso note that this is creating a new view on the existing buffer; changes to the new\nobject's contents will impact the original object and vice versa.\n\n## Examples\n\n### Using the subarray() method\n\n```js\nconst buffer = new ArrayBuffer(8);\nconst uint8 = new Uint8Array(buffer);\nuint8.set([1, 2, 3]);\n\nconsole.log(uint8); // Uint8Array [ 1, 2, 3, 0, 0, 0, 0, 0 ]\n\nconst sub = uint8.subarray(0, 4);\n\nconsole.log(sub); // Uint8Array [ 1, 2, 3, 0 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.subarray` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n"
    },
    "tolocalestring": {
      "index.md": "---\ntitle: TypedArray.prototype.toLocaleString()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/toLocaleString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.toLocaleString\n---\n\n{{JSRef}}\n\nThe **`toLocaleString()`** method of {{jsxref(\"TypedArray\")}} instances returns a string representing the elements of the typed array. The elements are converted to strings using their `toLocaleString` methods and these strings are separated by a locale-specific string (such as a comma \",\"). This method has the same algorithm as {{jsxref(\"Array.prototype.toLocaleString()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-tolocalestring.html\")}}\n\n## Syntax\n\n```js-nolint\ntoLocaleString()\ntoLocaleString(locales)\ntoLocaleString(locales, options)\n```\n\n### Parameters\n\n- `locales` {{optional_inline}}\n  - : A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the `locales` argument, see [the parameter description on the `Intl` main page](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n- `options` {{optional_inline}}\n  - : An object with configuration properties. See {{jsxref(\"Number.prototype.toLocaleString()\")}}.\n\n### Return value\n\nA string representing the elements of the typed array.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.toLocaleString()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Using toLocaleString()\n\n```js\nconst uint = new Uint32Array([2000, 500, 8123, 12, 4212]);\n\nuint.toLocaleString();\n// if run in a de-DE locale\n// \"2.000,500,8.123,12,4.212\"\n\nuint.toLocaleString(\"en-US\");\n// \"2,000,500,8,123,12,4,212\"\n\nuint.toLocaleString(\"ja-JP\", { style: \"currency\", currency: \"JPY\" });\n// \"￥2,000,￥500,￥8,123,￥12,￥4,212\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.toString()\")}}\n- {{jsxref(\"Array.prototype.toLocaleString()\")}}\n- {{jsxref(\"Intl\")}}\n- {{jsxref(\"Intl.ListFormat\")}}\n- {{jsxref(\"Number.prototype.toLocaleString()\")}}\n"
    },
    "toreversed": {
      "index.md": "---\ntitle: TypedArray.prototype.toReversed()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/toReversed\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.toReversed\n---\n\n{{JSRef}}\n\nThe **`toReversed()`** method of {{jsxref(\"TypedArray\")}} instances is the [copying](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) counterpart of the {{jsxref(\"TypedArray/reverse\", \"reverse()\")}} method. It returns a new typed array with the elements in reversed order. This method has the same algorithm as {{jsxref(\"Array.prototype.toReversed()\")}}.\n\n## Syntax\n\n```js-nolint\ntoReversed()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new typed array containing the elements in reversed order.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.toReversed()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Using toReversed()\n\n```js\nconst uint8 = new Uint8Array([1, 2, 3]);\nconst reversedUint8 = uint8.toReversed();\nconsole.log(reversedUint8); // Uint8Array [3, 2, 1]\nconsole.log(uint8); // Uint8Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.toReversed` in `core-js`](https://github.com/zloirock/core-js#change-array-by-copy)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray.prototype.reverse()\")}}\n- {{jsxref(\"TypedArray.prototype.toSorted()\")}}\n- {{jsxref(\"TypedArray.prototype.with()\")}}\n- {{jsxref(\"Array.prototype.toReversed()\")}}\n"
    },
    "tosorted": {
      "index.md": "---\ntitle: TypedArray.prototype.toSorted()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/toSorted\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.toSorted\n---\n\n{{JSRef}}\n\nThe **`toSorted()`** method of {{jsxref(\"TypedArray\")}} instances is the [copying](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) version of the {{jsxref(\"TypedArray/sort\", \"sort()\")}} method. It returns a new typed array with the elements sorted in ascending order. This method has the same algorithm as {{jsxref(\"Array.prototype.toSorted()\")}}, except that it sorts the values numerically instead of as strings by default.\n\n## Syntax\n\n```js-nolint\ntoSorted()\ntoSorted(compareFn)\n```\n\n### Parameters\n\n- `compareFn` {{optional_inline}}\n\n  - : Specifies a function that defines the sort order. If omitted, the typed array elements are sorted according to numeric value.\n\n    - `a`\n      - : The first element for comparison.\n    - `b`\n      - : The second element for comparison.\n\n### Return value\n\nA new typed array with the elements sorted in ascending order.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.toSorted()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Sorting an array\n\nFor more examples, see also the {{jsxref(\"Array.prototype.sort()\")}} method.\n\n```js\nconst numbers = new Uint8Array([40, 1, 5, 200]);\nconst numberSorted = numbers.toSorted();\nconsole.log(numberSorted); // Uint8Array [ 1, 5, 40, 200 ]\n// Unlike plain Arrays, a compare function is not required\n// to sort the numbers numerically.\nconsole.log(numbers); // Uint8Array [ 40, 1, 5, 200 ]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.toSorted` in `core-js`](https://github.com/zloirock/core-js#change-array-by-copy)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray.prototype.sort()\")}}\n- {{jsxref(\"TypedArray.prototype.toReversed()\")}}\n- {{jsxref(\"TypedArray.prototype.with()\")}}\n- {{jsxref(\"Array.prototype.toSorted()\")}}\n"
    },
    "tostring": {
      "index.md": "---\ntitle: TypedArray.prototype.toString()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/toString\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.toString\n---\n\n{{JSRef}}\n\nThe **`toString()`** method of {{jsxref(\"TypedArray\")}} instances returns a string representing the specified typed array and its elements. This method has the same algorithm as {{jsxref(\"Array.prototype.toString()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-tostring.html\", \"shorter\")}}\n\n## Syntax\n\n```js-nolint\ntoString()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA string representing the elements of the typed array.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.toString()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Converting a typed array to a string\n\n```js\nconst uint8 = new Uint8Array([1, 2, 3]);\n// Explicit conversion\nconsole.log(uint8.toString()); // 1,2,3\n// Implicit conversion\nconsole.log(`${uint8}`); // 1,2,3\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.join()\")}}\n- {{jsxref(\"TypedArray.prototype.toLocaleString()\")}}\n- {{jsxref(\"Array.prototype.toString()\")}}\n- {{jsxref(\"String.prototype.toString()\")}}\n"
    },
    "values": {
      "index.md": "---\ntitle: TypedArray.prototype.values()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/values\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.values\n---\n\n{{JSRef}}\n\nThe **`values()`** method of {{jsxref(\"TypedArray\")}} instances returns a new _[array iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)_ object that iterates the value of each item in the typed array. This method has the same algorithm as {{jsxref(\"Array.prototype.values()\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/typedarray-values.html\")}}\n\n## Syntax\n\n```js-nolint\nvalues()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nA new [iterable iterator object](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator).\n\n## Description\n\nSee {{jsxref(\"Array.prototype.values()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Iteration using for...of loop\n\n```js\nconst arr = new Uint8Array([10, 20, 30, 40, 50]);\nconst values = arr.values();\nfor (const n of values) {\n  console.log(n);\n}\n```\n\n### Alternative iteration\n\n```js\nconst arr = new Uint8Array([10, 20, 30, 40, 50]);\nconst values = arr.values();\nconsole.log(values.next().value); // 10\nconsole.log(values.next().value); // 20\nconsole.log(values.next().value); // 30\nconsole.log(values.next().value); // 40\nconsole.log(values.next().value); // 50\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.values` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"TypedArray.prototype.entries()\")}}\n- {{jsxref(\"TypedArray.prototype.keys()\")}}\n- [`TypedArray.prototype[@@iterator]()`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator)\n- {{jsxref(\"Array.prototype.values()\")}}\n- [Iteration protocols](/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n"
    },
    "with": {
      "index.md": "---\ntitle: TypedArray.prototype.with()\nslug: Web/JavaScript/Reference/Global_Objects/TypedArray/with\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.TypedArray.with\n---\n\n{{JSRef}}\n\nThe **`with()`** method of {{jsxref(\"TypedArray\")}} instances is the [copying](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#copying_methods_and_mutating_methods) version of using the [bracket notation](/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#bracket_notation) to change the value of a given index. It returns a new typed array with the element at the given index replaced with the given value. This method has the same algorithm as {{jsxref(\"Array.prototype.with()\")}}.\n\n## Syntax\n\n```js-nolint\narrayInstance.with(index, value)\n```\n\n### Parameters\n\n- `index`\n  - : Zero-based index at which to change the typed array, [converted to an integer](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#integer_conversion).\n- `value`\n  - : Any value to be assigned to the given index.\n\n### Return value\n\nA new typed array with the element at `index` replaced with `value`.\n\n### Exceptions\n\n- {{jsxref(\"RangeError\")}}\n  - : Thrown if `index >= array.length` or `index < -array.length`.\n\n## Description\n\nSee {{jsxref(\"Array.prototype.with()\")}} for more details. This method is not generic and can only be called on typed array instances.\n\n## Examples\n\n### Using with()\n\n```js\nconst arr = new Uint8Array([1, 2, 3, 4, 5]);\nconsole.log(arr.with(2, 6)); // Uint8Array [1, 2, 6, 4, 5]\nconsole.log(arr); // Uint8Array [1, 2, 3, 4, 5]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `TypedArray.prototype.with` in `core-js`](https://github.com/zloirock/core-js#change-array-by-copy)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray.prototype.toReversed()\")}}\n- {{jsxref(\"TypedArray.prototype.toSorted()\")}}\n- {{jsxref(\"TypedArray.prototype.at()\")}}\n- {{jsxref(\"Array.prototype.with()\")}}\n"
    }
  },
  "typeerror": {
    "index.md": "---\ntitle: TypeError\nslug: Web/JavaScript/Reference/Global_Objects/TypeError\npage-type: javascript-class\nbrowser-compat: javascript.builtins.TypeError\n---\n\n{{JSRef}}\n\nThe **`TypeError`** object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.\n\nA `TypeError` may be thrown when:\n\n- an operand or argument passed to a function is incompatible with the type expected by that operator or function; or\n- when attempting to modify a value that cannot be changed; or\n- when attempting to use a value in an inappropriate way.\n\n`TypeError` is a {{Glossary(\"serializable object\")}}, so it can be cloned with {{domxref(\"structuredClone()\")}} or copied between [Workers](/en-US/docs/Web/API/Worker) using {{domxref(\"Worker/postMessage()\", \"postMessage()\")}}.\n\n`TypeError` is a subclass of {{jsxref(\"Error\")}}.\n\n## Constructor\n\n- {{jsxref(\"TypeError/TypeError\", \"TypeError()\")}}\n  - : Creates a new `TypeError` object.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"Error\")}}_.\n\nThese properties are defined on `TypeError.prototype` and shared by all `TypeError` instances.\n\n- {{jsxref(\"Object/constructor\", \"TypeError.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `TypeError` instances, the initial value is the {{jsxref(\"TypeError/TypeError\", \"TypeError\")}} constructor.\n- {{jsxref(\"Error/name\", \"TypeError.prototype.name\")}}\n  - : Represents the name for the type of error. For `TypeError.prototype.name`, the initial value is `\"TypeError\"`.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"Error\")}}_.\n\n## Examples\n\n### Catching a TypeError\n\n```js\ntry {\n  null.f();\n} catch (e) {\n  console.log(e instanceof TypeError); // true\n  console.log(e.message); // \"null has no properties\"\n  console.log(e.name); // \"TypeError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### Creating a TypeError\n\n```js\ntry {\n  throw new TypeError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof TypeError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"TypeError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n",
    "typeerror": {
      "index.md": "---\ntitle: TypeError() constructor\nslug: Web/JavaScript/Reference/Global_Objects/TypeError/TypeError\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.TypeError.TypeError\n---\n\n{{JSRef}}\n\nThe **`TypeError()`** constructor creates {{jsxref(\"TypeError\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew TypeError()\nnew TypeError(message)\nnew TypeError(message, options)\nnew TypeError(message, fileName)\nnew TypeError(message, fileName, lineNumber)\n\nTypeError()\nTypeError(message)\nTypeError(message, options)\nTypeError(message, fileName)\nTypeError(message, fileName, lineNumber)\n```\n\n> **Note:** `TypeError()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `TypeError` instance.\n\n### Parameters\n\n- `message` {{optional_inline}}\n  - : Human-readable description of the error\n- `options` {{optional_inline}}\n  - : An object that has the following properties:\n    - `cause` {{optional_inline}}\n      - : A property indicating the specific cause of the error.\n        When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n- `fileName` {{optional_inline}} {{non-standard_inline}}\n  - : The name of the file containing the code that caused the exception\n- `lineNumber` {{optional_inline}} {{non-standard_inline}}\n  - : The line number of the code that caused the exception\n\n## Examples\n\n### Catching a TypeError\n\n```js\ntry {\n  null.f();\n} catch (e) {\n  console.log(e instanceof TypeError); // true\n  console.log(e.message); // \"null has no properties\"\n  console.log(e.name); // \"TypeError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### Creating a TypeError\n\n```js\ntry {\n  throw new TypeError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof TypeError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"TypeError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n"
    }
  },
  "uint16array": {
    "index.md": "---\ntitle: Uint16Array\nslug: Web/JavaScript/Reference/Global_Objects/Uint16Array\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Uint16Array\n---\n\n{{JSRef}}\n\nThe **`Uint16Array`** typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use {{jsxref(\"DataView\")}} instead. The contents are initialized to `0`. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Uint16Array` is a subclass of the hidden {{jsxref(\"TypedArray\")}} class.\n\n## Constructor\n\n- {{jsxref(\"Uint16Array/Uint16Array\", \"Uint16Array()\")}}\n  - : Creates a new `Uint16Array` object.\n\n## Static properties\n\n_Also inherits static properties from its parent {{jsxref(\"TypedArray\")}}_.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Uint16Array.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `2` in the case of `Uint16Array`.\n\n## Static methods\n\n_Inherits static methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"TypedArray\")}}_.\n\nThese properties are defined on `Uint16Array.prototype` and shared by all `Uint16Array` instances.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Uint16Array.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `2` in the case of a `Uint16Array`.\n- {{jsxref(\"Object/constructor\", \"Uint16Array.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Uint16Array` instances, the initial value is the {{jsxref(\"Uint16Array/Uint16Array\", \"Uint16Array\")}} constructor.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Examples\n\n### Different ways to create a Uint16Array\n\n```js\n// From a length\nconst uint16 = new Uint16Array(2);\nuint16[0] = 42;\nconsole.log(uint16[0]); // 42\nconsole.log(uint16.length); // 2\nconsole.log(uint16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nconst x = new Uint16Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(16);\nconst z = new Uint16Array(buffer, 2, 4);\nconsole.log(z.byteOffset); // 2\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint16FromIterable = new Uint16Array(iterable);\nconsole.log(uint16FromIterable);\n// Uint16Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Uint16Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n",
    "uint16array": {
      "index.md": "---\ntitle: Uint16Array() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Uint16Array.Uint16Array\n---\n\n{{JSRef}}\n\nThe **`Uint16Array()`** constructor creates {{jsxref(\"Uint16Array\")}} objects. The contents are initialized to `0`.\n\n## Syntax\n\n```js-nolint\nnew Uint16Array()\nnew Uint16Array(length)\nnew Uint16Array(typedArray)\nnew Uint16Array(object)\n\nnew Uint16Array(buffer)\nnew Uint16Array(buffer, byteOffset)\nnew Uint16Array(buffer, byteOffset, length)\n```\n\n> **Note:** `Uint16Array()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#parameters).\n\n### Exceptions\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#exceptions).\n\n## Examples\n\n### Different ways to create a Uint16Array\n\n```js\n// From a length\nconst uint16 = new Uint16Array(2);\nuint16[0] = 42;\nconsole.log(uint16[0]); // 42\nconsole.log(uint16.length); // 2\nconsole.log(uint16.BYTES_PER_ELEMENT); // 2\n\n// From an array\nconst x = new Uint16Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint16Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(16);\nconst z = new Uint16Array(buffer, 2, 4);\nconsole.log(z.byteOffset); // 2\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint16FromIterable = new Uint16Array(iterable);\nconsole.log(uint16FromIterable);\n// Uint16Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Uint16Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
    }
  },
  "uint32array": {
    "index.md": "---\ntitle: Uint32Array\nslug: Web/JavaScript/Reference/Global_Objects/Uint32Array\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Uint32Array\n---\n\n{{JSRef}}\n\nThe **`Uint32Array`** typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use {{jsxref(\"DataView\")}} instead. The contents are initialized to `0`. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Uint32Array` is a subclass of the hidden {{jsxref(\"TypedArray\")}} class.\n\n## Constructor\n\n- {{jsxref(\"Uint32Array/Uint32Array\", \"Uint32Array()\")}}\n  - : Creates a new `Uint32Array` object.\n\n## Static properties\n\n_Also inherits static properties from its parent {{jsxref(\"TypedArray\")}}_.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Uint32Array.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `4` in the case of `Uint32Array`.\n\n## Static methods\n\n_Inherits static methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"TypedArray\")}}_.\n\nThese properties are defined on `Uint32Array.prototype` and shared by all `Uint32Array` instances.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Uint32Array.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `4` in the case of a `Uint32Array`.\n- {{jsxref(\"Object/constructor\", \"Uint32Array.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Uint32Array` instances, the initial value is the {{jsxref(\"Uint32Array/Uint32Array\", \"Uint32Array\")}} constructor.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Examples\n\n### Different ways to create a Uint32Array\n\n```js\n// From a length\nconst uint32 = new Uint32Array(2);\nuint32[0] = 42;\nconsole.log(uint32[0]); // 42\nconsole.log(uint32.length); // 2\nconsole.log(uint32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Uint32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Uint32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint32FromIterable = new Uint32Array(iterable);\nconsole.log(uint32FromIterable);\n// Uint32Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Uint32Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n",
    "uint32array": {
      "index.md": "---\ntitle: Uint32Array() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Uint32Array.Uint32Array\n---\n\n{{JSRef}}\n\nThe **`Uint32Array()`** constructor creates {{jsxref(\"Uint32Array\")}} objects. The contents are initialized to `0`.\n\n## Syntax\n\n```js-nolint\nnew Uint32Array()\nnew Uint32Array(length)\nnew Uint32Array(typedArray)\nnew Uint32Array(object)\n\nnew Uint32Array(buffer)\nnew Uint32Array(buffer, byteOffset)\nnew Uint32Array(buffer, byteOffset, length)\n```\n\n> **Note:** `Uint32Array()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#parameters).\n\n### Exceptions\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#exceptions).\n\n## Examples\n\n### Different ways to create a Uint32Array\n\n```js\n// From a length\nconst uint32 = new Uint32Array(2);\nuint32[0] = 42;\nconsole.log(uint32[0]); // 42\nconsole.log(uint32.length); // 2\nconsole.log(uint32.BYTES_PER_ELEMENT); // 4\n\n// From an array\nconst x = new Uint32Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint32Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(32);\nconst z = new Uint32Array(buffer, 4, 4);\nconsole.log(z.byteOffset); // 4\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint32FromIterable = new Uint32Array(iterable);\nconsole.log(uint32FromIterable);\n// Uint32Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Uint32Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
    }
  },
  "uint8array": {
    "index.md": "---\ntitle: Uint8Array\nslug: Web/JavaScript/Reference/Global_Objects/Uint8Array\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Uint8Array\n---\n\n{{JSRef}}\n\nThe **`Uint8Array`** typed array represents an array of 8-bit unsigned integers. The contents are initialized to `0`. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Uint8Array` is a subclass of the hidden {{jsxref(\"TypedArray\")}} class.\n\n## Constructor\n\n- {{jsxref(\"Uint8Array/Uint8Array\", \"Uint8Array()\")}}\n  - : Creates a new `Uint8Array` object.\n\n## Static properties\n\n_Also inherits static properties from its parent {{jsxref(\"TypedArray\")}}_.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Uint8Array.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `1` in the case of `Uint8Array`.\n\n## Static methods\n\n_Inherits static methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"TypedArray\")}}_.\n\nThese properties are defined on `Uint8Array.prototype` and shared by all `Uint8Array` instances.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Uint8Array.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `1` in the case of a `Uint8Array`.\n- {{jsxref(\"Object/constructor\", \"Uint8Array.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Uint8Array` instances, the initial value is the {{jsxref(\"Uint8Array/Uint8Array\", \"Uint8Array\")}} constructor.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Examples\n\n### Different ways to create a Uint8Array\n\n```js\n// From a length\nconst uint8 = new Uint8Array(2);\nuint8[0] = 42;\nconsole.log(uint8[0]); // 42\nconsole.log(uint8.length); // 2\nconsole.log(uint8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Uint8Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Uint8Array(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint8FromIterable = new Uint8Array(iterable);\nconsole.log(uint8FromIterable);\n// Uint8Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Uint8Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n",
    "uint8array": {
      "index.md": "---\ntitle: Uint8Array() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Uint8Array.Uint8Array\n---\n\n{{JSRef}}\n\nThe **`Uint8Array()`** constructor creates {{jsxref(\"Uint8Array\")}} objects. The contents are initialized to `0`.\n\n## Syntax\n\n```js-nolint\nnew Uint8Array()\nnew Uint8Array(length)\nnew Uint8Array(typedArray)\nnew Uint8Array(object)\n\nnew Uint8Array(buffer)\nnew Uint8Array(buffer, byteOffset)\nnew Uint8Array(buffer, byteOffset, length)\n```\n\n> **Note:** `Uint8Array()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#parameters).\n\n### Exceptions\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#exceptions).\n\n## Examples\n\n### Different ways to create a Uint8Array\n\n```js\n// From a length\nconst uint8 = new Uint8Array(2);\nuint8[0] = 42;\nconsole.log(uint8[0]); // 42\nconsole.log(uint8.length); // 2\nconsole.log(uint8.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Uint8Array([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint8Array(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Uint8Array(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint8FromIterable = new Uint8Array(iterable);\nconsole.log(uint8FromIterable);\n// Uint8Array [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Uint8Array` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
    }
  },
  "uint8clampedarray": {
    "index.md": "---\ntitle: Uint8ClampedArray\nslug: Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\npage-type: javascript-class\nbrowser-compat: javascript.builtins.Uint8ClampedArray\n---\n\n{{JSRef}}\n\nThe **`Uint8ClampedArray`** typed array represents an array of 8-bit unsigned integers clamped to 0–255. The contents are initialized to `0`. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).\n\n`Uint8ClampedArray` is a subclass of the hidden {{jsxref(\"TypedArray\")}} class.\n\n## Constructor\n\n- {{jsxref(\"Uint8ClampedArray/Uint8ClampedArray\", \"Uint8ClampedArray()\")}}\n  - : Creates a new `Uint8ClampedArray` object.\n\n## Static properties\n\n_Also inherits static properties from its parent {{jsxref(\"TypedArray\")}}_.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Uint8ClampedArray.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `1` in the case of `Uint8ClampedArray`.\n\n## Static methods\n\n_Inherits static methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"TypedArray\")}}_.\n\nThese properties are defined on `Uint8ClampedArray.prototype` and shared by all `Uint8ClampedArray` instances.\n\n- {{jsxref(\"TypedArray/BYTES_PER_ELEMENT\", \"Uint8ClampedArray.prototype.BYTES_PER_ELEMENT\")}}\n  - : Returns a number value of the element size. `1` in the case of a `Uint8ClampedArray`.\n- {{jsxref(\"Object/constructor\", \"Uint8ClampedArray.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `Uint8ClampedArray` instances, the initial value is the {{jsxref(\"Uint8ClampedArray/Uint8ClampedArray\", \"Uint8ClampedArray\")}} constructor.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"TypedArray\")}}_.\n\n## Examples\n\n### Different ways to create a Uint8ClampedArray\n\n```js\n// From a length\nconst uint8c = new Uint8ClampedArray(2);\nuint8c[0] = 42;\nuint8c[1] = 1337;\nconsole.log(uint8c[0]); // 42\nconsole.log(uint8c[1]); // 255 (clamped)\nconsole.log(uint8c.length); // 2\nconsole.log(uint8c.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Uint8ClampedArray([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint8ClampedArray(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Uint8ClampedArray(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint8cFromIterable = new Uint8ClampedArray(iterable);\nconsole.log(uint8cFromIterable);\n// Uint8ClampedArray [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Uint8ClampedArray` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n",
    "uint8clampedarray": {
      "index.md": "---\ntitle: Uint8ClampedArray() constructor\nslug: Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.Uint8ClampedArray.Uint8ClampedArray\n---\n\n{{JSRef}}\n\nThe **`Uint8ClampedArray()`** constructor creates {{jsxref(\"Uint8ClampedArray\")}} objects. The contents are initialized to `0`.\n\n## Syntax\n\n```js-nolint\nnew Uint8ClampedArray()\nnew Uint8ClampedArray(length)\nnew Uint8ClampedArray(typedArray)\nnew Uint8ClampedArray(object)\n\nnew Uint8ClampedArray(buffer)\nnew Uint8ClampedArray(buffer, byteOffset)\nnew Uint8ClampedArray(buffer, byteOffset, length)\n```\n\n> **Note:** `Uint8ClampedArray()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#parameters).\n\n### Exceptions\n\nSee [`TypedArray`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#exceptions).\n\n## Examples\n\n### Different ways to create a Uint8ClampedArray\n\n```js\n// From a length\nconst uint8c = new Uint8ClampedArray(2);\nuint8c[0] = 42;\nuint8c[1] = 1337;\nconsole.log(uint8c[0]); // 42\nconsole.log(uint8c[1]); // 255 (clamped)\nconsole.log(uint8c.length); // 2\nconsole.log(uint8c.BYTES_PER_ELEMENT); // 1\n\n// From an array\nconst x = new Uint8ClampedArray([21, 31]);\nconsole.log(x[1]); // 31\n\n// From another TypedArray\nconst y = new Uint8ClampedArray(x);\nconsole.log(y[0]); // 21\n\n// From an ArrayBuffer\nconst buffer = new ArrayBuffer(8);\nconst z = new Uint8ClampedArray(buffer, 1, 4);\nconsole.log(z.byteOffset); // 1\n\n// From an iterable\nconst iterable = (function* () {\n  yield* [1, 2, 3];\n})();\nconst uint8cFromIterable = new Uint8ClampedArray(iterable);\nconsole.log(uint8cFromIterable);\n// Uint8ClampedArray [1, 2, 3]\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `Uint8ClampedArray` in `core-js`](https://github.com/zloirock/core-js#ecmascript-typed-arrays)\n- [JavaScript typed arrays](/en-US/docs/Web/JavaScript/Guide/Typed_arrays) guide\n- {{jsxref(\"TypedArray\")}}\n- {{jsxref(\"ArrayBuffer\")}}\n- {{jsxref(\"DataView\")}}\n"
    }
  },
  "undefined": {
    "index.md": "---\ntitle: undefined\nslug: Web/JavaScript/Reference/Global_Objects/undefined\npage-type: javascript-global-property\nbrowser-compat: javascript.builtins.undefined\n---\n\n{{jsSidebar(\"Objects\")}}\n\nThe **`undefined`** global property represents the primitive\nvalue [`undefined`](/en-US/docs/Web/JavaScript/Data_structures#undefined_type). It is one of JavaScript's\n{{Glossary(\"Primitive\", \"primitive types\")}}.\n\n{{EmbedInteractiveExample(\"pages/js/globalprops-undefined.html\")}}\n\n## Value\n\nThe primitive value [`undefined`](/en-US/docs/Web/JavaScript/Data_structures#undefined_type).\n\n{{js_property_attributes(0, 0, 0)}}\n\n## Description\n\n`undefined` is a property of the _global object_. That is, it is a variable in global scope.\n\nIn all non-legacy browsers, `undefined` is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it.\n\nA variable that has not been assigned a value is of type `undefined`. A\nmethod or statement also returns `undefined` if the variable that is being\nevaluated does not have an assigned value. A function returns `undefined` if\na value was not {{jsxref(\"Statements/return\", \"returned\")}}.\n\n> **Note:** While you can use `undefined` as an {{Glossary(\"identifier\")}} (variable name) in any scope other than the global scope (because `undefined` is not a [reserved word](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words)), doing so is a very bad idea that will make your code difficult to maintain and debug.\n>\n> ```js example-bad\n> // DON'T DO THIS\n>\n> (() => {\n>   const undefined = \"foo\";\n>   console.log(undefined, typeof undefined); // foo string\n> })();\n>\n> ((undefined) => {\n>   console.log(undefined, typeof undefined); // foo string\n> })(\"foo\");\n> ```\n\n## Examples\n\n### Strict equality and undefined\n\nYou can use `undefined` and the strict equality and inequality operators to\ndetermine whether a variable has a value. In the following code, the variable\n`x` is not initialized, and the `if` statement evaluates to true.\n\n```js\nlet x;\nif (x === undefined) {\n  // these statements execute\n} else {\n  // these statements do not execute\n}\n```\n\n> **Note:** The _strict equality_ operator (as opposed to the\n> _standard equality_ operator) must be used here, because\n> `x == undefined` also checks whether `x` is `null`,\n> while strict equality doesn't. This is because `null` is not equivalent to\n> `undefined`.\n>\n> See [Equality comparison and sameness](/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness) for details.\n\n### typeof operator and undefined\n\nAlternatively, {{jsxref(\"Operators/typeof\", \"typeof\")}} can be used:\n\n```js\nlet x;\nif (typeof x === \"undefined\") {\n  // these statements execute\n}\n```\n\nOne reason to use {{jsxref(\"Operators/typeof\", \"typeof\")}} is that it does not throw an\nerror if the variable has not been declared.\n\n```js\n// x has not been declared before\n// evaluates to true without errors\nif (typeof x === \"undefined\") {\n  // these statements execute\n}\n\n// Throws a ReferenceError\nif (x === undefined) {\n}\n```\n\nHowever, there is another alternative. JavaScript is a statically scoped language, so\nknowing if a variable is declared can be read by seeing whether it is declared in an\nenclosing context.\n\nThe global scope is bound to the {{jsxref(\"globalThis\", \"global object\", \"\", 1)}}, so\nchecking the existence of a variable in the global context can be done by checking the\nexistence of a property on the _global object_, using the\n{{jsxref(\"Operators/in\", \"in\")}} operator, for instance:\n\n```js\nif (\"x\" in window) {\n  // These statements execute only if x is defined globally\n}\n```\n\n### void operator and undefined\n\nThe {{jsxref(\"Operators/void\", \"void\")}} operator is a third alternative.\n\n```js\nlet x;\nif (x === void 0) {\n  // these statements execute\n}\n\n// y has not been declared before\nif (y === void 0) {\n  // throws Uncaught ReferenceError: y is not defined\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript data types and data structures](/en-US/docs/Web/JavaScript/Data_structures)\n- [`null`](/en-US/docs/Web/JavaScript/Reference/Operators/null)\n"
  },
  "unescape": {
    "index.md": "---\ntitle: unescape()\nslug: Web/JavaScript/Reference/Global_Objects/unescape\npage-type: javascript-function\nstatus:\n  - deprecated\nbrowser-compat: javascript.builtins.unescape\n---\n\n{{jsSidebar(\"Objects\")}}{{Deprecated_Header}}\n\n> **Note:** `unescape()` is a non-standard function implemented by browsers and was only standardized for cross-engine compatibility. It is not required to be implemented by all JavaScript engines and may not work everywhere. Use {{jsxref(\"decodeURIComponent()\")}} or {{jsxref(\"decodeURI()\")}} if possible.\n\nThe **`unescape()`** function computes a new string in which hexadecimal escape sequences are replaced with the characters that they represent. The escape sequences might be introduced by a function like {{jsxref(\"escape()\")}}.\n\n## Syntax\n\n```js-nolint\nunescape(str)\n```\n\n### Parameters\n\n- `str`\n  - : A string to be decoded.\n\n### Return value\n\nA new string in which certain characters have been unescaped.\n\n## Description\n\n`unescape()` is a function property of the global object.\n\nThe `unescape()` function replaces any escape sequence with the character that it represents. Specifically, it replaces any escape sequence of the form `%XX` or `%uXXXX` (where `X` represents one hexadecimal digit) with the character that has the hexadecimal value `XX`/`XXXX`. If the escape sequence is not a valid escape sequence (for example, if `%` is followed by one or no hex digit), it is left as-is.\n\n> **Note:** This function was used mostly for [URL encoding](https://en.wikipedia.org/wiki/URL_encoding) and is partly based on the escape format in {{rfc(1738)}}. The `unescape()` function does _not_ evaluate [escape sequences](/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#escape_sequences) in string literals. You can replace `\\xXX` with `%XX` and `\\uXXXX` with `%uXXXX` to get a string that can be handled by `unescape()`.\n\n## Examples\n\n### Using unescape()\n\n```js\nunescape(\"abc123\"); // \"abc123\"\nunescape(\"%E4%F6%FC\"); // \"äöü\"\nunescape(\"%u0107\"); // \"ć\"\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `unescape` in `core-js`](https://github.com/zloirock/core-js#ecmascript-string-and-regexp)\n- {{jsxref(\"decodeURI\")}}\n- {{jsxref(\"decodeURIComponent\")}}\n- {{jsxref(\"escape\")}}\n"
  },
  "urierror": {
    "index.md": "---\ntitle: URIError\nslug: Web/JavaScript/Reference/Global_Objects/URIError\npage-type: javascript-class\nbrowser-compat: javascript.builtins.URIError\n---\n\n{{JSRef}}\n\nThe **`URIError`** object represents an error when a global URI handling function was used in a wrong way.\n\n`URIError` is a {{Glossary(\"serializable object\")}}, so it can be cloned with {{domxref(\"structuredClone()\")}} or copied between [Workers](/en-US/docs/Web/API/Worker) using {{domxref(\"Worker/postMessage()\", \"postMessage()\")}}.\n\n`URIError` is a subclass of {{jsxref(\"Error\")}}.\n\n## Constructor\n\n- {{jsxref(\"URIError/URIError\", \"URIError()\")}}\n  - : Creates a new `URIError` object.\n\n## Instance properties\n\n_Also inherits instance properties from its parent {{jsxref(\"Error\")}}_.\n\nThese properties are defined on `URIError.prototype` and shared by all `URIError` instances.\n\n- {{jsxref(\"Object/constructor\", \"URIError.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `URIError` instances, the initial value is the {{jsxref(\"URIError/URIError\", \"URIError\")}} constructor.\n- {{jsxref(\"Error/name\", \"URIError.prototype.name\")}}\n  - : Represents the name for the type of error. For `URIError.prototype.name`, the initial value is `\"URIError\"`.\n\n## Instance methods\n\n_Inherits instance methods from its parent {{jsxref(\"Error\")}}_.\n\n## Examples\n\n### Catching an URIError\n\n```js\ntry {\n  decodeURIComponent(\"%\");\n} catch (e) {\n  console.log(e instanceof URIError); // true\n  console.log(e.message); // \"malformed URI sequence\"\n  console.log(e.name); // \"URIError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### Creating an URIError\n\n```js\ntry {\n  throw new URIError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof URIError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"URIError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n- {{jsxref(\"decodeURI()\")}}\n- {{jsxref(\"decodeURIComponent()\")}}\n- {{jsxref(\"encodeURI()\")}}\n- {{jsxref(\"encodeURIComponent()\")}}\n",
    "urierror": {
      "index.md": "---\ntitle: URIError() constructor\nslug: Web/JavaScript/Reference/Global_Objects/URIError/URIError\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.URIError.URIError\n---\n\n{{JSRef}}\n\nThe **`URIError()`** constructor creates {{jsxref(\"URIError\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew URIError()\nnew URIError(message)\nnew URIError(message, options)\nnew URIError(message, fileName)\nnew URIError(message, fileName, lineNumber)\n\nURIError()\nURIError(message)\nURIError(message, options)\nURIError(message, fileName)\nURIError(message, fileName, lineNumber)\n```\n\n> **Note:** `URIError()` can be called with or without [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Both create a new `URIError` instance.\n\n### Parameters\n\n- `message` {{optional_inline}}\n  - : Human-readable description of the error.\n- `options` {{optional_inline}}\n  - : An object that has the following properties:\n    - `cause` {{optional_inline}}\n      - : A property indicating the specific cause of the error.\n        When catching and re-throwing an error with a more-specific or useful error message, this property can be used to pass the original error.\n- `fileName` {{optional_inline}} {{non-standard_inline}}\n  - : The name of the file containing the code that caused the exception.\n- `lineNumber` {{optional_inline}} {{non-standard_inline}}\n  - : The line number of the code that caused the exception.\n\n## Examples\n\n### Catching an URIError\n\n```js\ntry {\n  decodeURIComponent(\"%\");\n} catch (e) {\n  console.log(e instanceof URIError); // true\n  console.log(e.message); // \"malformed URI sequence\"\n  console.log(e.name); // \"URIError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n### Creating an URIError\n\n```js\ntry {\n  throw new URIError(\"Hello\");\n} catch (e) {\n  console.log(e instanceof URIError); // true\n  console.log(e.message); // \"Hello\"\n  console.log(e.name); // \"URIError\"\n  console.log(e.stack); // Stack of the error\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"Error\")}}\n- {{jsxref(\"decodeURI()\")}}\n- {{jsxref(\"decodeURIComponent()\")}}\n- {{jsxref(\"encodeURI()\")}}\n- {{jsxref(\"encodeURIComponent()\")}}\n"
    }
  },
  "weakmap": {
    "delete": {
      "index.md": "---\ntitle: WeakMap.prototype.delete()\nslug: Web/JavaScript/Reference/Global_Objects/WeakMap/delete\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.WeakMap.delete\n---\n\n{{JSRef}}\n\nThe **`delete()`** method of {{jsxref(\"WeakMap\")}} instances removes the specified element from this `WeakMap`.\n\n{{EmbedInteractiveExample(\"pages/js/weakmap-prototype-delete.html\")}}\n\n## Syntax\n\n```js-nolint\nweakMapInstance.delete(key)\n```\n\n### Parameters\n\n- `key`\n  - : The key of the element to remove from the `WeakMap` object.\n\n### Return value\n\n`true` if an element in the `WeakMap` object has been removed successfully. `false` if the key is not found in the `WeakMap`. Always returns `false` if `key` is not an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## Examples\n\n### Using the delete() method\n\n```js\nconst wm = new WeakMap();\nwm.set(window, \"foo\");\n\nwm.delete(window); // Returns true. Successfully removed.\n\nwm.has(window); // Returns false. The window object is no longer in the WeakMap.\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"WeakMap\")}}\n"
    },
    "get": {
      "index.md": "---\ntitle: WeakMap.prototype.get()\nslug: Web/JavaScript/Reference/Global_Objects/WeakMap/get\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.WeakMap.get\n---\n\n{{JSRef}}\n\nThe **`get()`** method of {{jsxref(\"WeakMap\")}} instances returns a specified element from this `WeakMap`.\n\n{{EmbedInteractiveExample(\"pages/js/weakmap-prototype-get.html\")}}\n\n## Syntax\n\n```js-nolint\nget(key)\n```\n\n### Parameters\n\n- `key`\n  - : The key of the element to return from the `WeakMap` object.\n\n### Return value\n\nThe element associated with the specified key in the `WeakMap` object. If\nthe key can't be found, {{jsxref(\"undefined\")}} is returned. Always returns\n`undefined` if `key` is not an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## Examples\n\n### Using the get() method\n\n```js\nconst wm = new WeakMap();\nwm.set(window, \"foo\");\n\nwm.get(window); // Returns \"foo\".\nwm.get(\"baz\"); // Returns undefined.\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"WeakMap\")}}\n- {{jsxref(\"WeakMap.prototype.set()\")}}\n- {{jsxref(\"WeakMap.prototype.has()\")}}\n"
    },
    "has": {
      "index.md": "---\ntitle: WeakMap.prototype.has()\nslug: Web/JavaScript/Reference/Global_Objects/WeakMap/has\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.WeakMap.has\n---\n\n{{JSRef}}\n\nThe **`has()`** method of {{jsxref(\"WeakMap\")}} instances returns a boolean indicating whether an\nelement with the specified key exists in this `WeakMap` or not.\n\n{{EmbedInteractiveExample(\"pages/js/weakmap-prototype-has.html\")}}\n\n## Syntax\n\n```js-nolint\nhas(key)\n```\n\n### Parameters\n\n- `key`\n  - : The key of the element to test for presence in the `WeakMap` object.\n\n### Return value\n\nReturns `true` if an element with the specified key exists in the `WeakMap` object; otherwise `false`. Always returns `false` if `key` is not an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## Examples\n\n### Using the has method\n\n```js\nconst wm = new WeakMap();\nwm.set(window, \"foo\");\n\nwm.has(window); // returns true\nwm.has(\"baz\"); // returns false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"WeakMap\")}}\n- {{jsxref(\"WeakMap.prototype.set()\")}}\n- {{jsxref(\"WeakMap.prototype.get()\")}}\n"
    },
    "index.md": "---\ntitle: WeakMap\nslug: Web/JavaScript/Reference/Global_Objects/WeakMap\npage-type: javascript-class\nbrowser-compat: javascript.builtins.WeakMap\n---\n\n{{JSRef}}\n\nA **`WeakMap`** is a collection of key/value pairs whose keys must be objects or [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry), with values of any arbitrary [JavaScript type](/en-US/docs/Web/JavaScript/Data_structures), and which does not create strong references to its keys. That is, an object's presence as a key in a `WeakMap` does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any `WeakMap` become candidates for garbage collection as well — as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a `WeakMap` key is symbol — more specifically, [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) — because non-registered symbols are guaranteed to be unique and cannot be re-created.\n\n`WeakMap` allows associating data to objects in a way that doesn't prevent the key objects from being collected, even if the values reference the keys. However, a `WeakMap` doesn't allow observing the liveness of its keys, which is why it doesn't allow enumeration; if a `WeakMap` exposed any method to obtain a list of its keys, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a {{jsxref(\"Map\")}} rather than a `WeakMap`.\n\nYou can learn more about `WeakMap` in the [WeakMap object](/en-US/docs/Web/JavaScript/Guide/Keyed_collections#weakmap_object) section of the [Keyed collections](/en-US/docs/Web/JavaScript/Guide/Keyed_collections) guide.\n\n## Description\n\nKeys of WeakMaps must be garbage-collectable. Most {{Glossary(\"Primitive\", \"primitive data types\")}} can be arbitrarily created and don't have a lifetime, so they cannot be used as keys. Objects and [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) can be used as keys because they are garbage-collectable.\n\n### Why WeakMap?\n\nA map API _could_ be implemented in JavaScript with two arrays (one for keys, one for values) shared by the four API methods. Setting elements on this map would involve pushing a key and value onto the end of each of those arrays simultaneously. As a result, the indices of the key and value would correspond to both arrays. Getting values from the map would involve iterating through all keys to find a match, then using the index of this match to retrieve the corresponding value from the array of values.\n\nSuch an implementation would have two main inconveniences:\n\n1. The first one is an `O(n)` set and search (_n_ being the number of keys in the map) since both operations must iterate through the list of keys to find a matching value.\n2. The second inconvenience is a memory leak because the arrays ensure that references to each key and each value are maintained indefinitely. These references prevent the keys from being garbage collected, even if there are no other references to the object. This would also prevent the corresponding values from being garbage collected.\n\nBy contrast, in a `WeakMap`, a key object refers strongly to its contents as long as the key is not garbage collected, but weakly from then on. As such, a `WeakMap`:\n\n- does not prevent garbage collection, which eventually removes references to the key object\n- allows garbage collection of any values if their key objects are not referenced from somewhere other than a `WeakMap`\n\nA `WeakMap` can be a particularly useful construct when mapping keys to information about the key that is valuable _only if_ the key has not been garbage collected.\n\nBut because a `WeakMap` doesn't allow observing the liveness of its keys, its keys are not enumerable. There is no method to obtain a list of the keys. If there were, the list would depend on the state of garbage collection, introducing non-determinism. If you want to have a list of keys, you should use a {{jsxref(\"Map\")}}.\n\n## Constructor\n\n- {{jsxref(\"WeakMap/WeakMap\", \"WeakMap()\")}}\n  - : Creates a new `WeakMap` object.\n\n## Instance properties\n\nThese properties are defined on `WeakMap.prototype` and shared by all `WeakMap` instances.\n\n- {{jsxref(\"Object/constructor\", \"WeakMap.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `WeakMap` instances, the initial value is the {{jsxref(\"WeakMap/WeakMap\", \"WeakMap\")}} constructor.\n- `WeakMap.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"WeakMap\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"WeakMap.prototype.delete()\")}}\n  - : Removes any value associated to the `key`. `WeakMap.prototype.has(key)` will return `false` afterwards.\n- {{jsxref(\"WeakMap.prototype.get()\")}}\n  - : Returns the value associated to the `key`, or `undefined` if there is none.\n- {{jsxref(\"WeakMap.prototype.has()\")}}\n  - : Returns a Boolean asserting whether a value has been associated to the `key` in the `WeakMap` object or not.\n- {{jsxref(\"WeakMap.prototype.set()\")}}\n  - : Sets the `value` for the `key` in the `WeakMap` object. Returns the `WeakMap` object.\n\n## Examples\n\n### Using WeakMap\n\n```js\nconst wm1 = new WeakMap();\nconst wm2 = new WeakMap();\nconst wm3 = new WeakMap();\nconst o1 = {};\nconst o2 = function () {};\nconst o3 = window;\n\nwm1.set(o1, 37);\nwm1.set(o2, \"azerty\");\nwm2.set(o1, o2); // a value can be anything, including an object or a function\nwm2.set(o2, undefined);\nwm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!\n\nwm1.get(o2); // \"azerty\"\nwm2.get(o2); // undefined, because that is the set value\nwm2.get(o3); // undefined, because there is no key for o3 on wm2\n\nwm1.has(o2); // true\nwm2.has(o2); // true (even if the value itself is 'undefined')\nwm2.has(o3); // false\n\nwm3.set(o1, 37);\nwm3.get(o1); // 37\n\nwm1.has(o1); // true\nwm1.delete(o1);\nwm1.has(o1); // false\n```\n\n### Implementing a WeakMap-like class with a .clear() method\n\n```js\nclass ClearableWeakMap {\n  #wm;\n  constructor(init) {\n    this.#wm = new WeakMap(init);\n  }\n  clear() {\n    this.#wm = new WeakMap();\n  }\n  delete(k) {\n    return this.#wm.delete(k);\n  }\n  get(k) {\n    return this.#wm.get(k);\n  }\n  has(k) {\n    return this.#wm.has(k);\n  }\n  set(k, v) {\n    this.#wm.set(k, v);\n    return this;\n  }\n}\n```\n\n### Emulating private members\n\nDevelopers can use a `WeakMap` to associate private data to an object, with the following benefits:\n\n- Compared to a {{jsxref(\"Map\")}}, a WeakMap does not hold strong references to the object used as the key, so the metadata shares the same lifetime as the object itself, avoiding memory leaks.\n- Compared to using non-enumerable and/or {{jsxref(\"Symbol\")}} properties, a WeakMap is external to the object and there is no way for user code to retrieve the metadata through reflective methods like {{jsxref(\"Object.getOwnPropertySymbols\")}}.\n- Compared to a [closure](/en-US/docs/Web/JavaScript/Closures), the same WeakMap can be reused for all instances created from a constructor, making it more memory-efficient, and allows different instances of the same class to read the private members of each other.\n\n```js\nlet Thing;\n\n{\n  const privateScope = new WeakMap();\n  let counter = 0;\n\n  Thing = function () {\n    this.someProperty = \"foo\";\n\n    privateScope.set(this, {\n      hidden: ++counter,\n    });\n  };\n\n  Thing.prototype.showPublic = function () {\n    return this.someProperty;\n  };\n\n  Thing.prototype.showPrivate = function () {\n    return privateScope.get(this).hidden;\n  };\n}\n\nconsole.log(typeof privateScope);\n// \"undefined\"\n\nconst thing = new Thing();\n\nconsole.log(thing);\n// Thing {someProperty: \"foo\"}\n\nthing.showPublic();\n// \"foo\"\n\nthing.showPrivate();\n// 1\n```\n\nThis is roughly equivalent to the following, using [private fields](/en-US/docs/Web/JavaScript/Reference/Classes/Private_properties):\n\n```js\nclass Thing {\n  static #counter = 0;\n  #hidden;\n  constructor() {\n    this.someProperty = \"foo\";\n    this.#hidden = ++Thing.#counter;\n  }\n  showPublic() {\n    return this.someProperty;\n  }\n  showPrivate() {\n    return this.#hidden;\n  }\n}\n\nconsole.log(thing);\n// Thing {someProperty: \"foo\"}\n\nthing.showPublic();\n// \"foo\"\n\nthing.showPrivate();\n// 1\n```\n\n### Associating metadata\n\nA {{jsxref(\"WeakMap\")}} can be used to associate metadata with an object, without affecting the lifetime of the object itself. This is very similar to the private members example, since private members are also modelled as external metadata that doesn't participate in [prototypical inheritance](/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain).\n\nThis use case can be extended to already-created objects. For example, on the web, we may want to associate extra data with a DOM element, which the DOM element may access later. A common approach is to attach the data as a property:\n\n```js\nconst buttons = document.querySelectorAll(\".button\");\nbuttons.forEach((button) => {\n  button.clicked = false;\n  button.addEventListener(\"click\", () => {\n    button.clicked = true;\n    const currentButtons = [...document.querySelectorAll(\".button\")];\n    if (currentButtons.every((button) => button.clicked)) {\n      console.log(\"All buttons have been clicked!\");\n    }\n  });\n});\n```\n\nThis approach works, but it has a few pitfalls:\n\n- The `clicked` property is enumerable, so it will show up in [`Object.keys(button)`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys), [`for...in`](/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loops, etc. This can be mitigated by using {{jsxref(\"Object.defineProperty()\")}}, but that makes the code more verbose.\n- The `clicked` property is a normal string property, so it can be accessed and overwritten by other code. This can be mitigated by using a {{jsxref(\"Symbol\")}} key, but the key would still be accessible via {{jsxref(\"Object.getOwnPropertySymbols()\")}}.\n\nUsing a `WeakMap` fixes these:\n\n```js\nconst buttons = document.querySelectorAll(\".button\");\nconst clicked = new WeakMap();\nbuttons.forEach((button) => {\n  clicked.set(button, false);\n  button.addEventListener(\"click\", () => {\n    clicked.set(button, true);\n    const currentButtons = [...document.querySelectorAll(\".button\")];\n    if (currentButtons.every((button) => clicked.get(button))) {\n      console.log(\"All buttons have been clicked!\");\n    }\n  });\n});\n```\n\nHere, only code that has access to `clicked` knows the clicked state of each button, and external code can't modify the states. In addition, if any of the buttons gets removed from the DOM, the associated metadata will automatically get garbage-collected.\n\n### Caching\n\nYou can associate objects passed to a function with the result of the function, so that if the same object is passed again, the cached result can be returned without re-executing the function. This is useful if the function is pure (i.e. it doesn't mutate any outside objects or cause other observable side effects).\n\n```js\nconst cache = new WeakMap();\nfunction handleObjectValues(obj) {\n  if (cache.has(obj)) {\n    return cache.get(obj);\n  }\n  const result = Object.values(obj).map(heavyComputation);\n  cache.set(obj, result);\n  return result;\n}\n```\n\nThis only works if your function's input is an object. Moreover, even if the input is never passed in again, the result still remains forever in the cache. A more effective way is to use a {{jsxref(\"Map\")}} paired with {{jsxref(\"WeakRef\")}} objects, which allows you to associate any type of input value with its respective (potentially large) computation result. See the [WeakRefs and FinalizationRegistry](/en-US/docs/Web/JavaScript/Memory_management#weakrefs_and_finalizationregistry) example for more details.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `WeakMap` in `core-js`](https://github.com/zloirock/core-js#weakmap)\n- [Keyed collections](/en-US/docs/Web/JavaScript/Guide/Keyed_collections#weakmap_object)\n- [Hiding Implementation Details with ECMAScript 6 WeakMaps](https://fitzgeraldnick.com/2014/01/13/hiding-implementation-details-with-e6-weakmaps.html) by Nick Fitzgerald (2014)\n- {{jsxref(\"Map\")}}\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"WeakSet\")}}\n",
    "set": {
      "index.md": "---\ntitle: WeakMap.prototype.set()\nslug: Web/JavaScript/Reference/Global_Objects/WeakMap/set\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.WeakMap.set\n---\n\n{{JSRef}}\n\nThe **`set()`** method of {{jsxref(\"WeakMap\")}} instances adds a new element with a specified key\nand value to this `WeakMap`.\n\n{{EmbedInteractiveExample(\"pages/js/weakmap-prototype-set.html\")}}\n\n## Syntax\n\n```js-nolint\nset(key, value)\n```\n\n### Parameters\n\n- `key`\n  - : Must be either an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). The key of the entry to add to the `WeakMap` object.\n- `value`\n  - : Any value representing the value of the entry to add to the `WeakMap` object.\n\n### Return value\n\nThe `WeakMap` object.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `key` is not an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## Examples\n\n### Using the set() method\n\n```js\nconst wm = new WeakMap();\nconst obj = {};\n\n// Add new elements to the WeakMap\nwm.set(obj, \"foo\").set(window, \"bar\"); // chainable\n\n// Update an element in the WeakMap\nwm.set(obj, \"baz\");\n\n// Using a non-registered symbol as key\nconst sym = Symbol(\"foo\");\nwm.set(sym, \"baz\");\nwm.set(Symbol.iterator, \"qux\");\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"WeakMap\")}}\n- {{jsxref(\"WeakMap.prototype.get()\")}}\n- {{jsxref(\"WeakMap.prototype.has()\")}}\n"
    },
    "weakmap": {
      "index.md": "---\ntitle: WeakMap() constructor\nslug: Web/JavaScript/Reference/Global_Objects/WeakMap/WeakMap\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.WeakMap.WeakMap\n---\n\n{{JSRef}}\n\nThe **`WeakMap()`** constructor creates {{jsxref(\"WeakMap\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew WeakMap()\nnew WeakMap(iterable)\n```\n\n> **Note:** `WeakMap()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `iterable`\n  - : An [`Array`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) or other iterable object that implements an [@@iterator](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator) method that returns an iterator object that produces a two-element array-like object whose first element is a value that will be used as a `WeakMap` key and whose second element is the value to associate with that key. Each key-value pair will be added to the new `WeakMap`. null is treated as undefined.\n\n## Examples\n\n### Using WeakMap\n\n```js\nconst wm1 = new WeakMap();\nconst wm2 = new WeakMap();\nconst wm3 = new WeakMap();\nconst o1 = {};\nconst o2 = function () {};\nconst o3 = window;\n\nwm1.set(o1, 37);\nwm1.set(o2, \"azerty\");\nwm2.set(o1, o2); // a value can be anything, including an object or a function\nwm2.set(o3, undefined);\nwm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!\n\nwm1.get(o2); // \"azerty\"\nwm2.get(o2); // undefined, because there is no key for o2 on wm2\nwm2.get(o3); // undefined, because that is the set value\n\nwm1.has(o2); // true\nwm2.has(o2); // false\nwm2.has(o3); // true (even if the value itself is 'undefined')\n\nwm3.set(o1, 37);\nwm3.get(o1); // 37\n\nwm1.has(o1); // true\nwm1.delete(o1);\nwm1.has(o1); // false\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `WeakMap` in `core-js`](https://github.com/zloirock/core-js#weakmap)\n- [`WeakMap` in the JavaScript guide](/en-US/docs/Web/JavaScript/Guide/Keyed_collections#weakmap_object)\n- [Hiding Implementation Details with ECMAScript 6 WeakMaps](https://fitzgeraldnick.com/2014/01/13/hiding-implementation-details-with-e6-weakmaps.html)\n- {{jsxref(\"Map\")}}\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"WeakSet\")}}\n"
    }
  },
  "weakref": {
    "deref": {
      "index.md": "---\ntitle: WeakRef.prototype.deref()\nslug: Web/JavaScript/Reference/Global_Objects/WeakRef/deref\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.WeakRef.deref\n---\n\n{{JSRef}}\n\nThe **`deref()`** method of {{jsxref(\"WeakRef\")}} instances returns this `WeakRef`'s target value, or `undefined` if the target value has been garbage-collected.\n\n## Syntax\n\n```js-nolint\nderef()\n```\n\n### Parameters\n\nNone.\n\n### Return value\n\nThe target value of the WeakRef, which is either an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). Returns `undefined` if the value has been garbage-collected.\n\n## Description\n\nSee the [Notes on WeakRefs](/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#notes_on_weakrefs) section of the {{jsxref(\"WeakRef\")}} page for some important notes.\n\n## Examples\n\n### Using deref()\n\nSee the [Examples](/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#examples)\nsection of the {{jsxref(\"WeakRef\")}} page for the complete example.\n\n```js\nconst tick = () => {\n  // Get the element from the weak reference, if it still exists\n  const element = this.ref.deref();\n  if (element) {\n    element.textContent = ++this.count;\n  } else {\n    // The element doesn't exist anymore\n    console.log(\"The element is gone.\");\n    this.stop();\n    this.ref = null;\n  }\n};\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"WeakRef\")}}\n"
    },
    "index.md": "---\ntitle: WeakRef\nslug: Web/JavaScript/Reference/Global_Objects/WeakRef\npage-type: javascript-class\nbrowser-compat: javascript.builtins.WeakRef\n---\n\n{{JSRef}}\n\nA **`WeakRef`** object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.\n\n## Description\n\nA `WeakRef` object contains a weak reference to an object, which is called its _target_ or _referent_. A _weak reference_ to an object is a reference that does not prevent the object from being reclaimed by the garbage collector. In contrast, a normal (or _strong_) reference keeps an object in memory. When an object no longer has any strong references to it, the JavaScript engine's garbage collector may destroy the object and reclaim its memory. If that happens, you can't get the object from a weak reference anymore.\n\nBecause [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) are also garbage collectable, they can also be used as the target of a `WeakRef` object. However, the use case of this is limited.\n\n### Avoid where possible\n\nCorrect use of `WeakRef` takes careful thought, and it's best avoided if possible. It's also important to avoid relying on any specific behaviors not guaranteed by the specification. When, how, and whether garbage collection occurs is down to the implementation of any given JavaScript engine. Any behavior you observe in one engine may be different in another engine, in another version of the same engine, or even in a slightly different situation with the same version of the same engine. Garbage collection is a hard problem that JavaScript engine implementers are constantly refining and improving their solutions to.\n\nHere are some specific points included by the authors in the [proposal](https://github.com/tc39/proposal-weakrefs) that introduced `WeakRef`:\n\n> [Garbage collectors](<https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)>) are complicated. If an application or library depends on GC cleaning up a WeakRef or calling a finalizer \\[cleanup callback] in a timely, predictable manner, it's likely to be disappointed: the cleanup may happen much later than expected, or not at all. Sources of variability include:\n>\n> - One object might be garbage-collected much sooner than another object, even if they become unreachable at the same time, e.g., due to generational collection.\n> - Garbage collection work can be split up over time using incremental and concurrent techniques.\n> - Various runtime heuristics can be used to balance memory usage, responsiveness.\n> - The JavaScript engine may hold references to things which look like they are unreachable (e.g., in closures, or inline caches).\n> - Different JavaScript engines may do these things differently, or the same engine may change its algorithms across versions.\n> - Complex factors may lead to objects being held alive for unexpected amounts of time, such as use with certain APIs.\n\n### Notes on WeakRefs\n\n- If your code has just created a `WeakRef` for a target object, or has gotten a target object from a `WeakRef`'s `deref` method, that target object will not be reclaimed until the end of the current JavaScript [job](https://tc39.es/ecma262/multipage/executable-code-and-execution-contexts.html#job) (including any promise reaction jobs that run at the end of a script job). That is, you can only \"see\" an object get reclaimed between turns of the event loop. This is primarily to avoid making the behavior of any given JavaScript engine's garbage collector apparent in code — because if it were, people would write code relying on that behavior, which would break when the garbage collector's behavior changed. (Garbage collection is a hard problem; JavaScript engine implementers are constantly refining and improving how it works.)\n- If multiple `WeakRef`s have the same target, they're consistent with one another. The result of calling `deref` on one of them will match the result of calling `deref` on another of them (in the same job), you won't get the target object from one of them but `undefined` from another.\n- If the target of a `WeakRef` is also in a {{jsxref(\"FinalizationRegistry\")}}, the `WeakRef`'s target is cleared at the same time or before any cleanup callback associated with the registry is called; if your cleanup callback calls `deref` on a `WeakRef` for the object, it will receive `undefined`.\n- You cannot change the target of a `WeakRef`, it will always only ever be the original target object or `undefined` when that target has been reclaimed.\n- A `WeakRef` might never return `undefined` from `deref`, even if nothing strongly holds the target, because the garbage collector may never decide to reclaim the object.\n\n## Constructor\n\n- {{jsxref(\"WeakRef/WeakRef\", \"WeakRef()\")}}\n  - : Creates a new `WeakRef` object.\n\n## Instance properties\n\nThese properties are defined on `WeakRef.prototype` and shared by all `WeakRef` instances.\n\n- {{jsxref(\"Object/constructor\", \"WeakRef.prototype.constructor\")}} {{optional_inline}}\n\n  - : The constructor function that created the instance object. For `WeakRef` instances, the initial value is the {{jsxref(\"WeakRef/WeakRef\", \"WeakRef\")}} constructor.\n\n    > **Note:** This property is marked as \"normative optional\" in the specification, which means a conforming implementation may not expose the `constructor` property. This prevents arbitrary code from obtaining the `WeakRef` constructor and being able to observe garbage collection. However, all major engines do expose it by default.\n\n- `WeakRef.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"WeakRef\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"WeakRef.prototype.deref()\")}}\n  - : Returns the `WeakRef` object's target object, or `undefined` if the target object has been reclaimed.\n\n## Examples\n\n### Using a WeakRef object\n\nThis example starts a counter shown in a DOM element, stopping when the element doesn't exist anymore:\n\n```js\nclass Counter {\n  constructor(element) {\n    // Remember a weak reference to the DOM element\n    this.ref = new WeakRef(element);\n    this.start();\n  }\n\n  start() {\n    if (this.timer) {\n      return;\n    }\n\n    this.count = 0;\n\n    const tick = () => {\n      // Get the element from the weak reference, if it still exists\n      const element = this.ref.deref();\n      if (element) {\n        element.textContent = ++this.count;\n      } else {\n        // The element doesn't exist anymore\n        console.log(\"The element is gone.\");\n        this.stop();\n        this.ref = null;\n      }\n    };\n\n    tick();\n    this.timer = setInterval(tick, 1000);\n  }\n\n  stop() {\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = 0;\n    }\n  }\n}\n\nconst counter = new Counter(document.getElementById(\"counter\"));\nsetTimeout(() => {\n  document.getElementById(\"counter\").remove();\n}, 5000);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"FinalizationRegistry\")}}\n- {{jsxref(\"WeakSet\")}}\n- {{jsxref(\"WeakMap\")}}\n",
    "weakref": {
      "index.md": "---\ntitle: WeakRef() constructor\nslug: Web/JavaScript/Reference/Global_Objects/WeakRef/WeakRef\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.WeakRef.WeakRef\n---\n\n{{JSRef}}\n\nThe **`WeakRef()`** constructor creates {{jsxref(\"WeakRef\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew WeakRef(target)\n```\n\n> **Note:** `WeakRef()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `target`\n  - : The target value the WeakRef should refer to (also called the _referent_). Must be an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n### Return value\n\nA new `WeakRef` object referring to the given target value.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `target` is not an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## Examples\n\n### Creating a new WeakRef object\n\nSee the main [`WeakRef`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#examples)\npage for a complete example.\n\n```js\nclass Counter {\n  constructor(element) {\n    // Remember a weak reference to a DOM element\n    this.ref = new WeakRef(element);\n    this.start();\n  }\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"WeakRef\")}}\n"
    }
  },
  "weakset": {
    "add": {
      "index.md": "---\ntitle: WeakSet.prototype.add()\nslug: Web/JavaScript/Reference/Global_Objects/WeakSet/add\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.WeakSet.add\n---\n\n{{JSRef}}\n\nThe **`add()`** method of {{jsxref(\"WeakSet\")}} instances appends a new object to the end of this `WeakSet`.\n\n{{EmbedInteractiveExample(\"pages/js/weakset-prototype-add.html\", \"taller\")}}\n\n## Syntax\n\n```js-nolint\nadd(value)\n```\n\n### Parameters\n\n- `value`\n  - : Must be either an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). The value to add to the `WeakSet` collection.\n\n### Return value\n\nThe `WeakSet` object.\n\n### Exceptions\n\n- {{jsxref(\"TypeError\")}}\n  - : Thrown if `value` is not an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## Examples\n\n### Using add\n\n```js\nconst ws = new WeakSet();\n\nws.add(window); // add the window object to the WeakSet\n\nws.has(window); // true\n\n// WeakSet only takes objects as arguments\nws.add(1);\n// results in \"TypeError: Invalid value used in weak set\" in Chrome\n// and \"TypeError: 1 is not a non-null object\" in Firefox\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"WeakSet\")}}\n- {{jsxref(\"WeakSet.prototype.delete()\")}}\n- {{jsxref(\"WeakSet.prototype.has()\")}}\n"
    },
    "delete": {
      "index.md": "---\ntitle: WeakSet.prototype.delete()\nslug: Web/JavaScript/Reference/Global_Objects/WeakSet/delete\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.WeakSet.delete\n---\n\n{{JSRef}}\n\nThe **`delete()`** method of {{jsxref(\"WeakSet\")}} instances removes the specified element from this `WeakSet`.\n\n{{EmbedInteractiveExample(\"pages/js/weakset-prototype-delete.html\")}}\n\n## Syntax\n\n```js-nolint\nweakSetInstance.delete(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value to remove from the `WeakSet` object.\n\n### Return value\n\n`true` if an element in the `WeakSet` object has been removed successfully. `false` if the `value` is not found in the `WeakSet`. Always returns `false` if `value` is not an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## Examples\n\n### Using the delete() method\n\n```js\nconst ws = new WeakSet();\nconst obj = {};\n\nws.add(window);\n\nws.delete(obj); // Returns false. No obj found to be deleted.\nws.delete(window); // Returns true. Successfully removed.\n\nws.has(window); // Returns false. The window is no longer present in the WeakSet.\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"WeakSet\")}}\n- {{jsxref(\"WeakSet.prototype.add()\")}}\n- {{jsxref(\"WeakSet.prototype.has()\")}}\n"
    },
    "has": {
      "index.md": "---\ntitle: WeakSet.prototype.has()\nslug: Web/JavaScript/Reference/Global_Objects/WeakSet/has\npage-type: javascript-instance-method\nbrowser-compat: javascript.builtins.WeakSet.has\n---\n\n{{JSRef}}\n\nThe **`has()`** method of {{jsxref(\"WeakSet\")}} instances returns a boolean indicating whether an\nobject exists in this `WeakSet` or not.\n\n{{EmbedInteractiveExample(\"pages/js/weakset-prototype-has.html\")}}\n\n## Syntax\n\n```js-nolint\nhas(value)\n```\n\n### Parameters\n\n- `value`\n  - : The value to test for presence in the `WeakSet`.\n\n### Return value\n\nReturns `true` if an element with the specified value exists in the `WeakSet` object; otherwise `false`. Always returns `false` if `value` is not an object or a [non-registered symbol](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry).\n\n## Examples\n\n### Using the `has()` method\n\n```js\nconst ws = new WeakSet();\nconst obj = {};\nws.add(window);\n\nws.has(window); // returns true\nws.has(obj); // returns false\n\n// Storing a non-registered symbol\nconst sym = Symbol(\"foo\");\nws.add(sym);\nws.add(Symbol.iterator);\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{jsxref(\"WeakSet\")}}\n- {{jsxref(\"WeakSet.prototype.add()\")}}\n- {{jsxref(\"WeakSet.prototype.delete()\")}}\n"
    },
    "index.md": "---\ntitle: WeakSet\nslug: Web/JavaScript/Reference/Global_Objects/WeakSet\npage-type: javascript-class\nbrowser-compat: javascript.builtins.WeakSet\n---\n\n{{JSRef}}\n\nA **`WeakSet`** is a collection of garbage-collectable values, including objects and [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry). A value in the `WeakSet` may only occur once. It is unique in the `WeakSet`'s collection.\n\n## Description\n\nValues of WeakSets must be garbage-collectable. Most {{Glossary(\"Primitive\", \"primitive data types\")}} can be arbitrarily created and don't have a lifetime, so they cannot be stored. Objects and [non-registered symbols](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) can be stored because they are garbage-collectable.\n\nThe main differences to the {{jsxref(\"Set\")}} object are:\n\n- `WeakSet`s are collections of **objects and symbols only**. They cannot contain arbitrary values of any type, as {{jsxref(\"Set\")}}s can.\n- The `WeakSet` is _weak_, meaning references to objects in a `WeakSet` are held _weakly_. If no other references to a value stored in the `WeakSet` exist, those values can be garbage collected.\n\n  > **Note:** This also means that there is no list of current values stored in the collection. `WeakSets` are not enumerable.\n\n### Use case: Detecting circular references\n\nFunctions that call themselves recursively need a way of guarding against circular data structures by tracking which objects have already been processed.\n\n`WeakSet`s are ideal for this purpose:\n\n```js\n// Execute a callback on everything stored inside an object\nfunction execRecursively(fn, subject, _refs = new WeakSet()) {\n  // Avoid infinite recursion\n  if (_refs.has(subject)) {\n    return;\n  }\n\n  fn(subject);\n  if (typeof subject === \"object\" && subject) {\n    _refs.add(subject);\n    for (const key in subject) {\n      execRecursively(fn, subject[key], _refs);\n    }\n    _refs.delete(subject);\n  }\n}\n\nconst foo = {\n  foo: \"Foo\",\n  bar: {\n    bar: \"Bar\",\n  },\n};\n\nfoo.bar.baz = foo; // Circular reference!\nexecRecursively((obj) => console.log(obj), foo);\n```\n\nHere, a `WeakSet` is created on the first run, and passed along with every subsequent function call (using the internal `_refs` parameter).\n\nThe number of objects or their traversal order is immaterial, so a `WeakSet` is more suitable (and performant) than a {{jsxref(\"Set\")}} for tracking object references, especially if a very large number of objects is involved.\n\n## Constructor\n\n- {{jsxref(\"WeakSet/WeakSet\", \"WeakSet()\")}}\n  - : Creates a new `WeakSet` object.\n\n## Instance properties\n\nThese properties are defined on `WeakSet.prototype` and shared by all `WeakSet` instances.\n\n- {{jsxref(\"Object/constructor\", \"WeakSet.prototype.constructor\")}}\n  - : The constructor function that created the instance object. For `WeakSet` instances, the initial value is the {{jsxref(\"WeakSet/WeakSet\", \"WeakSet\")}} constructor.\n- `WeakSet.prototype[@@toStringTag]`\n  - : The initial value of the [`@@toStringTag`](/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag) property is the string `\"WeakSet\"`. This property is used in {{jsxref(\"Object.prototype.toString()\")}}.\n\n## Instance methods\n\n- {{jsxref(\"WeakSet.prototype.add()\")}}\n  - : Appends `value` to the `WeakSet` object.\n- {{jsxref(\"WeakSet.prototype.delete()\")}}\n  - : Removes `value` from the `WeakSet`. `WeakSet.prototype.has(value)` will return `false` afterwards.\n- {{jsxref(\"WeakSet.prototype.has()\")}}\n  - : Returns a boolean asserting whether `value` is present in the `WeakSet` object or not.\n\n## Examples\n\n### Using the WeakSet object\n\n```js\nconst ws = new WeakSet();\nconst foo = {};\nconst bar = {};\n\nws.add(foo);\nws.add(bar);\n\nws.has(foo); // true\nws.has(bar); // true\n\nws.delete(foo); // removes foo from the set\nws.has(foo); // false, foo has been removed\nws.has(bar); // true, bar is retained\n```\n\nNote that `foo !== bar`. While they are similar objects, _they are not **the same object**_. And so they are both added to the set.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `WeakSet` in `core-js`](https://github.com/zloirock/core-js#weakset)\n- {{jsxref(\"Map\")}}\n- {{jsxref(\"Set\")}}\n- {{jsxref(\"WeakMap\")}}\n",
    "weakset": {
      "index.md": "---\ntitle: WeakSet() constructor\nslug: Web/JavaScript/Reference/Global_Objects/WeakSet/WeakSet\npage-type: javascript-constructor\nbrowser-compat: javascript.builtins.WeakSet.WeakSet\n---\n\n{{JSRef}}\n\nThe **`WeakSet()`** constructor creates {{jsxref(\"WeakSet\")}} objects.\n\n## Syntax\n\n```js-nolint\nnew WeakSet()\nnew WeakSet(iterable)\n```\n\n> **Note:** `WeakSet()` can only be constructed with [`new`](/en-US/docs/Web/JavaScript/Reference/Operators/new). Attempting to call it without `new` throws a {{jsxref(\"TypeError\")}}.\n\n### Parameters\n\n- `iterable` {{optional_inline}}\n  - : If an [iterable object](/en-US/docs/Web/JavaScript/Reference/Statements/for...of) is passed, all of its elements will be added to the new `WeakSet`. `null` is treated as `undefined`.\n\n## Examples\n\n### Using the WeakSet object\n\n```js\nconst ws = new WeakSet();\nconst foo = {};\nconst bar = {};\n\nws.add(foo);\nws.add(bar);\n\nws.has(foo); // true\nws.has(bar); // true\n\nws.delete(foo); // removes foo from the set\nws.has(foo); // false, foo has been removed\nws.has(bar); // true, bar is retained\n```\n\nNote that `foo !== bar`. While they are similar objects, _they are not\n**the same object**_. And so they are both added to the set.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Polyfill of `WeakSet` in `core-js`](https://github.com/zloirock/core-js#weakset)\n- {{jsxref(\"WeakSet\")}}\n"
    }
  }
}